{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beats = [notes_map[note] for note in notes]\n    return beats", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(number - mean) for number in numbers]\n    mad = sum(differences) / len(numbers)\n    return mad", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_elem = min(numbers)\n    max_elem = max(numbers)\n    scale = max_elem - min_elem\n    if scale == 0:\n        return [0.0] * len(numbers)\n    return [(number - min_elem) / scale for number in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = []\n    for i in range(len(a)):\n        bit_a = int(a[i])\n        bit_b = int(b[i])\n        xor_result = bit_a ^ bit_b\n        result.append(str(xor_result))\n    return ''.join(result)\n\n# Example usage\nprint(string_xor('010', '110'))  # Output: '100'", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    max_so_far = numbers[0]\n    rolling_max_list = [max_so_far]\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    start = 0\n    bal = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            bal += 1\n        else:\n            bal -= 1\n        if bal == 0:\n            groups.append(paren_string[start:i + 1])\n            start = i + 1\n    return groups", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n\n# Example usage\nif __name__ == \"__main__\":\n    print(largest_divisor(15))  # Output: 5", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    toggled_string = ''\n    for char in string:\n        if char.isalpha():\n            toggled_string += char.swapcase()\n        else:\n            toggled_string += char\n    return toggled_string\n\n# Example usage\nprint(flip_case('Hello'))  # Output: 'hELLO'", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    length = 0\n    for char in string:\n        length += 1\n    return length", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n\n# Example usage\nprint(truncate_number(3.5))  # Output: 0.5", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count, last_idx = (0, -1)\n    while True:\n        last_idx = string.find(substring, last_idx + 1)\n        if last_idx != -1:\n            count += 1\n        else:\n            break\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set(string.lower())\n    return len(distinct_characters)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))  # Output: 3\n    print(count_distinct_characters('Jerry'))    # Output: 4", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    interspersed_numbers = [numbers[0]]\n    for num in numbers[1:]:\n        interspersed_numbers.extend([delimeter, num])\n    \n    return interspersed_numbers", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return (total_sum, total_product)", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    count = {}\n    for number in numbers:\n        count[number] = count.get(number, 0) + 1\n    \n    result = [number for number in numbers if count[number] == 1]\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num2words = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, \n        'four': 4, 'five': 5, 'six': 6, 'seven': 7, \n        'eight': 8, 'nine': 9\n    }\n    \n    words = numbers.split()\n    sorted_numbers = sorted(words, key=lambda x: num2words[x])\n    \n    return ' '.join(sorted_numbers)\n\n# Example usage\nprint(sort_numbers('three one five'))  # Output: 'one three five'", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    paren_groups = paren_string.split(' ')\n    for paren_group in paren_groups:\n        current_depth = 0\n        max_depth = 0\n        for char in paren_group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError('The provided list must contain at least two numbers.')\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values if isinstance(i, int)]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(filter_integers(['a', 3.14, 5]))\n    print(filter_integers([1, 2, 3, 'abc', {}, []]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if len(strings) == 0:\n        return ''\n    return ''.join(strings)", "result": "passed", "passed": true}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef longest_palindromic_postfix(string: str) -> str:\n    \"\"\" Find the longest palindromic suffix of the string. \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:]\n    return \"\"\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    palindrome_substr = longest_palindromic_postfix(string)\n    prefix = string[:len(string) - len(palindrome_substr)]\n    palindrome = string + prefix[::-1]\n    return palindrome\n\n# Test cases\nprint(make_palindrome(''))      # Output: ''\nprint(make_palindrome('cat'))   # Output: 'catac'\nprint(make_palindrome('cata'))  # Output: 'catac'", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n\n\n# Example usage\nprint(car_race_collision(5))  # Output: 25", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if not isinstance(n, int) or n <= 1:\n        raise ValueError('Input must be an integer greater than 1')\n    \n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_set = set(l)\n    unique_list = sorted(list(unique_set))\n    return unique_list", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n\n# Test cases\nprint(get_positive([-1, 2, -4, 5, 6]))\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_elmt = l[0]\n    for x in l:\n        if x > max_elmt:\n            max_elmt = x\n    return max_elmt", "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    multiples_of_three = sorted([l[i] for i in range(len(l)) if (i + 1) % 3 == 0])\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            l[i] = multiples_of_three.pop(0)\n    return l\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nprint(is_prime(6))      # False\nprint(is_prime(101))    # True\nprint(is_prime(11))     # True\nprint(is_prime(13441))  # True\nprint(is_prime(61))     # True\nprint(is_prime(4))      # False\nprint(is_prime(1))      # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Test cases\nassert triangle_area(5, 3) == 7.5\nassert triangle_area(6, 4) == 12", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    if t <= 0:\n        raise ValueError('Threshold must be a positive integer')\n    if not l:\n        raise ValueError('Input list cannot be empty')\n    return all(i < t for i in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n\n# Test cases\nprint(modp(3, 5))    # 3\nprint(modp(1101, 101)) # 2\nprint(modp(0, 101))   # 1\nprint(modp(3, 11))    # 8\nprint(modp(100, 101))  # 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [i + 1 for i in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[i:min(i + 3, len(s))] for i in range(0, len(s), 3)]\n    decoded_groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(decoded_groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import numpy as np\n\ndef poly(xs: list, x: float):\n    return sum([coeff * x**i for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    coefficients = xs[::-1]\n    roots = np.roots(coefficients)\n    \n    for root in roots:\n        if np.isreal(root):\n            return float(root)\n    \n    raise ValueError(\"No real roots found.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1) * (x - 2) * (x - 3)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "import sympy\n\ndef generate_fibonacci_sequence(n):\n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence\n\ndef prime_fib(n: int):\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    prime_fibonacci_numbers = []\n    i = 2\n    while len(prime_fibonacci_numbers) < n:\n        sequence = generate_fibonacci_sequence(i)\n        number = sequence[-1]\n        if sympy.isprime(number):\n            prime_fibonacci_numbers.append(number)\n        i += 1\n    return prime_fibonacci_numbers[-1]", "result": "failed: No module named 'sympy'", "passed": false}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if not isinstance(x, int):\n        raise ValueError('Input x must be an integer.')\n    if not isinstance(base, int):\n        raise ValueError('Input base must be an integer.')\n    if base < 2 or base >= 10:\n        raise ValueError('Base must be in the range [2, 9].')\n\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    no_vowels = ''\n    for character in text:\n        if character not in 'aeiouAEIOU':\n            no_vowels += character\n    return no_vowels\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n# Example usage\nencoded = encode_shift(\"hello\")\ndecoded = decode_shift(encoded)\nprint(encoded)  # Output: mjqqt\nprint(decoded)  # Output: hello", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    s = []\n    for bracket in brackets:\n        if bracket == '<':\n            s.append('<')\n        elif not s:\n            return False\n        else:\n            s.pop()\n    return not s\n\n# Test cases\nprint(correct_bracketing(\"<\"))        # False\nprint(correct_bracketing(\"<>\"))       # True\nprint(correct_bracketing(\"<<><>>\"))   # True\nprint(correct_bracketing(\"><<>\"))     # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    pairs = set()\n    for num in l:\n        if -num in pairs:\n            return True\n        pairs.add(num)\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    fruits = list(map(int, re.findall(r'\\d+', s)))\n    apples, oranges = (fruits[0], fruits[1])\n    return n - apples - oranges", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack\n\n# Test cases\nprint(correct_bracketing(\"(\"))        # False\nprint(correct_bracketing(\"()\"))       # True\nprint(correct_bracketing(\"(()())\"))   # True\nprint(correct_bracketing(\")(()\"))     # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('The parameter n must be a non-negative integer')\n    \n    fib_seq = [0] * (n + 1)\n    \n    if n >= 1:\n        fib_seq[1] = 0\n    if n >= 2:\n        fib_seq[2] = 2\n    if n >= 3:\n        fib_seq[3] = 0\n    \n    for i in range(4, n + 1):\n        fib_seq[i] = fib_seq[i - 1] + fib_seq[i - 2] + fib_seq[i - 3] + fib_seq[i - 4]\n    \n    return fib_seq[n]\n\n# Example usage\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # [2, 6]", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for idx, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = idx\n            \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_even, smallest_index]", "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    len_l = len(l)\n    if len_l % 2 == 0:\n        return (sorted_l[len_l // 2 - 1] + sorted_l[len_l // 2]) / 2\n    else:\n        return sorted_l[len_l // 2]", "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    a = abs(a)\n    root = round(a ** (1 / 3))\n    return root ** 3 == a", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())\n\n# Test cases\nprint(digitSum(\"\"))          # 0\nprint(digitSum(\"abAB\"))      # 131\nprint(digitSum(\"abcCd\"))     # 67\nprint(digitSum(\"helloE\"))    # 69\nprint(digitSum(\"woArBld\"))   # 131\nprint(digitSum(\"aAaaaXa\"))   # 153", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    increasing = all(i <= j for i, j in zip(l, l[1:]))\n    decreasing = all(i >= j for i, j in zip(l, l[1:]))\n    return increasing or decreasing\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2.0\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    lst.sort()\n    out_lst = []\n    \n    while lst:\n        out_lst.append(lst.pop(0))  # Get the minimum\n        if lst:\n            out_lst.append(lst.pop(-1))  # Get the maximum\n    \n    return out_lst\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # [5, 5, 5, 5]\nprint(strange_sort_list([]))             # []", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError('Invalid input, please provide a string.')\n    \n    s = s.lower()\n    vowels = 'aeiou'\n    count = sum(1 for char in s if char in vowels)\n    \n    if s and s[-1] == 'y':\n        count += 1\n    \n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    \n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    \n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common = set(l1) & set(l2)\n    return sorted(list(common))\n\n# Example usage\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n            \n    greatest = -1\n    for num, count in freq.items():\n        if count >= num:\n            greatest = max(greatest, num)\n    \n    return greatest\n\n# Example test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    fibfib_values = [0, 0, 1] + [0] * (n - 2)\n    \n    for i in range(3, n + 1):\n        fibfib_values[i] = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3]\n    \n    return fibfib_values[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.insert(0, str(decimal % 2))\n        decimal //= 2\n    return 'db' + ''.join(binary) + 'db'\n\n# Example usage\nprint(decimal_to_binary(15))  # returns \"db1111db\"\nprint(decimal_to_binary(32))  # returns \"db100000db\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    result = 0\n    for i in range(1, len(lst), 2):\n        if isinstance(lst[i], int):\n            if lst[i] % 2 == 0:\n                result += lst[i]\n        else:\n            return 'Error: List contains non-integer element.'\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]\n\n# Example usage\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for char in num if char in prime_hex_digits)\n    return count\n\n# Example test cases\nprint(hex_key(\"AB\"))        # Output: 1\nprint(hex_key(\"1077E\"))     # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))      # Output: 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    changes = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes\n\n# Example test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))     # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))            # Output: 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    prime_factors = []\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n    if len(prime_factors) == 3:\n        product = 1\n        for factor in prime_factors:\n            product *= factor\n        if product == a:\n            return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence.strip()]\n    boring_count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    return boring_count", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for row_index, row in enumerate(lst):\n        for column_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, column_index))\n    result.sort(key=lambda a: (a[0], -a[1]))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if not isinstance(q, (list, tuple)):\n        return 'Non-sequence input'\n    if not all(isinstance(item, (int, float)) for item in q):\n        return 'Non-numeric input'\n    \n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    return is_palindrome(q) and sum(q) <= w\n\n# Example test cases\nprint(will_it_fly([1, 2], 5))  # \u279e False\nprint(will_it_fly([3, 2, 3], 1))  # \u279e False\nprint(will_it_fly([3, 2, 3], 9))  # \u279e True\nprint(will_it_fly([3], 5))  # \u279e True", "result": "passed", "passed": true}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    start = 10 ** (n - 1)\n    end = 10 ** n\n    \n    count = 0\n    for i in range(start, end):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n            \n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return None if second_smallest == float('inf') else second_smallest", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    s0 = ''.join((ch.lower() for ch in s0 if ch.isalnum()))\n    s1 = ''.join((ch.lower() for ch in s1 if ch.isalnum()))\n    \n    char_count = {}\n    for ch in s0:\n        char_count[ch] = char_count.get(ch, 0) + 1\n    for ch in s1:\n        char_count[ch] = char_count.get(ch, 0) - 1\n    \n    return all((count == 0 for count in char_count.values()))\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))                # True\nprint(same_chars('dddddddabc', 'abcd'))                # True\nprint(same_chars('eabcd', 'dddddddabc'))                # False\nprint(same_chars('abcd', 'dddddddabce'))               # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))   # False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n\n# Example usage\nprint(anti_shuffle('Hi'))  # Output: 'Hi'\nprint(anti_shuffle('hello'))  # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    lengthOfX, result = (0, 0)\n    tempX = x\n    while tempX != 0:\n        tempX //= 10\n        lengthOfX += 1\n    \n    if shift >= lengthOfX:\n        while x != 0:\n            result = result * 10 + x % 10\n            x //= 10\n    else:\n        rightPart = x % 10 ** shift\n        leftPart = x // 10 ** shift\n        multiplier = 10 ** (lengthOfX - shift)\n        result = rightPart * multiplier + leftPart\n    \n    return str(result)\n\n# Example usage\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    last_digit_a = abs(a) % 10\n    last_digit_b = abs(b) % 10\n    return last_digit_a * last_digit_b\n\n# Test cases\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))    # should return 72\nprint(multiply(2020, 1851)) # should return 0\nprint(multiply(14, -15))   # should return 20", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    count_lst1 = sum(len(s) for s in lst1)\n    count_lst2 = sum(len(s) for s in lst2)\n    \n    if count_lst1 <= count_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']", "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    if n < 2:\n        return []\n    primes = []\n    for possible_prime in range(2, n):\n        if is_prime(possible_prime):\n            primes.append(possible_prime)\n    return primes", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not d:\n        return False\n    keys = d.keys()\n    is_lower = all((key == key.lower() for key in keys))\n    is_upper = all((key == key.upper() for key in keys))\n    return is_lower or is_upper", "result": "failed: 'int' object has no attribute 'lower'", "passed": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = []\n    current_word = ''\n    for char in s:\n        if char in [',', ' ']:\n            if current_word:\n                words.append(current_word)\n                current_word = ''\n        else:\n            current_word += char\n    if current_word:\n        words.append(current_word)\n    return words", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "import math\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    try:\n        num = float(value)\n    except ValueError:\n        return 'Error: Invalid input.'\n    \n    int_part = int(num)\n    decimal_part = abs(num - int_part)\n    \n    if decimal_part < 0.5:\n        return int_part\n    elif num > 0:\n        return int_part + 1\n    else:\n        return int_part - 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:  # n is even\n            stones.append(stones[-1] + 2)\n        else:  # n is odd\n            stones.append(stones[-1] + 2)\n    return stones\n\n# Example usage\nprint(make_a_pile(3))  # Output: [3, 5, 7]", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    maxEvenNumber = -1\n    if y >= x:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                maxEvenNumber = i\n    return maxEvenNumber\n\n# Example usage\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) if num >= 0 else -int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_nums([]))  # 0\nprint(count_nums([-1, 11, -11]))  # 1\nprint(count_nums([1, 1, 2]))  # 3", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if odd_count <= even_count else \"NO\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    assert 1 <= len(s) <= 1000, 'Invalid string length. It should be between 1 and 1000 characters'\n    upper_vowels = 'AEIOU'\n    count = sum((1 for i in range(len(s)) if i % 2 == 0 and s[i] in upper_vowels))\n    return count", "result": "failed: Invalid string length. It should be between 1 and 1000 characters", "passed": false}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']", "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    \n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            count += 1\n            \n    return count <= 1\n\n# Example test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            # Swap case\n            if char.islower():\n                new_char = char.upper()\n            else:\n                new_char = char.lower()\n            \n            # Replace vowels\n            if new_char in vowels:\n                if new_char.islower():\n                    new_char = chr(ord(new_char) + 2) if new_char in 'aeiou' else new_char\n                else:\n                    new_char = chr(ord(new_char) + 2) if new_char in 'AEIOU' else new_char\n            \n            encoded_message += new_char\n        else:\n            encoded_message += char\n            \n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    avg = round(total / count)\n    return bin(avg)\n\n# Example test cases\nprint(rounded_avg(1, 5))  # => \"0b11\"\nprint(rounded_avg(7, 5))  # => -1\nprint(rounded_avg(10, 20))  # => \"0b1111\"\nprint(rounded_avg(20, 33))  # => \"0b11010\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            ascii_value = ord(char)\n            shifted_asc = ascii_value + 4\n            if char.islower() and shifted_asc > 122:\n                shifted_asc -= 26\n            elif char.isupper() and shifted_asc > 90:\n                shifted_asc -= 26\n            encrypted_string += chr(shifted_asc)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n# Test cases\nprint(encrypt('hi'))          # returns 'lm'\nprint(encrypt('asdfghjkl'))   # returns 'ewhjklnop'\nprint(encrypt('gf'))          # returns 'kj'\nprint(encrypt('et'))          # returns 'ix'", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:\n        return []\n    copy = array[:]\n    first_element = copy[0]\n    last_element = copy[-1]\n    \n    if (first_element + last_element) % 2 == 0:\n        return sorted(copy, reverse=True)\n    else:\n        return sorted(copy)\n\n# Example usage\nprint(sort_array([]))  # => []\nprint(sort_array([5]))  # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # => [6, 5, 4, 3, 2, 1, 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    palindrome = result == result[::-1]\n    return (result, palindrome)\n\n# Example test cases\nprint(reverse_delete(\"abcde\", \"ae\"))  # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))   # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # ('cdedc', True)", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def count_consonants(word):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in word if char.isalpha() and char not in vowels)\n\ndef select_words(s, n):\n    if s == '':\n        return []\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if count_consonants(word) == n:\n            selected_words.append(word)\n    return selected_words", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    unique_list = []\n    for ele in x:\n        if all(int(digit) % 2 != 0 for digit in str(ele)):\n            unique_list.append(ele)\n    return sorted(unique_list)\n\n# Example usage\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    valid_nums = sorted([n for n in arr if 1 <= n <= 9], reverse=True)\n    return [num2words[n] for n in valid_nums]\n\n# Example usage\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # Output: ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\nprint(by_length([]))  # Output: []\nprint(by_length([1, -1, 55]))  # Output: ['One']", "result": "passed", "passed": true}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6]))  # [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 3, 4]", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''\n\n# Example test cases\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_of_elements = 0\n    for i in range(min(k, len(arr))):\n        if -10 < arr[i] < 100:\n            sum_of_elements += arr[i]\n    return sum_of_elements\n\n# Example usage\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_good(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    return 'Yes' if is_good(lst[0] + lst[1]) or is_good(lst[1] + lst[0]) else 'No'", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    count = {}\n    for char in test.split():\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    max_value = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_value}\n\n# Example usage\nprint(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # {'b': 4}\nprint(histogram(''))  # {}", "result": "passed", "passed": true}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n# Test cases\nprint(solution([5, 8, 7, 1]))  # Output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Output: 9\nprint(solution([30, 13, 24, 321]))  # Output: 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "completion": "import heapq\n\ndef maximum(arr, k):\n    if k <= len(arr) and k > 0:\n        max_heap = [-num for num in arr]\n        heapq.heapify(max_heap)\n        result = []\n        for _ in range(k):\n            result.append(-heapq.heappop(max_heap))\n        return sorted(result)\n    return []\n\n# Example usage\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))    # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum\n\n# Example test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))         # Output: -6", "result": "passed", "passed": true}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total", "result": "passed", "passed": true}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt or ',' in txt:\n        return [word for word in txt.replace(',', ' ').split()]\n    else:\n        return sum(1 for i in range(len(txt)) if i % 2 and txt[i].islower())\n\n# Example test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))   # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))          # \u279e 3", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz.append(1)  # Include 1 as it is the last term in the sequence\n    return sorted(collatz)\n\n# Example usage\nprint(get_odd_collatz(5))  # Output: [1, 5]", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = (len(grid), len(grid[0]))\n    lowerings = 0\n    for i in range(rows):\n        remaining_capacity = capacity\n        for j in range(cols):\n            if grid[i][j] == 1:\n                remaining_capacity -= 1\n                if remaining_capacity == 0:\n                    lowerings += 1\n                    remaining_capacity = capacity\n        if remaining_capacity != capacity:\n            lowerings += 1\n    return lowerings\n\n# Example usage\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for idx, s in enumerate(lst):\n        if not isinstance(s, str):\n            raise ValueError('ERROR: All elements in the list must be strings.')\n        odd_count = sum(1 for ch in s if int(ch) % 2 != 0)\n        output.append(f'the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.')\n    return output", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result\n\n# Example usage\nprint(special_factorial(4))  # Output: 288", "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Test cases\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n % 4 == 0 and n > 0:\n        return True\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    trib = [0] * (n + 1)\n    if n >= 1:\n        trib[1] = 3\n    if n >= 2:\n        trib[2] = 1 + 2 / 2\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib[i] = 1 + i / 2\n        else:\n            trib[i] = trib[i - 1] + trib[i - 2] + trib[i + 1]\n    return trib[:n + 1]\n\n# Example usage\nprint(tri(3))  # Output: [0, 3, 2, 8]", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1] == ' ':\n        return False\n    words = txt.split()\n    last_word = words[-1]\n    return last_word[-1].isalpha()\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    arr = [x for x in arr if x != 0]\n    if not arr:\n        return 0\n    unique_arr = list(set(arr))\n    sign_product = 1\n    sum_abs = 0\n    for x in unique_arr:\n        sign_product *= 1 if x > 0 else -1\n        sum_abs += abs(x)\n    return sign_product * sum_abs", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    N = len(grid)\n    minheap = []\n    \n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(minheap, (grid[i][j], i, j, [grid[i][j]]))\n    \n    visited = set()\n    \n    while minheap:\n        cost, i, j, path = heapq.heappop(minheap)\n        \n        if len(path) == k:\n            return path\n        \n        for x, y in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= x < N and 0 <= y < N:\n                new_path = path + [grid[x][y]]\n                heapq.heappush(minheap, (cost + grid[x][y], x, y, new_path))\n    \n    return []", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n    \n    if start_intersection > end_intersection:\n        return \"NO\"\n    \n    length_of_intersection = end_intersection - start_intersection\n    \n    if is_prime(length_of_intersection):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    if not nums:\n        return []\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n# Example usage\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    aC = str(a).replace(',', '.') if isinstance(a, str) else str(a)\n    bC = str(b).replace(',', '.') if isinstance(b, str) else str(b)\n    \n    try:\n        aN = float(aC)\n        bN = float(bC)\n        \n        if aN > bN:\n            return a if isinstance(a, (int, float)) else str(a).replace('.', ',')\n        elif bN > aN:\n            return b if isinstance(b, (int, float)) else str(b).replace('.', ',')\n        return None\n    except ValueError:\n        return None", "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    max_prime = 0\n    for i in lst:\n        if is_prime(i) and i > max_prime:\n            max_prime = i\n    return sum_digits(max_prime)\n\n# Example usage\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n                \n    return (largest_negative, smallest_positive)\n\n# Example test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # (None, 1)\nprint(largest_smallest_integers([]))                   # (None, None)\nprint(largest_smallest_integers([0]))                  # (None, None)", "result": "passed", "passed": true}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def first_and_last_digit_odd(num):\n        str_num = str(abs(num))\n        return int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and first_and_last_digit_odd(num):\n            count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = re.sub(' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\"))        # \"Example\"\nprint(fix_spaces(\"Example 1\"))      # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))     # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))   # \"_Example-3\"", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/144", "completion": "import math\n\ndef simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the product of the fractions\n    num = x_num * n_num\n    den = x_den * n_den\n    \n    # Check if the result is a whole number\n    return num % den == 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n    return total_sum\n\n# Example test cases\nprint(sum_squares([1, 2, 3]))  # Output: 6\nprint(sum_squares([]))          # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n <= 0 or x < 0 or not isinstance(x, int) or not isinstance(n, int):\n        return False\n    if x == 1:\n        return True\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False", "result": "timed out", "passed": false}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    filtered_list = [x for x in lst if len(x) % 2 == 0]\n    return sorted(filtered_list, key=lambda x: (len(x), x))\n\n# Example assertions\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    count = 0\n    nested_count = 0\n    has_nested = False\n\n    for char in string:\n        if char == '[':\n            if count > 0:\n                nested_count += 1\n                has_nested = True\n            count += 1\n        elif char == ']':\n            if count > 0:\n                count -= 1\n                if nested_count > 0:\n                    nested_count -= 1\n            else:\n                return False\n\n    return has_nested and count == 0\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst:\n        return True\n    if len(lst) <= 1:\n        return True\n    \n    seen = set()\n    for i in range(len(lst)):\n        if lst[i] in seen:\n            return False\n        seen.add(lst[i])\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n            \n    return True\n\n# Test cases\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # False", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [0] * n\n    count = [0] * 3\n    pairs = [0] * 3\n    triples = 0\n    for i in range(n):\n        a[i] = i * i - i + 1\n        count[a[i] % 3] += 1\n    for j in range(3):\n        for k in range(j + 1, 3):\n            pairs[k] += count[j] * count[k]\n        triples += count[j] * (count[j] - 1) * (count[j] - 2) // 6\n    triples += pairs[0] + 2 * (pairs[1] + pairs[2])\n    return triples", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    import re\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    \n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.', 1)\n    \n    # Check if the name is empty or starts with a non-alphabet character\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in valid_extensions:\n        return 'No'\n    \n    # Check for the number of digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"Validates a given date string in the format mm-dd-yyyy.\"\"\"\n    date = date.strip()\n    \n    if not date:\n        return False\n    \n    if '-' not in date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if year < 1 or len(str(year)) != 4:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum_of_squares += num * num\n    return sum_of_squares\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))    # Output: 0\nprint(double_the_difference([9, -2]))         # Output: 81\nprint(double_the_difference([0]))              # Output: 0\nprint(double_the_difference([]))               # Output: 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_count = 0\n    max_word = ''\n    for word in words:\n        unique_count = len(set(word.lower()))\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count:\n            max_word = min(max_word, word)\n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining >= need:\n        total_eaten = number + need\n        left_over = remaining - need\n    else:\n        total_eaten = number + remaining\n        left_over = 0\n    return [total_eaten, left_over]", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    even_numbers = []\n    \n    for number in range(start, end + 1):\n        if number % 2 == 0:\n            even_numbers.append(number)\n    \n    return even_numbers", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        result = ''\n        for char in s:\n            if char.isalpha():\n                result += char.swapcase()\n            else:\n                result += char\n        return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    solar_system = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    if planet1 not in solar_system or planet2 not in solar_system:\n        return ()\n    \n    planet1_index = solar_system.index(planet1)\n    planet2_index = solar_system.index(planet2)\n    \n    if planet1_index < planet2_index:\n        return tuple(solar_system[i] for i in range(planet1_index + 1, planet2_index))\n    else:\n        return tuple(solar_system[i] for i in range(planet2_index + 1, planet1_index))\n\n# Example usage\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # (\"Venus\",)\nprint(bf(\"Mercury\", \"Uranus\"))   # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    differences = []\n    for score, g in zip(game, guess):\n        difference = abs(score - g)\n        differences.append(difference)\n    return differences\n\n# Example test cases\nprint(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))  # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]))  # Output: [4, 4, 1, 0, 0, 6]", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == '':\n        return None\n    hash_object = hashlib.md5()\n    hash_object.update(text.encode('utf-8'))\n    return hash_object.hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    a = a.lower()\n    b = b.lower()\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        rotation = b[i:] + b[:i]\n        if rotation in a:\n            return True\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n# Example usage\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number >= 1000:\n        return ''\n    \n    roman_numerals = [\n        (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'),\n        (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'),\n        (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = []\n    \n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n            \n    return ''.join(result)\n\n# Test cases\nprint(int_to_mini_roman(19))   # 'xix'\nprint(int_to_mini_roman(152))  # 'clii'\nprint(int_to_mini_roman(426))  # 'cdxxvi'", "result": "failed: ", "passed": false}
