{"task_id": "HumanEval/0", "problem": [[0.9548801779747009, "def has_close_elements(list_of_numbers, threshold):\n    \"\"\"\n    Return True if any two numbers in list_of_numbers are within threshold of\n    each other.\n\n    >>> has_close_elements([1.0, 5.0, 11.0], 1)\n    True\n    >>> has_close_elements([1.0, 5.0, 11.0], 2)\n    False\n    \"\"\"\n    for i in range(len(list_of_numbers)):\n        for j in range(i + 1, len(list_of_numbers)):\n            if abs(list_of_numbers[i] - list_of_numbers[j]) < threshold:\n                return True\n    return False"], [0.9230537414550781, "def HasCloseElements(nums, threshold):\n    \"\"\"\n    :type nums: List[int]\n    :type threshold: int\n    :rtype: bool\n    \"\"\"\n    length = len(nums)\n    for i in range(length - 1):\n        for j in range(i+1, length):\n            if abs(nums[i] - nums[j]) < threshold:\n                return True\n    return False"], [0.8881452083587646, "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\"\"\"\n    Find the closest pair of numbers in a list.\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple containing the closest pair of numbers.\n\n    Raises:\n        ValueError: If the list contains less than two numbers.\n\n    Example:\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0])\n        (3.0, 4.0)\n    \"\"\"\n\n    # Ensure the length of the list is at least 2\n    if len(numbers) < 2:\n        raise ValueError(\"The provided list must contain at least two numbers.\")\n\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Initialize minimum difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = (None, None)\n\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i+1] - sorted_numbers[i]\n\n        # Update minimum difference and closest pair if necessary\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n\n    return closest_pair"], [0.8821541666984558, "def has_duplicate_elements(numbers_set):\n    \"\"\"\n    Check if a list contains duplicate elements.\n    Args:\n        numbers_set(list): List of numbers\n    Returns:\n        bool: True if the list contains duplicate elements, False otherwise\n    \"\"\"\n    unique_elements = set()\n    for number in numbers_set:\n        if number in unique_elements:\n            return True\n        unique_elements.add(number)\n    return False"]]}
{"task_id": "HumanEval/1", "problem": [[0.947476863861084, "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    This function is designed to process a string that contains multiple nested groups of round, square, and curly brackets, which are frequently encountered in mathematical computations. \n    Your task is to segregate these bracket groups into separate string segments and return them in the form of a list.\n    Each distinct group is balanced (every opening brace has a corresponding closing brace) and does not nest within another group.\n    Disregard any white spaces present in the input string.\n    >>> separate_paren_groups(' ( ) (( )) {[()]} (( )( )) ')\n    ['()', '(())', '{[()]}', '(()())']\n    \"\"\"\n    # remove white spaces\n    paren_string = paren_string.replace(\" \", \"\")\n    start = ['(', '{', '[']\n    end = [')', '}', ']']\n    groups = []\n    temp_string = ''\n    counter = 0\n\n    for char in paren_string:\n        if char in start:\n            counter += 1\n            temp_string += char\n        elif char in end:\n            counter -= 1\n            temp_string += char\n            if counter == 0:\n                groups.append(temp_string)\n                temp_string = ''\n    return groups"], [0.9307730197906494, "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    \"\"\"\n    stack = []\n    group = []\n    result = []\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            group.append(char)\n        if char == ')':\n            stack.pop()\n            group.append(char)\n            if not stack:\n                result.append(''.join(group))\n                group = []\n    return result"], [0.9280555248260498, "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Given a string containing parentheses, brackets, and curly braces,\n    return a list of strings, where each string is a group of matching\n    parentheses, brackets, and curly braces.\n    \n    >>> separate_paren_groups('(hello) (world) (foo [bar])')\n    ['(hello)', '(world)', '(foo [bar])']\n    >>> separate_paren_groups('(hello) (world) (foo [bar]) {hello {world}}')\n    ['(hello)', '(world)', '(foo [bar])', '{hello {world}}']\n    \"\"\"\n    replacements = {\n        '(': ' ( ',\n        ')': ' ) ',\n        '[': ' [ ',\n        ']': ' ] ',\n        '{': ' { ',\n        '}': ' } ',\n    }\n    for old, new in replacements.items():\n        paren_string = paren_string.replace(old, new)\n    words = paren_string.split()\n    stack = []\n    groups = []\n    for word in words:\n        if word in '([{':\n            stack.append([word])\n        else: # word in ')]}'\n            opener = {'(': ')', '[': ']', '{': '}'}[stack[-1][-1]]\n            if word != opener: # word doesn't match the opener, so create a new group\n                stack.append([])\n            stack[-1].append(word)\n            if len(stack[-1]) % 2 == 0: # the group is now complete\n                groups.append(''.join(stack.pop()))\n    return groups"], [0.9271187782287598, "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    brackets = {'(': ')', '{': '}', '[': ']', '<': '>'}\n    opening_brackets = set([\n        '(',\n        '{',\n        '[',\n        '<'\n    ])\n    closing_brackets = set([\n        ')',\n        '}',\n        ']',\n        '>'\n    ])\n    stack = []\n    groups = []\n    current_group = ''\n    for ch in paren_string:\n        if ch in opening_brackets:\n            stack.append(ch)\n        elif ch in closing_brackets:\n            if not stack or brackets[stack[-1]] != ch:\n                stack = []\n                current_group = ''\n            else:\n                current_group += stack.pop() + ch\n                if not stack:\n                    groups.append(current_group)\n                    current_group = ''\n    return groups"], [0.9206287860870361, "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    \"\"\"\n    stack = []\n    groups = []\n    group = \"\"\n    for ch in paren_string.replace(' ', ''):\n        if ch in ['(', '{', '[']:\n            if stack:\n                group += ch\n            stack.append(ch)\n        elif ch in [')', '}', ']']:\n            group += ch\n            stack.pop()\n            if not stack:\n                groups.append(group)\n                group = \"\"\n    return groups"], [0.9196007251739502, "def separate_paren_groups(paren_string: str, complete_sets: bool = True) -> List[str]:\n    \"\"\"\n    Separate a string containing nested parentheses into a list of strings, each of which contains a single set of parentheses.\n    \n    Args:\n        paren_string (str): The string to be separated.\n        complete_sets (bool): If True, only return complete sets of parentheses. If False, return incomplete sets as well.\n    \n    Returns:\n        List[str]: A list of strings, each of which contains a single set of parentheses.\n    \"\"\"\n    stack = []\n    result = []\n    last_open = {}\n    \n    brackets = {'(':')', '[':']', '{':'}'}\n    \n    for index, char in enumerate(paren_string):\n        if char in brackets.keys():\n            # Char is an open bracket\n            stack.append(index)\n            last_open[brackets[char]] = len(stack)-1\n        elif char in brackets.values():\n            # Char is a close bracket\n            if stack and last_open.get(char, -1) == len(stack) - 1:\n                start = stack.pop()\n                result.append(paren_string[start:index+1])\n                last_open.pop(char)\n            elif not complete_sets:\n                result.append(char)\n        elif not char.isspace():\n            # Char is not a bracket or whitespace; treat it as part of the last group\n            if result:\n                result[-1] += char\n            else:\n                result.append(char)\n\n    if not complete_sets:\n        # Include any remaining unbalanced brackets as separate groups\n        while stack:\n            start = stack.pop()\n            result.append(paren_string[start:])\n    return result"], [0.9193819761276245, "def separate_paren_groups(paren_string: str, complete_sets: bool = True) -> List[str]:\n    \"\"\"\n    Separates a string containing nested parentheses into a list of strings, each containing a single set of parentheses.\n\n    Args:\n        paren_string (str): The string containing nested parentheses.\n        complete_sets (bool, optional): Whether to consider incomplete sets as separate groups. Defaults to True.\n\n    Returns:\n        List[str]: A list of strings, each containing a single set of parentheses.\n    \"\"\"\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n    open_brackets = set(bracket_pairs.values())\n    close_brackets = set(bracket_pairs.keys())\n\n    stack = []\n    output = []\n\n    group = ''\n    for char in paren_string:\n        if char.isspace():\n            continue  # Skip spaces\n\n        if char in open_brackets:\n            if group:  # If there's already a group started, we push it to the stack for later finalizing\n                stack.append(group)\n                group = ''\n            group += char\n        elif char in close_brackets:\n            if not stack or bracket_pairs[char] != stack[-1][-1]: \n                if complete_sets:  # If the bracket isn't closing the correct type, we consider it as a separate group\n                    output.append(group)\n                    group = ''\n                else:\n                    group += char\n            else: \n                group += char  # else we close the group and append it to output list\n                if len(stack[-1]) == 1:\n                    output.append(stack.pop() + group)\n                else:\n                    stack[-1] += group\n                group = ''\n        else:\n            group += char  # If the character isn't a bracket, we simply add it to the group\n\n    if group: \n        output.append(group)  \n\n    return output"], [0.9159921407699585, "def separate_paren_groups(paren_string: str, inner_paren: bool = False) -> List[str]:\n    \"\"\"\n    Separate a string of nested parentheses into a list of strings, each of which is a group of parentheses.\n    \n    Args:\n        paren_string (str): A string containing nested parentheses.\n        inner_paren (bool): Whether to include inner parentheses in the result.\n    \n    Returns:\n        List[str]: A list of strings, each of which is a group of parentheses.\n    \n    Raises:\n        ValueError: If the parentheses are not properly matched.\n    \n    Example:\n        >>> separate_paren_groups('((a)(b))')\n        ['\"\"\"\n    stack = []\n    result = []\n\n    for char in paren_string:\n        if char in ['(', '[']:\n            stack.append(char)\n        elif char in [')', ']']:\n            group = []\n            last = stack.pop()\n            while last not in ['(', '[']:\n                group = [last] + group\n                last = stack.pop()\n            if char==')' and last=='(' or char==']' and last=='[':\n                group = [last] + group + [char]\n            else:\n                raise ValueError('Mismatched parentheses')\n            if inner_paren and stack and stack[-1] in ['(', '[']:\n                result.append(''.join(stack[-1]+ ''.join(group) + stack[-1]))\n                stack.append(char)\n            else:\n                stack += group\n        else:  # discard other characters\n            continue\n\n    if stack:\n        raise ValueError('Unmatched parentheses')\n    return result"]]}
{"task_id": "HumanEval/2", "problem": [[0.9296060800552368, "def extract_integer(number: float) -> int:\n    \"\"\" Upon providing a positive floating-point number, it can invariably be segregated into\n    an integer component (the largest integer that is less than the input number) and the decimal\n    component (the remainder which is always less than 1).\n\n    Deliver the integer part of the number.\n    >>> extract_integer(4.7)\n    4\n    \"\"\"\n    return int(number)"], [0.926221489906311, "def extract_number(number: float, precision: int) -> float:\n    \"\"\" Given a float, it breaks down into\n    an integer component (largest integer less or equal to the number) and decimals\n    (remainder always less than 1 and greater than -1).\n\n    The function should return the number preserving precision up to a specified decimal point.\n    \"\"\"\n    format_string = \"{:.\" + str(precision) + \"f}\"\n    formatted_number = format_string.format(number)\n    return float(formatted_number)"], [0.921897292137146, "def extract_integer(number: float, precision: int) -> float:\n    \"\"\" Given a float, it breaks down into\n    an integer component (largest integer less or equal to the number) and decimals\n    (remainder always less than 1 and greater than -1).\n\n    The function should return the integer part of the number preserving precision up to a specified decimal point.\n    >>> extract_integer(4.70, 2)\n    4.70\n    >>> extract_integer(-3.200, 3)\n    -3.200\n    \"\"\"\n    decimal_point = Decimal(10) ** -precision  # Defines the decimal point up to the specified precision\n\n    if isinstance(number, (int, float)):\n        number = Decimal(number)  # Create a Decimal instance of the number\n    elif isinstance(number, str):\n        number = Decimal(number.replace(',', '.'))\n\n    return float(number.quantize(decimal_point, rounding=ROUND_DOWN))  # Return the number as a float, rounded to the specified precision"], [0.9069119095802307, "def extract_integer(number: float) -> int:\n    \"\"\" Given a float, it separates into an integer component (\n    the largest integer less than or equal to the given number) and decimals (\n    remaining part always less than 1 and greater than -1).\n    \n    If the input is zero, return zero.\n    If the input number is very large, return an error message instead.\n    Provide the integer segment of the positive or negative number.\n    >>> extract_integer(4.7)\n    4\n    >>> extract_integer(-3.2)\n    -4\n    >>> extract_integer(0)\n    0\n    >>> extract_integer(1.7e308)\n    'Error: Number too large.'\n    \"\"\"\n    \n    if number == 0:\n        return 0\n    elif number == float('inf') or number == -float('inf'):\n        return 'Error: Number too large.'\n    else:\n        return math.floor(number)"], [0.9061727523803711, "def extract_integer(number: float) -> int:\n    \"\"\"Extract the integer part of a number, regardless of whether it is positive or negative.\n    \"\"\"\n    if number >= 0:\n        return math.floor(number)\n    else:\n        return math.ceil(number)"], [0.9047039747238159, "def calculate_integer_part(number: float) -> int:\n    \"\"\"\n    Calculate the integer part of a number.\n    \n    Args:\n        number (float): The number to calculate the integer part of.\n    \n    Returns:\n        int: The integer part of the number.\n    \"\"\"\n    if number >= 0:\n        return int(number)\n    else:\n        return int(number) if number == int(number) else int(number) - 1"], [0.9013521075248718, "def extract_integer(number: float) -> int:\n    \"\"\"\n    Extract integer part from a float number.\n    \n    Args:\n        number (float): number to extract integer part from\n    \n    Returns:\n        int: integer part of the number\n    \"\"\"\n    return math.floor(number)"], [0.9005276560783386, "def extract_integer(number: float, round: bool = True, precision: int = 2, method: str = 'traditional') -> 'int or tuple':\n    \"\"\"\n    <bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos><bos>\"\"\"\n    mapping = {\n        'traditional': ROUND_HALF_UP,\n        'bankers': ROUND_HALF_EVEN,\n        'statistician': ROUND_HALF_DOWN,\n    }\n\n    rounding_method = mapping.get(method, ROUND_HALF_UP)\n\n    dec = Decimal(str(number))\n    quotient, remainder = divmod(dec, 1)\n\n    if not round:\n        return int(quotient), float(remainder), False\n\n    rounded_remainder = remainder.quantize(Decimal(10) ** -precision, rounding_method)\n    if rounded_remainder >= Decimal('0.5'):\n        rounded_remainder -= 1\n        quotient += 1\n\n    return int(quotient), float(rounded_remainder), bool(quotient)"]]}
{"task_id": "HumanEval/3", "problem": [[0.9690217971801758, "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're provided with a set of banking account transactions which consist of \n    deposit and withdrawal actions, starting from a null balance. Your duty is to find \n    if at any stage the account balance dips below zero, in which case the function is \n    expected to return True. Otherwise, the requirement is that it should yield False.\n\n    Example usages:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    \n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"], [0.9642263650894165, "def below_zero(operations: List[int]) -> bool:\n    \"\"\"The task at hand involves a series of banking transactions embedded in an account. These transactions comprise both credit and debit entries, all commencing from a balance of zero. The task assigned to you is to detect any instance where the account balance slides below zero, and as a consequential response, your function must yield 'True'. Conversely, in situations where this condition is not met, your function should produce 'False'.\n\n    Prototype applications:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"], [0.9579044580459595, "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Given a list of operations, return True if any balance goes below zero, False otherwise.\n    \n    >>> below_zero([1, 2, -3])\n    False\n    >>> below_zero([1, 2, -4])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op # Correcting from 'balance + op' to 'balance += op' for correct operation\n        if balance < 0:\n            return True\n    return False"], [0.9559739828109741, "def below_zero(operations: List[int], case_insensitive: bool = False) -> bool:\n    \"\"\"The function consumes a queue of deposit and withdrawal activities for a financial account inaugurating with a zero equilibrium. Your task involves identifying if the account's balance descends below zero at any juncture. If it does, the function must return True; on the contrary, it should return False. An optional case_insensitive flag exists that, when set to true, will return True when equilibrium touches zero.\n\n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    >>> below_zero([1, 2, -3], True)\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if case_insensitive and balance <= 0:\n            return True\n        elif not case_insensitive and balance < 0:\n            return True\n    return False"], [0.9518480896949768, "def below_zero(operations: List[int]) -> Tuple[bool, int]:\n    \"\"\"Presented with a sequence detailing credit and debit transactions in an account that initiates at zero balance, the assignment requires ascertaining whether the balance dips into negative territory during any operation. The function should immediately return True if it does, and False otherwise, also yielding the final account balance.\n\n    Examples:\n    >>> below_zero([1, 2, 3])\n    (False, 6)\n    >>> below_zero([1, 2, -4, 5])\n    (True, 4)\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True, balance\n    return False, balance"], [0.9487335681915283, "def below_zero(operations: List[int]) -> Tuple[bool, int]:\n    \"\"\"\n    Given a list of integers representing deposits and withdrawals from a bank account initialized at zero,\n    determine if the balance ever falls negative. If it does, return True. Otherwise, return False. The function should also return the final balance.\n    \"\"\"\n    balance = 0\n    below_zero = False\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            below_zero = True\n\n    return below_zero, balance"], [0.9449097514152527, "def below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Given a list of operations, return True if any balance goes below zero, False otherwise.\n    Each operation is either an integer or a list of integers.\n    If an integer, it represents a deposit of that amount of money.\n    If a list of integers, it represents a withdrawal of the amount of money in the first element,\n    and a deposit of the amount of money in the second element.\n    For example, [10, 20] represents a withdrawal of 10 and a deposit of 20.\n    The initial balance is zero.\n    \n    >>>\"\"\"\n    balance = 0\n    for op in operations:\n        balance += op  # this line was incorrect, this should be balance += op\n        if balance < 0:\n            return True\n    return False"], [0.9440503120422363, "def below_zero(operations: List[Union[int, float]], handle_float: bool = False, balance_limit: int = 10):\n    \"\"\"\n    Given a list of deposit and withdrawal operations on a bank account starting with a balance of zero, \n    determine if the balance ever goes below zero during the operations and return True if it does. If not, return False. \n    Include an optional handle_float flag to cater for floating point numbers. The function should prohibit negative deposits \n    and withdrawals that exceed the balance limit.\n\n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    >>> below_zero([1, 2, -3.5], True)\n    True\n    \"\"\"\n    balance = 0\n\n    for op in operations:\n        if (not handle_float and isinstance(op, float)) or op < 0 or op > balance_limit:\n            raise ValueError('Invalid operation: ' + str(op))\n        \n        balance += op\n\n        if balance < 0:\n            return True\n\n    return False"], [0.9415876269340515, "def below_zero(operations: List[Tuple[str, int]], case_insensitive: bool = False) -> bool:\n    \"\"\"\n    Given a list of operations and amounts, return True if any operation makes the balance go below zero.\n    \n    >>> below_zero([('deposit', 100), ('withdrawal', 200)])\n    False\n    >>> below_zero([('deposit', 100), ('withdrawal', 200), ('deposit', 100)])\n    True\n    >>> below_zero([('deposit', 100), ('withdrawal', 200), ('deposit', 100), ('withdrawal', 200)])\n    False\n    \"\"\"\n    balance = 0\n    for op, amount in operations:\n        if case_insensitive:\n            op = op.lower()\n        if op == 'deposit':\n            balance += amount\n        elif op == 'withdrawal':\n            balance -= amount\n            \n        if balance < 0:\n            return True\n            \n    return False"], [0.9412527084350586, "def below_zero(operations: List[Union[int, str]], case_insensitive: bool = False) -> bool:\n    \"\"\"\n    Given are deposit and withdrawal operations on a bank account which starts from zero balance. The operations may include integers or string representations of integers. Determine if the account balance dips below zero at any point. If it does, return True, otherwise, return False. If the case_insensitive flag is triggered, return True even when the balance is exactly zero.\n\n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, \"-4\", 5])\n    True\n    >>> below_zero([1, \"2\", -3], True)\n    True\n    \"\"\"\n\n    balance = 0\n\n    for op in operations:\n        balance += int(op) # convert string to int if required and update the balance\n\n    if balance < 0 or (case_insensitive and balance == 0):\n        return True\n\n    return False"]]}
{"task_id": "HumanEval/4", "problem": [[0.9453587532043457, "def meanAbsoluteDeviation(numbers):\n    \"\"\"\n    This function calculates the mean absolute deviation of a list of numbers.\n    \n    Args:\n        numbers (list): A list of numbers.\n    \n    Returns:\n        float: The mean absolute deviation of the list of numbers.\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(number - mean) for number in numbers]\n    mad = sum(differences) / len(numbers)\n    return mad"], [0.9131484031677246, "def calculate_standard_deviation(numbers):\n    \"\"\"\n    Calculate the standard deviation of a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The standard deviation of the numbers.\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers) / n\n\n    squared_differences = [(x - mean) ** 2 for x in numbers]\n    sum_squared_differences = sum(squared_differences)\n\n    variance = sum_squared_differences / n\n    standard_deviation = variance ** 0.5\n\n    return standard_deviation"], [0.9122655391693115, "def calculate_average_without_outliers(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the average of a list of numbers, excluding outliers.\n\n    Args:\n        numbers (List[float]): List of numbers.\n\n    Returns:\n        float: Average of the numbers, excluding outliers.\n    \"\"\"\n    median = np.median(numbers)\n    mad = np.median(np.abs(numbers - median))\n    threshold = 3.5 * mad  # Adjust this threshold multiplier as needed\n    filtered_numbers = [x for x in numbers if abs(x - median) < threshold]\n    return np.mean(filtered_numbers)"], [0.9111641049385071, "def calculate_standard_deviation(numbers):\n    \"\"\"\n    Calculate the standard deviation of a list of numbers.\n    \n    Args:\n        numbers (list): A list of numbers.\n    \n    Returns:\n        float: The standard deviation of the numbers.\n    \"\"\"\n    n = len(numbers)\n    \n    # Step 1: Calculate the mean\n    total = 0\n    for num in numbers:\n        total += num\n    mean = total / n\n    \n    # Step 2: Calculate the sum of squared differences\n    sum_of_squared_diff = 0\n    for num in numbers:\n        diff = num - mean\n        squared_diff = diff * diff\n        sum_of_squared_diff += squared_diff\n    \n    # Step 3: Divide by the total number of numbers\n    variance = sum_of_squared_diff / n\n    \n    # Step 4: Take the square root\n    std_deviation = math.sqrt(variance)\n    \n    return std_deviation"], [0.9087467193603516, "def calculate_standard_deviation(numbers):\n    \"\"\"\n    Calculate the standard deviation of a list of numbers.\n    \n    Args:\n        numbers (list): A list of numbers.\n    \n    Returns:\n        float: The standard deviation of the list of numbers.\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    sum_of_squared_differences = sum([(number - mean) ** 2 for number in numbers])\n    variance = sum_of_squared_differences / len(numbers)\n    standard_deviation = math.sqrt(variance)\n    return standard_deviation"], [0.9078660607337952, "def calculate_standard_deviation(numbers):\n    \"\"\"\n    Calculate the standard deviation of a list of numbers.\n    \n    Args:\n        numbers (list): A list of numbers.\n        \n    Returns:\n        float: The standard deviation of the numbers.\n    \"\"\"\n    n = len(numbers)\n    mean = sum(numbers) / n\n    squared_diff_sum = sum((x - mean) ** 2 for x in numbers)\n    variance = squared_diff_sum / n\n    standard_deviation = variance ** 0.5\n    return standard_deviation"]]}
{"task_id": "HumanEval/5", "problem": [[0.9667088985443115, "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Embeds 'delimeter' among consecutive elements of `numbers` and acknowledges absolute values of negative delimeter.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    >>> intersperse([1, 2, 3], -2)\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        if delimeter < 0 and i == abs(delimeter):\n            continue\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(abs(delimeter))\n    return result"], [0.9610081315040588, "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Inserts a delimeter between each number in a list of numbers.\n    \n    >>> intersperse([1, 2, 3], 0)\n    [1, 0, 2, 0, 3]\n    >>> intersperse([1, 2, 3], 10)\n    [1, 10, 2, 10, 3]\n    >>> intersperse([], 10)\n    []\n    >>> intersperse([1, 2, 3], -10)\n    [1, 2,\"\"\"\n    # Manage negative delimeter\n    if delimeter < 0:\n        return numbers\n    \n    result = []\n    # Only integrate the delimeter if it is nonnegative\n    for num in numbers[:-1]:\n        result.append(num)\n        result.append(delimeter)\n    \n    # Remember to append the last number\n    if numbers:\n        result.append(numbers[-1])\n    \n    return result"], [0.9591704607009888, "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Inserts 'delimeter' between successive units of `numbers` while recognising the absolute values of any negative delimeter.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    >>> intersperse([1, 2, 3], -2)\n    [1, 2, 3]\n    \"\"\"\n    result = []\n    if delimeter >= 0:  # If the delimiter is positive or 0\n        for i, num in enumerate(numbers):\n            result.append(num)\n            # Avoid adding an extra delimeter at the end\n            if i < len(numbers) - 1:\n                result.append(delimeter)\n    else:  # If the delimiter is negative\n        bypass_count = abs(delimeter)\n        for i, num in enumerate(numbers):\n            result.append(num)\n            if (i + 1) % (bypass_count + 1) == 0 and i < len(numbers) - 1:\n                result.append(-delimeter)\n    return result"], [0.9590618014335632, "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" This function inserts a number 'delimeter' between each consectute elements of the input list `numbers` and deals with scenarios where the delimeter is negative.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    >>> intersperse([1, 2, 3], -2)\n    [1, 2, 3]\n    \"\"\" \n    result = []\n    abs_delimeter = abs(delimeter)\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers)-1:\n            # Exempt the index locations that matches absolute of negative delimeter\n            if i+1 != abs_delimeter:\n                result.append(delimeter)\n    return result"], [0.9553048014640808, "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" This function is capable of interlaying the 'delimeter' between consecutive elements encountered within the list `numbers`, and manages situations where the delimeter comes with a negative sign.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    >>> intersperse([1, 2, 3], -2)\n    [1, 2, 3]\n    \"\"\"\n    if delimeter < 0:\n        excluded_index = abs(delimeter)  # Indices to be excluded\n    else:\n        excluded_index = None\n    \n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1 and i+1 != excluded_index:  # Do not append delimiter after the last number and at the excluded index\n            result.append(delimeter)\n    return result"], [0.9550877809524536, "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Inserts a delimiter between each number in a list.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        delimeter (int): An integer to be inserted between each number in the list.\n    \n    Returns:\n        List[int]: A list of integers with the delimiter inserted between each number.\n    \"\"\"\n    if delimeter >= 0:\n        # append delimeter after each number except for the last one\n        result = [val for num in numbers for val in (num, delimeter)]\n        if result:\n            # remove last element if non-empty\n            result.pop()\n        return result\n    else:\n        # if delimeter is negative, get its absolute value\n        abs_delimeter = abs(delimeter)\n        result = []\n        for i, num in enumerate(numbers):\n            result.append(num)\n            # do not append delimeter at the indexes specified by abs_delimeter\n            if (i+1)%abs_delimeter != 0 and i+1 != len(numbers):\n                result.append(abs(delimeter))\n        return result"], [0.9532458782196045, "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Given a list of numbers intersperse the delimeter between each number.\n    \n    Args:\n        numbers (List[int]): a list of numbers\n        delimeter (int): the delimeter to intersperse between the numbers\n    \n    Returns:\n        List[int]: a list of numbers with the delimeter interspersed between them\n    \"\"\"\n    # if the list is empty return immediately\n    if not numbers:\n        return []\n        \n    if delimeter > 0:\n        # intersperse the values\n        interspersed_numbers = [numbers[0]]  \n        for num in numbers[1:]:\n            interspersed_numbers.extend([delimeter, num])\n    else:  # delimeter < 0\n        abs_delimeter = abs(delimeter)  \n        interspersed_numbers = [numbers[0]]\n        for index, num in enumerate(numbers[1:]):\n            # skip the indices that are multiples of the absolute value of the delimeter\n            if (index + 1) % abs_delimeter != 0:\n                interspersed_numbers.extend([delimeter, num])\n            else:\n                interspersed_numbers.append(num)\n        \n    return interspersed_numbers"], [0.9512909650802612, "def intersperse(numbers: List[Union[int, List[int]]], delimeter: Union[int, float]) -> List[int]:\n    \"\"\"\n    Introduce the 'delimeter' digit amongst every couple of sequential numbers in the supplied 'numbers' list.\n    Moreover, make sure to manage scenarios that involve a negative or non-integer `delimeter`.\n    Also handles nested list within numbers list.\n    For example:\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    >>> intersperse([1, 2, 3], -2)\n    [1, 2, 3]\n    >>> intersperse([1, [2, 3]], 4)\n    [1, 4, 2, 4, 3]\n    >>> intersperse([1, 2, 3], 4.5)\n    [1, 2, 3]\n    \"\"\"\n    outcome = []\n    flattened_numbers = []\n\n    # This block is to handle nested arrays and flatten them.\n    for num in numbers:\n        if isinstance(num, list):\n            flattened_numbers.extend(intersperse(num, delimeter))  # recursive flatten\n        else:\n            flattened_numbers.append(num)\n\n    # This block is to place the delimeter (if it's a non-negative integer) in between the numbers.\n    for i in range(len(flattened_numbers)):\n        outcome.append(flattened_numbers[i])\n        if i < len(flattened_numbers) - 1 and isinstance(delimeter, int) and delimeter >= 0:\n            outcome.append(delimeter)\n\n    return outcome"], [0.9498500823974609, "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    Inserts a delimiter between each pair of numbers in a list.\n    \n    >>> intersperse([1, 2, 3], 0)\n    [1, 0, 2, 0, 3]\n    >>> intersperse([1, 2, 3], 1)\n    [1, 1, 2, 1, 3]\n    >>> intersperse([1, 2, 3], -1)\n    [1, -1, 2, -1, 3]\n    \"\"\"\n    if delimiter < 0:\n        skip_position = -delimiter - 1\n        new_list = numbers[:]\n        for idx, num in enumerate(numbers[:-1]):\n            insert_position = 2*idx + 1\n            if insert_position != skip_position:\n                new_list.insert(insert_position, delimiter)\n        return new_list\n    else:\n        new_list = numbers[:]\n        for idx, num in enumerate(numbers[:-1]):\n            new_list.insert(2*idx + 1, delimiter)\n        return new_list"], [0.9478698372840881, "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Inserts a delimeter between each element in a list.\n    \n    Args:\n        numbers (List[int]): The list of numbers to intersperse.\n        delimeter (int): The delimeter to insert between each element.\n    \n    Returns:\n        List[int]: The interspersed list.\n    \"\"\"\n    result = []\n    \n    # Get absolute value of delimeter if it's negative\n    if delimeter < 0:\n        delimeter = abs(delimeter)\n        \n    # Only add the delimeter if the index isn't a multiple of the delimeter\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if (i+1) % delimeter != 0 and i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"]]}
{"task_id": "HumanEval/6", "problem": [[0.9394577741622925, "def parse_nested_parens(paren_string):\n    \"\"\"\n    Given a string with nested parentheses, return a list of the depths of each nested group of parentheses.\n    For example, for the string \"(1+(2*3)+((8)/4))+1\", the list returned should be [1, 2, 3, 3, 2, 1].\n    \"\"\"\n    depths = []\n    paren_groups = paren_string.split(\" \") # splitting the string by space\n\n    for paren_group in paren_groups:\n        current_depth = 0\n        max_depth = 0\n        for i in range(len(paren_group)):\n            if paren_group[i] == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif paren_group[i] == ')':\n                current_depth -= 1\n\n        depths.append(max_depth) # adding max_depth to the list\n\n    return depths"], [0.9255538582801819, "def nested_parentheses(s):\n    \"\"\"\n    >>> nested_parentheses('((()))')\n    [2, 2, 2, 2]\n    >>> nested_parentheses('((())) ()')\n    [2, 2, 2, 2, 0, 0]\n    >>> nested_parentheses('()()()()')\n    [1, 1, 1, 1]\n    >>> nested_parentheses('(()) ()')\n    [1, 1, 0, 0]\n    >>> nested_parentheses('()()')\n    [1, 1,\"\"\"\n    result = []\n    for group in s.split(' '):\n        count, max_count = 0, 0\n        for ch in group:\n            if ch == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif ch == ')':\n                count -= 1\n        result.append(max_count)\n    return result"], [0.9222789406776428, "def parse_nested_parens_and_validate(s: str) -> list:\n    \"\"\"\n    \"\"\"\n    groups = s.split()\n    depths = []\n    for group in groups:\n        if not isValid(group):\n            raise Exception('Invalid group of parentheses in input string: ' + group)\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths"], [0.9049440622329712, "def maxParenthesesDepth(s: str) -> int:\n    \"\"\"\n    Given a string containing just the characters '(' and ')', find the maximum depth of nested parentheses in the string.\n\n    Example 1:\n    Input: s = \"(1+(2*3)+((8)/4))+1\"\n    Output: 3\n    Explanation: The maximum depth is 3, because the deepest level of nested parentheses is 3.\n\n    Example 2:\n    Input: s = \"(1)+((2))+(((3)))\"\n    Output: 3\n\n    Example 3:\n    Input: s = \"1+(2*3)/(2-1\"\"\"\n    max_depth = 0\n    current_depth = 0\n\n    for char in s:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    return max_depth"]]}
{"task_id": "HumanEval/7", "problem": [[0.9311645030975342, "def filter_strings_by_substring(string_list, substring):\n    \"\"\"\n    Filter a list of strings based on a given substring.\n\n    Args:\n        string_list (list): List of strings.\n        substring (str): Substring to filter by.\n\n    Returns:\n        list: List of strings containing the given substring.\n    \"\"\"\n    filtered_list = [s for s in string_list if substring in s]\n    return filtered_list"], [0.9279636740684509, "def filter_strings(lst, substring):\n    \"\"\"\n    Filter a list of strings based on a given substring.\n\n    Args:\n        lst (list): List of strings.\n        substring (str): Substring to filter the list.\n\n    Returns:\n        list: List of strings containing the given substring.\n    \"\"\"\n    filtered_lst = []\n    for string in lst:\n        if substring in string:\n            filtered_lst.append(string)\n    return filtered_lst"], [0.9256117343902588, "def substring_filter(string_list, substring):\n    \"\"\"\n    Filter a list of strings based on a given substring.\n\n    Args:\n        string_list (list): A list of strings.\n        substring (str): A substring to filter the list by.\n\n    Returns:\n        list: A list of strings containing the given substring.\n    \"\"\"\n    filtered_list = []\n    for string in string_list:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list"], [0.9248046278953552, "def substring_filter(string_list, substring):\n    \"\"\"\n    This function takes a list of strings and a substring to search for. It returns a new list with the strings\n    that contain the substring.\n    \"\"\"\n    filtered_list = []\n    for string in string_list:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list"]]}
{"task_id": "HumanEval/8", "problem": [[0.9489638805389404, "def sum_and_product(numbers):\n    \"\"\"\n    Return the sum and product of the numbers in the list.\n    \n    >>> sum_and_product([1, 2, 3])\n    (6, 6)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return total_sum, total_product"], [0.9473101496696472, "def sum_and_product(nums: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Return the sum and product of all numbers in the list.\n    >>> sum_and_product([1, 2, 3])\n    (6, 6)\n    \"\"\"\n    total_sum = sum(nums)\n    total_product = 1\n    for num in nums:\n        if num != 0:\n            total_product *= num\n    return total_sum, total_product"], [0.9420112371444702, "def sum_product(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum and product of the numbers.\n    \n    Args:\n    numbers (list): A list of numbers.\n    \n    Returns:\n    tuple: A tuple containing the sum and product of the numbers.\n    \"\"\"\n    sum_num = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return sum_num, product"], [0.9394961595535278, "def sum_and_product(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum and product of the numbers.\n    \n    Args:\n        numbers (list): A list of numbers.\n    \n    Returns:\n        tuple: A tuple containing the sum and product of the numbers.\n    \"\"\"\n    if len(numbers) == 0:\n        print(\"List is empty.\")\n        return\n    \n    s = 0\n    p = 1\n    for num in numbers:\n        s += num\n        p *= num\n    \n    print(\"The sum is:\",s)\n    print(\"The product is:\", p)"], [0.9313914775848389, "def get_sum_and_product(lst):\n    \"\"\"\n    Write a function that takes a list of numbers as input and returns the sum and product of all the numbers in the list.\n    The function should return a tuple containing the sum and product.\n    \n    For example, if the input list is [1, 2, 3, 4], the function should return (10, 24).\n    \n    You can assume that the input list will only contain numbers.\n    \n    You can use the built-in sum() and product() functions to solve this problem.\n    \n    You can use the built-in isinstance()\"\"\"\n    sum_val = 0\n    product = 1\n    for i in lst:\n        if isinstance(i, int) or isinstance(i, float):\n            sum_val += i\n            product *= i\n    return sum_val, product"], [0.9262022972106934, "def find_sum_and_product(lst):\n    \"\"\"Return the sum and product of a given list of numbers.\"\"\"\n    \n    # Initialize sum and product\n    sum_res = 0\n    product_res = 1\n\n    # If the list is empty, return 0 for sum and None for product\n    if not lst:\n        return sum_res, None\n    \n    for x in lst:\n        # Check if the current element is numeric (either integer or float)\n        if isinstance(x, (int, float)):\n            sum_res += x\n            product_res *= x\n        else:\n            raise ValueError(\"List contains non-numeric values.\")\n    \n    return sum_res, product_res"], [0.9184970259666443, "def even_squared_odd_cubed_product(numbers):\n    \"\"\"\n    Given a list of integers, return a tuple containing the sum of the squares of the even numbers and the product of the cubes of the odd numbers.\n    \"\"\"\n    sum_of_squares = 0\n    product_of_cubes = 1\n\n    for num in numbers:\n        if num % 2 == 0:\n            sum_of_squares += num * num\n        else:\n            product_of_cubes *= num * num * num\n\n    return (sum_of_squares, product_of_cubes)"]]}
{"task_id": "HumanEval/9", "problem": [[0.9513814449310303, "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From the given list of integers, generate a list of rolling maximum element until that moment in the sequence.\n    \"\"\"\n    max_num = numbers[0]\n    result = [max_num]\n\n    for i in numbers[1:]:\n        if i > max_num:\n            max_num = i\n        result.append(max_num)\n\n    return result"], [0.9301278591156006, "def rolling_max(numbers1: List[int], numbers2: List[int]) -> Tuple[List[int], List[int]]:\n    \"\"\"From two given lists of integers, generate a list of rolling maximum element found until given moment\n       in the sequence and store them as maximum of each list.\n    \"\"\"\n    if not numbers1 or not numbers2:\n        return ([], [])\n\n    max1 = numbers1[0]\n    max2 = numbers2[0]\n\n    rolling_max1 = [max1]\n    rolling_max2 = [max2]\n\n    for num in numbers1[1:]:\n        if num > max1:\n            max1 = num\n        rolling_max1.append(max1)\n\n    for num in numbers2[1:]:\n        if num > max2:\n            max2 = num\n        rolling_max2.append(max2)\n\n    return (rolling_max1, rolling_max2)"], [0.9276763200759888, "def rolling_max(numbers1: List[int], numbers2: List[int]) -> Tuple[List[int], List[int]]:\n    \"\"\"From two given lists of integers, generate a list of rolling maximum element found until given moment \n    in the sequence and store them as maximum of each list.\n    \"\"\"\n    if not numbers1 or not numbers2:\n        return ([], [])\n\n    max1 = numbers1[0]\n    max2 = numbers2[0]\n    \n    rolling_max1 = [max1]\n    rolling_max2 = [max2]\n    \n    for num in numbers1[1:]:\n        if num > max1:\n            max1 = num\n        rolling_max1.append(max1)\n        \n    for num in numbers2[1:]:\n        if num > max2:\n            max2 = num\n        rolling_max2.append(max2)\n        \n    return (rolling_max1, rolling_max2)"], [0.9228312373161316, "def rolling_max(int_list):\n    \"\"\"\n    Given a list of integers, return a list where each element is the maximum value from the original list up to that index.\n    \n    >>> rolling_max([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> rolling_max([10, 5, 2, 7, 8, 7])\n    [10, 10, 10, 7, 8, 8]\n    >>> rolling_max([1, 5, \"\"\"\n    if any(i < 0 for i in int_list): \n        # Check if any negative elements, return empty list if found\n        return []\n    else:\n        max_list = []\n        max_val = int_list[0]  # Initialize with first value of list\n        for i in int_list:\n            if i > max_val:  \n                max_val = i \n            max_list.append(max_val)\n        return max_list"], [0.9225132465362549, "def rolling_max_min(numbers: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate a unique list of rolling max and min elements from a given list of positive integers. The list should be formatted as tuples: (max, min), and have no repeated tuples or negative integers.\n    \"\"\"\n    max_min_list = []\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            max_val, min_val = max(numbers[i:j+1]), min(numbers[i:j+1])\n            current_tuple = (max_val, min_val)\n            if current_tuple not in max_min_list:\n                max_min_list.append(current_tuple)\n    return max_min_list"], [0.9123498201370239, "def rolling_max_min(numbers: List[Union[int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    From a given numeral array or erroneous code, create a list of rolling maximum and minimum numbers observed \n    till a particular point in the array, represented as a tuple (max, min), ensuring there are no repeated \n    (max, min) tuples in the final list. The function should handle erroneous code inputs.\n    \"\"\"\n    numbers = [n for n in numbers if isinstance(n, int)]  # Filter out non-int values\n    if not numbers:\n        return []\n\n    rolling_min_max = [(numbers[0], numbers[0])]\n    for num in numbers[1:]:\n        current_max = max(num, rolling_min_max[-1][0])\n        current_min = min(num, rolling_min_max[-1][1])\n        if (current_max, current_min) != rolling_min_max[-1]:\n            rolling_min_max.append((current_max, current_min))\n            \n    return rolling_min_max"], [0.9102543592453003, "def rolling_max_min(numbers: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Find the maximum and minimum of all subarrays of size k.\n    :param numbers: a list of integers\n    :return: a list of tuples where the first element is the maximum value and the second element is the minimum value\n    :example:\n    >>> rolling_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [(3, 1), (4, 2), (5, 3), (6, 4), (7, 5\"\"\"\n    if len(numbers) == 0:\n        return []\n    numbers = list(filter(lambda x: x >= 0, numbers))\n    if len(numbers) == 0:\n        return []\n    min_val = numbers[0]\n    max_val = numbers[0]\n    old_max, old_min = max_val, min_val\n    ans = [(max_val, min_val)]\n    for i in range(1, len(numbers)):\n        if numbers[i] < min_val:\n            min_val = numbers[i]\n        if numbers[i] > max_val:\n            max_val = numbers[i]\n        if old_min != min_val or old_max != max_val:\n            ans.append((max_val, min_val))\n            old_max, old_min = max_val, min_val\n    return ans"], [0.9100526571273804, "def rolling_max_min(numbers: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Given a list of numbers, find the maximum and minimum of all the contiguous subarrays of size k.\n    \n    Args:\n        numbers (List[int]): List of integers\n    \n    Returns:\n        List[Tuple[int, int]]: List of tuples of maximum and minimum of all the contiguous subarrays of size k\n    \"\"\"\n    final_sequence = []\n    if numbers:\n        # removing all negative values from the list\n        numbers = [n for n in numbers if n >= 0]\n        max_val = min_val = numbers[0]\n        final_sequence.append((max_val, min_val))\n        for n in numbers[1:]:\n            if n > max_val and n > min_val:\n                max_val = n\n                final_sequence.append((max_val, min_val))\n            elif n < min_val and n < max_val:\n                min_val = n\n                final_sequence.append((max_val, min_val))\n            elif n < max_val and n > min_val:\n                min_val = n\n                final_sequence.append((max_val, min_val)) \n    return final_sequence"]]}
{"task_id": "HumanEval/10", "problem": [[0.9741148352622986, "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            reversed_prefix = string[:i][::-1]\n            return string + reversed_prefix\n\n    return string + string[::-1]"], [0.9517307281494141, "def make_palindrome(string: str) -> str:\n    \"\"\" Craft the minimalist plausible palindrome originating with the input string \"\"\"\n    # The task requires to find the largest suffix that is a palindrome.\n    # We iterate from the end to the beginning until we find a palindrome prefix.\n    # Then, complement the rest of the string (its non-palindrome prefix) at the end.\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            non_palindrome_prefix = string[:i]\n            break\n    # To make the string palindrome, concatenate it with the reversed non-palindrome prefix\n    return string + non_palindrome_prefix[::-1]"], [0.9508886337280273, "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string, ignoring case and non-alphanumeric characters.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    palindromic_postfix = longest_palindromic_postfix(string)\n    prefix = string[0:len(string) - len(palindromic_postfix)]\n    return string + prefix[::-1]"], [0.9501194357872009, "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string, ignoring case and non-alphanumeric characters.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix,\n    \"\"\"\n    palindromic_postfix = longest_palindromic_postfix(string)\n    prefix = string[0:len(string) - len(palindromic_postfix)]\n    return string + prefix[::-1]"], [0.9474129676818848, "def make_palindrome(string: str) -> str:\n    \"\"\" Generate the smallest possible palindrome starting with the input string \"\"\"\n    # Implement string manipulation techniques to find longest palindromic suffix\n    longest_palindrome = string[::-1] \n    return string + longest_palindrome"], [0.9468713998794556, "def make_palindrome(string: str) -> str:\n    \"\"\" Construct the shortest palindrome starting with a particular string \"\"\"\n    length = len(string)\n    for i in range(length):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"], [0.9464255571365356, "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string, considering spaces between words, and ignoring case, \n    and ignoring non-alphanumeric characters.\n    \n    Algorithm idea is simple:\n    - Find the longest suffix of the supplied string that is a palindrome.\n    - Append to the end of the string the reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    filtered_string = ''.join([char for char in string.lower() if char.isalnum()])\n    string_length = len(filtered_string)\n    \n    if is_palindrome(string):\n        return string\n    \n    for postfix_start in range(string_length):\n        postfix = filtered_string[postfix_start:]\n        if is_palindrome(postfix):\n            non_palindronic_part = filtered_string[:postfix_start]\n            return string + non_palindronic_part[::-1]"], [0.94640052318573, "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Given a string, return the longest palindrome that can be formed by adding characters to the end of it.\n    For example:\n\n    For 'race', the result could be 'racecar', 'acracecar', or 'eracracecar'.\n    For 'abba', the result could be 'abba' or 'babba'.\n    \"\"\"\n    palindrome_substr = longest_palindromic_postfix(string)\n\n    prefix = string[: len(string) - len(palindrome_substr)]\n    palindrome = string + prefix[::-1]  # reverse prefix and append to the original string\n\n    return palindrome"], [0.9450199604034424, "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Make a string a palindrome by adding characters to the end.\n\n    >>> make_palindrome('bob')\n    'bob'\n    >>> make_palindrome('ana')\n    'ana'\n    >>> make_palindrome('abba')\n    'abba'\n    >>> make_palindrome('ab')\n    'ab'\n    >>> make_palindrome('abab')\n    'abab'\n    >>> make_palindrome('ba')\n    'ba'\n    >>> make_palindrome('baa')\n    'baa'\n    >>> make_palindrome('aaa')\n    'aaa'\n    \"\"\"\n    palindromic_postfix = find_palindromic_postfix(string.lower())\n    prefix = string[:string.lower().rfind(palindromic_postfix)]\n    return string + prefix[::-1]"], [0.943340539932251, "def make_palindrome(string: str) -> str:\n    \"\"\" Architect the briefest palindrome initiating with a particular string \"\"\"\n    for i in range(len(string)):\n        tmp = string[i:]\n        if is_palindrome(tmp):\n            return string + string[:i][::-1]\n    return string + string[::-1]"]]}
{"task_id": "HumanEval/11", "problem": [[0.9501937031745911, "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input: two individual string parameters a and b, constructed exclusively from binary digits i.e. 1s and 0s.\n    Conduct a binary exclusive OR operation on the specified inputs and yield the result as a string output.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # convert the binary strings to integers\n    a = int(a, 2)\n    b = int(b, 2)\n    \n    # Conduct a binary exclusive OR operation on the inputs\n    result = a ^ b\n    \n    # Format the result as a binary string and return it\n    return format(result, 'b')"], [0.9416028261184692, "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform XOR operation on two binary strings a and b.\n    \n    Args:\n        a (str): First binary string.\n        b (str): Second binary string.\n    \n    Returns:\n        str: Result of XOR operation on a and b.\n    \"\"\"\n    \n    # Convert the strings a and b to binary integers using int function and perform bitwise XOR operation (^)\n    xor_result = int(a, 2) ^ int(b, 2)\n    \n    # Format the result to binary string and remove the '0b' part it starts with\n    xor_result_str = format(xor_result, 'b').zfill(len(a))\n\n    return xor_result_str"], [0.9396342635154724, "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform XOR operation on two binary strings.\n    \n    Args:\n        a (str): First binary string.\n        b (str): Second binary string.\n        \n    Returns:\n        str: Result of XOR operation as a binary string.\n    \"\"\"\n    # Convert each binary string to an integer\n    a_int = int(a, 2)\n    b_int = int(b, 2)\n    \n    # Perform XOR operation\n    xor_result = a_int ^ b_int\n    \n    # Return as binary string\n    return format(xor_result, 'b')  # 'b' specifies binary format"], [0.9360447525978088, "def string_xor_alternating_subseq(a: str, b: str) -> str:\n    \"\"\"\n    Given two strings a and b, return a string that is the XOR of the alternating subsequences of a and b.\n    The XOR of two strings is the string that contains the XOR of the corresponding characters of a and b.\n    The alternating subsequence of a string s is the string formed by all the characters of s, but in alternating order.\n    For example, the alternating subsequence of abcde is abdce.\n    \n    Example 1:\n    Input: a = \"10101\", b = \"00100\"\n    Output: \"0000\"\"\"\n    xor_string = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    result = \"\"\n    for ch in xor_string:\n        if not result:\n            result += ch\n        elif result[-1] != ch:\n            result += ch\n    return result"], [0.9347450137138367, "def xor_strings(s1, s2):\n    \"\"\"\n    Given two strings s1 and s2, return a new string that is formed by\n    bitwise XOR-ing the character codes of the two strings.\n    \n    >>> xor_strings(\"1010101010101011\", \"1010101010101011\")\n    '0000000000000000'\n    >>> xor_strings(\"1010101010101011\", \"10101\"\"\"\n    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(s1, s2))"], [0.9342563152313232, "def xor_binary_strings(a, b):\n    \"\"\"\n    Given two binary strings, return their XORed value.\n    \n    Args:\n        a (str): A binary string.\n        b (str): Another binary string.\n    \n    Returns:\n        str: The XORed value of a and b.\n    \"\"\"\n    return ''.join('0' if a[i] == b[i] else '1' for i in range(len(a)))"], [0.9333539009094238, "def string_xor(a: str, b: str) -> str:\n\"\"\"\n    XOR operation on two binary strings.\n\n    Args:\n        a (str): First binary string.\n        b (str): Second binary string.\n\n    Returns:\n        str: Result of XOR operation on a and b.\n\n    Raises:\n        ValueError: If the strings are not comprised only of 1s and 0s.\n        ValueError: If the strings are of different lengths.\n        ValueError: If the strings are longer than 10^3 characters.\n    \"\"\"\n\n    # First we check if the strings are not exceeding length 10^3, and if they do, we raise an exception\n    if len(a) > 10**3 or len(b) > 10**3:\n        raise ValueError(\"Input strings length should not exceed 10^3 characters.\") \n\n    # Then we check if the strings are comprised only of 1s and 0s. If not, we raise an exception\n    if not set(a).issubset(set('01')) or not set(b).issubset(set('01')):\n        raise ValueError(\"Input should only contain binary digits (i.e., 1s and 0s).\")\n\n    # If the strings are of different lengths, we pad the shorter one with 0s at the beginning\n    if len(a) != len(b):\n        if len(a) < len(b):\n            a = a.zfill(len(b))\n        else:\n            b = b.zfill(len(a))\n\n    # Then we conduct the XOR operation\n    result = ''\n    for i in range(len(a)):\n        # XOR operation\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n\n    return result"], [0.9300698041915894, "def xor_strings(s, t):\n    \"\"\"\n    Return a string containing the XOR of s and t.\n    \n    >>> xor_strings('1010101', '0101010')\n    '1111111'\n    \"\"\"\n    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(s, t))"], [0.9300065040588379, "def xor_binary_numbers(a, b):\n    \"\"\"\n    XOR two binary numbers.\n    \n    Args:\n        a (str): First binary number.\n        b (str): Second binary number.\n    \n    Returns:\n        list: XOR result as a list of bits.\n    \"\"\"\n    result = []\n    for i in range(len(a)):\n        bit_a = int(a[i])\n        bit_b = int(b[i])\n        xor_result = bit_a ^ bit_b\n        result.append(str(xor_result))\n    return result"]]}
{"task_id": "HumanEval/12", "problem": [[0.9708355069160461, "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Return the longest string in a list. If more than one string has the same \n    length, return the first one. If the list is empty, return None.\n\n    Examples:\n\n    >>> longest([])\n    >>>\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings: return None\n    return max(strings, key=len)"], [0.9638652801513672, "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Return the longest string in a list of strings.\n    If there are multiple strings of the same length, return the first one.\n    If the list is empty, return None.\n    \"\"\"\n    if not strings:\n        return None\n    else:\n        max_length = len(max(strings, key=len))\n        for string in strings:\n            if len(string) == max_length:\n                return string"], [0.9634549617767334, "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Return the longest string in a list of strings.\n    >>> longest([\"a\", \"b\", \"c\"])\n    'c'\n    >>> longest([\"a\", \"b\", \"c\", \"d\"])\n    'd'\n    >>> longest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n    'e'\n    >>> longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n    'f'\n    >>> longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n\"\"\"\n    if not strings:\n        return None\n    else:\n        return max(strings, key=len)"], [0.9517096281051636, "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Return the longest string in a list of strings.\n    \n    >>> longest([\"foo\", \"bar\", \"foobar\"])\n    'foobar'\n    \n    >>> longest([\"foo\", \"bar\"])\n    'foo'\n    \n    >>> longest([\"foo\"])\n    'foo'\n    \n    >>> longest([])\n    \"\"\"\n    \n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    \n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n            \n    return longest_string"], [0.9254779815673828, "def longest(ss: List[str]) -> str:\n    \"\"\"\n    Find the longest string in a list of strings.\n    >>> longest([\"a\", \"bc\", \"def\"])\n    'def'\n    >>> longest([\"a\", \"bc\", \"def\", \"ghij\"])\n    'ghij'\n    \"\"\"\n    if len(ss[0]) >= len(ss[1]):\n        return ss[0]\n    else:\n        return ss[1]"], [0.9244335889816284, "def longest(strings: List[str]) -> Optional[Tuple[str, int]]:\n    \"\"\"\n    Find the longest string in a list of strings.\n    \n    Args:\n        strings: A list of strings.\n    \n    Returns:\n        The longest string in the list, and its length.\n    \"\"\"\n    max_length = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_length:\n            longst_str = s\n        max_length = len(s)\n    return longest_str, max_length if longest_str else None"], [0.9243162870407104, "def find_longest_string(strings: List[str]) -> str:\n    \"\"\"\n    Find the longest string in a list of strings.\n    \n    Args:\n        strings (List[str]): A list of strings.\n    \n    Returns:\n        str: The longest string in the list.\n    \"\"\"\n    if not strings: \n        return None\n    return max(strings, key=len)"], [0.9235880374908447, "def longest(strings: Optional[List[str]] = None) -> Optional[str]:\n    \"\"\"\n    Find the longest string in a list of strings.\n    \n    Args:\n        strings (list): A list of strings.\n        \n    Returns:\n        str: The longest string in the list.\n        \n    Raises:\n        NotAListError: If the input is not a list.\n    \"\"\"\n    if strings is None:\n        return None\n\n    if not isinstance(strings, list):\n        raise NotAListError('Input is not a list')\n\n    max_length = -1\n    longest_str = None\n\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_str = string\n            \n    return longest_str"]]}
{"task_id": "HumanEval/13", "problem": [[0.961189866065979, "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of a and b.\n    \n    >>> greatest_common_divisor(12, 18)\n    6\n    >>> greatest_common_divisor(12, 12)\n    12\n    >>> greatest_common_divisor(12, 11)\n    1\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"], [0.9611846208572388, "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of a and b.\n    \n    >>> greatest_common_divisor(12, 18)\n    6\n    >>> greatest_common_divisor(12, 12)\n    12\n    >>> greatest_common_divisor(12, 11)\n    1\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"], [0.9566066265106201, "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" \n    Return the highest common factor of the two integers a and b.\n    It uses Euclidean Algorithm to find the GCD.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"], [0.9490700364112854, "def greatest_common_divisor(a, b):\n    \"\"\"\n    Find the greatest common divisor of two numbers.\n    \n    >>> greatest_common_divisor(12, 18)\n    6\n    >>> greatest_common_divisor(12, 12)\n    12\n    >>> greatest_common_divisor(12, 11)\n    1\n    \"\"\"\n    if a < b:\n        a, b = b, a\n\n    while b > 0:\n        a, b = b, a % b\n\n    return a"], [0.9478701949119568, "def greatest_common_divisor(a, b):\n    \"\"\"\n    Return the greatest common divisor of a and b.\n    \n    >>> greatest_common_divisor(12, 18)\n    6\n    >>> greatest_common_divisor(18, 12)\n    6\n    >>> greatest_common_divisor(12, 12)\n    12\n    >>> greatest_common_divisor(12, 11)\n    1\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"], [0.9476507902145386, "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the highest common divisor of the two given non-negative integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(0, 5)\n    5\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative\")\n    \n    # Optimization: Return early when one of the inputs is zero  \n    if a==0: \n        return b \n    if b==0: \n        return a \n\n    # Use Euclidean Algorithm to return the gcd\n    while a % b != 0:\n        temp = a\n        a = b\n        b = temp % b\n    return b"], [0.9441948533058167, "def greatest_common_divisor(a, b):\n    \"\"\"\n    Return the greatest common divisor of a and b.\n    \n    >>> greatest_common_divisor(12, 18)\n    6\n    >>> greatest_common_divisor(18, 12)\n    6\n    >>> greatest_common_divisor(12, 12)\n    12\n    >>> greatest_common_divisor(12, 11)\n    1\n    \"\"\"\n    while b != 0:\n        c = a % b\n        a = b\n        b = c\n    return a"], [0.9436636567115784, "def greatest_common_divisor(a, b):\n    \"\"\"\n    Return the greatest common divisor of a and b.\n    \n    >>> greatest_common_divisor(12, 18)\n    6\n    >>> greatest_common_divisor(12, 12)\n    12\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"], [0.94286048412323, "def highest_common_factor(a: int, b: int) -> int:\n    \"\"\"\n    Return a highest common factor of two non-negative integers a and b\n    >>> highest_common_factor(3, 5)\n    1\n    >>> highest_common_factor(25, 15)\n    5\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative!\")\n\n    # Check boundary conditions\n    if a == 0 and b > 0:\n        return b\n    if b == 0 and a > 0:\n        return a\n\n    while b != 0:\n        a, b = b, a % b\n    return a"], [0.9419927000999451, "def highest_common_factor(a: int, b: int) -> int:\n    \"\"\" Return a highest common factor of two non-negative integers a and b\n    >>> highest_common_factor(3, 5)\n    1\n    >>> highest_common_factor(25, 15)\n    5\n    \"\"\"\n\n    # Validate the input parameters\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Input parameters must be integers\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Input parameters must be non-negative\")\n\n    # GCD computation using Euclid's Algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a"]]}
{"task_id": "HumanEval/14", "problem": [[0.9257760047912598, "def all_prefixes_with_lengths(string: str) -> List[Tuple[str, int]]:\n    \"\"\" \n    Function that returns a list of tuples which include all prefixes of an input string from smallest to largest and their corresponding lengths\n    E.g. all_prefixes_with_lengths('abc') should return [('a', 1), ('ab', 2), ('abc', 3)]\n    \"\"\"\n    return [(string[:i], i) for i in range(1, len(string)+1)]"], [0.9083843231201172, "def all_substrings(input_string):\n    \"\"\"\n    Return a list of all substrings of the given string.\n    This function should return an empty list if the string is empty.\n    For example, the substrings of \"abc\" are:\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    #return []\n    #return [input_string[i: j] for i in range(len(input_string)) for j in range(i + 1, len(input_string) + 1)]\"\"\"\n    length = len(input_string)\n    return [input_string[i: j] for i in range(length) for j in range(i + 1, length + 1)]"], [0.9079598188400269, "def all_substrings(string):\n    \"\"\"Return a set of all substrings of string.\n    \n    Every substring is a contiguous block of characters in string,\n    including the complete string itself.\n    \n    >>> sorted(all_substrings(\"abc\"))\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n    length = len(string)\n    return [string[i: j] for i in range(length) for j in range(i + 1, length + 1)]"], [0.9079558849334717, "def all_substrings(string):\n    \"\"\"Return a set of all substrings of string.\n    \n    Every substring is a contiguous block of characters in string,\n    including the complete string itself.\n    \n    >>> sorted(all_substrings(\"abc\"))\n    ['', 'a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n    length = len(string)\n    return [string[i: j] for i in range(length) for j in range(i + 1, length + 1)]"], [0.9014106392860413, "def substring_dictionary(string):\n    \"\"\"\n    Given a string, return a list of all of its substrings.\n    The returned list should be ordered lexicographically,\n    using Python's built-in ordering for strings.\n    You may assume that the input string does not contain\n    any duplicate characters.\n    \n    >>> substring_dictionary('abcd')\n    ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']\n    \"\"\"\n    substrings = set()\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.add(string[i:j])\n    return sorted(list(substrings))"], [0.9001854658126831, "def all_substrings(string):\n    \"\"\"\n    Return a list of all substrings of string.\n    \n    For example, the substrings of \"apple\" are:\n    \n    [\"a\", \"ap\", \"app\", \"Appl\", \"Appl\", \"apple\"]\n    \n    \"\"\"\n    \n    # HINT: You might want to use a nested loop.\n    # HINT2: Don't forget to return your result!\n    \n    \"\"\"\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.append(string[i:j])\n    return substrings"]]}
{"task_id": "HumanEval/15", "problem": [[0.9051482081413269, "def print_sequence(n):\n    \"\"\"\n    Print a sequence of numbers from 0 to n in ascending order.\n    \n    Args:\n        n (int): The last number in the sequence.\n    \"\"\"\n    # Base cases\n    if n < 0:\n        print(\"Error: Negative input.\")\n        return\n    elif n == 0:\n        print(0)\n        return\n\n    # Recursive case\n    else:\n        print_sequence(n - 1)  # recursive call\n        print(n)"], [0.9051434993743896, "def print_sequence(n):\n    \"\"\"\n    Print a sequence of numbers from 0 to n in ascending order.\n    \n    Args:\n        n (int): The last number in the sequence.\n    \"\"\"\n    # Base cases\n    if n < 0:\n        print(\"Error: Negative input.\")\n        return\n    elif n == 0:\n        print(0)\n        return\n\n    # Recursive case\n    else:\n        print_sequence(n - 1)  # recursive call\n        print(n)"], [0.9029834866523743, "def generate_sequence(n):\n    \"\"\"\n    Generate a sequence of numbers from 0 to n.\n    \n    Args:\n        n (int): The last number in the sequence.\n    \n    Returns:\n        list: A list of numbers from 0 to n.\n    \"\"\"\n    sequence = []\n    for i in range(0, n+1):\n        sequence.append(i)\n    return sequence"], [0.9029628038406372, "def generate_sequence(n):\n    \"\"\"\n    Generate a sequence of numbers from 0 to n.\n    \n    Args:\n        n (int): The last number in the sequence.\n    \n    Returns:\n        list: A list of numbers from 0 to n.\n    \"\"\"\n    sequence = []\n    for i in range(0, n+1):\n        sequence.append(i)\n    return sequence"], [0.9026172161102295, "def generate_sequence_string(n):\n    \"\"\"\n    Generate a string of numbers from 1 to n, where:\n    - numbers divisible by 3 are replaced by \"bizz\"\n    - numbers divisible by 5 are replaced by \"fuzz\"\n    - numbers divisible by both 3 and 5 are replaced by \"bizzfuzz\"\n    - all other numbers are converted to strings\n    \n    Args:\n        n (int): the number to generate the sequence string for\n    \n    Returns:\n        str: the sequence string\n    \"\"\"\n    if n % 3 == 0 and n % 5 == 0:\n        return \"bizzfuzz\"\n    elif n % 3 == 0:\n        return \"bizz\"\n    elif n % 5 == 0:\n        return \"fuzz\"\n    else:\n        return str(n)"], [0.8963890671730042, "def decrementing_sequence(n):\n    \"\"\"\n    Print a decrementing sequence of numbers from n to 0.\n    \n    >>> decrementing_sequence(5)\n    5\n    4\n    3\n    2\n    1\n    0\n    \"\"\"\n    if n >= 0:\n        print(n)\n        decrementing_sequence(n-1)"], [0.8950433135032654, "def print_sequence(n):\n    \"\"\"\n    Print a sequence of numbers from n to 1.\n    \n    Args:\n        n (int): The number to start the sequence from.\n    \"\"\"\n    for i in range(n, 0, -1):\n        print(i)"]]}
{"task_id": "HumanEval/16", "problem": [[0.9318045377731323, "def count_distinct_characters(string):\n    \"\"\"\n    Count the number of distinct characters in a string.\n    \n    Args:\n        string (str): The input string.\n    \n    Returns:\n        int: The number of distinct characters in the string.\n    \"\"\"\n    distinct_characters = set(string)\n    return len(distinct_characters)"], [0.9237939119338989, "def count_distinct_lowercase_letters(string):\n    \"\"\"\n    Count the number of distinct lowercase letters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of distinct lowercase letters.\n    \"\"\"\n    lowercase_letters = set()\n\n    for char in string:\n        if char.islower():\n            lowercase_letters.add(char)\n\n    return len(lowercase_letters)"], [0.918858528137207, "def distinct_characters_count(string):\n    \"\"\"\n    Returns the number of distinct characters in a string.\n    \n    Args:\n        string (str): The string to count distinct characters in.\n        \n    Returns:\n        int: The number of distinct characters in the string.\n    \"\"\"\n    # convert the string to a set\n    distinct_chars = set(string)\n    \n    # return the number of distinct characters\n    return len(distinct_chars)"], [0.9173547029495239, "def count_distinct_lowercase_letters(string):\n    \"\"\"\n    Count the number of distinct lowercase letters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of distinct lowercase letters in the string.\n    \"\"\"\n    # Create a set to store distinct lowercase letters\n    distinct_letters = set()\n\n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is a lowercase letter\n        if char.islower():\n            # Add the lowercase letter to the set\n            distinct_letters.add(char)\n\n    # Return the number of distinct lowercase letters\n    return len(distinct_letters)"], [0.9170430302619934, "def countDistinct(string): \n    \"\"\"\n    Count distinct characters in a string\n    :param string: string\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(len(string)): \n        count += (i == 0 or string[i - 1] != string[i]) \n    return count"], [0.9164902567863464, "def count_distinct_words(string):\n    \"\"\"\n    Count the number of distinct words in a string.\n\n    Args:\n        string (str): The string to count the words in.\n\n    Returns:\n        int: The number of distinct words in the string.\n    \"\"\"\n    words = set()\n    current_word = \"\"\n    lowercase_string = string.lower()\n    \n    for c in lowercase_string:\n        if c.isalpha():\n            current_word += c\n        elif current_word:\n            words.add(current_word)\n            current_word = \"\"\n\n    if current_word:\n        words.add(current_word)\n\n    return len(words)"]]}
{"task_id": "HumanEval/17", "problem": [[0.9424492120742798, "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string of music into a list of beats.\n    \n    Args:\n        music_string (str): A string of music.\n    \n    Returns:\n        List[int]: A list of beats.\n    \"\"\"\n    notes_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    beats = [notes_map[note] for note in notes]\n    return beats"], [0.9367784261703491, "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string of music into a list of beat durations.\n    \n    Args:\n        music_string (str): A string of music.\n    \n    Returns:\n        List[int]: A list of beat durations.\n    \"\"\"\n    notes = music_string.split(' ')\n    beat_duration = []\n    for note in notes:\n        if note == 'o':\n            beat_duration.append(4)\n        elif note == 'o|':\n            beat_duration.append(2)\n        elif note == '.|':\n            beat_duration.append(1)\n    return beat_duration"]]}
{"task_id": "HumanEval/18", "problem": [[0.9733436107635498, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Determine the frequency of a given substring in the initial string. Include overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"], [0.972786545753479, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Determine the frequency of a given substring in the initial string. Include overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"], [0.9723426699638367, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Return the number of times substring appears in string.\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('aaaa', 'a')\n    4\n    >>> how_many_times('aaaa', 'b')\n    0\n    >>> how_many_times('aaaa', '')\n    5\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('aaaa', 'aaa')\n    1\n    >>> how_many_times('aaaa', 'aaaa')\n    \"\"\"\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count"], [0.9710241556167603, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Return the number of times substring appears in string.\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('aaaa', 'a')\n    4\n    >>> how_many_times('aaaa', 'b')\n    0\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count"], [0.9710121154785156, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Return the number of times substring appears in string.\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('aaaa', 'a')\n    4\n    >>> how_many_times('aaaa', 'b')\n    0\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count"], [0.97076416015625, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Return the number of times substring appears in string.\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('aaaa', 'a')\n    4\n    >>> how_many_times('aaaa', 'b')\n    0\n    \"\"\"\n    start = 0\n    count = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count"], [0.9702584743499756, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Return the number of times substring appears in string.\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('aaaa', 'a')\n    4\n    >>> how_many_times('aaaa', 'b')\n    0\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"], [0.970252513885498, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Return the number of times substring appears in string.\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('aaaa', 'a')\n    4\n    >>> how_many_times('aaaa', 'b')\n    0\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"], [0.9702449440956116, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Return the number of times substring appears in string.\n    >>> how_many_times('aaaa', 'aa')\n    3\n    >>> how_many_times('aaaa', 'a')\n    4\n    >>> how_many_times('aaaa', 'b')\n    0\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"], [0.9678515791893005, "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Return the number of times that the string `substring` appears\n    in the string `string`.\n    >>> how_many_times('abcabc', 'abc')\n    2\n    >>> how_many_times('abcabc', 'b')\n    1\n    >>> how_many_times('abcabc', 'c')\n    2\n    >>> how_many_times('abcabc', 'd')\n    0\n    \"\"\"\n    len_sub = len(substring)\n    count = 0\n    for i in range(len(string) - len_sub + 1):\n        if string[i:i+len_sub] == substring:\n            count += 1\n    return count"]]}
{"task_id": "HumanEval/19", "problem": [[0.8970001339912415, "def sort_numbers(numbers):\n    \"\"\"Sort the given numbers in ascending order\"\"\"\n    numbers.sort()\n    print(numbers)"], [0.8915503025054932, "def by_length(arr):\n    \"\"\"\n    Return an array of words of numbers in descending order of length.\n    \n    >>> by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    ['Three', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One']\n    \"\"\"\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    \n    # filter for elements of arr that are in the range 1 to 9, then sort and reverse \n    valid_nums = sorted([n for n in arr if 1 <= n <= 9], reverse=True)  \n\n    # convert to words using num2words dictionary and return\n    return [num2words[n] for n in valid_nums]"], [0.8900782465934753, "def sort_unique_nums(lst):\n    \"\"\"\n    Sort the unique numbers in a list.\n    Args:\n       lst(list): list of numbers\n    Returns:\n       list of numbers: sorted numbers without duplicates\n    \"\"\"\n    result = []\n    for num in lst:\n        try:\n            if 0 <= int(num) <= 10 and num not in result: \n                result.append(num)\n        except ValueError:\n            continue\n    return sorted(result)"], [0.890007734298706, "def arrange_numbers(arr):\n    \"\"\"\n    \"\"\"\n    decimalArr = []\n    for num in arr:\n        decimalArr.append(convert_num(num))\n    sortedDecimalArr = my_sort(decimalArr)\n    return sortedDecimalArr"]]}
{"task_id": "HumanEval/20", "problem": [[0.9463120698928833, "def find_closest_elements(numbers: List[float]) -> Tuple[float, float, float]:\n    \"\"\"\n    In a given list of numbers (with a minimum length of two), identify and return the\n    two elements with the smallest difference between them, with the lower value first,\n    then the higher value, plus the actual difference.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('Invalid input! The input list must include at least two numbers.')\n    \n    numbers.sort()\n    \n    # Start with the first pair of values in the list.\n    smallest_diff = numbers[1] - numbers[0]\n    best_pair = (numbers[0], numbers[1], smallest_diff)\n    \n    for i in range(1, len(numbers) - 1):\n        # Compute the difference between the current pair of elements.\n        diff = numbers[i+1] - numbers[i]\n        # Track the pair with the smallest difference.\n        if diff < smallest_diff:\n            smallest_diff = diff\n            best_pair = (numbers[i], numbers[i+1], smallest_diff)\n    \n    return best_pair"], [0.9437741041183472, "def find_furthest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Extract two float numbers from the given array (at minimum contains two) that possess the maximum numerical difference. Remember to present them in ascending order (minor, major).\n    >>> find_furthest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (1.0, 5.0)\n    >>> find_furthest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (1.0, 5.0)\n    \"\"\"\n    return min(numbers), max(numbers)"], [0.9421256184577942, "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\"\"\"\n    Find the closest pair of numbers in a list.\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple containing the closest pair of numbers.\n\n    Raises:\n        ValueError: If the list contains less than two numbers.\n\n    Example:\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0])\n        (3.0, 4.0)\n    \"\"\"\n\n    # Ensure the length of the list is at least 2\n    if len(numbers) < 2:\n        raise ValueError(\"The provided list must contain at least two numbers.\")\n\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Initialize minimum difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = (None, None)\n\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i+1] - sorted_numbers[i]\n\n        # Update minimum difference and closest pair if necessary\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n\n    return closest_pair"], [0.9413973093032837, "def find_nearest_elements_with_indices(numbers: List[float]) -> Tuple[float, int, float, int]:\n    \"\"\"\n    Find the pair of elements in a list that have the smallest absolute difference between them.\n    Return the pair of elements and their indices in a tuple.\n    \n    Args:\n        numbers (List[float]): A list of numbers.\n    \n    Returns:\n        Tuple[float, int, float, int]: A tuple containing the pair of elements and their indices.\n    \n    Example:\n        >>> find_nearest_elements_with_indices([1, 2, 3, 4, 5])\n        (1.0, 0, 2.0\"\"\"\n    smallest_difference = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if difference < smallest_difference:\n                smallest_difference = difference\n                smallest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]), i, j) if numbers[i] < numbers[j] else (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]), j, i)\n    return smallest_pair"], [0.9368412494659424, "def find_nearest_elements_with_indices(numbers: List[float]) -> Tuple[float, int, float, int]:\n    \"\"\"\n    Find the two closest non-repetitive numbers in a list of numbers and their indices.\n    \n    Args:\n        numbers (List[float]): A list of numbers.\n        \n    Returns:\n        Tuple[float, int, float, int]: A tuple containing the two closest non-repetitive numbers and their indices.\n    \"\"\"\n    # Pair the numbers with their original indices\n    numbers_with_indices = [(num, idx) for idx, num in enumerate(numbers)]\n    # Sort the numbers, but keep the original indices\n    numbers_with_indices.sort()\n    # Initialize variables for the two closest non-repetitive numbers and their distance\n    num1, idx1, num2, idx2, min_distance = None, -1, None, -1, float('inf')\n    for i in range(1, len(numbers_with_indices)):\n        # If current pair of consecutive numbers have different values\n        if numbers_with_indices[i][0] != numbers_with_indices[i-1][0]:\n            distance = numbers_with_indices[i][0] - numbers_with_indices[i-1][0]\n            if distance < min_distance:\n                num1, idx1 = numbers_with_indices[i-1]\n                num2, idx2 = numbers_with_indices[i]\n                min_distance = distance\n    return (num1, idx1, num2, idx2)"], [0.9335104823112488, "def find_furthest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Find the two elements in a list of numbers that are furthest apart.\n    \n    Args:\n        numbers (List[float]): A list of numbers.\n    \n    Returns:\n        Tuple[float, float]: The two elements in the list that are furthest apart.\n    \"\"\"\n    return min(numbers), max(numbers)"], [0.9334773421287537, "def find_furthest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Within a supplied list of real numbers having a compulsory minimum volume of two, decipher and generate the two constituents demonstrating the utmost numeric extent between them. The lower component should surface initially, trailed by the superior counterpart, while maintaining that the pairings are not chronologically ordered.\n    \"\"\"\n    return (min(numbers), max(numbers))"], [0.9325781464576721, "def find_closest_elements(numbers: List[int]) -> Tuple[int, int, int]:\n    \"\"\"\n    In the given list of numbers, find and return the two closest numbers firstly the smaller number, \n    then the larger number and the frequency of the smallest difference.\n    For example:\n    find_closest_elements([1, 2, 3, 4, 5, 2])\n    Returns: (2, 2, 2)\n    find_closest_elements([1, 5, 2, 7, 6, 3])\n    Returns: (2, 3, 1)\n    \"\"\"    \n    numbers.sort()\n    pairs = [(numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1)]\n    minimum = min(pair[1] - pair[0] for pair in pairs)\n    result = [pair for pair in pairs if pair[1] - pair[0] == minimum]\n    return result[0][0], result[0][1], len(result)"], [0.9295657277107239, "def find_furthest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Find the two elements with the largest difference between them.\n    \n    Args:\n        numbers (List[float]): A list of numbers.\n    \n    Returns:\n        Tuple[float, float]: A tuple containing the two elements with the largest\n        difference between them.\n    \n    Raises:\n        ValueError: If the provided list contains less than two elements.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('The provided list must contain at least two elements.')\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return (min_num, max_num)"]]}
{"task_id": "HumanEval/21", "problem": [[0.9143803715705872, "def rescale_vectors_to_unit(vectors: List[List[float]]) -> List[List[float]]:\n    \"\"\"\n    Accepting a compilation of N-dimensional vectors, an independent linear transform is applied to each dimension,\n    in such a way that the smallest measurement per dimension reduces to 0, and the uppermost rises to 1.\n\n    Ex: rescale_vectors_to_unit([[1.0, 2.0, 3.0], [2.0, 3.0, 4.0], [3.0, 4.0, 5.0]])\n    [[0.0, 0.0, 0.0], [0.5, 0.5, 0.5], [1.0, 1.0, 1.0]]\n    \"\"\"\n    dimension = len(vectors[0])\n    min_max = [[float('inf'), float('-inf')] for _ in range(dimension)]\n\n    # Find the min and max value for each dimension\n    for vector in vectors:\n        for i in range(dimension):\n            if vector[i] < min_max[i][0]:\n                min_max[i][0] = vector[i]\n            if vector[i] > min_max[i][1]:\n                min_max[i][1] = vector[i]\n\n    # Rescale the vectors\n    for vector in vectors:\n        for i in range(dimension):\n            vector[i] = (vector[i] - min_max[i][0]) / (min_max[i][1] - min_max[i][0])\n\n    return vectors"], [0.9014228582382202, "def normalize(numbers):\n  \"\"\"\n  Normalize a list of numbers between 0 and 1.\n  :param numbers: list of numbers to be normalized\n  :return: list of numbers between 0 and 1\n  \"\"\"\n  min_num = min(numbers)\n  max_num = max(numbers)\n\n  for i in range(0, len(numbers)):\n    numbers[i] = (numbers[i] - min_num) / (max_num - min_num)\n\n  return numbers"], [0.8994903564453125, "def normalize(nums):\n  \"\"\"\n  Given a list of numbers, normalize them so that the min is 0 and the max is 1.\n  The values that are in between should be proportionally represented.\n  \n  For example:\n  \n  Given [1, 8, 3, 5]\n  \n  The result should be [0, 1, 0.25, 0.5]\n  \n  Given [10, 20, 30]\n  \n  The result should be [0, 0.5, 1]\n  \n  Given [\"\"\"\n  min_num = min(nums)\n  max_num = max(nums)\n\n  for i, n in enumerate(nums):\n    if n > min_num and n < max_num:\n      if n - min_num > max_num - n:\n        nums[i] = max_num\n      else:\n        nums[i] = min_num\n\n  return nums"], [0.8981833457946777, "def find_furthest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Extract two float numbers from the given array (at minimum contains two) that possess the maximum numerical difference. Remember to present them in ascending order (minor, major).\n    >>> find_furthest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (1.0, 5.0)\n    >>> find_furthest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (1.0, 5.0)\n    \"\"\"\n    return min(numbers), max(numbers)"], [0.8973163366317749, "def normalize(nums):\n    \"\"\"\n    Normalize a list of numbers to a range of [0, 1].\n    :type nums: List[float]\n    :rtype: List[float]\n    \"\"\"\n    normalized = []\n    min_value = min(nums)\n    max_value = max(nums)\n\n    for value in nums:\n        normalized.append((value - min_value) / (max_value - min_value))\n\n    return normalized"]]}
{"task_id": "HumanEval/22", "problem": [[0.931824266910553, "def filterIntegers(values):\n    \"\"\"\n    Return a new list containing only the integers from the given list.\n    \n    >>> filterIntegers([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> filterIntegers([1, 2, 3, 4, 5, \"a\", \"b\", \"c\"])\n    [1, 2, 3, 4, 5]\n    >>> filterIntegers([\"a\", \"b\", \"c\"])\n    []\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]"], [0.924996554851532, "def filter_integers(values):\n    \"\"\"\n    Filter out non-integer values from a list of lists.\n\n    Args:\n        values (list): A list of lists containing various data types.\n\n    Returns:\n        list: A list containing only the integer values from the input list.\n    \"\"\"\n    result = []\n    for sublist in values:\n        for value in sublist:\n            if isinstance(value, int):\n                result.append(value)\n    return result"], [0.9102098941802979, "def count_integers(values: list) -> int:\n    \"\"\"\n    Count the number of integers in a list.\n    Args:\n        values (list): A list of values.\n    Returns:\n        int: The number of integers in the list.\n    \"\"\"\n    count = 0\n    for val in values:\n        if isinstance(val, int) or (isinstance(val, str) and val.isdigit()):\n            count += 1\n    return count"], [0.9087798595428467, "def filter_list(numbers):\n    \"\"\"\n    Return a new list with the strings filtered out\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), numbers))\n    \n    def filter_list(numbers):\n    \"\"\"\n    Return a new list with the strings filtered out\n    \"\"\"\n    return list(filter(lambda x: x > 10, numbers))"], [0.9039234519004822, "def filter_list(lst):\n    \"\"\"\n    Return a new list with only the integers from the original list.\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), lst))\n    \n    def filter_list(lst):\n    \"\"\"\n    Return a new list with only the integers from the original list.\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), lst))\n    \n    def filter_list(lst):\n    \"\"\"\n    Return a new list with only the integers from the original list.\n    \"\"\"\n    return list(filter(lambda x:\"\"\"\n    return list(filter(lambda x: x['age'] > 25 and x['job_title'] == 'Software Engineer', lst))"], [0.9026889204978943, "def filter_and_sort(input_list):\n    \"\"\"\n    Filter out non-integer values from a list and sort the integers in ascending order.\n\n    Args:\n        input_list (list): A list containing integers and non-integer values.\n\n    Returns:\n        list: A sorted list containing only unique integers.\n\n    \"\"\"\n    int_list = []\n    for i in input_list:\n        if isinstance(i, int):\n            int_list.append(i)\n        else:\n            print(\"{} is not an integer. Ignoring...\".format(i))\n    return sorted(set(int_list))"], [0.9023317098617554, "def filter_list(list_input):\n    \"\"\"\n    Return a new list with the strings filtered out\n    \"\"\"\n    filtered_list = [i for i in list_input if isinstance(i, int)]\n    return filtered_list\n    \n    def filter_list(list_input):\n    \"\"\"\n    Return a new list with the strings filtered out\n    \"\"\"\n    filtered_list = [i for i in list_input if i >= 3]\n    return filtered_list"]]}
{"task_id": "HumanEval/23", "problem": [[0.9358434677124023, "def stringLength(string):\n    \"\"\"\n    Returns the length of a string\n    \n    >>> stringLength(\"Hello\")\n    5\n    >>> stringLength(\"Goodbye\")\n    7\n    \"\"\"\n    return len(string)"], [0.9355382919311523, "def string_length(string):\n    \"\"\"\n    Return the length of a string.\n    >>> string_length('hello')\n    5\n    >>> string_length('hello!')\n    6\n    \"\"\"\n    return len(string)"], [0.9347221851348877, "def string_length(s):\n    \"\"\"\n    Return the length of a string\n    >>> string_length('hello')\n    5\n    >>> string_length('hello world')\n    11\n    \"\"\"\n    return len(s)"], [0.9288947582244873, "def len_string(str):\n    \"\"\"\n    This function returns the length of a string\n    :param str: string\n    :return: int\n    \"\"\"\n    len_str = 0\n    for char in str:\n        len_str += 1\n    return len_str"], [0.9234520196914673, "def string_length(str):\n    \"\"\"\n    This function takes a string and returns the length of the string.\n    \n    Args:\n        str (str): The string to be measured.\n    \n    Returns:\n        int: The length of the string.\n    \"\"\"\n    return len(str)"], [0.9217751026153564, "def string_length(s):\n    \"\"\"\n    Return the length of a string\n    >>> string_length('hello')\n    5\n    >>> string_length('hello world')\n    11\n    \"\"\"\n    if s == '':\n        return 0\n    else:\n        return 1 + string_length(s[1:])"]]}
{"task_id": "HumanEval/24", "problem": [[0.9683318138122559, "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, yet is smaller than n\n    >>> largest_divisor(-15)\n    5\n    \"\"\"\n    # convert the number to absolute\n    n = abs(n)\n    if n < 2:\n        return None\n    # check for all divisors starting from half of the number\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i"], [0.9681808948516846, "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, yet, is smaller than n\n    >>> largest_divisor(-15)\n    5\n    \"\"\"\n    # convert the number to absolute\n    n = abs(n)\n    if n < 2:\n        return None\n    # Check for all divisors starting from half of the number\n    for i in range(n//2, 0, -1): \n        if n % i == 0:\n            return i"], [0.9318321943283081, "def largest_factor(x):\n    \"\"\"\n    Given a positive integer, find the largest factor less than half of the number.\n    \n    >>> largest_factor(15)\n    5\n    >>> largest_factor(12)\n    6\n    \"\"\"\n    factor = 0\n    for i in range(1, int(x/2 + 1)):\n        if x % i == 0:\n            factor = i\n    return factor"]]}
{"task_id": "HumanEval/25", "problem": [[0.9310064315795898, "def factorize(n):\n    \"\"\"\n    Factorize positive integer and return its factors.\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"], [0.9267013072967529, "def factorize(n: int) -> Tuple[List[int], Dict[int, int]]:\n    \"\"\"\n    Factorize positive integer and return two tuples for integer factors and factors with power\n    >>> factorize(121)\n    ([11], {11: 1})\n    >>> factorize(12121)\n    ([3, 37], {3: 1, 37: 1})\n    >>> factorize(1212121)\n    ([3, 13, 47], {3: 1, 13: 1, 47: 1})\n    >>> factorize(1\"\"\"\n    i = 2\n    factors = []\n    count_dict = {}\n    while i * i <= n:\n        while (n % i) == 0:\n            if not i in factors:\n                factors.append(i)\n            if i not in count_dict:\n                count_dict[i] = 1\n            else:\n                count_dict[i] += 1\n            n = n / i\n        i = i + 1\n    if n > 1:\n        if not n in factors:\n            factors.append(int(n))\n        if n not in count_dict:\n            count_dict[int(n)] = 1\n        else:\n            count_dict[int(n)] += 1\n    factors.sort()\n    return factors, count_dict"], [0.922004222869873, "def prime_factors(n: int):\n    \"\"\"\n    Returns a list of prime factors of a given integer.\n    \"\"\"\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors"]]}
{"task_id": "HumanEval/26", "problem": [[0.9446547031402588, "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Facilitate the de-duplication of a sequence of integers, eliminating any references that occur more than once.\n    Retains the exact sequence of remaining integers mirroring the original provided sequence.\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    write = 1\n    for read in range(1, len(numbers)):\n        if numbers[read] != numbers[read-1]:\n            numbers[write] = numbers[read]\n            write += 1\n    return numbers[:write]   # cutting the array to length 'write'"], [0.939919650554657, "def remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Executes de-duplication of a numeric list, that nullifies all integers that resurface.\n        Upholds the identical sequence of residual integers aligning with the input.\n        >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 2, 3, 4]\n    \"\"\"\n    seen = {} \n    len_nums = len(numbers)\n    res = []\n    \n    for i in range(len_nums):\n        if numbers[i] not in seen: # if the item is not in the seen dictionary, add it\n            seen[numbers[i]] = True\n            res.append(numbers[i])\n    \n    return res"], [0.9387729167938232, "def remove_duplicates(numbers: List[int], allow_consecutive_duplicates: bool = True) -> List[int]:\n    \"\"\"\n    Removes duplicates from a list of numbers.\n    \n    :param numbers: The list of numbers to remove duplicates from.\n    :param allow_consecutive_duplicates: Whether to allow consecutive duplicates.\n    :return: The list of numbers with duplicates removed.\n    \"\"\"\n    if len(numbers) == 0:\n        return []\n       \n    if allow_consecutive_duplicates:\n        new_length = 1\n        for i in range(1,len(numbers)):\n            if numbers[i] != numbers[new_length-1]:\n                numbers[new_length] = numbers[i]\n                new_length += 1        \n    else:\n        # Create a set to have constant lookups, that satisfies the O(n) constraint.        \n        seen = set()\n        new_length = 0\n        for i in range(len(numbers)):\n            if numbers[i] not in seen:\n                seen.add(numbers[i])\n                numbers[new_length] = numbers[i]\n                new_length += 1\n\n    return numbers[:new_length]"], [0.9278368353843689, "def track_duplicates(numbers: List[int]) -> Tuple[List[int], List[int]]:\n    \"\"\"\n    Given a list of numbers, return a tuple of two lists. The first list should contain all the numbers that appear only once in the original list in the same order. The second list should contain all the numbers that appear more than once in the original list in the same order.\n    \n    >>> track_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18\"\"\"\n    count = {}\n    no_duplicates = []\n    duplicates = []\n    for num in numbers:\n        if num not in count:\n            count[num] = 0\n            no_duplicates.append(num)  # maintains original order\n        count[num] += 1\n    \n    for num, times in count.items():\n        if times > 1:\n            duplicates.append(num)  # maintains original order of when the number first appeared\n    return no_duplicates, duplicates"], [0.9267627596855164, "def remove_duplicates(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    unique_nums = {}\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums[num] = 1\n        else:\n            unique_nums[num] += 1\n    unique_list = []\n    for num in nums:\n        if unique_nums[num] == 1:\n            unique_list.append(num)\n    return unique_list"], [0.9251227378845215, "def remove_duplicates(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    seen = set()\n    unique = []\n    for num in nums:\n        if num not in seen:\n            unique.append(num)\n            seen.add(num)\n    return unique"], [0.9246571063995361, "def remove_duplicates(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    unique_nums = []\n    seen_nums = set()\n    for num in nums:\n        if num not in seen_nums:\n            unique_nums.append(num)\n            seen_nums.add(num)\n    return unique_nums"], [0.9243394136428833, "def remove_duplicates(numbers: List[int], threshold: int) -> List[int]:\n    \"\"\" From a list of integers, remove duplicate elements, elements that occur more \n    than a specified number of times and prime numbers.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    frequency = Counter(numbers)\n    non_duplicates = [number for number in numbers if frequency[number] <= threshold and not is_prime(number)]\n    return non_duplicates"]]}
{"task_id": "HumanEval/27", "problem": [[0.9385780096054077, "def flip_case(s):\n    \"\"\"\n    Flip all uppercase letters in a string to lowercase and vice versa.\n    \n    >>> flip_case('Hello World')\n    'hELLO wORLD'\n    >>> flip_case('Happy Birthday')\n    'hAPPY bIRTHDAY'\n    \"\"\"\n    return s.swapcase()"], [0.938575029373169, "def flip_case(s):\n    \"\"\"\n    Flip all uppercase letters in a string to lowercase and vice versa.\n    \n    >>> flip_case('Hello World')\n    'hELLO wORLD'\n    >>> flip_case('Happy Birthday')\n    'hAPPY bIRTHDAY'\n    \"\"\"\n    return s.swapcase()"], [0.9272320866584778, "def toggle_case(string):\n    \"\"\"\n    Toggle case of each character in a string.\n    \n    >>> toggle_case(\"Hello World\")\n    'hELLO wORLD'\n    >>> toggle_case(\"PYTHON\")\n    'python'\n    >>> toggle_case(\"python\")\n    'PYTHON'\n    >>> toggle_case(\"PyThOn\")\n    'pYtHoN'\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"], [0.9231505393981934, "def convert_string(string):\n    \"\"\"\n    Converts a string to its opposite case.\n    \n    Args:\n        string (str): The string to convert.\n    \n    Returns:\n        str: The converted string.\n    \"\"\"\n    converted_string = \"\"\n    for char in string:\n        if char.islower():\n            converted_string += char.upper()\n        elif char.isupper():\n            converted_string += char.lower()\n        else:\n            converted_string += char\n    return converted_string"], [0.9217571020126343, "def change_case(string):\n    \"\"\"\n    Change case of each character in a string.\n    \n    >>> change_case(\"Hello World\")\n    'hELLO wORLD'\n    >>> change_case(\"PYTHON\")\n    'python'\n    >>> change_case(\"12345\")\n    '12345'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"], [0.9212246537208557, "def toggle_string(string):\n    \"\"\"\n    Toggle the case of each letter in a string.\n    \n    Args:\n        string (str): The string to toggle.\n    \n    Returns:\n        str: The string with toggled case.\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.isalpha():\n            toggled_string += char.swapcase()\n        else:\n            toggled_string += char\n    return toggled_string"], [0.9204155802726746, "def reverse_case(string):\n    \"\"\"\n    Reverse the case of each character in a string.\n    For example, \"Hello World\" should become \"hELLO wORLD\".\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"], [0.9203540086746216, "def toggle_string(str):\n    \"\"\"\n    Toggle the case of each character in a string.\n    \n    >>> toggle_string(\"Hello World\")\n    'hELLO wORLD'\n    >>> toggle_string(\"tHis is a tEsT\")\n    'THiS IS A TeSt'\n    \"\"\"\n    t_str = \"\"\n    for i in range(len(str)):\n        if str[i].islower():\n            t_str += str[i].upper()\n        else:\n            t_str += str[i].lower()\n    return t_str"], [0.9198590517044067, "def swap_case(string):\n    \"\"\"\n    Swap case of all characters in a string.\n    \n    Args:\n        string (str): The string to swap case.\n    \n    Returns:\n        str: The string with swapped case.\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"], [0.9192575216293335, "def swap_characters(string):\n    \"\"\"\n    Given a string, swap the case of every character.\n    For example, given \"Hello\", the result would be \"hELLO\".\n    \n    :param string: The string to swap the case of every character.\n    :return: The string with swapped case.\n    \"\"\"\n    # convert string into list to allow assignment\n    str_list = list(string)     \n   \n    # loop for every two elements in the list, and swap them\n    for i in range(0, len(str_list)-1, 2): \n        str_list[i], str_list[i+1] = str_list[i+1], str_list[i]\n   \n    # return combined list as string \n    return ''.join(str_list)"]]}
{"task_id": "HumanEval/28", "problem": [[0.9287240505218506, "def concatenate_strings(list_of_strings):\n    \"\"\"\n    Concatenates all strings in the list\n    :param list_of_strings: list of strings\n    :return: concatenated string\n    \"\"\"\n    result = \"\"\n    for string in list_of_strings:\n        result += string\n    return result"], [0.919227659702301, "def concatenate_strings(str_list):\n    \"\"\"\n    Concatenates all strings in the list\n    \n    Args:\n        str_list: list of strings\n    \n    Returns:\n        str: concatenated string\n    \"\"\"\n    result = \"\"\n    for s in str_list:\n        result += s\n    return result"], [0.9152461290359497, "def custom_concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate a list of strings.\n    \n    Args:\n        strings: A list of strings.\n    \n    Returns:\n        The concatenated string.\n    \"\"\"\n    import itertools\n    \n    result = []\n\n    # Filter out easily recognizable non-string types\n    strings = [s for s in strings if isinstance(s, str)]\n    \n    # Create an iterator that returns elements from the first iterable until it is exhausted,\n    # then proceeds to the next iterable, until all of the iterables are exhausted. \n    for c in itertools.zip_longest(*strings, fillvalue=''):\n        # Unpack element and reverse\n        result.extend(c[::-1])\n\n    # Concatenate all strings in result and return reverse of it.\n    return ''.join(result)[::-1]"], [0.913305401802063, "def concatenate_strings(input_strings):\n    \"\"\"\n    Concatenates a list of strings into a single string.\n\n    Args:\n        input_strings (list): A list of strings to concatenate.\n\n    Returns:\n        str: The concatenated string.\n    \"\"\"\n    output_string = \"\"\n    for string in input_strings:\n        output_string += string\n    return output_string"], [0.911803126335144, "def custom_concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate a list of strings in a custom way.\n\n    Args:\n        strings (List[str]): A list of strings to concatenate.\n\n    Returns:\n        str: The concatenated string.\n    \"\"\"\n    # Convert the list of strings into list of characters\n    strings = [list(s) for s in strings]\n\n    # Initialize the final result as an empty string\n    result = ''\n\n    # Interleave the characters of the strings\n    while strings:\n        for s in strings:\n            if s:\n                result += s.pop()\n\n        # Remove empty lists\n        strings = [s for s in strings if s]\n\n    # Return the final result\n    return result"]]}
{"task_id": "HumanEval/29", "problem": [[0.9370042085647583, "def filter_by_prefix(strings, prefix):  # define a function that takes a list of strings and a prefix\n    \"\"\"\n    Return a list of strings that start with the given prefix.\n    :param strings: a list of strings\n    :param prefix: a string\n    :return: a list of strings\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]  # return a list of those strings that start with the given prefix"], [0.9202450513839722, "def filter_strings(string_list, prefix):\n    \"\"\"\n    Return a list of strings from string_list that start with the given prefix.\n    \n    >>> filter_strings([\"pay\", \"attention\", \"to\", \"every\", \"word\", \"of\", \"what\", \"I\", \"say\"], \"attention\")\n    ['attention']\n    >>> filter_strings([\"pay\", \"attention\", \"to\", \"every\", \"word\", \"of\", \"what\", \"I\", \"say\"], \"I\")\n    ['I']\n    >>> filter_strings([\"pay\", \"attention\", \"to\", \"every\", \"word\", \"of\", \"what\"\"\"\n    return [s for s in string_list if s.startswith(prefix)]"], [0.909123420715332, "def filter_strings(arr, char):\n    \"\"\"\n    Filter strings from a list that start with a given character.\n    \n    Args:\n    arr (list): List of strings.\n    char (str): Character to filter strings by.\n    \n    Returns:\n    list: List of strings that start with the given character.\n    \"\"\"\n    result = []\n    for string in arr:\n        string = string.strip()  # Remove leading and trailing whitespace\n        if string.startswith(char):\n            result.append(string)\n    return result"], [0.9057691097259521, "def filter_by_prefix_and_suffix(strings: List[str], prefix_suffix: Tuple[str, str]) -> List[str]:\n    \"\"\" Meticulously filter an input collection of strings for sole instances that inaugurate with a specified prefix and terminate with a distinctive suffix.\n    >>> filter_by_prefix_and_suffix([], ('a', 'z'))\n    []\n    >>> filter_by_prefix_and_suffix(['abc', 'bcd', 'cdez', 'arrayz'], ('a', 'z'))\n    ['arrayz']\n    >>> filter_by_prefix_and_suffix(['abc', 'azy'], ('a', 'z'))\n    ['azy', 'abc']\n    \"\"\"\n    pass"], [0.9026269912719727, "def filter_strings(strings, char):\n    \"\"\"\n    Filter strings that start with a given character\n    :param strings: list of strings\n    :param char: character to filter\n    :return: list of strings\n    \"\"\"\n    return list(filter(lambda s: s.startswith(char), strings))"], [0.9004915952682495, "def filter_strings(strings, characters):\n    \"\"\"\n    Filter strings by first character.\n\n    :param strings: list of strings\n    :param characters: list of characters\n    :return: list of strings\n    \"\"\"\n    result = []\n    characters_lower = [char.lower() for char in characters]\n    for string in strings:\n        if string[0].lower() in characters_lower:\n            result.append(string)\n    return result"], [0.9004896879196167, "def filter_strings(strings, characters):\n    \"\"\"\n    Filter strings by first character.\n\n    :param strings: list of strings\n    :param characters: list of characters\n    :return: list of strings\n    \"\"\"\n    result = []\n    characters_lower = [char.lower() for char in characters]\n    for string in strings:\n        if string[0].lower() in characters_lower:\n            result.append(string)\n    return result"], [0.8992011547088623, "def filter_strings_with_a(strings):\n    \"\"\"\n    Filter the given list of strings to only include those that begin with the letter \"a\".\n    \n    >>> filter_strings_with_a([\"apple\", \"banana\", \"pear\"])\n    ['apple']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(\"a\"):\n            result.append(string)\n    if len(result) == 0:\n        return []\n    return result"], [0.8968886733055115, "def filter_list(lst, condition):\n    \"\"\"\n    Return a new list containing all elements from the original list for which the given condition is true.\n    \"\"\"\n    return [element for element in lst if condition(element)]\n    \n    def filter_strings(lst, condition):\n    \"\"\"\n    Return a new list containing all strings from the original list for which the given condition is true.\n    \"\"\"\n    return [string for string in lst if string.startswith(condition)]"]]}
{"task_id": "HumanEval/30", "problem": [[0.9764103293418884, "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    result = []\n    for num in l:\n        if num > 0:\n          result.append(num)\n    return result"], [0.9625190496444702, "def get_positive_and_sort(l: list):\n    \"\"\"Return only positive numbers in the list, sorted in ascending order.\n    >>> get_positive_and_sort([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_and_sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n\n    return sorted([num for num in l if num > 0])"], [0.9473170042037964, "def get_positive_numbers(nums):\n    \"\"\"\n    Given a list of numbers, return a list which contains only the positive numbers.\n    \n    >>> get_positive_numbers([1, -2, 3, -4, 5])\n    [1, 3, 5]\n    \"\"\"\n    result = []\n    for num in nums:\n        if num > 0:\n            result.append(num)\n    return result"], [0.9469643235206604, "def get_positive_and_sort(l: list):\n    \"\"\"Return only positive numbers in the list, sorted in ascending order.\n    \"\"\"\n    # Step 1: Filter positive numbers\n    positive_nums = [num for num in l if num > 0]\n    \n    # Step 2: Sort the positive numbers\n    return sorted(positive_nums)"], [0.9456790089607239, "def get_positive_and_sort(l: list):\n    \"\"\"\n    Return a list of positive numbers in ascending order.\n    \n    >>> get_positive_and_sort([1, 2, 3, -1, -2, -3])\n    [1, 2, 3]\n    \"\"\"\n    positives = []\n    for num in l:\n        if num > 0:\n            positives.append(num)\n\n    # Call the sort function here instead of return directly\n    return bubble_sort(positives)"], [0.9444295167922974, "def get_positive_numbers(nums):\n    \"\"\"\n    Given a list of numbers, return a list of only the positive numbers.\n    \n    >>> get_positive_numbers([1, 2, 3, -4, -5, -6])\n    [1, 2, 3]\n    \"\"\"\n    positive_nums = []\n    \n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    \n    return positive_nums"], [0.9412354230880737, "def filter_positive(lst):\n    \"\"\"\n    Given a list of numbers, return a new list that contains only the positive numbers.\n    \n    >>> filter_positive([1, -2, 3, -4, 5])\n    [1, 3, 5]\n    \"\"\"\n    positive_nums = []\n    for n in lst:\n        if n > 0:\n            positive_nums.append(n)\n    return positive_nums"], [0.9406551122665405, "def get_positive_and_sort(input_list):\n    \"\"\"\n    Return only positive numbers in the_list, sorted in ascending order.\n    >>> get_positive_and_sort([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_and_sort([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n\n    # Filter the positive numbers\n    l = [num for num in input_list if num > 0]\n\n    # Implement a bubble sorting algorithm\n    for i in range(len(l)):\n        for j in range(len(l) - i - 1):\n            if l[j] > l[j+1]:\n                # Swap elements\n                l[j], l[j+1] = l[j+1], l[j]\n    \n    return l"]]}
{"task_id": "HumanEval/31", "problem": [[0.9671135544776917, "def is_prime(n):\n    \"\"\"Returns true for prime integers, false for non-prime integers.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n\n    if n == 2:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True"], [0.9645583629608154, "def is_prime(n):\n    \"\"\"Returns true for prime integers, false for non-prime integers.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, math.isqrt(n)+1): \n        if n % i == 0:\n            return False\n    return True"], [0.9621102809906006, "def is_prime(n):\n    \"\"\"Returns true for prime integers, false for non-prime integers.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    # Start from 3 and step through odd numbers up to the square root of n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"], [0.9582358598709106, "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \n    >>> is_prime(1)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(121)\n    False\n    \"\"\"\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    return all([(n % i) for i in range(3, int(n**0.5) + 1, 2)])"], [0.9568701386451721, "def is_prime(n):\n    \"\"\"\n    Return True if n is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n\n    max_divisor = int(sqrt(n))\n    for d in range(2, 1 + max_divisor):\n        if n % d == 0:\n            return False\n    return True"], [0.956645131111145, "def is_prime(n):\n    \"\"\"Returns true for prime numbers, false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    False\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    >>> is_prime(0)\n    False\n    >>> is_prime(-101)\n    False\n    >>> is_prime(2.5)\n    False\n    \"\"\"\n    if isinstance(n, (float, complex)) or n < 2: #negatives & floats are not primes\n        return False\n    for i in range(2, math.isqrt(n) + 1): #only check up to square root of n\n        if n % i == 0:\n            return False\n    return True"], [0.9566247463226318, "def is_prime(n):\n  \"\"\"\n  Returns True if n is prime, False otherwise.\n  \"\"\"\n  if n == 1 or n == 2:\n    return True\n  for i in range(2, n):\n    if n % i == 0:\n      return False\n  return True"], [0.9565637111663818, "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \n    >>> is_prime(10)\n    False\n    >>> is_prime(7)\n    True\n    \"\"\"\n    if n <= 1 or (n % 2 == 0 and n > 2): \n        return False\n    return all(n % i for i in range(3, int(n**.5) + 1, 2))"], [0.956324577331543, "def is_prime(n):\n    \"\"\"\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"], [0.9556604027748108, "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \n    >>> is_prime(10)\n    False\n    >>> is_prime(7)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    \n    is_prime = [True] * (n+1)\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    \n    if is_prime[n]:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and is_prime[i]:\n            return i\n    \n    return False"]]}
{"task_id": "HumanEval/32", "problem": [[0.8993463516235352, "def compute_derivative_integral(xs: list, C: int):\n    \"\"\"\n    Assumptions broken: (xs = coefficients of a polynomial in order: xs[0] + xs[1] * x + xs[2] * x^2 + ....)\n    Compute both the derivative and integral of the given polynomial, incorporate constant C and remove any surplus zeros. Ensure correctness with edge cases.\n    \"\"\"\n    if not xs:\n        return [], [C]\n    \n    derivative = []\n    integral = [C]\n\n    for i in range(len(xs)):\n        if i > 0:  derivative.append(i * xs[i])\n        if i > 0:  integral.append(xs[i-1] /(i))\n        \n    integral.append(xs[-1] / len(xs))\n\n    while derivative and derivative[-1] == 0:\n        derivative.pop()\n        \n    while len(integral) > 1 and integral[-1] == 0:  # retain the constant term even if it's zero.\n        integral.pop()\n\n    return derivative, integral"], [0.8960886001586914, "def first_derivative(poly):\n    \"\"\"\n    Returns the first derivative of a polynomial.\n    \"\"\"\n    result = []\n    for i in range(len(poly)):\n        result.append(poly[i] * (len(poly) - i - 1))\n    return result\n    \n    def second_derivative(poly):\n    \"\"\"\n    Returns the second derivative of a polynomial.\n    \"\"\"\n    result = 0\n    for i in range(len(poly)):\n        result += poly[i] * (len(poly) - i - 1) * pow(x, len(poly) - i - 2)\n    return result"], [0.8956047296524048, "def derivative_and_integral(xs: list, C: complex):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Handle both real and complex number coefficients.\n    Return derivative and integral of this polynomial in the same form, adding C and removing trailing zeros.\n    \"\"\"\n    # Turn the given coefficient list into a Poly1d object which allows us to do mathematical operations.\n    p = np.poly1d(xs[::-1])\n\n    # Compute the derivative of the polynomial and reverse the resulting coefficient list.\n    derivative = p.deriv().c[::-1]\n    # Compute the integral of the polynomial and reverse the resulting coefficient list.\n    integral = p.integ().c[::-1]\n    # Add a complex constant to the integral.\n    integral[0] += C\n\n    # Filter our trailing zeroes in both the integral and derivative lists.\n    derivative = list(filter(lambda a: a != 0, derivative))\n    integral = list(filter(lambda a: a != 0, integral))\n\n    return derivative, integral"], [0.8948285579681396, "def nth_root(x, n, epsilon=0.00001):\n    \"\"\"\n    Find the nth root of x.\n    \"\"\"\n    if x < 0 and n % 2 == 0:\n        raise ValueError(\"Cannot compute root of negative number with even index\")\n    if x < 0 and n % 2 == 1:\n        return -nth_root(-x, n)\n    if x == 0:\n        return 0\n    if n == 0:\n        raise ValueError(\"Cannot compute root of number with zero index\")\n    if n == 1:\n        return x\n    if n == 2:\n        \"\"\"\n    low = 0\n    if x < 1 and x > 0:\n        high = 1\n    else:\n        high = x\n    guess = (high + low) / 2.0\n\n    while abs(guess**n - x) > epsilon:\n        if guess**n < x:\n            low = guess\n        else:\n            high = guess\n        guess = (high + low) / 2.0\n\n    return guess"], [0.8925346732139587, "def karatsuba_poly_mult(poly1, poly2):\n    \"\"\"\n    Karatsuba algorithm for polynomial multiplication.\n    \"\"\"\n    # Base case\n    if len(poly1) == 1 and len(poly2) == 1:\n        return [poly1[0] * poly2[0]]\n\n    # Recursive case\n    else:\n        # Split the polynomials into two parts\n        mid = len(poly1) // 2\n        poly1_lo = poly1[:mid]\n        poly1_hi = poly1[mid:]\n        poly2_lo = poly2[:mid]\n        poly2_hi =\"\"\"\n    # Find size of two polynomials\n    n = max(len(poly1), len(poly2))\n    n = 2**((n - 1).bit_length())  # Round up to the next power of 2.\n\n    # Initial case\n    if n == 1:\n        return [poly1[0] * poly2[0]]\n\n    # Pad polynomials with zeroes\n    poly1 += [0] * (n - len(poly1))\n    poly2 += [0] * (n - len(poly2))\n\n    # Divide polynomials into two parts\n    poly1_lo = poly1[:n//2]\n    poly1_hi = poly1[n//2:]\n    poly2_lo = poly2[:n//2]\n    poly2_hi = poly2[n//2:]\n\n    # Calculate products\n    prod_low = karatsuba_poly_mult(poly1_lo, poly2_lo)\n    prod_high = karatsuba_poly_mult(poly1_hi, poly2_hi)\n    prod_mid = karatsuba_poly_mult([sum(x) for x in zip(poly1_lo, poly1_hi)],\n                                  [sum(x) for x in zip(poly2_lo, poly2_hi)])\n\n    # Combine products\n    prod_mid = [a - b - c for a, b, c in zip(prod_mid, prod_low, prod_high)]\n    prod = prod_low + [0]*(n//2) + prod_high + [0]*(n//2)\n    for i, coef in enumerate(prod_mid):\n        prod[i + n//2] += coef\n\n    # Remove trailing zeroes\n    while len(prod) > 1 and prod[-1] == 0:\n        prod.pop()\n\n    return prod"]]}
{"task_id": "HumanEval/33", "problem": [[0.949211061000824, "def sort_third(l: list):\n    \"\"\"\n    Sort the list l in descending order, but only the numbers that are multiples of 3.\n    :param l: list\n    :return: list\n    \"\"\"\n    multiples_of_three = sorted([l[i] for i in range(len(l)) if (i + 1) % 3 == 0], reverse=True)\n    for i, value in enumerate(l):\n        if (i + 1) % 3 == 0:\n            l[i] = multiples_of_three.pop(0)\n    return l"], [0.9457280039787292, "def sort_third(l):\n    \"\"\"\n    \"\"\"\n    aux = [l[i] for i in range(0, len(l), 3)]\n    aux.sort()\n    for i in range(0, len(l), 3):\n        l[i] = aux.pop(0)\n    return l"], [0.9171875715255737, "def modulo_sort(lst):\n    \"\"\"\n    Sort a list of numbers by their modulo 3\"\"\"\n    mod_map = {k:[] for k in range(0,3)}\n    for item in lst:\n        mod = item % 3\n        mod_map[mod].append(item)\n    sorted_list = []\n    for key in mod_map.keys():\n        sorted_list.extend(sorted(mod_map[key]))\n    return sorted_list"], [0.9080817699432373, "def third_highest_odd_element(l: list):\n    \"\"\"\n    Return the third highest odd element in a list of numbers.\n    If there are less than three odd elements, return None.\n    :param l: list of numbers\n    :return: third highest odd element\n    \"\"\"\n    # Create a new list of only positive odd numbers\n    positive_odds = [num for num in l if num > 0 and num % 2 == 1]\n\n    # Sort the new list from highest to lowest\n    for i in range(len(positive_odds)):\n        for j in range(i + 1, len(positive_odds)):\n            if positive_odds[i] < positive_odds[j]:\n                positive_odds[i], positive_odds[j] = positive_odds[j], positive_odds[i]\n\n    # Return the third highest number, if it exists\n    return positive_odds[2] if len(positive_odds) > 2 else None"], [0.90651535987854, "def advanced_sort(l: list, n: int):\n    \"\"\"\n    Sort a list of integers, but only the elements at indices divisible by n.\n    The rest of the list should remain unchanged.\n    :param l: list of integers\n    :param n: integer\n    :return: sorted list\n    \"\"\"\n    # Separate elements at indices divisible by n\n    n_indices = [i for i in range(len(l)) if i % n == 0]\n    indexed_values = [l[i] * 2 for i in n_indices]\n    indexed_values.sort(reverse=True)\n\n    # Create new list with modified values\n    new_list = l.copy()\n    for i, value in zip(n_indices, indexed_values):\n        new_list[i] = value\n    return new_list"], [0.9052423238754272, "def sort_odd(l: list):\n    \"\"\"\n    Sort the odd numbers in ascending order while leaving the even numbers at their original positions.\n    :param l: list of numbers\n    :return: list of numbers\n    \"\"\"\n    odd_list = sorted(element for index, element in enumerate(l) if index % 2)\n    l_prime = [odd_list.pop(0) if index % 2 else element for index, element in enumerate(l)]\n    return l_prime"]]}
{"task_id": "HumanEval/34", "problem": [[0.9846793413162231, "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"], [0.9701021313667297, "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # convert the list to a set to remove duplicates, then convert it back to a list\n    l = list(set(l))\n\n    # sort the list in increasing order\n    l.sort()\n\n    return l"], [0.9644471406936646, "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([4, 7, 2, 4, 6, 7, 7, 10, 0, 124])\n    [0, 2, 4, 6, 10, 124]\n    \"\"\"\n    unique_elements = list(set(l))    # remove duplicates \n    return sorted(unique_elements)    # sort the unique list"], [0.9525353908538818, "def unique(l: list):\n    \"\"\"\n    Return a list of unique elements in the given list.\n    \n    >>> unique([1, 2, 3, 1, 2, 3])\n    [1, 2, 3]\n    >>> unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> unique([1, 2, 3\"\"\"\n    # Convert list to set to remove duplicates\n    unique_set = set(l)\n    # Convert set to list and sort it\n    unique_list = sorted(list(unique_set))\n    return unique_list"], [0.9507638812065125, "def unique(l: list):\n    \"\"\"\n    Return a list of unique elements in the given list.\n    :param l: list\n    :return: list\n    \"\"\"\n    return sorted(list(set(l)))"], [0.9507566690444946, "def unique(l: list):\n    \"\"\"\n    Return a list of unique elements in the given list.\n    :param l: list\n    :return: list\n    \"\"\"\n    return sorted(list(set(l)))"], [0.9507461190223694, "def unique(l: list):\n    \"\"\"\n    Return a list of unique elements in the given list.\n    :param l: list\n    :return: list\n    \"\"\"\n    return sorted(list(set(l)))"], [0.9480125308036804, "def unique(l):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([4, 7, 2, 4, 6, 7, 7, 10, 0, 124])\n    [0, 2, 4, 6, 7, 10, 124]\n    \"\"\"\n    if type(l) != list:\n        raise TypeError('Input should be a list')\n    for i in l:\n        if type(i) != int:\n            raise ValueError('Input list should only contain integers')\n    return sorted(list(set(l)))            "], [0.9409071803092957, "def unique(l: list):\n    \"\"\"\n    \"\"\"\n    # Remove duplicates\n    i = 0\n    while i < len(l):\n        j = i + 1\n        while j < len(l):\n            if l[i] == l[j]:\n                del l[j]\n            else:\n                j+=1\n        i+=1\n             \n    # Sort list\n    n = len(l)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if l[j] > l[j+1]:\n                l[j], l[j+1] = l[j+1], l[j]\n    return l"], [0.9406193494796753, "def unique_count(l: list):\n    \"\"\"Return sorted unique elements in a list and their count\n\n    >>> unique_count([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [(0, 1), (2, 1), (3, 3), (5, 2), (9, 1), (123, 1)] \n    \"\"\" \n    l_counter = Counter(l)\n    result = sorted(l_counter.items())\n    return result"]]}
{"task_id": "HumanEval/35", "problem": [[0.9322212934494019, "def max_list_element(lst):\n    \"\"\"Return the maximum value in a list.\n    \n    >>> max_list_element([1, 2, 3])\n    3\n    >>> max_list_element([1, 2, 3, 4])\n    4\n    \"\"\"\n    max_element = None\n    for element in lst:\n        if max_element is None or max_element < element:\n            max_element = element\n    return max_element"], [0.923170804977417, "def max_element(lst):\n    \"\"\"\n    Find the maximum element in a list.\n    \n    Args:\n        lst (list): A list of integers.\n    \n    Returns:\n        int: The maximum element in the list.\n    \"\"\"\n    max_element = lst[0]\n    for element in lst:\n        if element > max_element:\n            max_element = element\n    return max_element"], [0.9208568334579468, "def max_value(l):\n    \"\"\"\n    \"\"\"\n    max_value = l[0]\n    for n in l:\n        if n > max_value:\n            max_value = n\n    return max_value"], [0.9200880527496338, "def list_max(lst):\n    \"\"\"\n    Return the maximum value in a list.\n    \n    >>> list_max([1, 2, 3, 4])\n    4\n    >>> list_max([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    cur_max = 0\n    for x in lst:\n        cur_max = max(cur_max, x)\n    return cur_max"], [0.9174485802650452, "def max_list(lst):\n    \"\"\"Return the maximum value in a list.\n    >>> max_list([1, 2, 3])\n    3\n    >>> max_list([1, 2, 3, 4])\n    4\n    \"\"\"\n    max_value = lst[0] # Initial maximum is the first element\n    for x in lst:\n        if x > max_value: # If the current element is larger\n            max_value = x # It becomes the new maximum\n    return max_value"]]}
{"task_id": "HumanEval/36", "problem": [[0.9122810959815979, "def three_seven_fourteen(m: int):\n    \"\"\"\n    \"\"\"\n    count = 0\n    for i in range(1, abs(m)):\n        if '3' in str(i) and (i % 7 == 0 or i % 14 == 0):\n            count += 1\n    return count"], [0.9038977026939392, "def five_nine_twelve(n: int):\n    \"\"\"\n    Count the number of integers between 1 and n (inclusive) that meet the following criteria:\n    - The number contains a 5 or a 7.\n    - The number is divisible by 9, 12, or 15.\n    - The sum of the digits is divisible by 3 or 5.\n    Args:\n        n (int): The upper limit of the range.\n    Returns:\n        int: The count of integers that meet the criteria.\n    \"\"\"\n    # Initialize the counter\n    count = 0\n    # Iterate over all the numbers up to n\n    for i in range(n):\n        # Check if the number contains 5 or 7\n        if '5' in str(i) or '7' in str(i):\n            # Check if the number is divisible by 9, 12, or 15\n            if i % 9 == 0 or i % 12 == 0 or i % 15 == 0:\n                # Calculate the sum of the digits\n                digits_sum = sum(int(digit) for digit in str(i))\n                # Check if the digits sum is divisible by 3 or 5\n                if digits_sum % 3 == 0 or digits_sum % 5 == 0:\n                    # Increment the counter if all the conditions are met\n                    count += 1\n    # Return the total count\n    return count"], [0.898895263671875, "def count_nums(arr):\n    \"\"\"\n    Return the number of numbers in the given array that satisfy the following conditions:\n    \n    The number has at least one digit with a value of 4.\n    The number has at least one digit with a value of 7.\n    The sum of the number's digits is divisible by 4.\n    \n    >>> count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1\"\"\"\n    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0 and sum(int(d) for d in str(abs(num))) % 4 == 0)"], [0.8963409662246704, "def ends_in_3_or_7(n):\n    \"\"\"\n    Return True if an integer ends in 3 or 7.\n    >>> ends_in_3_or_7(123)\n    True\n    >>> ends_in_3_or_7(125)\n    False\n    >>> ends_in_3_or_7(127)\n    True\n    \"\"\"\n    return str(n)[-1] in ('3', '7')"], [0.8935945630073547, "def five_nine_sixteen(n: int) -> int:\n    \"\"\"\n    \"\"\"\n    nums = [i for i in range(n) if '5' in str(abs(i)) and (abs(i) % 9 == 0 or abs(i) % 16 == 0) ]\n    return len(nums)"], [0.8915181159973145, "def find_nums(n):\n    \"\"\"\n    Finds the number of odd numbers between 0 and n.\n    \n    Args:\n        n (int): The upper limit of the range.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i - 7 * int(i / 7) == 0:  # finding multiples of 7 without using modulus\n            print(i)\n            if i // 2 * 2 != i:  # finding odd numbers without using modulus\n                count += 1\n    print(\"Count of odd numbers:\", count)"]]}
{"task_id": "HumanEval/37", "problem": [[0.9515589475631714, "def sort_even_indices(l):\n    \"\"\"\n    Sort the values at the even indices of a list in ascending order.\n    \n    Args:\n        l (list): A list of integers.\n    \n    Returns:\n        list: A list with the values at the even indices sorted in ascending order.\n    \"\"\"\n    # We start by filtering out the values at the even indices\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sorting the values at even indices\n    even_indices_values.sort()\n    \n    # Now we replace the values at the even indices with their sorted version\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    \n    return l"], [0.9465556740760803, "def sort_even_indices(l: list):\n    \"\"\"\n    Sort the even indices of a list.\n    \n    Args:\n        l (list): The list to sort.\n    \n    Returns:\n        list: The sorted list.\n    \"\"\"\n    even_items = [l[i] for i in range(0, len(l), 2)] \n    even_items.sort()\n\n    for i, e in enumerate(sorted(even_items)):\n        l[2 * i] = e\n\n    return l"], [0.9446446895599365, "def sort_even_indices(l):\n    \"\"\"\n    Sort the elements at even indices of a list in ascending order while leaving the elements at odd indices unchanged.\n\n    Args:\n        l (list): List of elements\n\n    Returns:\n        list: List with elements at even indices sorted in ascending order\n    \"\"\"\n    # Extract even index elements and sort them\n    even_indices_sorted = sorted(l[i] for i in range(0, len(l), 2))\n\n    result = l[:]\n    result[::2] = even_indices_sorted\n\n    return result"], [0.9442380666732788, "def sort_even(l: list):\n    \"\"\"\n    Sort a list of integers in ascending order, but keep even and odd numbers\n    in separate sorted lists.\n    \n    Args:\n        l (list): list of integers\n    \n    Returns:\n        list: sorted list of integers\n    \"\"\"\n    evens = [l[i] for i in range(0, len(l), 2)]\n    odds = [l[i] for i in range(1, len(l), 2)]\n    evens.sort(key=lambda x: -x if x < 0 else x)\n    new_list = [None] * len(l)\n    new_list[::2] = evens\n    new_list[1::2] = odds\n    return new_list"], [0.9408338665962219, "def sort_odd(l: list):\n    \"\"\"\n    Sort the odd numbers in ascending order while leaving the even numbers at their original positions.\n    :param l: list of numbers\n    :return: list of numbers\n    \"\"\"\n    odd_list = sorted(element for index, element in enumerate(l) if index % 2)\n    l_prime = [odd_list.pop(0) if index % 2 else element for index, element in enumerate(l)]\n    return l_prime"], [0.9396109580993652, "def sortEven(l):\n    \"\"\"\n    Sort the even elements of a list in ascending order.\n    \n    >>> sortEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> sortEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\"\"\"\n    evens = sorted(l[::2])\n    for i in range(0, len(l), 2):\n        l[i] = evens.pop(0)\n    return l"], [0.938322126865387, "def sort_even(l: list):\n    \"\"\"\n    Sort a list of integers according to the following rules:\n    - Even numbers must be sorted in ascending order\n    - Odd numbers must be sorted in descending order\n    - The relative positions of even and odd numbers must not change\n    - Numbers must be returned in the same list\n    - The function must be generic and work for any list of integers\n    - The function must be generic and work for any list of integers\n    - The function must be generic and work for any list of integers\n    - The function must be generic and work for any list of integers\n    - The function must be generic\"\"\"\n    if not all(isinstance(i, int) for i in l):\n        raise ValueError(\"All elements of the list should be integers\")\n\n    even_neg_numbers = sorted([ele for idx, ele in enumerate(l) if idx % 2 == 0 and ele < 0], reverse=True)\n    even_pos_numbers = sorted([ele for idx, ele in enumerate(l) if idx % 2 == 0 and ele >= 0])\n    odd_numbers = [ele for idx, ele in enumerate(l) if idx % 2 != 0]\n\n    output = []\n    index_neg = index_pos = index_odd = 0\n\n    for i in range(len(l)):\n        if i % 2 == 0:\n            if index_neg < len(even_neg_numbers) and (index_pos == len(even_pos_numbers) or even_neg_numbers[index_neg] > even_pos_numbers[index_pos]):\n                output.append(even_neg_numbers[index_neg])\n                index_neg += 1\n            else:\n                output.append(even_pos_numbers[index_pos])\n                index_pos += 1\n        else:\n            output.append(odd_numbers[index_odd])\n            index_odd += 1\n\n    return output"]]}
{"task_id": "HumanEval/38", "problem": [[0.9813618659973145, "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], [0.9773379564285278, "def encode_cyclic(s: str):\n    \"\"\"\n    cycles group of three characters to produce an encoded string\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], [0.9726811647415161, "def cyclic_encode(s: str):\n    \"\"\"\n    Encodes the string by cycling groups of three characters.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], [0.9677190780639648, "def decode_cyclic(s: str):\n    \"\"\"\n    Accepts a string encoded with the cyclic_encode function and returns the decoded string. \n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], [0.9669857621192932, "def decode_cyclic(s: str):\n    \"\"\"\n    Given a string encoded with the encode_cyclic function, this function returns the original (decoded) string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], [0.964949905872345, "def encode_cyclic(s: str):\n    \"\"\"\n    >>> encode_cyclic(\"abc\")\n    'cab'\n    >>> encode_cyclic(\"abcabc\")\n    'cabcab'\n    >>> encode_cyclic(\"abcabcabc\")\n    'cabcabcab'\n    >>> encode_cyclic(\"abcabcabcabc\")\n    'cabcabcabcabc'\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], [0.9620381593704224, "def encode_cyclic(z: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    groups = [z[3 * i:min(3 * i + 3, len(z))] for i in range((len(z) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], [0.9618627429008484, "def decode_cyclic(s: str):\n    \"\"\"\n    >>> decode_cyclic(\"abc\")\n    'abc'\n    >>> decode_cyclic(\"abcabc\")\n    'abcabc'\n    >>> decode_cyclic(\"abcabcabc\")\n    'abcabcabc'\n    >>> decode_cyclic(\"abcabcabcabc\")\n    'abcabcabcabc'\n    >>> decode_cyclic(\"abcabcabcabcabc\")\n    'abcabcabcabcabc'\n    >>> decode_cyclic(\"abcabcabcabcabcabc\")\n    'abcabcabcabcabcabc'\n    >>> decode\"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"], [0.9599628448486328, "def encode_cyclic(s: str):\n    \"\"\"\n    This function is intended to encode a string by cycling groups of three characters,\n    and then shifting them three positions further in the alphabet using a Caesar cipher.\n    \"\"\"\n    groups = [s[(3 * i)+3: min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    groups = [''.join(chr((ord(c) - 65 + 3) % 26 + 65) for c in group) if group.isalpha() else group for group in groups]\n    return \"\".join(groups)"], [0.959259033203125, "def decode_cyclic(s: str):\n    \"\"\"\n    returns a decoded string, which was encoded using the above encode_cyclic function, tolerating stand-alone characters and empty spaces\n    \"\"\"\n    # Splitting the given string into groups of at most 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # For each group, if length is 3, reverse its cyclic rotation, else let it be\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"]]}
{"task_id": "HumanEval/39", "problem": [[0.9489573240280151, "def fibonacci_prime(n):\n    \"\"\"\n    Find the n-th fibonacci number that is also a prime number.\n    \"\"\"\n    def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \"\"\"\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and num > 1:\n            count += 1\n        num += 1\n    return num - 1"], [0.9404894113540649, "def fibonacci_primes(n):\n    \"\"\"\n    Return the first n fibonacci numbers that are also prime.\n    \"\"\"\n    def fibonacci(n):\n    \"\"\"\n    Return the nth fibonacci number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    def is_prime(n):\n    \"\"\"\n    Return True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range\"\"\"\n    primes = []\n    i = 0\n    while len(primes) < n:\n        fib = fibonacci(i)\n        if is_prime(fib):\n            primes.append(fib)\n        i += 1\n    return primes"], [0.9400851130485535, "def fibonacci_primes(n):\n    \"\"\"\n    Return the first n fibonacci numbers that are also prime.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Return True if n is prime.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \"\"\"\n    sequence = []\n    a, b = 0, 1\n    while len(sequence) < n:\n        if is_prime(b):\n            sequence.append(b)\n        a, b = b, a + b\n    return sequence"], [0.9383487701416016, "def fib_primes(n):\n    \"\"\"\n    Return a list of the first n prime Fibonacci numbers.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Return True if num is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \"\"\"\n    fib = [0, 1]\n    while fib[-1] <= n:\n        num = fib[-1] + fib[-2]\n        if num > n:\n            break\n        fib.append(num)\n    primes = [num for num in fib[2:] if is_prime(num)]\n    return primes"], [0.9381331205368042, "def nth_prime_in_fibonacci(n):\n    \"\"\"\n    Find the nth prime number in the Fibonacci sequence.\n    \n    Args:\n        n (int): The index of the prime number in the Fibonacci sequence.\n    \n    Returns:\n        int: The nth prime number in the Fibonacci sequence.\n    \"\"\"\n    if n < 1:\n        return -1\n    count = 0\n    fib1, fib2 = 1, 1\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            count += 1\n            if count == n:\n                return fib2"], [0.937756359577179, "def fib_or_prime(n):\n    \"\"\"\n    Return the nth Fibonacci number or the nth prime number.\n    \n    Args:\n        n (int): The index of the number to return.\n    \n    Returns:\n        int: The nth Fibonacci number or the nth prime number.\n    \"\"\"\n    if is_prime(n):\n        return nth_prime(n)\n    else:\n        return fib(n) + nth_prime(n)"], [0.9370002746582031, "def fibonacci_primes(n):\n    \"\"\"\n    Return the first n fibonacci numbers that are also prime.\n    \"\"\"\n    def isprime(n):\n        \"\"\"\n        Return True if n is prime.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    \"\"\"\n    Return the first n fibonacci numbers that are also prime.\n    \"\"\"\n    fib_sequence = [0, 1]\n    primes=[]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        \n    for num in fib_sequence:\n        if isprime(num):\n            primes.append(num)\n            \n    return primes"], [0.9364478588104248, "def fib_prime(n):\n    \"\"\"Generate the Fibonacci series till n and return the prime numbers within the series.\"\"\"\n    fib_nums = [fib(i) for i in range(n+1)]\n    return [num for num in fib_nums if is_prime(num)]"], [0.9363793134689331, "def fibonacci_prime(n):\n    \"\"\"\n    Find the nth fibonacci prime number\n    \"\"\"\n    fib_nums = [0, 1]\n    while fib_nums[-1] <= n:\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n    return [num for num in fib_nums if check_prime(num) and num <= n][-1]\n    \n    def fibonacci_primes(n):\n    \"\"\"\n    Find all fibonacci prime numbers less than or equal to n\n    \"\"\"\n    fib_nums = [0, 1]\n    while fib_nums[-1] <= n:\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n    return [num for num in fib_nums if check_prime(num) and num <= n]"]]}
{"task_id": "HumanEval/40", "problem": [[0.9403589963912964, "def sum_to_zero(nums): \n    \"\"\"\n    Given an array of integers, return True if the sum of any \n    3 integers results in 0.\n    \n    >>> sum_to_zero([1, 2, -3])\n    True\n    >>> sum_to_zero([1, 2, 3])\n    False\n    \"\"\"\n    for i in range(len(nums)): \n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False"], [0.9325989484786987, "def triples_sum_to_zero(arr):\n   \"\"\"\n   Given an array of distinct integers arr, determine if there are two integers A and B in arr such that A + B = 0.\n   \n   Example 1:\n   \n   Input: arr = [-1,0,1]\n   Output: true\n   \n   Example 2:\n   \n   Input: arr = [-1,0,1,2,-1,-4]\n   Output: true\n   \n   Constraints:\n   \n   1 <= arr.length <= 10^5\n   -10^5 <= arr[i] <= 1\"\"\"\n   arr.sort()\n   for i in range(len(arr)-2):\n      if i>0 and arr[i] == arr[i-1]:\n         continue\n      l = i+1\n      r = len(arr)-1\n      while l < r:\n         total = arr[i]+arr[l]+arr[r]\n         if total<0:\n            l += 1\n         elif total>0:\n            r -= 1\n         else:\n            return True\n   return False"], [0.9159020781517029, "def pairs_sum_to_zero(l):\n    \"\"\"\n    Given a list of integers, return the number of pairs of integers that sum to zero.\n    \n    >>> pairs_sum_to_zero([1, 2, -2, 3, 0, 0])\n    2\n    >>> pairs_sum_to_zero([1, 2, 3, 4, 5])\n    0\n    >>> pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -9\"\"\"\n    pairs = []\n    nums = sorted(l)\n    check_set = set()\n    for i,num in enumerate(nums):\n        if -num in check_set:\n            pairs.append((-num,num))\n        else:\n            check_set.add(num)\n    return pairs"], [0.908967137336731, "def three_sum(lst, target_sum):\n    \"\"\"\n    Check if there exists three numbers in a list that sum to a given target sum.\n    \n    Args:\n        lst (list): List of positive integers.\n        target_sum (int): Target sum.\n        \n    Returns:\n        bool: True if there exists three numbers in the list that sum to the target sum, False otherwise.\n    \"\"\"\n    # Check if list contains only positive integers\n    if not all(num > 0 for num in lst):\n        return False\n    \n    # Check if target sum is positive\n    if target_sum <= 0:\n        return False\n    \n    # Check if list contains duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    lst.sort()\n    n = len(lst)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            if lst[i] + lst[left] + lst[right] == target_sum:\n                return True\n            elif lst[i] + lst[left] + lst[right] < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return False"], [0.9075685739517212, "def two_sum(arr):\n    \"\"\"\n    Given an array of integers, return whether or not two numbers sum to zero\n    \n    >>> two_sum([1, 2, 3, -2])\n    True\n    >>> two_sum([1, 2, 3, 4])\n    False\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 0:\n                return True\n    return False"], [0.9063442349433899, "def generateTriplets(arr):\n  \"\"\"\n  Given an array of distinct integers. The task is to find triplets in the array whose sum is zero.\n  \n  Input: arr[] = {0, -1, 2, -3, 1}\n  Output: 0 -1 1\n          0 -3 3\n          -1 2 -3\n  \n  Input: arr[] = {1, -2, 1, 0, 5}\n  Output: 1 -2 -1\n  \n  Input: arr[] = {0, 0, 0}\n  Output:\"\"\"\n  result = []\n\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      for k in range(j + 1, len(arr)):\n        if (arr[i] + arr[j] + arr[k] == 0):\n          result.append([arr[i], arr[j], arr[k]])\n\n  return result"], [0.9062696695327759, "def hasTripletWithSum(arr, sum):\n    \"\"\"\n    Given an array of integers, find if there exists a triplet in the array whose sum is equal to the given sum.\n    \"\"\"\n    def hasPairWithSum(arr, sum):\n        \"\"\"\n        Given an array of integers, find if there exists a pair in the array whose sum is equal to the given sum.\n        \"\"\"\n        hash = {}\n        for i in range(0, len(arr)):\n            if arr[i] in hash:\n                return True\n            else:\n                hash[sum-arr[i]] = True\n        return False\n    <|file_separator|>\"\"\"\n    for i in range(0, len(arr)-2):\n        twoSum = sum - arr[i]\n        if hasPairWithSum(arr[i+1:], twoSum):\n            return True\n    return False"], [0.9048131704330444, "def findThreeNumberSum(arrSize, targetSum, array):\n    \"\"\"\n    Write a function that takes in a non-empty array of distinct integers and an integer representing a target sum. The function should find all triplets in the array that sum up to the target sum and return a two-dimensional array of all these triplets. The numbers in each triplet should be ordered in ascending order, and the triplets themselves should be ordered in ascending order with respect to the numbers they hold. If no three numbers sum up to the target sum, the function should return an empty array.\n    \n    Sample Input\n    array = [12, 3, 1, 2, -6, \"\"\"\n    for i in range(0, arrSize-2):\n        for j in range(i+1, arrSize-1):\n            for k in range(j+1, arrSize):\n                if array[i] + array[j] + array[k] == targetSum:\n                    return True\n    return False"]]}
{"task_id": "HumanEval/41", "problem": [[0.8985676765441895, "def advanced_car_race_collision(n: int, left_cars: List[Tuple[float, float]], right_cars: List[Tuple[float, float]], trajectories: List[Tuple[float, float]]) -> List[Tuple[int, int, float]]:\n    \"\"\"\n    \"\"\"\n    left_cars = sorted(left_cars, key=lambda x: x[0])\n    right_cars = sorted(right_cars, key=lambda x: x[0])\n    total_collisions = []\n\n    for t in range(n+1):\n        for i in range(len(left_cars)):\n            for j in range(i, len(right_cars)):\n                if check_collision(left_cars[i], right_cars[j], t):\n                    total_collisions.append((i, j, t))\n\n    return total_collisions"], [0.8851937055587769, "def min_boxes_touching_floor(n):\n    \"\"\"\n    Given a number of boxes, return the minimum number of boxes that need to be placed on the floor to ensure that all boxes are covered.\n    \n    For example, given n = 10, you should return 5, since placing 5 boxes on the floor will cover all 10 boxes.\n    \n    You can assume that n is a positive integer.\n    \"\"\"\n    return (n + 1) // 2"], [0.8849961757659912, "def numberOfMatches(n: int) -> int:\n    \"\"\"\n    \"\"\"\n    matches = 0\n    while n > 1:\n        matches += n // 2\n        n = (n + 1) // 2\n    return matches"]]}
{"task_id": "HumanEval/42", "problem": [[0.9245519042015076, "def increment_list(arr):\n    \"\"\"\n    Given a list of numbers, return a new list with all the numbers incremented by 1.\n    \n    >>> increment_list([1, 2, 3])\n    [2, 3, 4]\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] += 1\n    return arr"], [0.9201508164405823, "def increment_list(list_int):\n    \"\"\"\n    Given a list of numbers, return a new list with all the numbers plus 1.\n    \n    >>> increment_list([1, 2, 3])\n    [2, 3, 4]\n    \"\"\"\n    new_list = [] \n    for i in list_int:\n        new_list.append(i+1) \n    return new_list"], [0.8909934759140015, "def increment_list(nums):\n    \"\"\"\n    Given a list of numbers, replace each number with the sum of that number and the previous number.\n    \n    >>> increment_list([1, 2, 3])\n    [3, 5, 8]\n    \"\"\"\n    for i, num in enumerate(nums):\n        nums[i] = num + 2"], [0.8909862637519836, "def add_one(lst):\n    \"\"\"\n    Add one to each element in a list.\n    \n    Args:\n       lst(list): List of integers\n    Returns:\n       list - A new list of integers\n    \"\"\"\n    lst_new = []\n    for i in lst:\n        lst_new.append(i+1)\n    return lst_new"], [0.8908467292785645, "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # convert the list to a set to remove duplicates, then convert it back to a list\n    l = list(set(l))\n\n    # sort the list in increasing order\n    l.sort()\n\n    return l"], [0.889160692691803, "def increment(n):\n    \"\"\"\n    Increment a number by 1.\n    \n    >>> increment(1)\n    2\n    >>> increment(100)\n    101\n    \"\"\"\n    return n + 1"]]}
{"task_id": "HumanEval/43", "problem": [[0.9467010498046875, "def pairs_sum_to_zero(l):\n    \"\"\"\n    Given a list of integers, return the number of pairs of integers that sum to zero.\n    \n    >>> pairs_sum_to_zero([1, 2, -2, 3, 0, 0])\n    2\n    >>> pairs_sum_to_zero([1, 2, 3, 4, 5])\n    0\n    >>> pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -9\"\"\"\n    pairs = []\n    nums = sorted(l)\n    check_set = set()\n    for i,num in enumerate(nums):\n        if -num in check_set:\n            pairs.append((-num,num))\n        else:\n            check_set.add(num)\n    return pairs"], [0.9299019575119019, "def two_sum(arr):\n    \"\"\"\n    Given an array of integers, return whether or not two numbers sum to zero\n    \n    >>> two_sum([1, 2, 3, -2])\n    True\n    >>> two_sum([1, 2, 3, 4])\n    False\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == 0:\n                return True\n    return False"], [0.9247322678565979, "def pairs_difference_to_zero(lst):\n    \"\"\"\n    Given a list of integers, return a list of pairs of integers whose difference is zero.\n    \n    >>> pairs_difference_to_zero([1, 2, 3, 4, 5])\n    []\n    >>> pairs_difference_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [[10, 0], [9, 1], [8, 2], [7, 3], [6, 4], [5, \"\"\"\n    seen = set()\n    for num in lst:\n        if -num in seen:\n            return [-num, num]\n        seen.add(num)\n    return []"], [0.9235990047454834, "def sum_to_zero(nums): \n    \"\"\"\n    Given an array of integers, return True if the sum of any \n    3 integers results in 0.\n    \n    >>> sum_to_zero([1, 2, -3])\n    True\n    >>> sum_to_zero([1, 2, 3])\n    False\n    \"\"\"\n    for i in range(len(nums)): \n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False"], [0.9207910299301147, "def pairs_sum_to_zero(array):\n  \"\"\"\n  Given an array of distinct integers, return the number of pairs of integers that sum to zero.\n  \n  Example 1:\n  Input: [1, 2, -1, 0]\n  Output: 2\n  Explanation: The pairs are [-1, 1], [0, 0]\n  \n  Example 2:\n  Input: [1, 2, 3, 4, 5]\n  Output: 0\n  \n  Example 3:\n  Input: [1, 2, -1, 0, \"\"\"\n  pairs = []\n  for i in range(len(array)):\n    for j in range(i+1, len(array)):\n      if array[i] + array[j] == 0:\n        pairs.append([array[i], array[j]])\n  return len(pairs)"], [0.9179114103317261, "def has_zero_sum(arr):\n    \"\"\"\n    Check if there is a pair of numbers in the array that sum to zero.\n    \"\"\"\n    seen_numbers = set()\n\n    for num in arr:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n\n    return False\n    def has_zero_sum(arr):\n    \"\"\"\n    Check if there is a pair of numbers in the array that sum to zero.\n    \"\"\"\n    seen_numbers = set()\n\n    for num in arr:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n\n    return False"], [0.9109795093536377, "def triples_sum_to_zero(arr):\n   \"\"\"\n   Given an array of distinct integers arr, determine if there are two integers A and B in arr such that A + B = 0.\n   \n   Example 1:\n   \n   Input: arr = [-1,0,1]\n   Output: true\n   \n   Example 2:\n   \n   Input: arr = [-1,0,1,2,-1,-4]\n   Output: true\n   \n   Constraints:\n   \n   1 <= arr.length <= 10^5\n   -10^5 <= arr[i] <= 1\"\"\"\n   arr.sort()\n   for i in range(len(arr)-2):\n      if i>0 and arr[i] == arr[i-1]:\n         continue\n      l = i+1\n      r = len(arr)-1\n      while l < r:\n         total = arr[i]+arr[l]+arr[r]\n         if total<0:\n            l += 1\n         elif total>0:\n            r -= 1\n         else:\n            return True\n   return False"], [0.9099830985069275, "def sum_to_zero(arr):\n    \"\"\"\n    Given an array of integers, return a set of all pairs that sum to zero.\n    :param arr: array of integers\n    :return: set of pairs that sum to zero\n    \"\"\"\n    arr.sort()\n    result = set()\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == 0:\n            result.add((arr[i], arr[j]))\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < 0:\n            i += 1\n        else:\n            j -= 1\n    return result"], [0.9093340039253235, "def sum_target(lst, target):\n    \"\"\"\n    \"\"\"\n    for pair in lst:\n        if pair[0] + pair[1] == target:\n            return True\n    return False"], [0.906998872756958, "def sum_within_bounds(l: list, lower_bound: int, upper_bound: int):\n    \"\"\"\n    Given a list of integers, return True if the sum of the integers is\n    between lower_bound and upper_bound (inclusive).\n    \n    >>> sum_within_bounds([1, 2, 3], 1, 5)\n    True\n    >>> sum_within_bounds([1, 2, 3], 1, 4)\n    False\n    \"\"\"\n    if len(l) % 2 == 0:\n        s = sum(l)\n        if lower_bound <= s <= upper_bound:\n            return True\n        else:\n            return False\n    else:\n        return False"]]}
{"task_id": "HumanEval/44", "problem": [[0.9205965399742126, "def number_to_binary(x: str, base: int):\n    \"\"\"Convert a number from a specified base into its binary equivalent, both represented as strings. \"\"\"\n    if not isinstance(x, str):\n        raise ValueError(\"Input x must be a string.\")\n        \n    if not isinstance(base, int):\n        raise ValueError(\"Input base must be an integer.\")\n    \n    if base not in (8, 10, 16):\n        raise ValueError(\"Base must be 8 (octal), 10 (decimal), or 16 (hexadecimal).\")\n        \n    # convert to integer in the specific base, then convert to binary,\n    # slice the '0b' prefix of binary representation\n    binary = bin(int(x, base))[2:]\n    return binary"], [0.9193377494812012, "def number_to_binary(x: str, base: int):\n    \"\"\"\n    Convert an input number, represented as a string, of a specified base (integer) into its binary equivalent. Also handles the conversion of negative numbers and non-integer numbers into their binary equivalents. \n    The function should support base 8 (octal), base 10 (decimal),  base 16 (hexadecimal), and base 2 (binary).\n    \"\"\"\n    \n    if x[0] == '-':\n        prefix = '-'\n        x = x[1:]\n    else:\n        prefix = ''\n\n    if '.' in x:\n        integer_part, fractional_part = x.split('.')\n\n        integer_part = int(integer_part, base)\n        fractional_part = int(fractional_part, base) / (base ** len(fractional_part))\n\n        binary_integer_part = bin(integer_part)[2:]\n        binary_fractional_part = '.'\n\n        while fractional_part:\n            fractional_part *= 2\n            bit = int(fractional_part)\n\n            if bit == 1:\n                fractional_part -= bit\n                binary_fractional_part += '1'\n            else:\n                binary_fractional_part += '0'\n\n        return prefix + binary_integer_part + binary_fractional_part\n    else:\n        return prefix + bin(int(x, base))[2:]"], [0.9184539318084717, "def number_to_binary(x: str, base: int):\n    \"\"\"Convert an input number, represented as a string of a specified base (integer) into its binary equivalent as a string.\n    The base can be either 8 (indicating octal), 10 (indicating decimal), or 16 (for hexadecimal).\n    Examples are provided below for better understanding:\n    >>> number_to_binary('8', 16) => '1000'\n    >>> number_to_binary('F', 16) => '1111'\n    >>> number_to_binary('1A', 16) => '11010'\n    >>> number_to_binary('10', 8) => '1000'\n    >>> number_to_binary('7', 8)  => '111'\n    >>> number_to_binary('12', 8) => '1010'\n    >>> number_to_binary('9', 10) => '1001'\n    >>> number_to_binary('15', 10) => '1111'\n    >>> number_to_binary('26', 10) => '11010'\n    \"\"\"\n    #Convert the input to an integer with the specified base\n    x = int(x, base)\n\n    # Convert the integer to binary\n    binary = bin(x)\n\n    # Return the binary value, omitting the first two characters ('0b')\n    return binary[2:]"], [0.917145848274231, "def number_to_binary(x: str, base: int):\n    \"\"\"Convert an input number, represented as a string, of a specified base (integer) into its binary equivalent as a string.\n    The base can be either 8 (indicating octal), 10 (indicating decimal), or 16 (for hexadecimal).\n    Examples are provided below for better understanding:\n    >>> number_to_binary('8', 16) => '1000'\n    >>> number_to_binary('F', 16) => '1111'\n    >>> number_to_binary('1A', 16) => '11010'\n    >>> number_to_binary('10', 8) => '1000'\n    >>> number_to_binary('7', 8)  => '111'\n    >>> number_to_binary('12', 8) => '1010'\n    >>> number_to_binary('9', 10) => '1001'\n    >>> number_to_binary('15', 10) => '1111'\n    >>> number_to_binary('26', 10) => '11010'\n    \"\"\"\n    # Convert the input to an integer with the specified base\n    x = int(x, base)\n\n    # Convert the integer to binary\n    binary = bin(x)\n\n    # Return the binary value, omitting the first two characters ('0b')\n    return binary[2:]"]]}
{"task_id": "HumanEval/45", "problem": [[0.9449683427810669, "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, return the triangle's area.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # Data validation\n    if not isinstance(a, (int, float)) or not isinstance(h, (int, float)):\n        return \"Error: both side-length and height need to be numbers\"\n      \n    if a < 0 or h < 0:\n        return \"Error: side-length and height values can't be negative\"\n        \n    if a == 0 or h == 0:\n        return \"Error: side-length or height can't be zero\"\n\n    # Calculation\n    return 0.5 * a * h"], [0.928779125213623, "def triangle_area(a, h):\n    \"\"\"Utilizing input values representing the side length (a) and height (h), accurately calculate the triangle's area.\"\"\"\n    area = 0.5 * a * h\n    return area"], [0.9247934818267822, "def triangle_area(a, h):\n    \"\"\"\n    Utilizing input values representing the side length and height, \n    accurately calculate the triangle's area if inputs form a valid triangle.\n    It considers a and h as the base and height of a right triangle.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # validation for non-positive inputs\n    if a <= 0 or h <= 0:\n        raise ValueError('Input values must be positive numbers.')\n        \n    # calculation of the triangle's area\n    return 0.5 * a * h"], [0.9234743118286133, "def triangle_area(side_a, side_b):\n    \"\"\"\n    Calculate the area of a triangle.\n    \n    :param side_a: length of side a\n    :param side_b: length of side b\n    :return: area of the triangle\n    \"\"\"\n    # calculate the area of the triangle\n    area = 0.5 * side_a * side_b\n    return area"], [0.9231519103050232, "def triangle_area(a, h):\n    \"\"\"\n    This function calculates the area of a triangle.\n    \n    Parameters:\n    a (float): The length of the base of the triangle.\n    h (float): The height of the triangle.\n    \n    Returns:\n    float: The area of the triangle.\n    \"\"\"\n    if a <= 0 or h <= 0:\n        return \"Error: Negative or zero values are not valid.\"\n    else:\n        return (0.5) * a * h"], [0.9203291535377502, "def triangle_area(base, height):\n    \"\"\"\n    Return the area of a triangle with the given base and height.\n    \"\"\"\n    return 0.5 * base * height"], [0.9148952960968018, "def tri_area(base, height):\n    \"\"\"\n    Return the area of a triangle with the given base and height.\n    \"\"\"\n    return 0.5*base*height\n    \n    def tri_area(base, height):\n    \"\"\"\n    Return the area of a triangle with the given base and height.\n    \"\"\"\n    return 0.5*base*height"], [0.913087010383606, "def triangle_area(base, height):\n    \"\"\"\n    Return the area of a triangle.\n    \n    :param base: The base of the triangle.\n    :param height: The height of the triangle.\n    :return: The area of the triangle.\n    \"\"\"\n    return (base * height) / 2"], [0.9123490452766418, "def areaTriangle(base, height):\n  \"\"\"\n  Return the area of a triangle with the given base and height.\n  \"\"\"\n  return 0.5 * base * height\n    def areaTriangle(base, height):\n  \"\"\"\n  Return the area of a triangle with the given base and height.\n  \"\"\"\n  return 0.5 * base * height"], [0.9097468256950378, "def triangle_area(a, b, c): \n    \"\"\"\n    Calculate the area of a triangle given the length of its sides.\n    \n    :param a: length of side a\n    :param b: length of side b\n    :param c: length of side c\n    :return: area of triangle\n    \"\"\"\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5"]]}
{"task_id": "HumanEval/46", "problem": [[0.9054789543151855, "def enhanced_fibfib(n: int) -> int:\n    \"\"\"\n    \"\"\"\n    limit = 10**6\n    mod = 10**9+7\n    fibfib_series = [0]*max(n+1,limit+1) \n    fibfib_series[2] = 1\n\n    if (n <= 2):\n        return fibfib_series[n]\n    else: \n        for i in range(3, n+1):\n            if i < 1000:\n                fibfib_series[i] = (fibfib_series[i-1] + fibfib_series[i-2] + fibfib_series[i-3] + fibfib_series[i-4]) % mod\n            elif i >= 1000:\n                fibfib_series[i] = (fibfib_series[i-1000] * 2) % mod\n                \n        return fibfib_series[n]"], [0.9049362540245056, "def fibfib(n: int):\n    \"\"\"\n    Return the nth number in the Fibonacci sequence.\n    The Fibonacci sequence is defined as:\n    fib(0) = 0\n    fib(1) = 0\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibs = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        fibs.append(fibs[i-1] + fibs[i-2] + fibs[i-3])\n\n    return fibs[n]"]]}
{"task_id": "HumanEval/47", "problem": [[0.959434986114502, "def median(l: list):\n    \"\"\"\n    Find the median of a list of numbers.\n    \n    >>> median([1, 2, 3, 4, 5])\n    3\n    >>> median([1, 2, 3, 4, 5, 6])\n    3.5\n    \"\"\"\n    n = len(l)\n    s = sorted(l)\n    return (s[n//2] if n % 2 == 1 else (s[n//2 - 1] + s[n//2]) / 2)"], [0.9564302563667297, "def median(l):\n    \"\"\"\n    Return the median of a list of numbers.\n    \n    >>> median([1, 2, 3, 4, 5])\n    3\n    >>> median([1, 2, 3, 4, 5, 6])\n    3.5\n    \"\"\"\n    return statistics.median(l)"], [0.9543144106864929, "def median(l):\n    \"\"\"\n    Find the median of a list of numbers.\n    \n    >>> median([1, 2, 3, 4, 5])\n    3\n    >>> median([1, 2, 3, 4, 5, 6])\n    3.5\n    \"\"\"\n    if len(l) % 2:\n        return kth_element(l, len(l) // 2)\n    else:\n        return (kth_element(l, len(l) // 2 - 1) + kth_element(l, len(l) // 2)) * 0.5"], [0.9469738006591797, "def median(l): \n    \"\"\"\n    Find the median of a list of numbers.\n    \n    >>> median([1, 2, 3])\n    2\n    \n    >>> median([1, 2, 3, 4])\n    2.5\n    \"\"\"\n    if len(l)%2 == 0: \n      return (select(l, len(l)//2) + select(l, len(l)//2-1))/2 # find average of two middle elements for even lists \n    else: \n      return select(l, len(l)//2) # middle element for odd lists "], [0.9455877542495728, "def median(l: list):\n    \"\"\"Computes the median of a list without sorting it. \n    Handles odd and even counts, negative integers, and floating-point numbers.\n    \"\"\"\n    sorted_l = sorted(l)\n    len_l = len(l)\n    \n    if len_l % 2 == 0:  # even\n        median = (sorted_l[(len_l) // 2 - 1] + sorted_l[(len_l) // 2]) / 2\n    else:  # odd\n        median = sorted_l[(len_l - 1) // 2]\n\n    return median"], [0.944825291633606, "def median(l):\n    \"\"\"\n    Find the median of a list of numbers.\n    \n    The median is the middle value in an ordered list of numbers.\n    If the list has an even number of elements, the median is the average of the two middle elements.\n    \n    :param l: The list of numbers.\n    :return: The median of the list.\n    \"\"\"\n    if not l:\n        raise ValueError('The input list must contain at least one element')\n    n = len(l)\n    if n % 2 == 1:\n        return quickselect(l, 0, n - 1, n // 2)\n    else:\n        return 0.5 * (quickselect(l, 0, n - 1, n // 2 - 1) + quickselect(l, 0, n - 1, n // 2))"], [0.9448199272155762, "def median(l):\n    \"\"\"\n    Find the median of a list of numbers.\n    \n    The median is the middle value in an ordered list of numbers.\n    If the list has an even number of elements, the median is the average of the two middle elements.\n    \n    :param l: The list of numbers.\n    :return: The median of the list.\n    \"\"\"\n    if not l:\n        raise ValueError('The input list must contain at least one element')\n    n = len(l)\n    if n % 2 == 1:\n        return quickselect(l, 0, n - 1, n // 2)\n    else:\n        return 0.5 * (quickselect(l, 0, n - 1, n // 2 - 1) + quickselect(l, 0, n - 1, n // 2))"], [0.9440436959266663, "def median(my_list):\n    \"\"\"\n    Return the median of a list of numbers.\n    \n    >>> median([1, 2, 3, 4, 5])\n    3\n    >>> median([1, 3, 5])\n    3\n    \"\"\"\n    my_list.sort()\n    half = len(my_list) // 2\n    if len(my_list) % 2 == 0:   # even number of elements\n        return (my_list[half - 1] + my_list[half]) / 2.0\n    else:   # odd number of elements\n        return my_list[half]"], [0.9434081315994263, "def median(l: list):\n    \"\"\"Return median of elements in the list l without sorting it or using built-in functions.\n    Handles tuples with even and odd number of elements, and duplicates.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([1, 2, 2, 4, 5])\n    2\n    \"\"\"\n    length = len(l)\n    if length % 2 == 0:\n        return (quickSelect(l, 0, length - 1, length // 2 - 1) + quickSelect(l, 0, length - 1, length // 2)) / 2\n    else:\n        return quickSelect(l, 0, length - 1, length // 2)"], [0.9430001974105835, "def median(l):\n    \"\"\"\n    Find the median of a list of numbers.\n    \n    Args:\n        l: a list of numbers.\n        \n    Returns:\n        The median of the list.\n    \"\"\"\n    return quickselect_median(l, pivot_fn=lambda x: x[len(x) // 2])"]]}
{"task_id": "HumanEval/48", "problem": [[0.9496983289718628, "def is_palindrome(text):\n    \"\"\"\n    Check if a given text is a palindrome.\n    :param text: The text to be checked\n    :return: True if the text is a palindrome, False otherwise\n    \"\"\"\n    return text == text[::-1]"], [0.9496896862983704, "def is_palindrome(text):\n    \"\"\"\n    Check if a given text is a palindrome.\n    :param text: The text to be checked\n    :return: True if the text is a palindrome, False otherwise\n    \"\"\"\n    return text == text[::-1]"], [0.9496812224388123, "def is_palindrome(text):\n    \"\"\"\n    Check if a given text is a palindrome.\n    :param text: The text to be checked\n    :return: True if the text is a palindrome, False otherwise\n    \"\"\"\n    return text == text[::-1]"], [0.9455541372299194, "def is_palindrome(text):\n    \"\"\"\n    Check if a string is a palindrome.\n    :param text: string to be checked\n    :return: True if text is a palindrome, False otherwise\n    \"\"\"\n    i = 0\n    j = len(text) - 1\n    while i <= j:\n        if text[i] != text[j]:\n            return False\n        i += 1\n        j -= 1\n    return True"], [0.9446568489074707, "def isPalindrome(text):\n    \"\"\"\n    Check if a string is a palindrome\n    :param text: string\n    :return: boolean\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]"], [0.9444239139556885, "def is_palindrome(text):\n    \"\"\"\n    Check if the given text is a palindrome.\n    \n    Args:\n        text (str): The text to check.\n        \n    Returns:\n        bool: True if the text is a palindrome, False otherwise.\n    \"\"\"\n    reverse = text[::-1] # Reverse the string\n    return text == reverse"], [0.9435648918151855, "def is_palindrome(text):\n    \"\"\"\n    Check if a given text is a palindrome.\n\n    Args:\n        text (str): The text to check.\n\n    Returns:\n        bool: True if the text is a palindrome, False otherwise.\n    \"\"\"\n    # Normalize the text by lowercasing it and removing non-alphanumeric characters\n    text = \"\".join(char for char in text if char.isalnum()).lower()\n\n    # Check if the text reads the same forwards and backward\n    return text == text[::-1]"], [0.9433080554008484, "def is_palindrome(text):\n    \"\"\"\n    Check if a given text is a palindrome.\n    \n    Args:\n        text (str): The text to check.\n        \n    Returns:\n        bool: True if the text is a palindrome, False otherwise.\n    \"\"\"\n    reversed_text = text[::-1]\n    \n    if text == reversed_text:\n        return True\n    return False"], [0.9430646896362305, "def isPalindrome(text):\n    \"\"\"\n    Check if a string is a palindrome.\n    :param text: string to be checked\n    :return: True if text is a palindrome, False otherwise\n    \"\"\"\n    n = len(text)\n    for i in range(n // 2):\n        if text[i] != text[n - i - 1]:\n            return False\n    return True"], [0.9400159120559692, "def check_palindrome(text):\n    \"\"\"\n    Check if the text is a palindrome\n    :param text: string\n    :return: boolean\n    \"\"\"\n    for i in range(len(text) // 2):\n        if(text[i] != text[len(text) - i - 1]):\n            return False\n    return True"]]}
{"task_id": "HumanEval/49", "problem": [[0.8958614468574524, "def power(F, n, m):\n    \"\"\"\n    Returns F^n mod m.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return power((F * F) % m, n // 2, m)\n    return (F * power(F, n - 1, m)) % m\n\n\ndef multiply(F, M, m):\n    \"\"\"\n    Multiplies F by M mod m.\n    \"\"\"\n    F[0] = (F[0] * M[0][0] + F[1] * M[0\"\"\"\n    M = [[1, 1],\n         [1, 0]]\n    for _ in range(2, n + 1):\n        multiply(F, M, m)"], [0.8955385684967041, "def power_of_two(n, memo={}):\n    \"\"\"\n    Return the value of 2**n.\n    >>> power_of_two(0)\n    1\n    >>> power_of_two(1)\n    2\n    >>> power_of_two(2)\n    4\n    >>> power_of_two(4)\n    16\n    \"\"\"\n    if n == 0:\n        return 1\n    if n in memo:\n        return memo[n]\n    memo[n] = 2 * power_of_two(n - 1, memo)\n    return memo[n]"]]}
{"task_id": "HumanEval/50", "problem": [[0.9352093935012817, "def decode_cipher(s: str, shift: int) -> str:\n    \"\"\"\n    Decode a ciphered message using a given shift value.\n\n    Args:\n        s (str): The ciphered message to decode.\n        shift (int): The shift value used to cipher the message.\n\n    Returns:\n        str: The decoded message.\n    \"\"\"\n    decoded_message = \"\"\n    for char in s:\n        if char.isalpha():\n            shift_amount = 65 if char.isupper() else 97\n            decoded_char = chr((ord(char) - shift_amount - shift) % 26 + shift_amount)\n            decoded_message += decoded_char\n        else:\n            decoded_message += char\n    return decoded_message"], [0.9302659630775452, "def shift_cipher(s, shift):\n    \"\"\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha(): # only shift alphanumeric characters\n            ascii_code = ord(char) \n            ascii_code += shift if ascii_code < 123 else -26 \n            result += chr(ascii_code)\n        else:\n            result += char # don't shift special characters\n    return result"]]}
{"task_id": "HumanEval/51", "problem": [[0.9546741247177124, "def remove_vowels(text):\n    \"\"\"\n    Removes all vowels from a string.\n    >>> remove_vowels(\"This is a test\")\n    'Ths s  tst'\n    \"\"\"\n    no_vowels = \"\"\n    for character in text:\n        if character not in \"aeiouAEIOU\":\n            no_vowels += character\n    return no_vowels"], [0.950664758682251, "def remove_vowels(text):\n    \"\"\"Remove the vowels from a given string.\"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result"], [0.9470234513282776, "def remove_vowels(text):\n    \"\"\"\n    Removes all vowels from a given string.\n    \n    Args:\n        text (str): The string to remove vowels from.\n    \n    Returns:\n        str: The string with all vowels removed.\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    no_vowels = \"\"\n\n    for letter in text:\n        if letter.lower() not in vowels:\n            no_vowels += letter\n    return no_vowels"], [0.945757269859314, "def remove_vowels(string):\n    \"\"\"\n    Remove all vowels from a given string.\n    >>> remove_vowels(\"This is a test string\")\n    'Ths s  tst strng'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_string = \"\"\n    for char in string:\n        if char not in vowels:\n            new_string += char\n    return new_string"], [0.9450527429580688, "def remove_vowels(text):\n    \"\"\"\n    Removes all vowels from a given string.\n    \n    Args:\n        text (str): The input string.\n        \n    Returns:\n        str: The string with all vowels removed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"], [0.9447605609893799, "def remove_vowels(string): \n    \"\"\"\n    Remove all vowels from a given string.\n    \n    >>> remove_vowels('Theistareykjarbunga')\n    'ThstrykJrbna'\n    >>> remove_vowels('AEIOU')\n    ''\n    \"\"\"\n    vowels = ('a', 'e', 'i', 'o', 'u')  \n    for x in string.lower(): \n        if x in vowels: \n            string = string.replace(x, \"\") \n    return string"], [0.9442763924598694, "def remove_vowels(text):\n    \"\"\"\n    Removes all vowels from a given string.\n    \n    Args:\n        text (str): The input string.\n    \n    Returns:\n        str: The string with all vowels removed.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"], [0.9440063834190369, "def remove_vowels(s):\n    \"\"\"\n    Remove all vowels from a given string.\n    \n    >>> remove_vowels(\"This is an example\")\n    'Ths s n xmpl'\n    \"\"\"\n    vowels = ('a', 'e', 'i', 'o', 'u') \n    s_without_vowels = \"\"\n    for char in s:\n        if char not in vowels:\n            s_without_vowels += char\n    return s_without_vowels"], [0.9436321258544922, "def remove_vowels(string):\n    \"\"\"\n    Removes all vowels from a string.\n    \n    >>> remove_vowels('hello world')\n    'hll wrld'\n    >>> remove_vowels('aeiou')\n    ''\n    \"\"\"\n    vowels = 'aeiou'\n    new_string = ''\n\n    for c in string:\n        if c.lower() not in vowels:\n            new_string += c\n    \n    return new_string"], [0.9436189532279968, "def remove_vowels(string):\n    \"\"\"\n    Remove all vowels from a given string.\n    \n    >>> remove_vowels('This is an example')\n    'Ths s n xmpl'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        string = string.replace(vowel, '')\n    return string"]]}
{"task_id": "HumanEval/52", "problem": [[0.9786379933357239, "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if every integer in list l is below the threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for i in l:\n        if i >= t:\n            return False\n    return True"], [0.9603942632675171, "def below_threshold(l, t):\n    \"\"\"\n    Provide a boolean return stating whether every integer in a collection labelled 'l' is less than a specific, predetermined limit 't'.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(e < t for e in l)"], [0.9523731470108032, "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Indicates if all integers in list l do not exceed the specified threshold t.\n    If the element is not an integer type, it will be ignored.\n    \"\"\"\n    for item in l:\n        if isinstance(item, int) and item > t:\n            return False\n    return True"], [0.9510354995727539, "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    \"\"\"\n    for num in l:\n        if num > t:\n            return False\n    return True"], [0.9426862597465515, "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    \"\"\"\n    for element in l:\n        if type(element) is int:\n            if element > t:\n                return False\n    return True"], [0.9425663948059082, "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Check if all numbers in a list are below a given threshold.\n\n    Args:\n        l (list): List of numbers to check.\n        t (int): Threshold value.\n\n    Returns:\n        bool: True if all numbers are below threshold, False otherwise.\n\n    Raises:\n        ValueError: If threshold is non-positive or list is empty.\n    \"\"\"\n    # Check if threshold is non-positive\n    if t <= 0:\n        raise ValueError(\"Threshold must be a positive integer\")\n\n    # Check if list is empty\n    if not l:\n        raise ValueError(\"Input list cannot be empty\")\n\n    # Use a generator comprehension to evaluate each number\n    # Return True if all numbers are below threshold, False otherwise\n    return all(i < t for i in l)"], [0.9392139315605164, "def below_threshold(l: list, t: int):\n    \"\"\"The function determines if all integers contained in list l are within the specified threshold t. A situation where the list may include non-integer data types is also accounted for.\n    \"\"\"\n    for i in l:\n        if isinstance(i, int) and i > t:\n            return False\n    return True"], [0.9227985143661499, "def above_limit(l: list, lim: int) -> bool:\n    \"\"\"Return True if every integer in list l is above the limit lim.\n    >>> above_limit([10, 20, 30, 50], 5)\n    True\n    >>> above_limit([1, 5, 8, 15], 10)\n    False\n    \"\"\"\n    return all(i > lim for i in l)"], [0.9071448445320129, "def above_floor(l: list, f: int) -> bool:\n    \"\"\"Indicates if all integers in list l are not less than the specified floor value f.\n\n    >>> above_floor([10, 20, 30, 40], 5)\n    True\n    >>> above_floor([5, 15, 28, 32], 10)\n    False\n    \"\"\"\n    # Iterating through the list and checking if each element is greater than f\n    for num in l:\n        if num < f:\n            return False\n    return True"]]}
{"task_id": "HumanEval/53", "problem": [[0.9459822177886963, "def add_numbers(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers together.\n\n    Args:\n        x (int): The first number.\n        y (int): The second number.\n\n    Returns:\n        int: The sum of the two numbers.\n    \"\"\"\n    return x + y"], [0.9429588317871094, "def add(a, b):\n    \"\"\"Add two numbers\"\"\"\n    return a + b"], [0.9419581890106201, "def add(a=12, b=16):\n    \"\"\"Add two numbers\n    \n    :param a: first number\n    :param b: second number\n    \"\"\"\n    print(a + b)"], [0.9406564235687256, "def add(x, y):\n    \"\"\"\n    Add two numbers.\n    \n    :param x: first number\n    :param y: second number\n    :return: sum of x and y\n    \"\"\"\n    assert y != 0, \"y must not be zero!\"\n    z = x + y\n    return z"], [0.9398502707481384, "def func(x, y):\n    \"\"\"\n    This function adds two numbers\n    \n    :param x: The first number\n    :type x: int\n    :param y: The second number\n    :type y: int\n    :return: The sum of x and y\n    :rtype: int\n    \"\"\"\n    return x + y"], [0.9395633935928345, "def add_ints(a, b):\n    \"\"\"\n    Add two integers together\n    >>> add_ints(1, 2)\n    3\n    >>> add_ints(100, 200)\n    300\n    \"\"\"\n    return a + b"], [0.9395307302474976, "def add_ints(a, b):\n    \"\"\"\n    Add two integers together\n    >>> add_ints(1, 2)\n    3\n    >>> add_ints(100, 200)\n    300\n    \"\"\"\n    return a + b"], [0.939113438129425, "def myfunc(x, y):\n    \"\"\"\n    This function adds two numbers\n    \n    Args:\n        x (int): The first number\n        y (int): The second number\n    \n    Returns:\n        int: The sum of x and y\n    \"\"\"\n    return x + y"], [0.9388692378997803, "def add(a: int, b: int) -> int:\n    \"\"\"\n    Add two numbers\n    :param a: first number\n    :param b: second number\n    :return: sum of two numbers\n    \"\"\"\n    result = a + b\n    return result"], [0.9385042786598206, "def add_numbers(x, y):\n    \"\"\"\n    This function adds two numbers\n    \"\"\"\n    return x + y\n    def add_numbers(x, y):\n    \"\"\"\n    This function adds two numbers\n    \"\"\"\n    return x + y"]]}
{"task_id": "HumanEval/54", "problem": [[0.9511529207229614, "def check_same_chars(s1, s2):\n    \"\"\"\n    Check if two strings have the same characters.\n    \n    >>> check_same_chars('abc', 'cba')\n    True\n    >>> check_same_chars('abc', 'cb')\n    False\n    \"\"\"\n    return sorted(s1) == sorted(s2)"], [0.9451053142547607, "def same_chars(str1, str2):\n    \"\"\"\n    Check if two strings have the same characters in the same quantity.\n\n    >>> same_chars('abc', 'abc')\n    True\n    >>> same_chars('abc', 'abcc')\n    False\n    >>> same_chars('abc', 'cba')\n    True\n    >>> same_chars('abc', 'bac')\n    False\n    \"\"\"\n    if len(str1) != len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            return False\n    return True"], [0.9381880760192871, "def count_same_chars(s1, s2):\n    \"\"\"\n    Count the number of characters that are the same in two strings.\n    \n    >>> count_same_chars('abc', 'abc')\n    3\n    >>> count_same_chars('abc', 'abd')\n    2\n    >>> count_same_chars('abc', 'aaa')\n    1\n    \"\"\"\n    return len(s1) == len(s2)"], [0.9224998950958252, "def same_chars(string1, string2):\n    \"\"\"\n    Given two strings, return whether they contain the same characters.\n    \n    For example, the strings \"cat\" and \"tac\" contain the same characters.\n    \n    You can assume the strings contain only lowercase letters.\n    \n    Hint: What's the easiest way to compare whether two strings contain the same characters?\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\"\"\"\n    if len(string1) != len(string2):\n        return False\n    \n    char_map = {}\n    for char in string1:\n        if char in char_map:\n            char_map[char] += 1\n        else:\n            char_map[char] = 1\n            \n    for char in string2:\n        if char not in char_map or char_map[char] == 0:\n            return False\n        else:\n            char_map[char] -= 1\n    \n    return True"], [0.9223159551620483, "def same_characters(str1, str2):\n    \"\"\"\n    Given two strings, return True if they contain the same characters in the same quantity.\n    The strings may contain any ascii characters.\n    \n    same_characters(\"abc\", \"cab\") -> True\n    same_characters(\"abc\", \"abb\") -> False\n    same_characters(\"abc\", \"abbc\") -> False\n    \"\"\"\n    if len(str1) != len(str2):\n        return False\n    \n    characters = {}\n    for s1, s2 in zip(str1, str2):\n        if s1 not in characters:\n            characters[s1] = 1\n        else:\n            characters[s1] += 1\n        if s2 not in characters:\n            characters[s2] = -1\n        else:\n            characters[s2] -= 1\n\n    for count in characters.values():\n        if count != 0:\n            return False\n    return True"], [0.9112776517868042, "def check_common_chars(s1, s2): \n    \"\"\"\n    Check if two strings have any common characters.\n    \n    Args:\n        s1 (str): first string\n        s2 (str): second string\n    \n    Returns:\n        bool: True if common characters, False otherwise\n    \"\"\"\n    for char in s1: \n        if char in s2: \n            return True\n    return False"]]}
{"task_id": "HumanEval/55", "problem": [[0.9616871476173401, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"], [0.9615107774734497, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"], [0.9614770412445068, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"], [0.9608298540115356, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)"], [0.9608265161514282, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)"], [0.9603466987609863, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    >>> fib(100)\n    354224848179261915075\n    \"\"\"\n    if n <= 1:\n        return n \n    else:\n        return fib(n-1)+fib(n-2)"], [0.9603388905525208, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    >>> fib(100)\n    354224848179261915075\n    \"\"\"\n    if n <= 1:\n        return n \n    else:\n        return fib(n-1)+fib(n-2)"], [0.9593900442123413, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"], [0.9580969214439392, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \"\"\"\n    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)"], [0.9574626684188843, "def fib(n):\n    \"\"\"\n    Return the nth Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"]]}
{"task_id": "HumanEval/56", "problem": [[0.9310619831085205, "def correct_bracketing(brackets):\n    \"\"\"\n    Check if the brackets are correctly closed.\n    :param brackets: string of brackets\n    :return: boolean\n    \"\"\"\n    s = []\n    for bracket in brackets:\n        if bracket == '<':\n            s.append('<')\n        else:\n            if not s:\n                return False\n            else:\n                s.pop()\n    if not s:\n        return True\n    else:\n        return False"], [0.9055531620979309, "def is_nested_and_balanced(s):\n    \"\"\"\n    \"\"\"\n    stack = []\n    openers_to_closers = {\n        '(': ')',\n        '[': ']',\n        '{': '}',\n        '<': '>',\n    }\n    closers = set(openers_to_closers.values())\n\n    for char in s: \n        if char in openers_to_closers:\n            stack.append(char)\n        elif char in closers:\n            if not stack: \n                return False\n            else: \n                last_unclosed_opener = stack.pop()\n                if not char == openers_to_closers[last_unclosed_opener]:\n                    return False\n\n    return stack == [] # stack should be empty at the end"]]}
{"task_id": "HumanEval/57", "problem": [[0.9540131092071533, "def monotonic(l: list, strict: bool = False) -> bool:\n    \"\"\"\n    Returns True if the list is monotonic.\n    \n    >>> monotonic([1, 2, 3, 4, 5])\n    True\n    >>> monotonic([5, 4, 3, 2, 1])\n    True\n    >>> monotonic([1, 2, 3, 2, 1])\n    False\n    >>> monotonic([1, 2, 3, 4, 5], strict=True)\n    True\n    >>> monotonic([5, 4, 3, 2, 1], strict=True)\n\"\"\"\n    if len(l) < 2:\n        return True\n    \n    if strict:\n        return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n    else:\n        return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"], [0.9520489573478699, "def monotonic(l: list, strict: bool = False):\n    \"\"\"\n    Returns True if the list is monotonic.\n    \n    A monotonic list is a list where all elements are in non-decreasing order or\n    all elements are in non-increasing order.\n    \n    If strict is True, then the list must be monotonic strictly.\n    \n    >>> monotonic([1, 2, 3, 4, 5])\n    True\n    >>> monotonic([5, 4, 3, 2, 1])\n    True\n    >>> monotonic([1, 2, 3, 2, 1])\n    False\n    \"\"\"\n    if not l or len(l) < 2:\n        return False\n    \n    even_num_exists = any(n % 2 == 0 for n in l)\n    if not even_num_exists:\n        return False\n    \n    delta = l[1] - l[0]\n    for index in range(2, len(l)):\n        if (strict and delta == 0) or (delta * (l[index] - l[index - 1]) <= 0):\n            return False\n        delta = l[index] - l[index - 1]\n        \n    return True"], [0.9437532424926758, "def monotonic(l: list, strict: bool = False) -> bool:\n    \"\"\"\n    Returns True if the list is monotonic.\n    \n    >>> monotonic([1, 2, 3, 4, 5])\n    True\n    >>> monotonic([5, 4, 3, 2, 1])\n    True\n    >>> monotonic([1, 2, 3, 2, 1])\n    False\n    >>> monotonic([1, 2, 3, 4, 5], strict=True)\n    True\n    >>> monotonic([5, 4, 3, 2, 1], strict=True)\n\"\"\"\n    if any(is_prime(x) for x in l):\n        return False\n    if strict:\n        return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n    else:\n        return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"], [0.9381594061851501, "def monotonic(l: list, strict: bool = False):\n    \"\"\"\n    Returns True if the list is monotonic.\n    \n    Parameters\n    ----------\n    l : list\n        The list to check.\n    strict : bool, optional\n        If True, the list must be strictly monotonic.\n        If False, the list must be monotonic.\n        The default is False.\n    \n    Returns\n    -------\n    bool\n        True if the list is monotonic.\n    \n    Examples\n    --------\n    >>> monotonic([1, 2, 3, 4, 5])\n    True\n    >>> monotonic([1, 2, \"\"\"\n    if len(l) < 2:        \n        return True\n\n    if strict:\n        diff = [l[i+1] - l[i] for i in range(len(l)-1)]\n        if all(i > 0 for i in diff): \n            return True    \n        if all(i < 0 for i in diff): \n            return True\n        return False\n    else:\n        diff = [l[i+1] - l[i] for i in range(len(l)-1)]\n        if all(i >= 0 for i in diff): \n            return True    \n        if all(i <= 0 for i in diff): \n            return True\n        return False"], [0.9370136260986328, "def monotonic(l: list, strict: bool = False):\n    \"\"\"\n    Returns True if the sequence is monotonic.\n    \n    Parameters\n    ----------\n    l : list\n        The sequence to check.\n    strict : bool, optional\n        Whether to check for strict monotonicity. The default is False.\n    \n    Returns\n    -------\n    bool\n        True if the sequence is monotonic, False otherwise.\n    \n    Examples\n    --------\n    >>> monotonic([1, 2, 3, 4, 5])\n    True\n    >>> monotonic([1, 2, 3, 4, 5], strict=True)\"\"\"\n    if len(l) < 2:\n        return True  # single-item list or empty list is always monotonic\n    dir = l[1] - l[0]  # get initial sequence direction\n    for i in range(2, len(l)):\n        if not dir:  # set direction if not already set\n            dir = l[i] - l[i - 1]\n            if strict and dir == 0:  # return False for same consecutive items in strict mode \n                return False\n        if dir > 0:\n            if l[i] - l[i - 1] < 0:  # return False for changing from increasing to decreasing\n                return False \n            elif strict and l[i] - l[i - 1] <= 0:  # return False for same consecutive items in strict mode\n                return False\n        if dir < 0:\n            if l[i] - l[i - 1] > 0:  # return False for changing from decreasing to increasing\n                return False\n            elif strict and l[i] - l[i - 1] >= 0:  # return False for same consecutive items in strict mode\n                return False\n    return True"], [0.9302093982696533, "def monotonic(l: list, strict: bool = False):\n    \"\"\"\n    Returns True if the given list is monotonic.\n    \n    Parameters\n    ----------\n    l : list\n        The list to check.\n    strict : bool, optional\n        If True, the list must be strictly monotonic.\n        If False, the list must be monotonic.\n        The default is False.\n    \n    Returns\n    -------\n    bool\n        True if the list is monotonic, False otherwise.\n    \n    Examples\n    --------\n    >>> monotonic([1, 2, 3, 4, 5])\n    True\n    >>> monotonic([1,\"\"\"\n    try:\n        is_nested = any(isinstance(i, list) for i in l)\n    except TypeError:\n        print(\"Input value is not iterable\")\n        return False\n\n    if is_nested:\n        return all(monotonic(sub_list, strict) for sub_list in l)     # recursion\n    else:\n        if strict:\n            return all(i < j for i, j in zip(l, l[1:])) or all(i > j for i, j in zip(l, l[1:]))\n        else:\n            return all(i <= j for i, j in zip(l, l[1:])) or all(i >= j for i, j in zip(l, l[1:]))"], [0.9295200705528259, "def monotonic(l: list, strict: bool = False):\n    \"\"\"\n    This function determines if the sequence of elements in the list is either monotonically increasing or decreasing, considering the strictness criterion put in place.\n    If the strict parameter is assigned to be True, consecutive elements are not allowed to be identical; however, if it's False, they may be the same.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 1, 0, -10], strict=True)\n    False\n    >>> monotonic([1, 1, 1, 1], strict=False)\n    True\n    \"\"\"\n    # Initialize flags for increasing and decreasing\n    increasing = decreasing = True\n\n    # Loop through the list to check sequence\n    for i in range(len(l) - 1):\n        # If strict is True\n        if strict:\n            if l[i] > l[i + 1]:\n                increasing = False\n            elif l[i] < l[i + 1]:\n                decreasing = False\n        # If strict is False\n        else:\n            if l[i] >= l[i + 1]:\n                increasing = False\n            elif l[i] <= l[i + 1]:\n                decreasing = False\n\n        # If list is not increasing and not decreasing, return False\n        if not increasing and not decreasing:\n            return False\n\n    # If the function has not returned yet, it means the list is either increasing or decreasing.\n    return True"], [0.9292311668395996, "def monotonic(l: list, strict: bool = False):\n    \"\"\"\n    This function determines if the sequence of elements in the list is either monotonically increasing or decreasing, considering the strictness criterion put in place.\n    If the strict parameter is assigned to be True, consecutive elements are not allowed to be identical; however, if it's False, they may be the same.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 1, 0, -10], strict=True)\n    False\n    >>> monotonic([1, 1, 1, 1], strict=False)\n    True\n    \"\"\"\n    # Initialize flags for increasing and decreasing\n    increasing = decreasing = True\n\n    # Loop through the list to check sequence\n    for i in range(len(l) - 1):\n        # If strict is True\n        if strict:\n            if l[i] <= l[i + 1]:\n                increasing = False\n            elif l[i] >= l[i + 1]:\n                decreasing = False\n        # If strict is False\n        else:\n            if l[i] < l[i + 1]:\n                increasing = False\n            elif l[i] > l[i + 1]:\n                decreasing = False\n\n    # If list is not increasing and not decreasing, return False\n    if not increasing and not decreasing:\n        return False\n\n    # If the function has not returned yet, it means the list is either increasing or decreasing.\n    return True"], [0.9284763932228088, "def monotonic(l: list, strict: bool = False):\n    \"\"\"\n    Returns True if the sequence is monotonic.\n    \n    Parameters\n    ----------\n    l : list\n        The sequence to check.\n    strict : bool, optional\n        Whether to check for strict monotonicity.\n        \n    Returns\n    -------\n    bool\n        True if the sequence is monotonic, False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return True  # single-item list or empty list is always monotonic\n    dir = l[1] - l[0]  # get initial sequence direction\n    for i in range(2, len(l)):\n        if not dir:  # set direction if not already set\n            dir = l[i] - l[i - 1]\n        if strict and dir == 0:  # return False for same consecutive items in strict mode \n            return False\n        if dir > 0:\n            if l[i] - l[i - 1] < 0:  # return False for changing from increasing to decreasing\n                return False\n        elif strict and l[i] - l[i - 1] <= 0:  # return False for same consecutive items in strict mode\n            return False\n        if dir < 0:\n            if l[i] - l[i - 1] > 0:  # return False for changing from decreasing to increasing\n                return False\n        elif strict and l[i] - l[i - 1] >= 0:  # return False for same consecutive items in strict mode\n            return False\n    return True"], [0.9272723197937012, "def monotonic(l: list, strict: bool = False):\n    \"\"\"\n    Check if a list is monotonic.\n    \n    Parameters\n    ----------\n    l : list\n        The list to check.\n    strict : bool, optional\n        Whether to check for strict monotonicity. The default is False.\n    \n    Returns\n    -------\n    bool\n        True if the list is monotonic, False otherwise.\n    \n    Examples\n    --------\n    >>> monotonic([1, 2, 3, 4, 5])\n    True\n    >>> monotonic([1, 2, 3, 4, 5], strict=True)\n\"\"\"\n    try:\n        is_nested = any(isinstance(i, list) for i in l)\n    except TypeError:\n        print(\"Input value is not iterable\")\n        return False\n\n    if is_nested:\n        return all(monotonic(sub_list, strict) for sub_list in l)  # recursion\n    else:\n        if strict:\n            return all(i < j for i, j in zip(l, l[1:])) or all(i > j for i, j in zip(l, l[1:]))\n        else:\n            return all(i <= j for i, j in zip(l, l[1:])) or all(i >= j for i, j in zip(l, l[1:]))"]]}
{"task_id": "HumanEval/58", "problem": [[0.956112265586853, "def common(l1: list, l2: list):\n    \"\"\"Returns sorted unique common elements for two lists\"\"\"\n    \n    common_elements = [i for i in l1 if i in l2]\n    unique_common_elements = remove_duplicates(common_elements)\n    sorted_unique_common_elements = merge_sort(unique_common_elements)\n    \n    return sorted_unique_common_elements"], [0.9487228393554688, "def common_unique(l1: list, l2: list):\n    \"\"\"Returns sorted unique elements common in both lists.\"\"\"\n    # Identifying common, unique items\n    common = set(l1) & set(l2)\n    return sorted(list(common))"], [0.9429121017456055, "def get_common(l1: list, l2: list):\n    \"\"\"Returns sorted unique common elements for two lists\"\"\"\n    common_elements = [i for i in l1 if i in l2]\n    unique_common_elements = remove_duplicates(common_elements)\n    sorted_unique_common_elements = merge_sort(unique_common_elements)\n    return sorted_unique_common_elements"], [0.9342830181121826, "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Authoritatively yield manually ordered, non-repetitive intersecting elements for two lists.\n    This function is constructed to handle integer arrays including negative integers,without depending \n    on inherent Python list functionalities. The function returns a well-ordered list eliminating any duplicates.\n    If one of the lists is empty, the function returns an empty list. \n\n    :param l1: The first list of integers.\n    :type l1: list\n    :param l2: The second list of integers.\n    :type l2: list\n    :returns: A list containing ordered intersecting elements from both lists, without duplicates.\n\n    >>> common([1, 4, 3, 34, 86, 2, 5], [5, 7, 1, 8, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    >>> common([-2, -3, 0, 2, 5], [-5, 2, 0, -3])\n    [-3, 0, 2]\n    >>> common([-2, -3, 0, 2, 5], [])\n    []\n    \"\"\"\n    common_set = set()\n    ordered_set = set()\n\n    # Traverse through lists and add common elements to common_set\n    for num in l1:\n        if num in l2 and num not in common_set:\n            common_set.add(num)\n\n    # Traverse through common_set and add elements into ordered_set in sorted order.\n    # This step ensures the elimination of duplicate elements and correct ordering.\n    for num in sorted(common_set):\n        ordered_set.add(num)\n\n    return list(ordered_set)"]]}
{"task_id": "HumanEval/59", "problem": [[0.9605871438980103, "def largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(600851475143)\n    6857\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"], [0.960565447807312, "def largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(600851475143)\n    6857\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"], [0.9483630657196045, "def largest_factor(n):\n    \"\"\"\n    Return the largest factor of n that is smaller than n.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if isPrime(i) and n % i == 0:\n            n = n // i\n        i = i + 1\n    return n"], [0.9465821981430054, "def largest_prime(n, i = 2):\n  \"\"\"\n  Find the largest prime factor of a number.\n  \n  >>> largest_prime(13195)\n  29\n  >>> largest_prime(600851475143)\n  6857\n  \"\"\"\n  while i * i <= n:\n    if n % i:\n        i += 1\n    else:\n        n //= i\n  return n"], [0.9447008371353149, "def largest_prime_factor(n):\n    \"\"\"\n    Find the largest prime factor of a number.\n    \n    :param n: The number to find the largest prime factor of.\n    :type n: int\n    :return: The largest prime factor of n.\n    :rtype: int\n    \"\"\"\n    \n    max_prime = -1\n    \n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n    \n    for i in range(3, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            max_prime = i\n            n //= i\n    if n > 2:\n        max_prime = n\n    \n    return int(max_prime)"], [0.9435384273529053, "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of a positive or negative n. Assume abs(n) > 1 and is not prime.\n    Optimize the procedure by only scrutinizing odd factors succeeding 2.\n    \"\"\"\n    n = abs(n)\n    last_factor = 1\n    # get rid of 2's\n    while n % 2 == 0:\n        last_factor = 2\n        n = n / 2\n    factor = 3\n    max_factor = n ** 0.5\n    while n > 1 and factor <= max_factor:\n        if n % factor == 0:\n            n = n / factor\n            last_factor = factor\n            while n % factor == 0:\n                n = n / factor\n            max_factor = n ** 0.5\n        factor += 2\n    if n == 1:\n        return last_factor\n    else:\n        return n"], [0.9416061639785767, "def largest_prime_factor(n: int):\n    \"\"\"\n    Find the largest prime factor of a given integer.\n    \n    :param n: integer\n    :return: largest prime factor\n    \"\"\"\n    n = abs(n)  # to accommodate negative integers, take the absolute value\n    i = 2       # start dividing from 2, the smallest prime number\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"], [0.9414293766021729, "def largest_prime_factor(n: int) -> int:\n    \"\"\"Provide the most significant prime divisor of a positive or negative 'n'. It is to be assumed that abs(n) is greater than 1 and not prime in nature. \n    Look to expedite the process by scrutinizing only the odd factors subsequent to 2.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    >>> largest_prime_factor(-13195)\n    29\n    \"\"\"\n    # Handling the negative input\n    n = abs(n)\n\n    # The largest prime factor of n\n    largest_prime = 2\n\n    # Factor out all 2's that divide n\n    while n % 2 == 0:\n        n = n // 2\n\n    # n must be odd at this point, thus a skip of 2 can be used\n    i = 3\n    while i * i <= n:\n        # While i divides n , factor i and divide n\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n        i = i + 2\n\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime"], [0.9414015412330627, "def largest_prime_factor(n: int):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \n    :param n: The number to find the largest prime factor of.\n    :type n: int\n    :return: The largest prime factor of the given number.\n    :rtype: int\n    \"\"\"\n    n = abs(n)\n    divisor = 2\n  \n    while n % divisor == 0:\n        n //= divisor\n\n    divisor = 3\n    while divisor * divisor <= n:\n        if n % divisor:\n            divisor += 2\n        else:\n            n //= divisor\n\n    return n if n > 2 else divisor"], [0.9412946701049805, "def largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Provide the most significant prime divisor of a positive or negative 'n'. \n    It is to be assumed that abs(n) is greater than 1 and not prime in nature. \n    Look to exploit the process by scrutinizing only the odd factors subsequent to 2.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    >>> largest_prime_factor(-13195)\n    29\n    \"\"\"\n    # Handling the negative input\n    n = abs(n)\n\n    # The largest prime factor of n\n    largest_prime = 2\n\n    # Factor out all 2's that divide n\n    while n % 2 == 0:\n        n = n // 2\n\n    # n must be odd at this point, thus a skip of 2 can be used\n    i = 3\n    while i * i <= n:\n        # While i divides n, factor i and divide n\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n        i += 2\n\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime"]]}
{"task_id": "HumanEval/60", "problem": [[0.9494731426239014, "def sum_up_to(n):\n    \"\"\"\n    Return the sum of all numbers from 1 to n, inclusive.\n    >>> sum_up_to(10)\n    55\n    >>> sum_up_to(100)\n    5050\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"], [0.9442083835601807, "def sum_1_to_n(n):\n  \"\"\"\n  Return the sum of the numbers from 1 to n, inclusive.\n  >>> sum_1_to_n(4)\n  10\n  \"\"\"\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum"], [0.9439521431922913, "def sum_numbers(n):\n    \"\"\"\n    Return the sum of all numbers from 1 to n, inclusive.\n    >>> sum_numbers(10)\n    55\n    >>> sum_numbers(100)\n    5050\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"], [0.9439455270767212, "def sum_numbers(n):\n    \"\"\"\n    Return the sum of all numbers from 1 to n, inclusive.\n    >>> sum_numbers(10)\n    55\n    >>> sum_numbers(100)\n    5050\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"], [0.943449854850769, "def sum_n(n):\n    \"\"\"\n    Return the sum of the first n numbers.\n    >>> sum_n(10)\n    55\n    >>> sum_n(100)\n    5050\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum"], [0.9421626925468445, "def sumUpTo(n):\n    \"\"\"\n    Return the sum of all numbers up to and including n.\n    >>> sumUpTo(10)\n    55\n    >>> sumUpTo(100)\n    5050\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total"], [0.9420742392539978, "def sum_to_n(n):\n    \"\"\"\n    Return the sum of all numbers from 1 to n.\n    \n    >>> sum_to_n(4)\n    10\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)"], [0.9407990574836731, "def sum_all_numbers(n):\n    \"\"\"\n    Return the sum of all numbers from 1 to n (inclusive).\n    >>> sum_all_numbers(1)\n    1\n    >>> sum_all_numbers(10)\n    55\n    \"\"\"\n    # Initialize sum\n    sum = 0\n    # Iterate from 1 to n and add to sum\n    for num in range(1, n+1):\n        sum += num\n\n    return sum"], [0.9404013156890869, "def sum_to_n(n):\n    \"\"\"\n    Return the sum of all numbers from 1 to n.\n    :param n: int\n    :return: int\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"], [0.9366065859794617, "def sum_numbers(n):\n    \"\"\"\n    Return the sum of all numbers from 1 to n (inclusive).\n    \n    >>> sum_numbers(10)\n    55\n    \"\"\"\n    total = 0\n    for num in range(n+1):\n        if num > 0:\n            total += num\n    return total"]]}
{"task_id": "HumanEval/61", "problem": [[0.9385356903076172, "def correct_bracketing(brackets):\n    \"\"\"\n    Check if a string of brackets is correctly bracketed.\n    :param brackets: string of brackets\n    :return: True if correctly bracketed, False otherwise\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack"], [0.9226622581481934, "def correctBracketing(s):\n    \"\"\"\n    Check if a string has correct bracketing.\n    :param s: string to check\n    :return: True if correct bracketing, False otherwise\n    \"\"\"\n    open_brackets = 0\n    for char in s:\n        if char == \"(\":\n            open_brackets += 1\n        elif char == \")\":\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    return open_brackets == 0"], [0.9144319891929626, "def match_parens(lst):\n    \"\"\"Return whether all ( and ) are paired in input string.\n    \n    >>> match_parens(\"()\")\n    True\n    >>> match_parens(\"()()\")\n    True\n    >>> match_parens(\"(()())\")\n    True\n    >>> match_parens(\")(\")\n    False\n    >>> match_parens(\")\")\n    False\n    >>> match_parens(\"((())\")\n    False\n    >>> match_parens(\"(()\")\n    False\n    \"\"\"\n    stack = []\n    bracket_map = {\"(\": \")\", \"[\": \"]\"}\n    \n    for bracket in lst[0] + lst[1]:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        else:\n            try:\n                if bracket_map[stack.pop()] != bracket:\n                    return False\n            except IndexError: #Handles the case where stack is empty when trying to pop a value\n                return False\n    return stack == []"], [0.9125300049781799, "def is_valid_brackets(s: str) -> bool:\n    \"\"\"\n    Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\n    An input string is valid if:\n\n    Open brackets must be closed by the same type of brackets.\n    Open brackets must be closed in the correct order.\n    Every close bracket has a corresponding open bracket of the same type.\n    Example 1:\n\n    Input: s = \"()\"\n    Output: true\n    Example 2:\n\n    Input: s = \"()[]{}\"\n    Output: true\n    Example 3:\n\n\"\"\"\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in s:\n        if char in mapping.values():  # If the character is an opening bracket\n            stack.append(char)\n        else:  # If the character is a closing bracket\n            if not stack or stack.pop() != mapping[char]:\n                return False  # Unmatched closing bracket or no opening bracket to match\n    return not stack  # Return True if stack is empty (all brackets matched and closed properly)"]]}
{"task_id": "HumanEval/62", "problem": [[0.9292820692062378, "def derivative_and_integral(xs, C):\n    \"\"\"\n    Given xs: coefficients of a polynomial: xs[0] + xs[1] * x + xs[2] * x^2 t....\n    Return derivative and integral of this polynomial, including constant C and remove any trailing zeros.\n    Ensure this works for edge cases.\n\n    >>> derivative_and_integral([3, 1, 2, 4, 5], 2)\n    ([1, 4, 12, 20], [2, 3, 0.5, 0.6666666666666666, 1])\n    >>> derivative_and_integral([1, 2, 3], 4)\n    ([2, 6], [4, 1, 1, 1])\n    \"\"\"\n\n    derivative = []\n    integral = [C]\n    \n    for i in range(len(xs)):\n        if i != 0:\n            derivative.append(i * xs[i])\n            integral.append(xs[i-1] / i)\n        else:\n            # The derivative of a constant is 0\n            derivative.append(0)\n            integral.append(xs[0])\n\n    # All the trailing zeros are removed from the derivative.\n    while derivative and derivative[-1] == 0:\n        derivative.pop()\n\n    return derivative, integral"], [0.927348256111145, "def compute_derivative_integral(xs: list, C: int):\n    \"\"\"\n    Assumptions broken: (xs = coefficients of a polynomial in order: xs[0] + xs[1] * x + xs[2] * x^2 + ....)\n    Compute both the derivative and integral of the given polynomial, incorporate constant C and remove any surplus zeros. Ensure correctness with edge cases.\n    \"\"\"\n    if not xs:\n        return [], [C]\n    \n    derivative = []\n    integral = [C]\n\n    for i in range(len(xs)):\n        if i > 0:  derivative.append(i * xs[i])\n        if i > 0:  integral.append(xs[i-1] /(i))\n        \n    integral.append(xs[-1] / len(xs))\n\n    while derivative and derivative[-1] == 0:\n        derivative.pop()\n        \n    while len(integral) > 1 and integral[-1] == 0:  # retain the constant term even if it's zero.\n        integral.pop()\n\n    return derivative, integral"], [0.9262435436248779, "def derivative_and_integral(xs: list, C: int):\n    \"\"\"\n    xs = coefficients of a polynomial (xs[0] + xs[1] * x + xs[2] * x^2 + ....)\n    This function returns the derivative and integral of the given polynomial, includes the constant C, and removes trailing zeros.\n\n    >>> derivative_and_integral([3, 1, 2, 4, 5], 2)\n    ([1, 4, 12, 20], [2.0, 3.0, 0.5, 0.5, 0.8, 1.0])\n    >>> derivative_and_integral([1, 2, 3], 4)\n    ([2, 6], [4.0, 1.0, 1.0, 1.0])\n    \"\"\"\n    derivative = []\n    integral = [C]\n\n    for i in range(len(xs)):\n        if i != 0:\n            derivative.append(i * xs[i])\n        if i+1 != 0:\n            integral.append(xs[i] / (i+1))\n\n    # Remove trailing zeros\n    while integral[-1] == 0:\n        integral = integral[:-1] \n    while derivative and derivative[-1] == 0:\n        derivative = derivative[:-1]\n  \n    return derivative, integral"], [0.9250310659408569, "def first_derivative(poly):\n    \"\"\"\n    Returns the first derivative of a polynomial.\n    \"\"\"\n    result = []\n    for i in range(len(poly)):\n        result.append(poly[i] * (len(poly) - i - 1))\n    return result\n    \n    def second_derivative(poly):\n    \"\"\"\n    Returns the second derivative of a polynomial.\n    \"\"\"\n    result = 0\n    for i in range(len(poly)):\n        result += poly[i] * (len(poly) - i - 1) * pow(x, len(poly) - i - 2)\n    return result"], [0.9235386848449707, "def derivative_and_integral(xs: list, C: int):\n  \"\"\"\n  xs - coefficients of a polynomial (xs[0] + xs[1]*x + xs[2]*x^2 + ...)\n  This function returns the derivative and integral of the given polynomial, includes the constant C, and removes trailing zeros.\n\n  >>> derivative_and_integral([3, 1, 2, 4, 5], 2)\n  ([6, 4, 12, 20], [2.0, 3.0, 0.5, 0.5, 0.8, 1.0])\n  >>> derivative_and_integral([1, 2, 3], 4)\n  ([2, 6], [4.0, 1.0, 1.0, 1.0])\n  \"\"\"\n  derivative = []\n  integral = [C]\n\n  for i in range(len(xs)):\n    if i != 0:\n      derivative.append(i * xs[i])\n    if i+1 != 0:\n      integral.append(xs[i] / (i+1))\n\n  # Remove trailing zeros\n  while integral[-1] == 0:\n    integral = integral[:-1]\n  while derivative and derivative[-1] == 0:\n    derivative = derivative[:-1]\n\n  return derivative, integral"]]}
{"task_id": "HumanEval/63", "problem": [[0.9574489593505859, "def fibfib(n: int):\n    \"\"\"\n    Return the nth number in the Fibonacci sequence.\n    The Fibonacci sequence is defined as:\n    fib(0) = 0\n    fib(1) = 0\n    fib(2) = 1\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibs = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        fibs.append(fibs[i-1] + fibs[i-2] + fibs[i-3])\n\n    return fibs[n]"], [0.955392062664032, "def fibfib(n: int):\n    \"\"\"\n    The FibFib series is like the Fibonacci series but with some nuances: fibfib(0) == 0, fibfib(1) == 0, fibfib(2) == 1, and fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Your subroutine should employ dynamic programming to efficiently compute the n-th term of this series and handle negative indices gracefully.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    >>> fibfib(-3)\n    Error: Invalid input\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Error: Invalid input\")\n    \n    fibfib_values = [0, 0, 1] + [0]*(n-2)\n    \n    for i in range(3, n+1):\n        fibfib_values[i] = fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3]\n\n    return fibfib_values[n]"], [0.9455927610397339, "def fibfib(n: int):\n    \"\"\"\n    Return the nth number in the fibfib series.\n    \n    The fibfib series is defined as follows:\n    \n    fibfib(0) = 0\n    fibfib(1) = 0\n    fibfib(2) = 1\n    fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n >= 3\n    \n    The series is truncated at 1000 for performance reasons.\n    \n    Args:\n        n (int): The index of the number\"\"\"\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibfib_series = [0, 0, 1] + [0] * (n-3)\n\n    for i in range(3, n):\n        fibfib_series[i] = fibfib_series[i-1] + fibfib_series[i-2] + fibfib_series[i-3]\n        \n        if i >= 1000:\n            fibfib_series[i] = sum(fibfib_series[i-1000:i])\n\n    return fibfib_series[-1]"], [0.9455446004867554, "def fibfib(n: int):\n    \"\"\"\n    The FibFib sequence mirrors the Fibonacci sequence, as defined below:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n > 2\n    fibfib(n) == fibfib(n+3) - fibfib(n+2) - fibfib(n+1) for n < 0\n\n    Implement dynamic programming and memoization for function optimization.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    elif n < 0:\n        return fibfib(n+3) - fibfib(n+2) - fibfib(n+1)"], [0.9414483308792114, "def fibfib(n: int) -> int:\n    \"\"\"\n    Compute the nth number in the fibfib sequence.\n    The fibfib sequence is defined as follows:\n    fibfib(0) = 0\n    fibfib(1) = 0\n    fibfib(2) = 1\n    fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    for n >= 3.\n    Args:\n        n (int): The index of the number in the sequence.\n    Returns:\n        int: The nth number in the sequence.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input value should be a positive integer.\")\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n\n    # Initialization of the base cases\n    fibfib_nums = [0]*(n+1)\n    fibfib_nums[0] = 0\n    fibfib_nums[1] = 0\n    fibfib_nums[2] = 1\n\n    # Compute the numbers iteratively\n    for i in range(3, n+1):\n        fibfib_nums[i] = fibfib_nums[i-1] + fibfib_nums[i-2] + fibfib_nums[i-3]\n\n    return fibfib_nums[n]"], [0.9408209919929504, "def fibfib(n):\n    \"\"\"\n    Return the nth value in the fibfib sequence.\n    The fibfib sequence is defined as:\n    fibfib(0) = 0\n    fibfib(1) = 0\n    fibfib(2) = 1\n    fibfib(n) = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    \n    >>> fibfib(0)\n    0\n    >>> fibfib(1)\n    0\n    >>> fibfib(2)\n    1\n    >>> fibfib(3\"\"\"\n    if n < 0:\n        return \"Please provide a positive integer\"    \n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize base cases.\n    fibfib_list = [0, 0, 1] + [0] * (n - 2)\n\n    # Fill fibfib_list with the value of fibfib for each n\n    for i in range(3, n + 1):\n        fibfib_list[i] = fibfib_list[i - 1] + fibfib_list[i - 2] + fibfib_list[i - 3]\n\n    return fibfib_list[n]"], [0.9379498958587646, "def fibfib(n: int) -> int:\n    \"\"\"\n    \"\"\"\n    if n==0: return 0\n    if n==1: return 0\n    if n==2: return 1\n    \n    fibfib = [0]*(n+1)\n    fibfib[2] = 1\n    \n    for i in range(3, n+1):\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    \n    return fibfib[n]"], [0.9351565837860107, "def fibfib(n: int, memo = {}):\n    \"\"\"\n    This function exemplifies the FibFib sequence, a reflection of the Fibonacci sequence but subject to this distinctive set of regulations:\n    - fibfib(0) == 0\n    - fibfib(1) == 0\n    - fibfib(2) == 1\n    - fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) where n > 2\n    - fibfib(n) == fibfib(n+3) - fibfib(n+2) - fibfib(n+1) where n < 0\n\n    The application of dynamic programming and memoization techniques is imperative for optimizing the function.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    >>> fibfib(-1)\n    1\n    >>> fibfib(-5)\n    -4\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    \n    if n == 0:\n        result = 0\n    elif n == 1:\n        result = 0\n    elif n == 2:\n        result = 1\n    elif n > 2:\n        result = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    else: # when n < 0\n        result = fibfib(n+3, memo) - fibfib(n+2, memo) - fibfib(n+1, memo)\n        \n    memo[n] = result\n    return result"], [0.9334855079650879, "def fibfib(n: int, memo = {}):\n    \"\"\"\n    This function exemplifies the FibFib sequence, a reflection of the Fibonacci sequence but subject to this distinctive set of regulations:\n    - fibfib(0) == 0\n    - fibfib(1) == 0\n    - fibfib(2) == 1\n    - fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3) where n > 2\n    - fibfib(n) = fibfib(n+3) - fibfib(n+2) - fibfib(n+1) where n < 0\n\n    The application of dynamic programming and memoization techniques is imperative for optimizing the function.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    >>> fibfib(-1)\n    1\n    >>> fibfib(-5)\n    -4\n    \"\"\"\n    if n in memo:\n        return memo[n]\n\n    if n == 0:\n        result = 0\n    elif n == 1:\n        result = 0\n    elif n == 2:\n        result = 1\n    elif n > 2:\n        result = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    else: # where n < 0\n        result = fibfib(n+3, memo) - fibfib(n+2, memo) - fibfib(n+1, memo)\n\n    memo[n] = result\n    return result"], [0.9331812858581543, "def fibfib(n: int, memo = {}):\n    \"\"\"\n    This function encapsulates the FibFib sequence that mirrors the Fibonacci sequence but with this specific set of rules:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) where n > 2\n    fibfib(n) == fibfib(n+3) - fibfib(n+2) - fibfib(n+1) where n < 0\n\n    Applying dynamic programming and memoization is essential for function optimization.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    >>> fibfib(-1)\n    1\n    >>> fibfib(-5)\n    -4\n    \"\"\"\n    if n in memo:\n        return memo[n]\n\n    if n >= 0:\n        if n < 3:\n            result = n % 2\n        else:\n            result = fibfib(n - 1, memo) + fibfib(n - 2, memo) + fibfib(n - 3, memo)\n    else:\n        result = fibfib(n + 3, memo) - fibfib(n + 2, memo) - fibfib(n + 1, memo)\n\n    # store the result in the memo dictionary for future reference\n    memo[n] = result\n\n    return result"]]}
{"task_id": "HumanEval/64", "problem": [[0.9578213691711426, "def vowels_count(s):\n    \"\"\"Compose a function 'vowels_count', accepting a string representing\n    a word as input, returning the number of vowels in the string.\n    Vowels, in this case, are 'a', 'e', 'i', 'o', 'u', and 'y' ONLY when\n    found at the end of the input word. Ignore case and include special\n    characters, numbers, blank spaces, and empty strings within the input word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDy\")\n    3\n    >>> vowels_count(\"\u00e9xampl\u00eb 42\")\n    4\n    \"\"\"\n    count = 0;\n    if s == '':\n         return count;\n    s = s.lower()\n\n    for char in s:\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n\n    return count"], [0.957482099533081, "def vowels_count(s):\n    \"\"\"\n    Compose a function 'vowels_count', accepting a string representing\n    a word as input, returning the number of vowels in the string.\n    Vowels, in this case, are 'a', 'e', 'i', 'o', 'u', and 'y' ONLY when\n    found at the end of the input word. Ignore case and include special\n    characters, numbers, blank spaces, and empty strings within the input word,\n    \n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEUv\")\n    3\n    >>> vowels_count(\"example a2\")\n    4\n    \"\"\"\n    count = 0\n    if s == '':\n        return count\n    s = s.lower()\n\n    for char in s:\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n            count += 1\n        if s[-1] == 'y':\n            count += 1\n\n    return count"], [0.9526715278625488, "def vowels_count(s):\n    \"\"\"Design an operation termed vowels_count, which accepts a string symbolising\n    a term as input and generates the sum of vowels found in the string.\n    Vowels entail 'a', 'e', 'i', 'o', 'u', together with 'y' SOLELY when unveiled\n    at the closing of the provided term. Overlook the letter casing and consider\n    unique characters within the term.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    >>> vowels_count(\"\u00e9xampl\u00eb\")\n    3\n    \"\"\"\n    vowels = 'aeiou'\n    s = s.lower()\n    count = 0\n    for i in s:\n        if i in vowels:\n            count+=1\n    if s[-1] == 'y':\n        count+=1\n    return count"], [0.9521422386169434, "def vowels_count(s):\n    \"\"\"\n    Return the number of vowels in the given string.\n    \n    >>> vowels_count('aeiou')\n    5\n    >>> vowels_count('ABCDE')\n    2\n    \"\"\"\n    vowels = \"aeiou\"\n    return sum(1 for char in s.lower() if char in vowels) + s.lower().endswith('y')"], [0.9483275413513184, "def vowels_count(s):\n    \"\"\"\n    This function, named as vowels_count, \n    takes a string representing a word as an argument and \n    returns the total number of all vowels it contains.\n    The vowels considered here are 'a', 'e', 'i', 'o', 'u', and 'y' if it appears at the end of the word.\n    The function ignores case sensitivity and carefully handles unusual characters within the input string.\n\n    Test Cases:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    >>> vowels_count(\"\u00e9xampl\u00eb\")\n    3\n    \"\"\"\n    \n    # Checking for empty string\n    if not s:\n        return 0\n\n    s = s.lower()  # convert string in lower case to remove case sensitivity\n    pattern = re.compile(r'[aeiou]|y$')  # pattern to match vowels and y at the end\n\n    return len(pattern.findall(s))  # return count of matched vowels "], [0.9482517242431641, "def vowels_count(s: str) -> int:\n    \"\"\"\n    Return the number (count) of vowels in the given string.\n    \n    We will consider a, e, i, o, and u as vowels for this Kata.\n    \"\"\"\n    vowels = 'aeiou'\n    s = s.lower()\n    count = sum(1 for char in s if char in vowels)\n    # check if 'y' is a vowel in this string, add to the count if true\n    if s.endswith('y'):\n        count += 1\n    return count"], [0.9412895441055298, "def count_vowels(s):\n  \"\"\"\n  Count the number of vowels in a string.\n  \n  >>> count_vowels('Codeup')\n  3\n  >>> count_vowels('Python')\n  2\n  \"\"\"\n  num_vowels = 0\n  for c in s.lower():\n    if c in 'aeiou':\n      num_vowels += 1\n  return num_vowels"], [0.9411665797233582, "def vowels_count(s):\n    \"\"\"\n    Return the number of vowels in the given string.\n    \n    >>> vowels_count('Python')\n    2\n    >>> vowels_count('Theistareykjarbunga')\n    8\n    \"\"\"\n    lower_s = s.lower() # Treat the string case-insensitively\n    last_is_y = lower_s[-1] == 'y' # Check if last char is 'y'\n    y_count = int(last_is_y)  # 'y' is a vowel only when it's the last char\n\n    # Removing special characters\n    clean_str = re.sub('[^a-z]+', '', lower_s)\n    return sum(1 for c in clean_str if c in VOWELS) + y_count"], [0.9405861496925354, "def enhanced_vowels_count(s):\n    \"\"\"\n    Given a string, count the number of vowels in the string.\n    We will consider a, e, i, o, and u as vowels for this problem.\n    \n    >>> enhanced_vowels_count('Celebration')\n    5\n    >>> enhanced_vowels_count('Palm')\n    2\n    >>> enhanced_vowels_count('Prediction')\n    4\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    # convert string to lower case to handle different letter cases\n    s = s.lower() \n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        # counts 'y' only if it is the last character\n        elif s[i] == 'y' and i == len(s) - 1: \n            count += 1\n    return count"], [0.9405213594436646, "def advanced_vowel_counter(s):\n    \"\"\"\n    Count the number of vowels in a string.\n    Vowels are 'a', 'e', 'i', 'o', 'u', and 'y'.\n    This function should work for both uppercase and lowercase letters.\n    Do not count 'y' if it is the last letter in the string.\n    \n    >>> advanced_vowel_counter('Beautiful')\n    5\n    >>> advanced_vowel_counter('Aardvark')\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n\n    # loop through the string and add 1 to count if current iteration is vowel\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n\n    # check if last character is a special character or uppercase/lowercase 'Y'\n    # if yes, then decrement count by 1\n    last_char = s[-1]\n    if not last_char.isalpha() or last_char.lower() == 'y':\n        count -= 1\n\n    return count"]]}
{"task_id": "HumanEval/65", "problem": [[0.9250669479370117, "def circularShift(x, shift):\n    \"\"\"\n    Circularly shift a number by a given amount.\n    \n    Args:\n        x (int): The number to be shifted.\n        shift (int): The amount to shift the number.\n    \n    Returns:\n        int: The shifted number.\n    \"\"\"\n    # Initialize 2 variables to store the length of 'x' and the result\n    lengthOfX, result = 0, 0\n    \n    # Store a copy of 'x' to calculate the length\n    tempX = x\n    while tempX != 0:\n        tempX //= 10\n        lengthOfX += 1\n\n    # If the shift is greater than the number of digits, return the digits reversed\n    if shift >= lengthOfX:\n        while x != 0:\n            result = result * 10 + x % 10\n            x //= 10\n    else:\n        rightPart = x % 10**shift\n        leftPart = x // 10**shift\n        multiplier = 10**(lengthOfX-shift)\n        result = rightPart * multiplier + leftPart\n    return result"], [0.890011191368103, "def reverse_digits(n):\n    \"\"\"\n    Given a number n, return the number with its digits reversed.\n    \n    >>> reverse_digits(1)\n    1\n    >>> reverse_digits(1234567890)\n    9876543210\n    >>> reverse_digits(12345678999999999999999999999999999999999999999999999999999999\"\"\"\n    reversed_num = 0\n    \n    while n > 0:\n        reminder = n % 10\n        reversed_num = reversed_num * 10 + reminder\n        n = n // 10\n    return reversed_num"], [0.8897088766098022, "def reverse_caesar_cipher(num, shift):\n    \"\"\"\n    \"\"\"\n    result = (num - shift) % 10\n    if result == 0:\n        result = 10\n    return result"], [0.8888964653015137, "def reverse_int(num):\n    \"\"\"\n    Reverse digits of an integer.\n\n    >>> reverse_int(15)\n    51\n    >>> reverse_int(123456789)\n    987654321\n    >>> reverse_int(100000000123456789)\n    987654321000000001\n    >>> reverse_int(1000000001234567890)\n    098\"\"\"\n    rev = 0\n    while num > 0:\n        digit = num % 10\n        rev = rev * 10 + digit\n        num = num // 10\n    return rev"], [0.8872919082641602, "def stringShift(s, shift):\n    \"\"\"\n    :type s: str\n    :type shift: List[List[int]]\n    :rtype: str\n    \"\"\"\n    shift_total = sum(i*-1 if d==0 else i for d,i in shift)\n    shift_total = shift_total % len(s)\n    return s[-shift_total:] + s[:-shift_total]"]]}
{"task_id": "HumanEval/66", "problem": [[0.9497102499008179, "def digitSum(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(ord(ch) for ch in s if ch.isupper())"], [0.949708104133606, "def digitSum(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(ord(ch) for ch in s if ch.isupper())"], [0.9386942386627197, "def string_sum(s):\n    \"\"\"\n    Return the sum of the ASCII values of all characters in the string.\n    \n    >>> string_sum('abc')\n    291\n    >>> string_sum('ABC')\n    675\n    \"\"\"\n    return sum(ord(c) for c in s)"], [0.936099648475647, "def ascii_sum(s):\n    \"\"\"\n    Return the sum of the ASCII values of all characters in the string s.\n    \n    >>> ascii_sum('abc')\n    291\n    >>> ascii_sum('ABC')\n    675\n    \"\"\"\n    return sum([ord(c) for c in s])"], [0.929397702217102, "def ascii_sum(s):\n    \"\"\"\n    Return the sum of the ASCII values of the first letters of each word in a string.\n    \n    >>> ascii_sum('The quick brown fox jumps over the lazy dog')\n    101\n    \"\"\"\n    return sum([ord(w[0]) for w in s.split()])"], [0.9223674535751343, "def ascii_sum(string):\n    \"\"\"\n    Return the sum of the ASCII values of all characters in the given string.\n    \n    >>> ascii_sum('abc')\n    291\n    >>> ascii_sum('ABC')\n    675\n    \"\"\"\n    return sum(ord(c) for c in string)"], [0.9212043881416321, "def ascii_sum(string):\n    \"\"\"\n    Return the sum of all ascii values in a string.\n    >>> ascii_sum('abc')\n    291\n    >>> ascii_sum('ABC')\n    657\n    >>> ascii_sum('abcABC')\n    948\n    \"\"\"\n    return sum(ord(char) for char in string)"]]}
{"task_id": "HumanEval/67", "problem": [[0.9129583239555359, "def fruit_distribution(s, n, fruits, max_quantity):\n    \"\"\"\n    You have a string list containing various fruit quantities such as \"apples\", \"oranges\", \"mangoes\", etc.\n    The format of the list will be: [\"X apples\", \"Y oranges\", \"Z mangoes\"...]\n    Given such a list, an integer representing the total number of fruits in the basket, another list with all possible fruits, \n    and an integer representing the maximum allowed quantity for each fruit, generate a dictionary showing the quantity of \n    each type of fruit not specified in the list and ensure the total distributed quantity of each fruit doesn't exceed \n    the maximum limit.\n\n    For example:\n    fruit_distribution([\"5 apples\", \"6 oranges\"], 19, [\"apples\", \"oranges\", \"mangoes\"], 10) -> {\"mangoes\": 8}\n\n    If the total distributed quantity of a fruit exceeds the maximum quantity, raise a ValueError.\n    \"\"\"\n    result = {}\n    total_specified = 0\n\n    for fruit in s:\n        quantity = int(fruit.split(\" \")[0])\n        total_specified += quantity\n\n    remaining_fruits = n - total_specified\n    for fruit in fruits:\n        if fruit not in s:\n            if remaining_fruits > max_quantity:\n                raise ValueError(\"Total quantity exceeds maximum allowed quantity for fruit type.\")\n            else:\n                result[fruit] = remaining_fruits\n\n    return result"], [0.8957886695861816, "def fruit_distribution(s, n, fruits, fruit_prices):\n    \"\"\"\n    \"\"\"\n    distribution = {}\n    for fruit in fruits:\n        distribution[fruit] = 0\n    for record in s:\n        record = record.split(' ')\n        quantity = int(record[0])\n        fruit = record[1]\n        distribution[fruit] += quantity\n        n -= quantity * fruit_prices[fruit]\n    for fruit in fruits:\n        if distribution[fruit] == 0:\n            distribution[fruit] = n // fruit_prices[fruit]\n            n -= distribution[fruit] * fruit_prices[fruit]\n    return {k: v for k, v in distribution.items() if v > 0}"], [0.8923675417900085, "def advanced_fruit_distribution(s, n, fruits, non_fruit_items, multiplier):\n    \"\"\"\n    \"\"\"\n    \n    # validate the multiplier\n    if multiplier < 0 or multiplier > 100:\n        raise ValueError(\"Multiplier is not valid. It should range from 0 to 100\")\n    \n    # re-mapping the fruit and non-fruit items  \n    fruit_dict = {item.split(\" \")[1]: int(item.split(\" \")[0]) for item in fruits}\n    non_fruit_dict = {item.split(\" \")[1]: int(item.split(\" \")[0]) for item in non_fruit_items}\n    \n    # if total items less than basket content\n    if n < sum(fruit_dict.values()) + sum(non_fruit_dict.values()):\n        return 'Error'\n    \n    # if day was odd, apply multiplier to fruit quantity\n    if s % 2 != 0:\n        fruit_dict = {k: v * multiplier for k, v in fruit_dict.items()}\n    \n    # remove items with zero volume\n    fruit_dict = {k: v for k, v in fruit_dict.items() if v > 0}\n    non_fruit_dict = {k: v for k, v in non_fruit_dict.items() if v > 0}\n    \n    return fruit_dict, non_fruit_dict"], [0.8920550346374512, "def count_fruits(apples, oranges):\n    \"\"\"\n    This function takes two parameters, apples and oranges, which represent the number of apples and oranges in a basket.\n    It returns the total number of fruits in the basket.\n    \n    Parameters:\n    - apples (int): The number of apples in the basket.\n    - oranges (int): The number of oranges in the basket.\n    \n    Returns:\n    - int: The total number of fruits in the basket.\n    \"\"\"\n    if apples < 0 or oranges < 0:\n        return \"Error: The counts cannot be negative.\"\n    else:\n        return apples + oranges"], [0.8919985294342041, "def fruit_distribution(s, n, fruits, fruit_prices):\n    \"\"\"\n    \"\"\"\n    basic_count = {fruit: 0 for fruit in fruits}\n    for fruit_storage_info in s:\n        split_str = fruit_storage_info.split(' ')\n        quantity = int(split_str[0])\n        fruit_name = split_str[1]\n        if fruit_name in basic_count:\n            basic_count[fruit_name] = quantity\n\n    remaining_cost = n\n    for fruit, count in basic_count.items():\n        remaining_cost -= count * fruit_prices[fruit]\n\n    remaining_fruits = {fruit: remaining_cost // fruit_prices[fruit] for fruit in fruits if fruit not in basic_count or basic_count[fruit] == 0}\n    remaining_fruits = {k: v for k, v in remaining_fruits.items() if v > 0}\n\n    return remaining_fruits"], [0.8886493444442749, "def fruit_distribution(s, n, fruits, servings):\n    \"\"\"\n    Distribute fruits to the students.\n    \n    Args:\n        s (str): The string representing the fruits and their counts.\n        n (int): The number of students.\n        fruits (list): The list of fruits to distribute.\n        servings (dict): The dictionary mapping fruits to the number of servings.\n        \n    Returns:\n        dict: The dictionary mapping fruits to the number of servings.\n        \n    Raises:\n        ValueError: If there are not enough fruits for the servings or if the remaining fruits cannot be equally distributed.\n    \"\"\"\n    fruit_dict = {}\n    for fruit in s:\n        fruit_name, count = fruit.split()\n        fruit_dict[fruit_name] = int(count)\n        \n    for fruit in fruits:\n        if fruit in servings:\n            n -= servings[fruit]\n            if n < 0:\n                raise ValueError('Not enough fruits for the servings.')\n                \n    if n % len(fruits) != 0:\n        raise ValueError('Cannot equally distribute remaining fruits.')\n        \n    remaining_per_fruit = n // len(fruits)\n    \n    result = {}\n    for fruit in fruits:\n        if fruit not in fruit_dict:\n            result[fruit] = remaining_per_fruit\n        \n    return result"]]}
{"task_id": "HumanEval/68", "problem": [[0.9364767670631409, "def solve(nodes):\n    \"\"\"\n    \"\"\"\n    result=[]\n    even_nodes=[]\n    for idx, node in enumerate(nodes):\n        if node % 2 == 0 and node != 0:\n            even_nodes.append((node, idx))        \n    if even_nodes:\n        even_nodes.sort()\n        min_val = even_nodes[0][0]\n        for node, idx in even_nodes:\n            if node == min_val:\n                result = [node, idx]\n    return result"], [0.9130788445472717, "def solve(nodes):\n    \"\"\"\n    \"\"\"\n    min_even_node, min_even_val = None, float('inf')\n    for node in nodes:\n        if node.value < min_even_val and node.value % 2 == 0:\n            min_even_node, min_even_val = node, node.value\n        elif node.value == min_even_val:\n            min_even_node = node\n    if min_even_node is None:\n        return []\n    else:\n        return [min_even_node]"], [0.9106522798538208, "def optimalPluck(arr, cond_fn):\n    \"\"\"\n    \"\"\"\n    min_info = [float('inf'), float('inf'), float('inf')]\n    \n    for i, node in enumerate(arr):\n        if cond_fn(node):\n            d = floor(log2(i+2)) \n            if node < min_info[0] or (node==min_info[0] and d<min_info[2]) or (node==min_info[0] and d==min_info[2] and i<min_info[1]):\n                min_info = [node, i, d]\n\n    return min_info if min_info[0] != float('inf') else []"], [0.9070000052452087, "def smallest_even(arr):\n    \"\"\"\n    Return the smallest even number in the given list.\n    If there is no even number, return None\n    \"\"\"\n    smallest = None\n    for num in arr:\n        if num % 2 == 0:\n            if smallest is None or num < smallest:\n                smallest = num\n    return smallest\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\"\"\"\n    smallest = float('inf') \n\n    for num in arr:\n        if num % 2 == 0 and num < smallest:\n            smallest = num\n    \n    return smallest "]]}
{"task_id": "HumanEval/69", "problem": [[0.9203601479530334, "def search(lst):\n    \"\"\"\n    Given a list of numbers, return the greatest number whose square is less than or equal to the sum of the list.\n    \n    >>> search([1, 2, 3, 4])\n    2\n    >>> search([1, 2, 3, 4, 5])\n    3\n    >>> search([1, 2, 3, 4, 5, 6])\n    4\n    \"\"\"\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    greatest = -1\n    for num, count in freq.items():\n        if count >= num*num:\n            greatest = max(greatest, num)\n    return greatest"], [0.9121513366699219, "def find(lst):\n    \"\"\"\n    Find the smallest integer in a list that is not a duplicate.\n    If there is no such integer, return -1.\n    :param lst: a list of integers\n    :return: an integer\n    \"\"\"\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n\n    filtered = [key for key, value in freq.items() if value <= key / 2]\n\n    if not filtered:\n        return -1\n\n    return min(filtered)"], [0.9092419147491455, "def specialArray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_val = max(nums)\n    for x in range(1, max_val + 1):\n        count = sum([1 for num in nums if num >= x])\n        if count == x:\n            return x\n    return -1"], [0.9092186689376831, "def specialArray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_val = max(nums)\n    for x in range(1, max_val + 1):\n        count = sum([1 for num in nums if num >= x])\n        if count == x:\n            return x\n    return -1"], [0.9086374640464783, "def maxEqualFreq(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    count = Counter()\n    freq = defaultdict(int)\n    max_count = res = 0\n    \n    for i, x in enumerate(nums, 1):\n        freq[count[x]] -= 1\n        count[x] += 1\n        freq[count[x]] += 1\n        max_count = max(max_count, count[x])\n        \n        if max_count * freq[max_count] == i - 1 and i < len(nums):\n            res = i\n        if max_count * (freq[max_count] - 1) + max_count - 1 == i:\n            res = i\n            \n    return [res, nums[res-1]] if res > 0 else [0, -1]"], [0.9080004692077637, "def rare_value(lst):\n    \"\"\"\n    Given a list of numbers, return the smallest number whose frequency is less than or equal to half of its value.\n    If there is no such number, return -1.\n    :param lst: list of numbers\n    :return: smallest number whose frequency is less than or equal to half of its value\n    \"\"\"\n    # Counting the frequency of each number in the list\n    freq_counter = {}\n    for n in lst:\n        if n in freq_counter:\n            freq_counter[n] += 1\n        else:\n            freq_counter[n] = 1\n\n    # Constructing a list of numbers where their frequency is less than or equal to half of their value\n    rare_values = [n for n in freq_counter if freq_counter[n] <= n//2]\n\n    # If there are no such numbers, returning -1\n    if not rare_values:\n        return -1\n\n    # Otherwise, returning the smallest number\n    return min(rare_values)"]]}
{"task_id": "HumanEval/70", "problem": [[0.9373254179954529, "def strange_sort_list_bst(lst):\n    '''\n    This function should accept a list of integers and decimal numbers and return the list in a specific pattern, leveraging the principles of a binary search tree. The steps for this peculiar sorting pattern should be:\n    - Commence with the smallest number.\n    - Next, identify the highest value from the remaining elements.\n    - Then, ascertain the lowest value among the untouched output, and continue in this manner.\n    \n    Examples:\n    strange_sort_list_bst([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list_bst([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list_bst([]) == []\n    strange_sort_list_bst([-2, 1.5, 3.5, -1]) == [-2, 3.5, -1, 1.5]\n    '''\n    \n    # First, we will sort the list in ascending order.\n    lst.sort()\n\n    output = []\n\n    # Then, while lst is not empty, we will remove and append to output the smallest\n    # and largest element alternatively.\n    while lst:\n        output.append(lst.pop(0))  # smallest\n        if lst:\n            output.append(lst.pop(-1))  # largest\n\n    return output"], [0.9322264194488525, "def strange_sort_list_bst(lst):\n    \"\"\"\n    Sort a list ascendingly by value, then alternately append the smallest and largest values to a new list.\n    \n    Args:\n        lst: a list of numbers\n    \n    Returns:\n        A new list of numbers sorted as described above.\n    \"\"\"\n    # Sort the list ascendingly by value\n    lst.sort()\n\n    # Initialize an empty list \n    new_lst = []\n    while lst:\n        # Alternately remove and append the smallest and largest values to the new list\n        new_lst.append(lst.pop(0))\n        if lst:\n            new_lst.append(lst.pop(-1))\n\n    return new_lst"], [0.9295914173126221, "def strangeSorting(lst):\n    \"\"\"\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        try:\n            lst[i] = float(lst[i])\n        except ValueError:\n            continue\n    while lst:\n        min_num = min(lst)\n        while min_num in lst:\n            new_lst.append(min_num)\n            lst.remove(min_num)\n        if not lst: break\n        max_num = max(lst)\n        while max_num in lst:\n            new_lst.append(max_num)\n            lst.remove(max_num)\n    return new_lst"], [0.9293622970581055, "def peculiar_ordering(lst):\n    \"\"\"\n    Given a list of numbers, return a list where the first element is the smallest value, the second is the largest, the third is the second smallest, the fourth is the second largest, and so on.\n    \n    Examples\n    peculiar_ordering([1, 2, 3, 4, 5]) \u279e [1, 5, 2, 4, 3]\n    \n    peculiar_ordering([1, 2, 3]) \u279e [1, 3, 2]\n    \n    peculiar_ordering([1\"\"\"\n    # Removing None values\n    lst = [i for i in lst if i is not None]\n    \n    if len(lst) == 0:\n        return []\n\n    out_lst = []\n    while len(lst) > 0:\n        # Adding the smallest element\n        min_value = min(lst)\n        out_lst.append(min_value)\n        lst.remove(min_value)\n\n        # Adding the largest element (if exists)\n        if len(lst) > 0:\n            max_value = max(lst)\n            out_lst.append(max_value)\n            lst.remove(max_value)\n            \n    return out_lst"], [0.9271347522735596, "def strange_sort_list(lst, x):\n    \"\"\"\n    \"\"\"\n    # Filter out numbers less than x and sort in descending order.\n    new_lst = sorted([i for i in lst if i >= x], reverse=True)\n\n    result = []\n\n    # Loop until new_lst is empty. Find min and max then append to result accordingly.\n    while new_lst:\n        # Find min of the new_lst and append to the result if not already in it\n        minimum = min(new_lst)\n        if minimum not in result:\n            result.append(minimum)\n            new_lst.remove(minimum)\n\n        # If new_lst is empty, break from the loop\n        if not new_lst:\n            break\n\n        # Find max of the new_lst and append to the result if not already in it\n        maximum = max(new_lst)\n        if maximum not in result:\n            result.append(maximum)\n            new_lst.remove(maximum)\n            \n    return result"], [0.9263348579406738, "def strangeSorting(lst):\n    \"\"\"\n    \"\"\"\n    res = []\n    lst_float = []\n    for item in lst:\n        try:\n            lst_float.append(float(item))\n        except ValueError:\n            pass\n    if lst_float == []:\n        return res\n    lst_float.sort()\n    while len(lst_float) > 0:\n        min_num = min(lst_float)\n        while min_num in lst_float:\n            res.append(min_num)\n            lst_float.remove(min_num)\n        if len(lst_float) > 0:\n            max_num = max(lst_float)\n            while max_num in lst_float:\n                lst_float.remove(max_num)\n            res.append(max_num)  \n    return res"], [0.9231390953063965, "def peculiar_ordering(lst):\n    \"\"\"\n    Given a list of numbers, return a list where the first element is the smallest, \n    the second element is the largest, the third element is the second smallest, \n    the fourth element is the second largest, and so on. \n    If there are an odd number of elements, the middle element should be the largest.\n    \n    >>> peculiar_ordering([1, 2, 3, 4, 5])\n    [5, 1, 4, 2, 3]\n    >>> peculiar_ordering([1, 2, 3, \"\"\"\n    # Filter out None values\n    lst = [val for val in lst if val is not None]\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n\n    result = []\n    while lst:\n        # Take the smallest element (which is at the end of the list)\n        result.append(lst.pop())\n        if lst:\n            # Take the largest element (which is at the beginning of the list)\n            result.append(lst.pop(0))\n    \n    return result"], [0.9190672636032104, "def strange_sort_list_bst(lst):\n    \"\"\"\n    Sort a list of numbers using a BST.\n    \n    Args:\n        lst: a list of numbers\n    \n    Returns:\n        A sorted list of numbers.\n    \"\"\"\n    # Initialise min heap, max heap and output_list\n    min_heap, max_heap, output = [], [], []\n\n    # Populate min heap and max heap\n    for num in lst:\n        heapq.heappush(min_heap, num)\n        heapq.heappush(max_heap, -num)\n\n    # Grab smallest and largest alternatively from heaps until they're empty\n    is_turn_max = False\n    while min_heap and max_heap:\n        if not is_turn_max:\n            temp = heapq.heappop(min_heap)\n            while max_heap and -max_heap[0] < temp:\n                heapq.heappop(max_heap)\n            if max_heap and -max_heap[0] == temp:\n                heapq.heappop(max_heap)\n            output.append(temp)\n            is_turn_max = True\n        else:\n            temp = -heapq.heappop(max_heap)\n            while min_heap and min_heap[0] < temp:\n                heapq.heappop(min_heap)\n            if min_heap and min_heap[0] == temp:\n                heapq.heappop(min_heap)\n            output.append(temp)\n            is_turn_max = False\n\n    return output"], [0.9186035394668579, "def peculiar_ordering(lst):\n    \"\"\"\n    Given a list of numbers, return a list where the first element is the smallest,\n    the second element is the largest, the third element is the second smallest,\n    the fourth element is the second largest, and so on.\n    \n    >>> peculiar_ordering([1, 2, 3, 4, 5])\n    [1, 5, 2, 4, 3]\n    >>> peculiar_ordering([1, 1, 2, 2])\n    [1, 2, 1, 2]\n    >>> peculiar_ordering\"\"\"\n    lst = [val for val in lst if val is not None] # Remove None values\n    sorted_list = sorted(lst, reverse=True) # Sort list in reverse order\n\n    result = []\n    while sorted_list:\n        if sorted_list:\n            result.append(sorted_list.pop())  # pick up smallest\n        if sorted_list:\n            result.append(sorted_list.pop(-1))  # pick up largest\n\n    return result"], [0.9175035953521729, "def strange_sort_list_heap(lst):\n    \"\"\"\n    Sort the given list using a heap.\n    \n    Args:\n       lst(list): List of numbers\n    Returns:\n       list: Sorted list\n    \"\"\"\n    # Base case for an empty list\n    if not lst:\n        return []\n    \n    # Transform list into a heap, in-place, in O(len(lst)) time\n    heapq.heapify(lst)\n    \n    # List to hold the final result\n    result = []\n    \n    # Flag to check whether to pop smallest or largest number\n    pop_smallest = True\n    \n    while lst:\n        if pop_smallest:  # Pop the smallest number\n            result.append(heapq.heappop(lst))  # heapq.heappop() pops and return smallest element from heap\n        else:  # Pop the largest number\n            lst = [-i for i in lst]  # Invert the order of heap\n            heapq.heapify(lst)  # Heapify again as order has changed\n            result.append(-heapq.heappop(lst))  # heapq.heappop() pops and return smallest(negative of largest) element from heap\n            lst = [-i for i in lst]  # Invert the order back\n            heapq.heapify(lst)  # Heapify again as order has changed\n        # Invert the flag to pop the other number in next iteration\n        pop_smallest = not pop_smallest\n        \n    return result"]]}
{"task_id": "HumanEval/71", "problem": [[0.936038076877594, "def triangle_area(a, b, c):\n    \"\"\"\n    Calculate the area of a triangle given the length of its sides.\n    :param a: side a\n    :param b: side b\n    :param c: side c\n    :return: area of the triangle\n    \"\"\"\n    # validate the sides of a triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # semiperimeter\n        p = (a + b + c) / 2.0\n        # calculate the area\n        area = (p * (p - a) * (p - b) * (p - c))**0.5\n        return round(area, 2)\n    else:\n        return -1"], [0.9330061674118042, "def triangle_area(a, b, c):\n    \"\"\"Compute and return the area and the altitude of a triangle from its three side lengths\"\"\"\n    \n    # check if the sides can form a valid triangle\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    \n    # check if the triangle is equilateral\n    if a == b == c:\n        return -1\n\n    # calculate semi-perimeter\n    s = (a + b + c) / 2\n\n    # calculate area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    area = round(area, 2)\n\n    # calculate altitude\n    # altitude = 2 * area / base\n    # assume c is the base for computing the altitude.\n    # for isosceles triangle, any side can be considered as base.\n    # for scalene triangle, the altitude varies with the chosen base.\n    altitude = 2 * area / c\n    altitude = round(altitude, 2)\n\n    return (area, altitude)"]]}
{"task_id": "HumanEval/72", "problem": [[0.9543389081954956, "def will_it_fly(q,w):\n    '''\n    The function's purpose is to discern q's flight potential, return True if achievable, and False if not. For q to fly, it must fulfil two prerequisites: it must be palindromic and the total weights of its elements should not go beyond the maximum acceptable weight w.\n\n    Implement the function with error handling mechanisms. It should return a \"Non-numeric input\" error if it receives a non-numeric input, and a \"Non-sequence input\" error if it receives a non-sequence input.\n\n    Examples:\n    will_it_fly([1, 2], 5) \u279e False \n\n    will_it_fly([3, 2, 3], 1) \u279e False\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n\n    will_it_fly([3], 5) \u279e True\n    \n    Error Cases:\n    will_it_fly([\"a\",\"b\",\"c\"], 5) \u279e \"Non-numeric input\"\n    \n    will_it_fly(123, 5) \u279e \"Non-sequence input\"\n    '''\n    # Handle Non-sequence input error\n    if not isinstance(q, (list, tuple, str)):\n        return \"Non-sequence input\"\n    \n    for i in q:\n        # Handle Non-numeric input error\n        if not isinstance(i, (int, float)):\n            return \"Non-numeric input\"\n    \n    return is_palindrome(q) and sum(q) <= w"], [0.9447683095932007, "def will_it_fly(q, w):\n    \"\"\"\n    \"\"\"\n    # Check if list is palindrome\n    if q == q[::-1]:\n        # Check if sum is less than or equal to w\n        if sum(q) <= w:\n            return True\n    return False"], [0.9406753182411194, "def will_it_fly(q, w):\n    \"\"\"\n    \"\"\"\n    # Check if list q is palindrome by comparing it to its reverse.\n    if q == q[::-1]:\n        # If it is, check if sum of elements of q is less than or equal to w\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False"], [0.9382733106613159, "def will_it_fly(q,w):\n    \"\"\"\n    \"\"\"\n    if all(isinstance(i, int) for i in q):\n        if q == q[::-1] and sum(i for i in q) <= w:\n            return True\n    return False"], [0.937174916267395, "def will_it_fly(q, w):\n    \"\"\"\n    Check if a list of numbers is palindromic and its sum is less than or equal to a given weight.\n    \n    Args:\n        q (list): List of numbers.\n        w (int): Maximum weight.\n    \n    Returns:\n        bool: True if the list is palindromic and its sum is less than or equal to w, False otherwise.\n    \"\"\"\n    q_len = len(q)\n    \n    # Check if the list is palindromic\n    for i in range(q_len // 2):\n        if q[i] != q[q_len - 1 - i]:\n            return False\n    \n    # Check if the sum of its elements is less than or equal to w\n    if sum(q) > w:\n        return False\n    \n    return True"], [0.9316713809967041, "def if_can_fly(q, w, e): \n    \"\"\"\n    Check if the list is a palindrome and the total weight does not exceed the limit\n    :param q: list of weights\n    :param w: weight limit\n    :param e: list of weights\n    :return: True if the list is a palindrome and the total weight does not exceed the limit, False otherwise\n    \"\"\"\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the total weight exceeds the limit\n    if sum(q) > w:\n        return False\n    # If both conditions are passed, return true\n    return True"], [0.9316577911376953, "def will_it_fly(q, w):\n    \"\"\"\n    <|file_separator|>\n    def will_it_fly(q, w):\n    \"\"\"\n    \"\"\"\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n    \n    def will_it_fly(q, w):\n    \"\"\"\n    \"\"\"\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n    \n    def will_it_fly(q, w):\n    \"\"\"\n    \"\"\"\n    if q == q\"\"\"\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"], [0.9252378344535828, "def will_it_fly(q, w):\n    \"\"\"\n    \"\"\"\n    # Check if the mass of q is within limit and also if q is a palindrome\n    return sum(q) <= w and q == q[::-1]"], [0.920432448387146, "def future_flight(q, w):\n    \"\"\"\n    \"\"\"\n    # Checking for sequence type\n    if not isinstance(q, (list, tuple)):\n        return \"Non-sequence input\"\n\n    # Checking for numeric type input in sequence\n    if not all(isinstance(item, (int, float)) for item in q):\n        return \"Non-numeric input\"\n\n    # Checking if list is sorted in ascending or descending order\n    if q != sorted(q) and q != sorted(q, reverse=True):\n        return \"Unsorted list error\"\n\n    # Checking if flight capacity meets requirements\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"], [0.9200212359428406, "def will_it_fly(q, w, n):\n    \"\"\"\n    Check if a list of numbers q is palindromic, has a sum less than or equal to w, and has exactly n unique elements.\n\n    Args:\n        q (list): List of numbers.\n        w (int): Maximum sum of elements in q.\n        n (int): Number of unique elements in q.\n\n    Returns:\n        bool: True if q is palindromic, has a sum less than or equal to w, and has exactly n unique elements. False otherwise.\n    \"\"\"\n    # Check if q is palindromic\n    if q != q[::-1]:\n        return False\n\n    # Check if the sum of elements in q is less than or equal to w\n    if sum(q) > w:\n        return False\n\n    # Count the unique elements in q\n    unique_elements = len(set(q))\n\n    # Check if q has exactly n unique elements\n    if unique_elements != n:\n        return False\n\n    return True"]]}
{"task_id": "HumanEval/73", "problem": [[0.9412541389465332, "def smallest_change(arr, limit):\n    \"\"\"\n    Given an array of integers and a limit value, find the minimum number of mismatches\n    in the array to make it a palindrome.\n    \n    Args:\n        arr (list): An array of integers.\n        limit (int): The maximum number of mismatches allowed.\n    \n    Returns:\n        int: The minimum number of mismatches required to make the array a palindrome.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    mismatches = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            mismatches += 1\n            if mismatches > limit:\n                return mismatches\n\n        left += 1\n        right -= 1\n    \n    return mismatches"], [0.9388190507888794, "def minimum_changes_to_palindrome(arr, limit):\n    \"\"\"\n    Given an array of integers arr and an integer limit, return the minimum number of elements to change to make arr a palindrome.\n\n    An array is a palindrome if it reads the same backward as forward.\n\n    An array a is a modification of an array b if a can be obtained from b changing at most limit elements to any value.\n    \"\"\"\n    i, j = 0, len(arr) - 1 #start and end pointers\n    changes = 0\n    unique_elements = set() \n\n    while i <= j: \n        if arr[i] != arr[j]: \n            changes += 1\n            if arr[i] not in unique_elements: #check for unique modifications constraint\n                limit -= 1\n                if limit < 0: \n                    return changes\n                unique_elements.add(arr[i])\n            arr[\n              j] = arr[i] #make both ends same by replacing the larger one with the smaller one\n        i += 1\n        j -= 1\n\n    return changes"], [0.9383949637413025, "def smallest_change(arr, limit):\n    \"\"\"\n    Given an array of integers and a limit, find the minimum number of elements to remove to make the array symmetrical.\n    \n    An array is symmetrical if it is the same as its reverse.\n    \n    Example\n    For arr = [1, 2, 3, 2, 1] and limit = 2, the output should be\n    smallestChange(arr, limit) = 0;\n    For arr = [1, 2, 3, 4, 5] and limit = 1, the output should be\n    smallestChange(arr, limit\"\"\"\n    n = len(arr)\n    count = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n            if count > limit:\n                return count\n    \n    return count"], [0.9332283735275269, "def smallest_change(arr, limit):\n    \"\"\"\n    Given an array of integers and a limit, return the minimum number of changes\n    required to make all elements equal.\n    \n    >>> smallest_change([1, 2, 3], 1)\n    2\n    >>> smallest_change([1, 2, 3], 2)\n    1\n    >>> smallest_change([1, 2, 3], 3)\n    0\n    \"\"\"\n    left = 0 \n    right = len(arr) - 1\n    changes = 0\n    while left <= right:\n        if arr[left] != arr[right]:\n            limit -= 1\n            if arr[left] < arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n                \n            if limit < 0:\n                changes += 1\n        left += 1\n        right -= 1\n    return changes"], [0.9309017062187195, "def smallest_change(arr, limit):\n    \"\"\"\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n        if changes > limit:\n            break\n    return min(changes, limit)"], [0.9306086897850037, "def smallest_change(arr, limit):\n    \"\"\"\n    Given an array of integers and a limit, find the smallest number of changes\n    needed to make all elements equal.\n    \n    Args:\n        arr (list): an array of integers\n        limit (int): the limit of changes allowed\n    \n    Returns:\n        int: the smallest number of changes needed\n    \"\"\"\n    arr_rev = arr[::-1] # create a reversed copy of the array\n    diffs = sum(x != y for (x, y) in zip(arr, arr_rev)) // 2 # count the number of differences\n    \n    # handle the limit\n    if diffs <= limit:\n        return diffs\n    else:\n        return limit + (diffs - limit) * 2"], [0.9294269680976868, "def smallest_change(arr, limit):\n    \"\"\"\n    Given an array of integers and a limit, return the minimum number of changes\n    required to make all elements equal, or -1 if it is not possible to make all\n    elements equal given the limit.\n    \n    An element can be changed by 1 at a time.\n    \n    For example, given arr = [1, 2, 3, 4], and a limit of 1, the minimum number\n    of changes required to make all elements equal is 6:\n    \n    arr = [1, 2, 3, 4]\n    arr\"\"\"\n    left, right = 0, len(arr) - 1\n    counts = defaultdict(int)\n    unique_changes = 0\n    total_changes = 0\n    \n    while left <= right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        elif arr[left] > arr[right]:\n            if counts[arr[left]] < limit:\n                total_changes += 1\n                counts[arr[left]] += 1\n                arr[right] = arr[left]\n                left += 1\n                right -= 1\n            else:\n                return -1\n        else:\n            if counts[arr[right]] < limit:\n                total_changes += 1\n                counts[arr[right]] += 1\n                arr[left] = arr[right]\n                left += 1\n                right -= 1\n            else:\n                return -1\n    return total_changes"], [0.9231908321380615, "def smallest_change(arr, limit):\n    \"\"\"\n    Given an array of integers and a limit value, return the minimum number of elements to change to have no consecutive duplicates.\n    If it is not possible to remove less than k elements to avoid consecutive duplicates, return -1.\n    \n    Example 1:\n    Input: arr = [1,2,3,4,5], limit = 0\n    Output: 0\n    Explanation: No elements need to be changed.\n    \n    Example 2:\n    Input: arr = [1,2,3,3,5], limit = 1\n    Output: \"\"\"\n    i, j = 0, len(arr)-1\n    count = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n\n            if count > limit:\n                return -1\n\n            arr[j] = arr[i]\n        i += 1\n        j -= 1\n    return count"], [0.9219220876693726, "def smallest_variation_in_subgroup(arr, limit, subset):\n    \"\"\"\n    \"\"\"\n    # mapping array elements to counter of their occurrence\n    counts = dict()\n    for a in arr:\n        if a in subset:\n            counts[a] = counts.get(a, 0) + 1\n\n    # members in subset with occurrence less than half of the array's length\n    to_subtract = [k for k, v in counts.items() if k in subset and v < len(arr) // 2]\n\n    # sorting them by occurrence in ascending order\n    to_subtract.sort(key=counts.get)\n\n    # subtracting them until limit or subset is depleted\n    idx = 0\n    while idx < len(to_subtract) and limit > 0:\n        limit -= 1\n        arr[arr.index(to_subtract[idx])] = to_subtract[-1]\n        counts[to_subtract[idx]] -= 1\n        counts[to_subtract[-1]] += 1\n        if counts[to_subtract[idx]] < len(arr) // 2:\n            idx += 1\n\n    # cannot make array palindromic if subset is depleted before limit\n    if idx < len(to_subtract):\n        return -1\n\n    # count compared to the most occurrence number in subset\n    max_subset_elm = max(counts.keys(), key=lambda x: counts[x] if x in subset else -1)\n    return sum([v for k, v in counts.items() if k != max_subset_elm])"], [0.9217832088470459, "def smallest_variation_in_subgroup(arr, limit, subset):\n    \"\"\"\n    \"\"\"\n    # mapping array elements to counter of their occurrence\n    counts = dict()\n    for a in arr:\n        # if a in subset:\n        counts[a] = counts.get(a, 0) + 1\n\n    # numbers in subset with occurrence less than half of the array's length\n    to_subtract = [k for k, v in counts.items() if k in subset and v < len(arr) // 2]\n\n    # sorting them by occurrence ascending order\n    to_subtract.sort(key=counts.get)\n\n    # subtracting them until limit or subset is depleted\n    idx = 0\n    while idx < len(to_subtract) and limit > 0:\n        limit -= 1\n        arr[arr.index(to_subtract[idx])] = to_subtract[-1]\n        counts[to_subtract[idx]] -= 1\n        counts[to_subtract[-1]] += 1\n        if counts[to_subtract[idx]] < len(arr) // 2:\n            idx += 1\n\n    # cannot make array palindromic if subset is depleted before limit\n    if idx < len(to_subtract):\n        return -1\n\n    # count compared to the most occurrence number in subset\n    max_subset_elm = max(counts.keys(), key=lambda x: counts[x] if x in subset else -1)\n    return sum([v for k, v in counts.items() if k != max_subset_elm])"]]}
{"task_id": "HumanEval/74", "problem": [[0.9617927074432373, "def total_match(lst1, lst2, case_sensitive=False):\n    '''\n    The function takes in two iterables of alphanumeric strings and returns the iterable with a total character length \n    (disregarding white spaces and non-alphanumeric characters) that's less or equal to the other iterable's length, \n    maintaining the original order of the elements in each iterable.\n    \n    The function also drop duplicate strings from both lists, keeping only the first occurrence of each string. Text case is ignored during string evaluations by default. This can be modified by setting the case_sensitive parameter to True.\n    \n    Should both iterables have an equal total character length, the function returns the first iterable.\n\n    Examples:\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    total_match(['hi world'], ['hi', ' w', 'or', 'ld']) \u279e ['hi', ' w', 'or', 'ld']\n    '''\n    import re\n\n    # Remove non-alphanumeric characters and possibly convert to lower case\n    lst1 = [re.sub(r'\\W+', '', s).lower() if not case_sensitive else re.sub(r'\\W+', '', s) for s in lst1]\n    lst2 = [re.sub(r'\\W+', '', s).lower() if not case_sensitive else re.sub(r'\\W+', '', s) for s in lst2]\n\n    # Eliminate duplicates, preserving the original order\n    lst1, lst2 = list(dict.fromkeys(lst1)), list(dict.fromkeys(lst2))\n\n    # Determine which list has a less or equal total character count\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2"], [0.9537039995193481, "def total_match(lst1, lst2, case_sensitive=False):\n    \"\"\"\n    The function takes in two iterables of alphanumeric strings and returns the iterable with a total character length \n    (disregarding white spaces and non-alphanumeric characters) that's less or equal to the other iterable's length, \n    maintaining the original order of the elements in each iterable.\n\n    The function also drops duplicate strings from both lists, keeping only the first occurrence of each string. Text case is ignored during string evaluations by default. This can be modified by setting the case sensitive parameter to True.\n\n    Should both iterables have an equal total character length, the function returns the first iterable.\n\n    Examples:\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['HI', 'HI']) \u279e ['HI', 'HI']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'hi']) \u279e ['hi', 'hi']\n    total_match(['A'], ['1', '2', '3', '4', '5']) \u279e ['A']\n    total_match(['hi world'], ['hi', ' w', 'or', 'ld']) \u279e ['hi', ' w', 'or', 'ld']\n    \"\"\"\n\n    # Remove non-alphanumeric characters and possibly convert to lower case\n    lst1 = [re.sub(r'\\W+', '', s).lower() if not case_sensitive else re.sub(r'\\W+', '', s) for s in lst1]\n    lst2 = [re.sub(r'\\W+', '', s).lower() if not case_sensitive else re.sub(r'\\W+', '', s) for s in lst2]\n\n    # Eliminate duplicates, preserving the original order\n    lst1, lst2 = list(dict.fromkeys(lst1)), list(dict.fromkeys(lst2))\n\n    # Determine which list has a less or equal total character count\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2"], [0.9475939273834229, "def total_match(lst1, lst2):\n    \"\"\"\n    \"\"\"\n    # Removing repeating elements \n    lst1 = list(dict.fromkeys([i.lower() for i in lst1]))\n    lst2 = list(dict.fromkeys([i.lower() for i in lst2]))\n    \n    # Discounting spaces\n    lst1_no_space = [i.replace(\" \", \"\") for i in lst1]\n    lst2_no_space = [i.replace(\" \", \"\") for i in lst2]\n    \n    # Checking for more than half strings in numerical characters\n    if (sum(i.isnumeric() for i in lst1_no_space) > len(lst1_no_space)/2 or\n        sum(i.isnumeric() for i in lst2_no_space) > len(lst2_no_space)/2):\n        return []\n    \n    # Counting cumulative quantity of characters in all the strings\n    count1 = sum(len(i) for i in lst1_no_space)\n    count2 = sum(len(i) for i in lst2_no_space)\n    \n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"], [0.940588653087616, "def total_match(lst1, lst2):\n    \"\"\"\n    \"\"\"\n    len1 = sum(len(word.replace(' ', '')) for word in lst1)\n    len2 = sum(len(word.replace(' ', '')) for word in lst2)\n    \n    if len1 <= len2:\n        lst = lst1\n        other_lst = lst2\n    else:\n        lst = lst2\n        other_lst = lst1\n\n    res = []\n    other_set = set(str.lower() for str in other_lst)\n\n    for string in lst:\n        if string.lower() not in other_set:\n            res.append(string)\n            other_set.add(string.lower())\n    return res"], [0.939821183681488, "def enhanced_match(lst1, lst2):\n    \"\"\"\n    Given two lists of strings, return the list with the lesser total character count (excluding blank spaces).\n    \n    >>> enhanced_match(['a', 'b', 'c'], ['a', 'b', 'c'])\n    ['a', 'b', 'c']\n    >>> enhanced_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n    ['a', 'b', 'c']\n    >>> enhanced_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e'])\n\"\"\"\n    # Remove strings that contain numbers\n    lst1 = [string for string in lst1 if not any(char.isdigit() for char in string)]\n    lst2 = [string for string in lst2 if not any(char.isdigit() for char in string)]\n  \n    # Remove duplicates, ignoring case\n    seen1 = set()\n    seen2 = set()\n    lst1 = [x for x in lst1 if not (x.lower() in seen1 or seen1.add(x.lower()))]\n    lst2 = [x for x in lst2 if not (x.lower() in seen2 or seen2.add(x.lower()))]\n  \n    # Calculate total character count (excluding blank spaces)\n    len1 = sum(len(s.replace(' ', '')) for s in lst1)\n    len2 = sum(len(s.replace(' ', '')) for s in lst2)\n\n    # Return the list with the lesser total character count\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2"], [0.9359985589981079, "def total_match(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns the list with lesser or equal count of characters.\n    It removes recurring strings from the lists and calculates the count of characters in the cleaned lists.\n    \n    Args:\n    - lst1 (list): The first list of strings.\n    - lst2 (list): The second list of strings.\n    \n    Returns:\n    - list: The list with lesser or equal count of characters.\n    \"\"\"\n    # Removing spaces and changing case to lower for string comparison\n    cleaned_lst1 = [str.replace(' ', '').lower() for str in lst1]\n    cleaned_lst2 = [str.replace(' ', '').lower() for str in lst2]\n\n    # Checking and removing recurring strings in the lists\n    seen = set()\n    unique_lst1 = [string for string in lst1 if string.lower() not in seen and not seen.add(string.lower())]\n    unique_lst2 = [string for string in lst2 if string.lower() not in seen and not seen.add(string.lower())]\n\n    # Calculating count of characters in cleaned lists\n    count_lst1 = sum([len(str) for str in cleaned_lst1])\n    count_lst2 = sum([len(str) for str in cleaned_lst2])\n\n    # Checking which list has lesser or equal count of characters\n    if count_lst1 <= count_lst2:\n        return unique_lst1\n    else:\n        return unique_lst2"], [0.9296931028366089, "def total_match(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns the list with fewer characters.\n    If the list with fewer characters has more than 30% numeric characters, it returns an empty list.\n    \n    Parameters:\n    lst1 (list): The first list.\n    lst2 (list): The second list.\n    \n    Returns:\n    list: The list with fewer characters.\n    \"\"\"\n    # Removing duplicates from the lists\n    lst1 = sorted(set(lst1), key = lst1.index)\n    lst2 = sorted(set(lst2), key = lst2.index)\n    \n    # Initializing character and numeric counters\n    total_chars1, total_chars2, total_numeric = 0, 0, 0\n    \n    # Calculating characters count for lst1 and updating numeric count\n    for word in lst1:\n        total_chars1 += len(word.replace(\" \", \"\"))\n        total_numeric += sum(c.isdigit() for c in word)\n\n    # Calculating characters count for lst2 and updating numeric count\n    for word in lst2:\n        total_chars2 += len(word.replace(\" \", \"\"))\n        total_numeric += sum(c.isdigit() for c in word)\n\n    # Total characters in both lists\n    total_chars = total_chars1 + total_chars2\n    \n    # Checking if numeric characters are more than 30%\n    if total_numeric/total_chars > 0.3:\n        return []\n        \n    # Return the list with fewer characters \n    if total_chars1 <= total_chars2:\n        return lst1\n    else:\n        return lst2"]]}
{"task_id": "HumanEval/75", "problem": [[0.9438865780830383, "def is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    \"\"\"\n    prime_factors = []\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n    if len(prime_factors) == 3:\n        product = 1\n        for factor in prime_factors:\n            product *= factor\n        if product == a:\n            return True\n    return False"], [0.9437503814697266, "def is_multiply_prime(a):\n    \"\"\"\n    \"\"\"\n    deviders = []\n    if a < 2:\n        return False\n    while a % 2 == 0:\n        deviders.append(2)\n        a = a / 2\n    f = 3\n    while f * f <= a:\n        if a % f == 0:\n            deviders.append(f)\n            a = a / f\n        else:\n            f += 2\n    if a != 1: \n        deviders.append(a)\n    if len(deviders) == 3 and all(map(lambda x: x == deviders[0] or x % deviders[0] != 0, deviders)):\n        return True    \n    else:\n        return False"], [0.934600293636322, "def is_product_of_three_primes(n):\n    \"\"\"Modify this function to return True if the input number is a product of exactly three prime numbers, else False.\"\"\"\n    factors = []\n\n    for i in range(2, n + 1):\n        while (n % i==0):\n            factors.append(i)\n            n = n / i\n\n    # remove duplicate factors\n    unique_factors = list(set(factors))\n\n    # check if factors are prime numbers\n    for factor in unique_factors:\n        if not is_prime(factor):\n            return False\n\n    # check if there are exactly three factors\n    if len(unique_factors) == 3:\n        return True\n    else:\n        return False"], [0.92183518409729, "def is_multiply_prime(a):\n    \"\"\"Return if the input number is the product of five distinct prime numbers.\"\"\"\n\n    # List of factors\n    factors = []\n\n    # Factorization\n    for i in sympy.primerange(2, 5001):\n        if a % i == 0:  # if i is a factor of a\n            while a % i == 0:  # while i is still a factor of a\n                a /= i  # divide a by i to \"remove\" this factor from a\n            factors.append(i)  # it's guaranteed that i is a prime number here\n            if len(factors) > 5:  # no need to try further, a has too many different prime factors\n                return False\n\n    return len(factors) == 5"], [0.9150209426879883, "def all_primes(numbers):\n    \"\"\"\n    Returns True if all numbers in the list are prime.\n    \"\"\"\n    for num in numbers:\n        if not is_prime(num):\n            return False\n    return True\n    def all_primes(numbers):\n    \"\"\"\n    Returns True if all numbers in the list are prime.\n    \"\"\"\n    for num in numbers:\n        if not is_prime(num):\n            return False\n    return True"], [0.9122956395149231, "def is_prime(num):\n    \"\"\"Modify this function to check if the input number is a prime number.\"\"\"\n    if num > 1:\n        # check for factors\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else: \n            return True\n    else:\n        return False"], [0.9122392535209656, "def is_prime(number):\n    '''This function should return true if the number is prime and false otherwise.'''\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True"], [0.9118169546127319, "def is_prime(n):\n    \"\"\"\n    \"\"\"\n    if n in (2,3):\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for current in range(3, int(n ** 0.5) + 1, 2):\n        if n % current == 0: \n            return False\n    return True"]]}
{"task_id": "HumanEval/76", "problem": [[0.9295938611030579, "def is_power(x, y):\n    \"\"\"\n    Given base and power, return True if base raised to the power is equal to y else False.\n    Note that integer division should be used.\n    \n    >>> is_power(2, 1024)\n    True\n    >>> is_power(2, 1025)\n    False\n    \"\"\"\n    # Check if x and y are positive integers\n    if x <= 0 or y <= 0 or not isinstance(x, int) or not isinstance(y, int):\n        return False\n    \n    # Check if y is a power of x\n    power = 0\n    while x ** power <= y:\n        if x ** power == y:\n            return True\n        power += 1\n    return False"], [0.916802167892456, "def is_power_of_two(n):\n    \"\"\"\n    Given an integer, write a function to determine if it is a power of two.\n    \"\"\"\n    if n <= 0:\n        return False\n    while n > 1:\n        if n % 2 != 0:\n            return False\n        n = n / 2\n    return True"], [0.9097391963005066, "def is_power(x, y):\n    \"\"\"\n    Given base and exponent, calculate if y is a power of x.\n    \n    Parameters\n    ----------\n    x : int\n        Base number\n    y : int\n        Exponent\n    \n    Returns\n    -------\n    bool\n        True if y is a power of x, False otherwise\n    \"\"\"\n    if x <= 0 or y <= 0:  # Check if x and y are positive integers\n        return False\n    \n    if x < 0:  # Check if x is negative\n        return False\n    \n    while y % x == 0:  # Check if y is a power of x\n        y = y // x\n        if y == 1:\n            return True\n    \n    return False"], [0.9085066318511963, "def divisible(x, y):\n    \"\"\"\n    Write a function that returns True if x is divisible by y, and False otherwise.\n    \"\"\"\n    if x % y == 0:\n        return True\n    else:\n        return False"]]}
{"task_id": "HumanEval/77", "problem": [[0.9371068477630615, "def is_perfect_cube(n):\n    \"\"\"\n    Returns True if n is a perfect cube.\n    \n    >>> is_perfect_cube(8)\n    True\n    >>> is_perfect_cube(-1)\n    False\n    \"\"\"\n    i = 0 \n    while i*i*i < abs(n): \n        i = i + 1\n    if i*i*i == abs(n): \n        return True\n    else:\n        return False "], [0.9335493445396423, "def is_perfect_cube(n):\n    \"\"\"\n    >>> is_perfect_cube(27)\n    True\n    >>> is_perfect_cube(125)\n    True\n    >>> is_perfect_cube(126)\n    False\n    \"\"\"\n    # Function to check if a number is a perfect cube or not.\n    temp = isqrt(n)\n    return temp**3 == n or (temp+1)**3 == n or (temp-1)**3 == n"], [0.9313973784446716, "def is_perfect_cube(n):\n    \"\"\"\n    Returns True if n is a perfect cube.\n    \n    >>> is_perfect_cube(8)\n    True\n    >>> is_perfect_cube(125)\n    True\n    >>> is_perfect_cube(64)\n    False\n    \"\"\"\n    root = int(n ** (1/3))\n    return root * root * root == n"], [0.9297224283218384, "def isPerfectCube(n):\n    \"\"\"\n    Returns True if n is a perfect cube.\n    \n    >>> isPerfectCube(8)\n    True\n    >>> isPerfectCube(125)\n    True\n    >>> isPerfectCube(64)\n    False\n    \"\"\"\n    cube_root = round(n ** (1/3))\n    return cube_root ** 3 == n"], [0.9296886920928955, "def isPerfectCube(n):\n    \"\"\"\n    Returns True if n is a perfect cube.\n    \n    >>> isPerfectCube(8)\n    True\n    >>> isPerfectCube(125)\n    True\n    >>> isPerfectCube(64)\n    False\n    \"\"\"\n    cube_root = round(n ** (1/3))\n    return cube_root ** 3 == n"]]}
{"task_id": "HumanEval/78", "problem": [[0.9510727524757385, "def count_hex_primes(num):\n    \"\"\"\n    Return the number of hex numbers in num that are prime.\n    num is a string representing a number in hexadecimal (base 16).\n    A hex number is prime if it consists entirely of digits 2, 3, 5, 7, A, D.\n    A hex digit is one of 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    A hex number is represented in Python as an instance of the str class.\n\"\"\"\n    count = 0\n    for c in num:\n        if c in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count"], [0.8993967771530151, "def count_upper_prime(s):\n    \"\"\" Count the number of uppercase vowels at prime-numbered positions \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if is_prime(i + 1):  # +1 for 1-based indexing\n            if s[i] in 'AEIOU':  \n                count += 1\n    return count"]]}
{"task_id": "HumanEval/79", "problem": [[0.9156445264816284, "def decimalToBinary(n):\n    \"\"\"\n    Convert decimal to binary\"\"\"\n    binary = bin(n).replace(\"0b\",\"\")\n    while len(binary) < 8:\n        binary = '0'+binary\n    return \"db\"+binary+\"db\""]]}
{"task_id": "HumanEval/80", "problem": [[0.9542896151542664, "def is_happy(s):\n    \"\"\"\n    You are assigned a string s.\n    Ascertain whether the string is happy or not.\n    A string is described as happy if it is at least 3 characters long, each consolidative set of 3 characters are individual, every unique character appears no less than twice, and no character appears thrice in a direct sequence.\n    Additionally, the string is happy if all character sets of 3 or more contains at least 1 vowel and the string should not start or end with the same character.\n\n    For instance:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => False\n    is_happy(aabb) => False\n    is_happy(adbbd) => True\n    is_happy(xyzz) => False\n    is_happy(aoa) => True\n    \"\"\"\n    from collections import Counter\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if len(s) < 3 or s[0] == s[-1]:\n        return False\n    counter = Counter(s)\n    for k, v in counter.items():\n        if v < 2 or v > 2:\n            return False\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) != 3 or len(set(s[i:i+3]).intersection(vowels)) < 1:\n            return False\n    return True"], [0.9518826603889465, "def is_happy(s):\n    \"\"\"You are given a string s.\n    Determine if the string is happy or not.\n    A string is happy if its length is at least 3, each set of 3 sequential characters are unique,\n    every distinct character occurs at least twice, no character appears three times in a row,\n    and there is no number in the string.\"\"\"\n\n    # If length of string is less than 3 or there's a digit in the string, it's not happy\n    if len(s) < 3 or any(char.isdigit() for char in s):\n        return False\n\n    # Create a dictionary to keep count of characters\n    count_dict = {}\n    for ch in s:\n        if ch in count_dict:\n            count_dict[ch] += 1\n        else:\n            count_dict[ch] = 1\n\n    # If any character occurs only once or more than twice in a row, string is not happy\n    for ch in count_dict:\n        if count_dict[ch] < 2 or s.count(ch*3) > 0:\n            return False\n\n    # If there's any three sequential characters are not unique, string is not happy\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n\n    # String is happy\n    return True"], [0.9507793188095093, "def is_happy(s):\n    \"\"\"You are given a string s.\n    Determine if the string is happy or not.\n    A string is happy if its length is at least 3, each set of 3 sequential characters are unique,\n    every distinct character occurs at least twice, no character appears three times in a row,\n    and there is no number in the string.\"\"\"\n    \n    # If length of string is less than 3 or there's a digit in the string, it's not happy\n    if len(s) < 3 or any(char.isdigit() for char in s):\n        return False\n\n    # Create a dictionary to keep count of characters\n    count_dict = {}\n    for ch in s: \n        if ch in count_dict: \n            count_dict[ch] += 1\n        else: \n            count_dict[ch] = 1\n\n    # If any character occurs only once or more than twice in a row, string is not happy\n    for ch in count_dict: \n        if count_dict[ch] < 2 or s.count(ch*3) > 0: \n            return False\n        \n    # If there's any three sequential characters are not unique, string is not happy\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n\n    # String is happy\n    return True"], [0.9501376748085022, "def is_happy(s):\n    \"\"\"\n    You are assigned a string s.\n    Ascertain whether the string is happy or not.\n    A string is described as happy if it is at least 3 characters long, each consecutive set of 3 characters are individual, \n    every unique character appears no less than twice, and no characters appears thrice in a direct sequence.\n    Additionally, the string is happy if all character sets of 3 or more contains at least 1 vowel \n    and the string should not start or end with the same character.\n\n    For instance:\n    is_happy(4) => False\n    is_happy(aa) => False\n    is_happy(abc) => False\n    is_happy(aabb) -> False\n    is_happy(aabba) -> True\n    is_happy(kyzz) -> False\n    is_happy(aba) => True\n    \"\"\"\n    from collections import Counter\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if len(s) < 3 or s[0] == s[-1]:\n        return False\n    counter_ = Counter(s)\n    for x, u in counter_.items():\n        if u < 2 or u > 2:\n            return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3 or len(set(s[i:i+3]).intersection(vowels)) < 1:\n            return False\n    return True"], [0.9471696615219116, "def is_happy(s):    \n    \"\"\"\n    Write a function that determines whether a string is happy.\n    A string is happy if it satisfies the following rules:\n    - It has at least three characters.\n    - All groups of three consecutive characters are distinct.\n    - Each character recurs at least three times.\n    - No character appears four times successively.\n    - Each character must alternate with at least two different characters.\n    \n    Args:\n        s (str): string to check\n    \n    Returns:\n        bool: True if happy, False otherwise\n    \"\"\"\n    # Rule 1: at least three characters\n    if len(s) < 3:\n        return False\n    # Rule 2: All groups of three consecutive characters are distinct\n    if len(set(s[i:i+3] for i in range(len(s)))) < len(s) - 2:\n        return False\n    # Rule 3: Each character recurs at least three times\n    counter = Counter(s)\n    if any(value < 3 for value in counter.values()):\n        return False\n    # Rule 4: No character appears four times successively\n    if any(len(list(group)) >= 4 for key, group in groupby(s)):\n        return False\n    # Rule 5: Each character must alternate with at least two different characters\n    for key in counter.keys():\n        if len(set(s[i+1] for i in range(len(s) - 1) if s[i] == key)) < 2:\n            return False\n    return True"], [0.9440030455589294, "def is_happy(s):\n    \"\"\"\n    Write a function that takes a string as input and returns True if the string is happy and False otherwise.\n    A string is happy if it satisfies the following conditions:\n    \n    The string contains at most two unique characters.\n    The string contains no more than two occurrences of any character.\n    The string contains no consecutive repetitions of the same character.\n    The string contains no series of three succeeding characters that are the same.\n    \n    Parameters\n    ----------\n    s : str\n        The string to be checked.\n    \n    Returns\n    -------\n    bool\n        True if\"\"\"\n    if len(s) < 3:\n        return False\n    else:\n        # count the frequency of each character\n        char_dict = {}\n        for char in s:\n            if char not in char_dict:\n                char_dict[char] = 1\n            else:\n                char_dict[char] += 1\n                \n        # check the condition of each unique alphabet having identical counts cannot exceed two\n        count_dict = {}\n        for char, count in char_dict.items():\n            if count not in count_dict:\n                count_dict[count] = 1\n            else:\n                count_dict[count] += 1\n        \n        for count, freq in count_dict.items():\n            if count <= 3 and freq > 2:\n                return False\n        \n        # check the condition of consecutive repetitions of the same alphabet\n        for i in range(len(s)-1):\n            if s[i] == s[i+1]:\n                return False\n            \n        # check the condition of the uniqueness of every series of three succeeding alphabets\n        triplets = {s[i:i+3] for i in range(len(s)-2)}\n        if len(triplets) != len(s)-2:\n            return False\n    \n    return True"], [0.9398366212844849, "def is_happy(s):\n    \"\"\"\n    Checks if a string is happy or not.\n    A string is happy if it satisfies the following conditions:\n    - It is at least 3 characters long\n    - Every unique character appears at least twice, but not more than four times\n    - Each consecutive set of 3 characters are distinct\n    - No character appears thrice in consecutive sequence\n    - No character to be allowed to occur both at the beginning and the end of the string\n    \n    Args:\n        s (str): The string to be checked.\n    \n    Returns:\n        bool: True if the string is happy\"\"\"\n    # Checking the first condition - string must be at least 3 characters long\n    if len(s) < 3:\n        return False\n\n    # Third condition - every unique character appears at least twice, but not more than four times\n    char_count = {char: s.count(char) for char in set(s)} \n    for count in char_count.values():\n        if count < 2 or count > 4:\n            return False\n    \n    # Checking the second condition - each consecutive set of 3 characters are distinct\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n\n    # Checking the fourth condition - no character appears thrice in consecutive sequence\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n\n    # Integrating the new condition - no character to be allowed to occur both at the beginning and the end of the string\n    if s[0] == s[-1]:\n        return False\n\n    # If it passes all conditions\n    return True"], [0.9393788576126099, "def is_happy(s):\n    \"\"\"\n    Write your code here\n    \"\"\"\n    if len(s) < 3:\n        return False\n    freq = {}\n    for i in range(len(s)-1):\n        if s[i] == s[i + 1]:\n            return False\n        if s[i] in freq:\n            freq[s[i]] += 1\n        else:\n            freq[s[i]] = 1\n    \n    if s[-1] in freq:\n        freq[s[-1]] += 1\n    else:\n        freq[s[-1]] = 1\n    \n    if max(list(freq.values())) < 2:\n        return False\n    \n    seq = {}\n    for i in range(len(s)-2):\n        sequence = s[i:i+3]\n        if sequence in seq:\n            return False\n        else:\n            seq[sequence] = 1\n    return True"], [0.9361344575881958, "def is_happy(s):\n    \"\"\"\n    Write a function that takes a string s as input and returns True if it is a happy string\n    and False otherwise.\n    \n    A string is called happy if it satisfies the following conditions:\n    \n    - Each of the 3 characters 'a', 'b', and 'c' occurs at most 3 times in s.\n    - Each of the characters 'a', 'b', and 'c' occurs at least once in s.\n    - The characters occur in equal numbers across the entire string.\n    \n    Return True if s is a happy string and False otherwise.\n\"\"\"\n    if not s.isalpha() or not s.islower():\n        return 'Error: Invalid Input. Please enter only lowercase alphabets.'\n    if len(s) < 3:\n        return False\n    alphabets_count = {}\n    sets = set()\n    for i in range(len(s) - 2):\n        subset = s[i:i+3]\n        if subset in sets or subset[0] == subset[1] or subset[1] == subset[2]:\n            return False\n        sets.add(subset)\n        for c in subset:\n            if c in alphabets_count:\n                alphabets_count[c] += 1\n            else:\n                alphabets_count[c] = 1\n    count_even = list(filter(lambda c: c % 2 == 0, alphabets_count.values()))\n    count_odd = list(filter(lambda c: c % 2 != 0, alphabets_count.values()))\n    return len(count_odd) == 0 and len(count_even) <= 3"], [0.9335739612579346, "def is_happy(s):\n    \"\"\"\n    \"\"\"\n    if not s.isalpha() or not s.islower():\n        return 'Error: Invalid Input. Please enter only lowercase alphabets.'\n    if len(s) < 3:\n        return False\n    alphabets_count = {}\n    sets = set()\n    for i in range(len(s) - 2):\n        subset = s[i:i+3]\n        if subset in sets or subset[0] == subset[1] or subset[1] == subset[2]:\n            return False\n        sets.add(subset)\n        for c in subset:\n            if c in alphabets_count:\n                alphabets_count[c] += 1\n            else:\n                alphabets_count[c] = 1\n    count_even = list(filter(lambda c: c % 2 == 0, alphabets_count.values()))\n    count_odd = list(filter(lambda c: c % 2 != 0, alphabets_count.values()))\n    return len(count_odd) == 0 and len(count_even) < 3"]]}
{"task_id": "HumanEval/81", "problem": [[0.9277827739715576, "def grade_students(scores):\n    \"\"\"\n    This function takes a list of scores and returns a list of grades based on the following criteria:\n    - A+ if score is greater than 97\n    - A if score is greater than 93\n    - A- if score is greater than 90\n    - B+ if score is greater than 87\n    - B if score is greater than 83\n    - B- if score is greater than 80\n    - C+ if score is greater than 77\n    - C if score is greater than 73\n    - C- if\"\"\"\n    grades = []\n    for score in scores:\n        if score < 0 or score > 100:\n            grades.append(\"Invalid score\")\n        else:\n            if score >= 90:\n                grades.append('A+' if score > 97 else 'A' if score > 93 else 'A-')\n            elif score >= 80:\n                grades.append('B+' if score > 87 else 'B' if score > 83 else 'B-')\n            elif score >= 70:\n                grades.append('C+' if score > 77 else 'C' if score > 73 else 'C-')\n            elif score >= 60:\n                grades.append('D+' if score > 67 else 'D' if score > 63 else 'D-')\n            else:\n                grades.append('F')\n    return grades"], [0.927764892578125, "def grade_students(scores):\n    \"\"\"\n    This function takes a list of scores and returns a list of grades based on the following criteria:\n    - A+ if score is greater than 97\n    - A if score is greater than 93\n    - A- if score is greater than 90\n    - B+ if score is greater than 87\n    - B if score is greater than 83\n    - B- if score is greater than 80\n    - C+ if score is greater than 77\n    - C if score is greater than 73\n    - C- if\"\"\"\n    grades = []\n    for score in scores:\n        if score < 0 or score > 100:\n            grades.append(\"Invalid score\")\n        else:\n            if score >= 90:\n                grades.append('A+' if score > 97 else 'A' if score > 93 else 'A-')\n            elif score >= 80:\n                grades.append('B+' if score > 87 else 'B' if score > 83 else 'B-')\n            elif score >= 70:\n                grades.append('C+' if score > 77 else 'C' if score > 73 else 'C-')\n            elif score >= 60:\n                grades.append('D+' if score > 67 else 'D' if score > 63 else 'D-')\n            else:\n                grades.append('F')\n    return grades"]]}
{"task_id": "HumanEval/82", "problem": [[0.95741868019104, "def prime_length(string):\n    \"\"\"\n    Return True if the length of the string is a prime number.\n    >>> prime_length('hello')\n    True\n    >>> prime_length('goodbye')\n    False\n    \"\"\"\n    return is_prime(len(string))"], [0.9493728876113892, "def prime_length(string):\n    \"\"\"Accept a string, get its length, and verify if \n    the length is a prime number.\"\"\"\n    length = len(string)\n    return is_prime(length)"], [0.9449878931045532, "def prime_length(string):\n    '''Determine if the string's length is a prime number'''\n    length = len(string)\n    if is_prime(length):\n        return True\n    else:\n        return False"], [0.9405323266983032, "def prime_length(string):\n    \"\"\"Check if length of a string is a prime number.\"\"\"\n    length = len(string)\n    return is_prime(length)"]]}
{"task_id": "HumanEval/83", "problem": [[0.9437205791473389, "def starts_one_ends_correct(n):\n    \"\"\"\n    Count the number of n-digit numbers that start with '1' and end with '1' and are divisible by 2, 3, or 5.\n    \n    Args:\n        n (int): The number of digits in the numbers.\n    \n    Returns:\n        int: The count of n-digit numbers that meet the criteria.\n    \"\"\"\n    if n < 1:\n        return 0  # If n is less than 1, return 0 immediately.\n\n    count = 0\n    for i in range(10**(n-1), 10**n):  # Generate all n-digit numbers.\n        str_i = str(i)\n        if str_i[0] != '1' and str_i[-1] != '1':\n            continue  # Skip the number if it doesn't start or end with '1'.\n        \n        # Now check the divisibility.\n        if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n            # Exclude numbers divisible by both 3 and 5 (non-15 multiples)\n            if (i % 3 == 0 and i % 5 == 0 and i % 15 != 0):\n                continue\n            else:\n                count += 1\n    return count"], [0.9347285032272339, "def starts_one_ends(n):\n    \"\"\"\n    Finds the number of integers in the range [10^(n-1), 10^n) that start or end with 1 and are divisible by 3 or 5 but not both.\n    :param n: The number of digits in the range.\n    :return: The number of integers in the range that start or end with 1 and are divisible by 3 or 5 but not both.\n    \"\"\"\n    tally = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        str_i = str(i)\n        if str_i[0] == '1' or str_i[-1] == '1':  # Number starts or ends with 1\n            if i % 15 != 0 and (i % 3 == 0 or i % 5 == 0):  # Number is divisible by 3 or 5 but not both\n                tally += 1\n    return tally"], [0.9190014600753784, "def all_n_digit_numbers_with_one_ends(n):\n    \"\"\"\n    Returns a list of all n-digit numbers with one ends.\n    \n    Args:\n        n (int): The number of digits in the numbers.\n    \n    Returns:\n        list: A list of n-digit numbers with one ends.\n    \"\"\"\n    start = 10**(n-1)\n    end = 10**n\n\n    numbers_with_one_ends = [i for i in range(start, end) if str(i)[0] == '1' or str(i)[-1] == '1']\n    \n    return numbers_with_one_ends"], [0.9179291129112244, "def all_n_digit_numbers_with_one_ends(n):\n    \"\"\"\n    Returns a list of all n-digit numbers with one ends.\n    \n    Args:\n        n (int): The number of digits in the numbers.\n    \n    Returns:\n        list: A list of n-digit numbers with one ends.\n    \"\"\"\n    start = 10**(n-1)\n    end = 10**n\n\n    numbers_with_one_ends = [i for i in range(start, end) if str(i)[0] == '1' or str(i)[-1] == '1']\n\n    return numbers_with_one_ends"], [0.9161860942840576, "def num_start_end_with_1(n, primes):\n    \"\"\" Counts how many n-digit numbers start or end with 1 and are divisible by some prime in primes \"\"\"\n    start, end = 10**(n-1), 10**n\n    counter = 0\n    for i in range(start, end):\n        if int(str(i)[0]) == 1 or int(str(i)[-1]) == 1:\n            for prime in primes:\n                if i % prime == 0:\n                    counter += 1\n                    break\n    return counter"], [0.9161285161972046, "def starts_one_ends(n):\n    \"\"\"\n    Find the number of prime and fibonacci numbers between 10^n and 10^(n+1)\n    \"\"\"\n    start = 10 ** (n - 1) + 1\n    end = 10 ** n \n    step = 10 if n == 1 else 100\n    numbers = list(range(start, end, step))\n    numbers.extend(list(range(start - 1, end - 1, step)))\n    count = 0\n    for num in numbers:\n        if is_prime(\"\"\"\n    start = 10 ** (n - 1) + 1\n    end = 10 ** n \n    step = 10 if n == 1 else 100\n    numbers = list(range(start, end, step))\n    numbers.extend(list(range(start - 1, end - 1, step)))\n    count = 0\n    for num in numbers:\n        if is_prime(num) or is_fibonacci(num):\n            count += 1\n    return count"], [0.9129579067230225, "def starts_one_ends_correct(n):\n    \"\"\"\n    \"\"\"\n    inclusive_numbers = []\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            if i%7 == 0 or i%11 == 0 or i%13 == 0:\n                if i%(7*11) == 0 and i != 77:\n                    continue\n                else:\n                    inclusive_numbers.append(i)\n    return inclusive_numbers"], [0.9110739231109619, "def find_start_end_with_one(num_digits, divisor):\n    \"\"\"\n    Find the number of integers in the range [10**(num_digits-1), 10**num_digits - 1]\n    that start or end with 1 and are divisible by divisor.\n    Return the number of integers and their sum.\n    \n    >>> find_start_end_with_one(2, 1)\n    (11, 110)\n    >>> find_start_end_with_one(2, 3)\n    (8, 78)\n    >>> find_start_end_with_one(\"\"\"\n    lower = 10 ** (num_digits - 1)\n    upper = 10 ** num_digits - 1\n    \n    if upper < lower:\n        return -1\n\n    cnt = 0\n    total = 0\n    for num in range(lower, upper + 1):\n        if str(num)[0] == '1' or str(num)[-1] == '1':\n            if num % divisor == 0:\n                cnt += 1\n                total += num\n    return cnt, total"]]}
{"task_id": "HumanEval/84", "problem": []}
{"task_id": "HumanEval/85", "problem": [[0.9447671175003052, "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(value for index, value in enumerate(lst) if index % 2 == 0 and value % 2 != 0)"], [0.9326839447021484, "def enhanced_solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are at even positions.    \n\n    Examples\n    enhanced_solution([5, 8, 7, 1]) => 5\n    enhanced_solution([3, 3, 3, 3, 3]) => 9\n    enhanced_solution([30, 13, 24, 321]) => 30\n    \"\"\"\n    return sum(num for i, num in enumerate(lst[::2]) if num % 2 == 1)"], [0.9289305806159973, "def solution(lst):\n    \"\"\"\n    Given a list of integers, return the sum of all the elements that are odd indexed and odd.\n    \n    Args:\n        lst (list): list of integers\n    \n    Returns:\n        int: sum of odd indexed and odd elements\n    \"\"\"\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)"]]}
{"task_id": "HumanEval/86", "problem": [[0.9397182464599609, "def anti_shuffle(s):\n  \"\"\"\n  Given a string s, return a string of the same length where all characters that are alphabetically to the right of their neighbors are swapped.\n  \n  Example 1:\n  \n  Input: s = \"abdc\"\n  Output: \"acdb\"\n  Explanation: \"dcba\" is also a valid answer.\n  \n  Example 2:\n  \n  Input: s = \"a\"\n  Output: \"a\"\n  \n  Example 3:\n  \n  Input: s = \"ba\"\n  Output: \"ba\"\n  \n  Constraints\"\"\"\n  # Split input into words\n  words = s.split()\n\n  # Iterate over each word\n  for i, word in enumerate(words):\n    # Split word into characters\n    chars = list(word)\n\n    # Sort characters\n    chars.sort()\n\n    # Join characters back into sorted word\n    words[i] = ''.join(chars)\n\n  # Join words back into sorted sentence\n  s = ' '.join(words)\n\n  return s"], [0.9393610954284668, "def anti_shuffle(s):\n    \"\"\"\n    \"\"\"\n    s = s.split(' ')\n    sorted_s = custom_sort(s)\n    return ' '.join(sorted_s)"], [0.9392924308776855, "def anti_shuffle(s):\n    \"\"\"\n    Function that accepts a string and produces an ordered variant using the custom sort function.\n    The ordered variant of a string is a new phrase where every word (partitioned by space)\n    is replaced by a new word where every character adheres to the custom sort methodology.\n    The word and blank space sequence in the sentence remains unchanged.\n\n    Args:\n    s: String\n\n    Returns:\n    The modified string with each word sorted according to the rules of custom_sort\n    \"\"\"\n\n    sorted_words = [custom_sort(word) for word in s.split(\" \")]\n    return ' '.join(sorted_words)"], [0.936354398727417, "def anti_shuffle(s):\n    \"\"\"\n    Function that accepts a string and produces an ordered variant using the custom_sort function.\n    The ordered variant of a string is a new phrase where every word (partitioned by space) \n    is replaced by a new word where every character adheres to the custom_sort methodology.\n    The word and blank space sequence in the sentence remains unchanged.\n\n    Args: \n        s: string\n\n    Returns:\n        The modified string with each word sorted according to the rules of custom_sort\n    \"\"\"\n    \n    sorted_words = [custom_sort(word) for word in s.split(\" \")]\n    return ' '.join(sorted_words)"], [0.9263129830360413, "def anti_jumble(s):\n    \"\"\"\n    Given a string s, return a string of the same words in the string, but with the letters in each word ordered\n    in descending alphabetical order.\n    \n    For example, \"The Holy Bible\" becomes \"The ylol Hleb\".\n    \n    You may assume that all the letters in the input string are lowercase.\n    \n    Parameters\n    ----------\n    s : str\n        The string to be jumbled.\n    \n    Returns\n    -------\n    str\n        The jumbled string.\n    \"\"\"\n    return ' '.join(custom_order(word) for word in s.split(' '))"], [0.924117922782898, "def sortString(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    words = s.split()  # Split the input string into a list of words\n    sorted_words = [\"\".join(sorted(word)) for word in words]  # Sort each word alphabetically\n    return \" \".join(sorted_words)  # Join the sorted words back into a string with spaces between them"]]}
{"task_id": "HumanEval/87", "problem": [[0.9294719696044922, "def get_row(lst, x):\n    \"\"\"\n    Find all rows in a list of lists that contain a given element.\n    \n    Args:\n        lst: a list of lists\n        x: an element\n    Returns:\n        A list of tuples, where each tuple is the (row, column) index of an element x in lst\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for column_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, column_index))\n    result.sort(key=lambda a: (a[0], -a[1]))\n    return result"], [0.9051340222358704, "def find_in_matrix(matrix, x, is_reversed=False):\n    \"\"\"\n    Find all occurrences of a given element in a matrix.\n\n    :param matrix: The matrix to search in.\n    :param x: The element to search for.\n    :param is_reversed: Whether to reverse each row before searching.\n    :return: A list of coordinates of all occurrences of the element.\n    \"\"\"\n    # If the isReversed flag is set to True, reverse each row\n    if is_reversed:\n        matrix = [row[::-1] for row in matrix]\n\n    coordinates = []\n\n    # Iterate over all elements in the matrix\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            # If the current element equals 'x',\n            # add its position to the coordinates list\n            if matrix[i][j] == x:\n                # Depending on the isReversed flag, either add the position as is,\n                # or with the column index calculated from the end of the row.\n                tuple = [i, j] if not is_reversed else [i, len(matrix[i]) - j - 1]\n                coordinates.append(tuple)\n\n    # Sort the coordinates first by row index (i), then by column index (j)\n    # Notice that the Python's built-in sort function already preserves the order for equal values,\n    # so there's no need to specify what to do when \"a[0] == b[0] \", unlike in JavaScript.\n    coordinates.sort(key = lambda x: (x[0], x[1]))\n\n    return coordinates"], [0.9011964797973633, "def find_int(arr, num):\n    \"\"\"\n    Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n    You must write an algorithm with O(log n) runtime complexity.\n    \n    Example 1:\n    Input: nums = [1,3,5,6], target = 5\n    Output: 2\n    \n    Example 2:\n    Input: nums = [1,3,5,6], target = 2\n    Output: 1\n    \n    Example \"\"\"\n    coords = sorted([(i, j) for i, sub_arr in enumerate(arr) for j, elem in enumerate(sub_arr) if elem == num])\n    return coords"], [0.9011514186859131, "def find_int(arr, num):\n    \"\"\"\n    Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\n    You must write an algorithm with O(log n) runtime complexity.\n    \n    Example 1:\n    Input: nums = [1,3,5,6], target = 5\n    Output: 2\n    \n    Example 2:\n    Input: nums = [1,3,5,6], target = 2\n    Output: 1\n    \n    Example \"\"\"\n    coords = sorted([(i, j) for i, sub_arr in enumerate(arr) for j, elem in enumerate(sub_arr) if elem == num])\n    return coords"], [0.9006354212760925, "def find_indices(first_list, second_list):\n    \"\"\"\n    Given two lists of numbers, return a list of all indices where the numbers match.\n    For example, given the following lists:\n    \n    first_list = [1, 2, 3, 2, 1]\n    second_list = [4, 2, 3, 2, 5]\n    \n    The function should return [1, 2, 3].\n    \n    You may assume that input lists are not empty and contain only integers.\n    \n    You may not use the standard set methods (set(), set.add(), set\"\"\"\n    indices = []\n    for num in second_list:\n        index = [i for i, x in enumerate(first_list) if x==num]\n        indices.append(index)\n    return indices"]]}
{"task_id": "HumanEval/88", "problem": [[0.9274014234542847, "def sort_odds(arr):\n    \"\"\"\n    Given a list of numbers, sort the odd numbers in descending order while leaving the even numbers at their original positions.\n    \n    Examples\n    \n    [7, 1]  =>  [1, 7]\n    [5, 8, 6, 3, 4]  =>  [3, 8, 6, 5, 4]\n    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  =>  [9, 8, 1,\"\"\"\n    return sorted(arr, key=abs, reverse=True)"], [0.9253191351890564, "def custom_sort(array):\n    \"\"\"\n    \"\"\"\n    first_element = array[0] if array else 0\n    last_element = array[-1] if array else 0\n    is_first_odd = first_element % 2 == 1\n    is_last_odd = last_element % 2 == 1\n    if is_first_odd and is_last_odd:\n        grouping = \"odd_group\"\n    elif not is_first_odd and not is_last_odd:\n        grouping = \"even_group\"\n    else:\n        grouping = \"mixed_group\"\n    if (first_element + last_element) % 3 == 0:\n        array.sort()\n    elif (first_element + last_element) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array = sorted(i for i in array if i % 2 == 0) + [i for i in array if i % 2 != 0]\n    return {'even_group': [], 'odd_group': [], 'mixed_group': []}.update({grouping: array})"], [0.9223489761352539, "def customized_split(array):\n    \"\"\"\n    \"\"\"\n    # Check array length\n    if len(array) < 2:\n        return array\n\n    first = array[0]\n    penultimate = array[-2]\n    sum_value = first + penultimate\n    is_even_sum = sum_value % 2 == 0\n    is_sum_divisible_by_6 = sum_value % 6 == 0\n    is_sum_divisible_by_4 = sum_value % 4 == 0\n\n    even_section = []\n    odd_section = []\n    diff_section = []\n\n    for num in array:\n        is_even = num % 2 == 0\n        if is_even:\n            even_section.append(num)\n        elif is_even_sum:\n            odd_section.append(num)\n        else:\n            diff_section.append(num)\n\n    if is_sum_divisible_by_6:\n        even_section.sort()\n        odd_section.sort()\n        diff_section.sort()\n    elif is_sum_divisible_by_4:\n        even_section.sort(reverse=True)\n        odd_section.sort(reverse=True)\n        diff_section.sort(reverse=True)\n    else:\n        even_section.sort()\n        \n    return even_section + odd_section + diff_section"], [0.9219965934753418, "def reverse_odd_sort(arr):\n    \"\"\"\n    Given an array of numbers, return an array of the same numbers in reverse order.\n    \n    >>> reverse_odd_sort([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    >>> reverse_odd_sort([1, 2, 3, 4, 5, 6])\n    [6, 5, 4, 3, 2, 1]\n    >>> reverse_odd_sort([1, 2, 3, 4, \"\"\"\n    odd_nums = []\n    for num in arr:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    odd_nums.sort(reverse=True)\n\n    result = []\n    i = 0\n    for num in arr:\n        if num % 2 == 1:\n            result.append(odd_nums[i])\n            i += 1\n        else:\n            result.append(num)\n    \n    return result"]]}
{"task_id": "HumanEval/89", "problem": [[0.9318463206291199, "def encrypt(string):\n  \"\"\"\n  Encrypts a string by shifting each character by 2 positions.\n  \n  Args:\n    string: The string to be encrypted.\n  \n  Returns:\n    The encrypted string.\n  \"\"\"\n  cipher = \"\"\n  for char in string:\n    ascii_val = ord(char)\n    encrypted_val = ascii_val + 2\n    encrypted_char = chr(encrypted_val)\n    cipher += encrypted_char\n  return cipher"], [0.9312784671783447, "def encrypt(s, shift, seed=0):\n    \"\"\"Create a function named encrypt that accepts two parameters, a string and an integer for rotation. The function should return an encrypted string using a shuffled alphabet based on the input integer. It should handle case sensitivity and preserve non-alphabetic characters. It should also handle exceptions due to rotations exceeding the length of the alphabet.\"\"\"\n\n    # Define alphabet\n    lower_alphabet = string.ascii_lowercase\n    upper_alphabet = string.ascii_uppercase\n\n    # Introduce seed manipulation for more complexity\n    shift = (shift + seed) % 26\n\n    result = \"\"\n\n    for c in s:\n        # Support for unicode characters\n        if not c.isascii():\n            result += chr(ord(c) + shift)\n        # Preserve non-alphabetical characters\n        elif not c.isalpha():\n            result += c\n        else:\n            # Handle upper/lower-case characters differently for case sensitivity\n            if c.isupper():\n                result += upper_alphabet[(upper_alphabet.index(c) + shift) % 26]\n            else:\n                result += lower_alphabet[(lower_alphabet.index(c) + shift) % 26]\n\n    return result"], [0.9303379058837891, "def encrypt(string):\n    \"\"\"\n    Encrypts a string by shifting each character by 2 positions.\n    \n    Args:\n        string (str): The string to be encrypted.\n    \n    Returns:\n        str: The encrypted string.\n    \"\"\"\n    encrypted_string = \"\"\n    for i in range(len(string)):\n        char = string[i]\n        encrypted_string += chr(ord(char)+2)\n    return encrypted_string"], [0.9300368428230286, "def encrypt(text):\n    \"\"\"\n    Encrypts a given text by shifting each letter by 2 positions in the alphabet.\n    \n    Args:\n        text (str): The text to be encrypted.\n    \n    Returns:\n        str: The encrypted text.\n    \"\"\"\n    encrypted_text = \"\"\n    for letter in text:\n        if letter.isalpha(): \n            encrypted_text += chr(ord(letter) + 2)\n        else:\n            encrypted_text += letter\n\n    return encrypted_text"], [0.9268922805786133, "def encrypt(text):\n    \"\"\"\n    Encrypts a string by shifting each character by 2 positions.\n    \n    Args:\n        text (str): The string to be encrypted.\n    \n    Returns:\n        str: The encrypted string.\n    \"\"\"\n    result = []\n    for char in text: \n        result.append(chr(ord(char) + 2))\n    return ''.join(result)"], [0.9256778955459595, "def cipher(s):\n    \"\"\"Derive a python function called 'cipher' that takes a string parameter and returns a ciphered string utilizing a rotated alphabet (the alphabet is shifted three positions ahead, using the modulo operator in Python to handle wrapping at the ends). This function should conserve the case of the characters (upper and lower), keep the non-alphabetical characters unchanged in the derived output, and work for all characters of the lower case and uppercase English alphabets. Here are some examples:\n    cipher('Hi') renders 'Lm'\n    cipher('aSdFgHjKl') tends to become 'dVgIjKmNpQr'\n    cipher('Zx!123_') translates to 'Ca!123_'\n    cipher('E.T + Ux') is turned into 'H.Y + Xc'\n    \"\"\"\n    result = ''\n    \n    for char in s:\n        # preserve the non-alphabetical characters\n        if not char.isalpha():\n            result += char\n            continue\n\n        # shift three positions ahead, with case consideration\n        shifted_char = chr((ord(char.lower()) - 97 + 3) % 26 + 97) if char.islower() else chr((ord(char.upper()) - 65 + 3) % 26 + 65)\n        result += shifted_char\n\n    return result"], [0.925582230091095, "def cipher(s):\n    \"\"\"Derive a python function called 'cipher' that takes a string parameter and returns a ciphered string utilizing a rotated alphabet (the alphabet is shifted three positions ahead, using the modulo operator in Python to handle wrapping at the ends). This function should conserve the case of the characters (upper and lower), keep the non-alphabetical characters unchanged in the derived output, and work for all characters of the lower case and uppercase English alphabets. Here are some examples:\n    cipher('Hi') renders 'Lm'\n    cipher('aSdFgHjKl') tends to become 'dUgIjLmNpQr'\n    cipher('Zx112e_') translates to 'Ca!I23h_'\n    cipher('E.x + Uz') is turned into 'H.a + Xc'\n    \"\"\"\n    result = ''\n\n    for char in s:\n    # preserve the non-alphabetical characters\n        if not char.isalpha():\n            result += char\n            continue\n\n    # shift three positions ahead, with case consideration\n        shifted_char = chr((ord(char.lower()) - 97 + 3) % 26 + 97) if char.islower() else chr((ord(char.upper()) - 65 + 3) % 26 + 65)\n        result += shifted_char\n\n    return result"], [0.9250080585479736, "def encrypt(text, shift): \n  \"\"\"\n  Encrypts the given text by shifting each letter by the given shift value.\n  \n  >>> encrypt(\"This is a test.\", 8)\n  'Bpqa qa i bswx.'\n  \"\"\"\n  result = \"\" \n  \n  for i in range(len(text)):\n    char = text[i]\n  \n    if (char.isalpha()):\n        char_code = ord(char)\n        char_code += shift\n        if char.isupper():\n            if char_code > ord('Z'):\n                char_code -= 26\n            elif char_code < ord('A'):\n                char_code += 26\n        elif char.islower():\n            if char_code > ord('z'):\n                char_code -= 26\n            elif char_code < ord('a'):\n                char_code += 26\n        result += chr(char_code)\n    else:\n        result += char\n    \n  return result"], [0.9240345358848572, "def encrypt(message): \n    \"\"\"\n    Encrypts a message by shifting each character by 2 in the ASCII table \n    :param message: the message to be encrypted \n    :return: the encrypted message \n    \"\"\"\n    encrypted_message = \"\" \n    for character in message: \n        # increment the character number to get its encrypted form \n        encrypted_message += chr(ord(character) + 2) \n    return encrypted_message "]]}
{"task_id": "HumanEval/90", "problem": [[0.9676700234413147, "def next_smallest(lst):\n    \"\"\"\n    Given a list of numbers, return the second smallest number in the list.\n    If there is no second smallest number, return None.\n    \n    >>> next_smallest([1, 2, 3, 4, 5])\n    2\n    >>> next_smallest([5, 4, 3, 2, 1])\n    2\n    >>> next_smallest([1, 1, 1, 1, 1])\n    None\n    >>> next_smallest([])\n    None\n    \"\"\"\n    if not lst or len(lst) < 2:   # If the list is empty or has less than 2 elements, there's no second smallest\n        return None \n\n    smallest = second_smallest = float('inf')\n    for element in lst:\n        if element < smallest:\n            second_smallest = smallest\n            smallest = element\n        elif smallest < element < second_smallest:\n            second_smallest = element\n    \n    return None if second_smallest == float('inf') else second_smallest"], [0.9571599364280701, "def next_smallest(lst):\n    \"\"\"\n    Given a list of numbers, return the next smallest number in the list.\n    If there is no next smallest number, return None.\n    \n    >>> next_smallest([1, 2, 3])\n    2\n    >>> next_smallest([1, 1, 1])\n    None\n    >>> next_smallest([1])\n    None\n    \"\"\"\n    if len(lst) < 2:  # If the list has less than 2 elements, return None\n        return None\n    \n    first_min = second_min = float('inf')\n    \n    for num in lst:\n        if num < first_min:  # If num is smaller than both first_min and second_min\n            second_min = first_min\n            first_min = num\n        elif num < second_min and num != first_min:  # If num is only smaller than second_min\n            second_min = num\n            \n    if second_min == float('inf'):  # If second_min was never updated, return None\n        return None\n    \n    return second_min"], [0.9429371953010559, "def next_smallest(lst):\n    \"\"\"\n    Find the next smallest number in a list.\n    \n    Args:\n        lst: a list of numbers\n    \n    Returns:\n        The next smallest number in the list.\n    \"\"\"\n    \n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    \n    smallest = lst[0]\n    \n    for el in lst:\n        if el > smallest:\n            return el\n    \n    return None"], [0.9412976503372192, "def second_smallest(arr):\n    \"\"\"\n    Given an array arr, find the second smallest element in it.\n    \n    Example 1:\n    \n    Input:\n    N = 2\n    arr[] = {11,2}\n    Output: 2\n    Explanation: Second smallest element in the\n    given array is 2.\n    \n    Example 2:\n    \n    Input:\n    N = 5\n    arr[]={2,2,1,2,3}\n    Output: 2\n    Explanation: Second smallest element in the\n    given array is 2.\n    \"\"\"\n    arr = list(set(arr))\n    arr.sort()\n    return arr[1] if len(arr) > 1 else None"], [0.9337713718414307, "def next_smallest(lst):\n    \"\"\"\n    Given a list of numbers, return the next smallest number after each element.\n    For example, given the list [3, 2, 1], return [2, 1, 0].\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    next_smallest = float('inf')\n    for i in range(0, len(lst)):\n        if lst[i] < smallest:\n            next_smallest = smallest\n            smallest = lst[i]\n        elif lst[i] > smallest and lst[i] < next_smallest:\n            next_smallest = lst[i]\n    return None if next_smallest == float('inf') else next_smallest"]]}
{"task_id": "HumanEval/91", "problem": [[0.9433601498603821, "def is_bored(S):\n    \"\"\"\n    Given a string S consisting of sentences separated by a single space, return the number of sentences that are boring and the number of sentences that are enthusiastic.\n    A sentence is boring if it contains at least one word starting with the letter 'I'.\n    A sentence is enthusiastic if it ends with the letter '!'.\n    \n    Args:\n        S (str): A string consisting of sentences separated by a single space.\n    \n    Returns:\n        tuple: A tuple of two integers, the number of boring sentences and the number of enthusiastic sentences.\n    \"\"\"\n    sentences = [s.strip() for s in S.replace('!', '!. ').replace('.', '. ').replace('?', '? ').split() if s]\n    mundane_count = sum(s.startswith('I') for s in sentences)\n    enthusiastic_count = sum(s.endswith('!') for s in sentences)\n    return mundane_count, enthusiastic_count"], [0.9320356249809265, "def is_bored(S):\n    \"\"\"\n    Given a string S consisting of N sentences, returns a tuple (A, B)\n    consisting of the number of boring and exciting sentences, respectively.\n    A sentence is boring if it contains the word 'boring' and exciting if\n    it ends in an exclamation mark.\n    \n    Args:\n        S (str): A string consisting of N sentences.\n    \n    Returns:\n        tuple: A tuple (A, B) consisting of the number of boring and exciting\n        sentences, respectively.\n    \"\"\"\n    boring_sent_count = 0\n    exciting_sent_count = 0\n\n    # Split S into sentences using ., ? or ! as delimiters\n    sentences = re.split(r'\\.|\\?|\\!', S)\n\n    for sentence in sentences:\n        # Remove leading and trailing whitespace\n        sentence = sentence.strip()\n\n        # Check for boring and exciting sentences\n        if sentence.startswith('I'):\n            boring_sent_count += 1\n        if sentence.endswith('!'):\n            exciting_sent_count += 1\n\n    return (boring_sent_count, exciting_sent_count)"], [0.8964564800262451, "def detect_emotion(S):\n    \"\"\"\n    This function takes a string S as input and returns a tuple of integers (dull_count, excited_count).\n    The dull_count is the number of sentences in S that start with \"He\" or \"She\".\n    The excited_count is the number of sentences in S that end with a question mark.\n    :param S: A string containing one or more sentences\n    :return: A tuple of integers (dull_count, excited_count)\n    \"\"\"\n    # Split the text into a list of sentences using the sentence indicators\n    sentences = [sentence.strip() for sentence in re.split(\"[.!?]\", S) if sentence]\n    dull_count = len([sentence for sentence in sentences if sentence.startswith(\"He\")])\n    excited_count = len([sentence for sentence in sentences if sentence.endswith(\"?\")])\n    return dull_count, excited_count"]]}
{"task_id": "HumanEval/92", "problem": [[0.9045974016189575, "def sum_to_zero(nums): \n    \"\"\"\n    Given an array of integers, return True if the sum of any \n    3 integers results in 0.\n    \n    >>> sum_to_zero([1, 2, -3])\n    True\n    >>> sum_to_zero([1, 2, 3])\n    False\n    \"\"\"\n    for i in range(len(nums)): \n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False"]]}
{"task_id": "HumanEval/93", "problem": [[0.9335869550704956, "def advanced_encode(message, shift=2):\n    \"\"\"\n    Encodes a message by shifting each letter by 2 places.\n    \n    >>> advanced_encode('hello world')\n    '10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\"\"\n    vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for i in range(len(message)):\n        if message[i] == ' ':\n            encoded_message += ' '\n        else:\n            if message[i].lower() not in vowels:\n                if message[i].islower():\n                    encoded_message += alphabet[(alphabet.index(message[i]) + shift) % 26]\n                else:\n                    encoded_message += alphabet[(alphabet.index(message[i].lower()) + shift) % 26].upper()\n            else:\n                if message[i].islower():\n                    encoded_message += alphabet[(alphabet.index(message[i]) - shift) % 26]\n                else:\n                    encoded_message += alphabet[(alphabet.index(message[i].lower()) - shift) % 26].upper()\n    new_message = ''\n    for i in range(len(encoded_message)):\n        if encoded_message[i] != ' ':\n            new_index = (i+1) * shift * ord(encoded_message[i])\n            while new_index > len(encoded_message) - 1:\n                new_index -= len(encoded_message)\n            new_message += str(new_index) + encoded_message[i]\n        else:\n            new_message += ' '\n    return new_message"], [0.9166600108146667, "def replace_vowels(string):\n  \"\"\"\n  Replace all vowels in a string with the next letter in the alphabet.\n  \n  >>> replace_vowels(\"hello world\")\n  'ifmmp xpsme'\n  \"\"\"\n  result = \"\"\n  for c in string:\n    if c in \"aeiouAEIOU\":\n      result += chr(ord(c) + 1) \n    else:\n      result += c\n  return result"]]}
{"task_id": "HumanEval/94", "problem": [[0.9537056684494019, "def skjkasdkd(lst):\n    \"\"\"\n    Find the maximum prime number in a list and return the sum of its digits.\n    \n    Args:\n        lst (list): A list of integers.\n    \n    Returns:\n        int: The sum of the digits of the maximum prime number found in the list.\n    \"\"\"\n    max_prime = 0\n    # Iterate over the entire list\n    for i in lst:\n        # Check if the current number is prime and greater than our current maximum\n        if is_prime(i) and i > max_prime:\n            max_prime = i # If so, update our maximum prime\n    # Return the sum of the digits of the maximum prime number found\n    return sum_digits(max_prime)"]]}
{"task_id": "HumanEval/95", "problem": [[0.9297517538070679, "def check_dict_case(dict):\n    \"\"\"\n    Check if all the keys in a dictionary are in lowercase or uppercase\n    :param dict: dictionary\n    :return: True if all keys are in lowercase or uppercase, False otherwise\n    \"\"\"\n    # if the dictionary is empty\n    if not bool(dict):\n        return False\n\n    # get all the keys from the dictionary\n    keys = dict.keys()\n\n    # check if all keys are lowercase or uppercase\n    is_lower = all(key == key.lower() for key in keys)\n    is_upper = all(key == key.upper() for key in keys)\n\n    # if all keys are either in lowercase or uppercase return true\n    if is_lower or is_upper:\n        return True\n\n    return False"], [0.9208569526672363, "def check_dict_case(d):\n    \"\"\"\n    Check if all keys in a dictionary are either upper case or lower case.\n    \n    Parameters\n    ----------\n    d : dict\n        The dictionary to check.\n        \n    Returns\n    -------\n    bool\n        True if all keys are either upper case or lower case. False otherwise.\n    \"\"\"\n    if not d: \n        # If the dictionary is empty, return False\n        return False \n\n    lower = 0\n    upper = 0\n\n    # Iterate over all keys in the dictionary\n    # Check if key is upper or lower case\n    for key in d:\n        if key.islower():\n            lower += 1\n        elif key.isupper():\n            upper += 1   \n        else:\n            # If key contains a mix of upper and lower case letters, return False\n            return False\n\n    # If all keys are either upper case or lower case, return True. Else, return False. \n    if lower == len(d) or upper == len(d):\n        return True\n    else:\n        return False"]]}
{"task_id": "HumanEval/96", "problem": [[0.9646034240722656, "def count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns a list of prime numbers below n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"]]}
{"task_id": "HumanEval/97", "problem": [[0.925129771232605, "def multiply(a, b):\n    \"\"\"\n    This function multiplies two numbers\n    \"\"\"\n    return a * b\n    \n    def multiply_last_digits(a, b):\n    \"\"\"\n    This function multiplies the last digits of two numbers\n    \"\"\"\n    last_digit_a = abs(a) % 10  # getting the last digit of a\n    last_digit_b = abs(b) % 10  # getting the last digit of b\n    return last_digit_a * last_digit_b"], [0.9106695652008057, "def multiply_last_ten_digits(a, b):\n    \"\"\"\n    Returns the last ten digits of the product of two numbers.\n    \"\"\"\n    return last_ten_digits(a * b)\n    \n    def multiply_last_ten_digits(a, b):\n    \"\"\"\n    Returns the last ten digits of the product of two numbers.\n    \"\"\"\n    return last_ten_digits(a * b)"], [0.9022064208984375, "def unit_product(num1, num2):\n    \"\"\"\n    This function takes two numbers and returns the product of their units.\n    \n    Parameters:\n    num1 (int): The first number.\n    num2 (int): The second number.\n    \n    Returns:\n    int: The product of the units of num1 and num2.\n    \"\"\"\n    unit_digit1 = num1 % 10\n    unit_digit2 = num2 % 10\n    return unit_digit1 * unit_digit2"], [0.900907576084137, "def digit_product(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the product of all digits of a and b.\n    \n    >>> digit_product(12, 34)\n    48\n    >>> digit_product(12, 3456789)\n    48\n    \"\"\"\n    product = 1\n    \n    # Convert integers to strings\n    a_str = str(a)\n    b_str = str(b)\n    \n    # Multiply each digit of a and b\n    for digit in a_str:\n        product *= int(digit)\n    for digit in b_str:\n        product *= int(digit)\n    \n    return product"]]}
{"task_id": "HumanEval/98", "problem": [[0.9742182493209839, "def count_upper(s):\n    \"\"\"\n    Example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    # count of uppercase vowels at even indices\n    count = sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in upper_vowels)\n  \n    return count"], [0.9710915088653564, "def count_upper(s):\n    \"\"\"\n    Counts the number of uppercase vowels present in even indices of an input string.\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"], [0.9682578444480896, "def count_upper_vowels(s):\n    \"\"\"\n    Example:\n    count_upper_vowels('aBCdEf') should return 1\n    count_upper_vowels('abcdefg') should return 0\n    count_upper_vowels('dBBE') should return 0\n    \"\"\"\n    return sum(1 for i, letter in enumerate(s) if i % 2 == 0 and letter in 'AEIOU')"], [0.9678596258163452, "def count_upper_vowels(s):\n    \"\"\"\n    Example:\n    count_upper_vowels('aBCdEf') should return 1\n    count_upper_vowels('abcdefg') should return 0\n    count_upper_vowels('dBBE') should return 0\n    \"\"\"\n    counter = 0\n    vowels = 'AEIOU'\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char in vowels:\n            counter += 1\n    return counter"], [0.9672808647155762, "def count_upper_vowels(s):\n    \"\"\"\n    This function counts the number of capital letters which are vowels on even indices in the string.\n    Example:\n    count_upper_vowels('aBCdEf') should return 1\n    count_upper_vowels('abcdefg') should return 0\n    count_upper_vowels('dBBE') should return 1\n    \"\"\"\n    upper_vowels = 'AEIOU'\n    even_letters = s[::2]\n    counter = sum(1 for letter in even_letters if letter in upper_vowels)\n    return counter"], [0.9617788791656494, "def count_upper(s):\n    \"\"\"\n    Count the number of uppercase vowels in a string.\n    \n    >>> count_upper('AaBbCc')\n    2\n    >>> count_upper('cCC')\n    0\n    >>> count_upper('AaBbCc')\n    2\n    \"\"\"\n    upper_vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in upper_vowels)"], [0.9614415764808655, "def count_upper(s):\n    \"\"\"\n    count_upper('aBCdEfG') returns 2\n    count_upper('ABCDEF') returns 3\n    count_upper('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') returns 5\n    \"\"\"\n    assert 1 <= len(s) <= 1000, \"String length should be between 1 and 1000 characters\"\n    \n    vow = ['A', 'E', 'I', 'O', 'U']\n    count = sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vow)\n    \n    return count"], [0.9612071514129639, "def count_upper(s):\n    \"\"\"\n    Count the number of uppercase vowels in a string.\n    \n    >>> count_upper('AEIOU')\n    5\n    >>> count_upper('aeiou')\n    0\n    >>> count_upper('AaBbCc')\n    2\n    \"\"\"\n    return sum(1 for i, c in enumerate(s) if c.isupper() and c in 'AEIOU' and i % 2 == 0)"], [0.9596524238586426, "def count_upper(s):\n    \"\"\"\n    Count uppercase vowels in even index positions.\n    Use the Python builtin isupper() to check for uppercase letters, and set() for O(1) membership lookup.\n    Params: s - string input\n    Returns: count - number of capitalised vowels in even-positioned indices\n    \"\"\"\n    assert 1 <= len(s) <= 1000, \"Invalid string length. It should be between 1 and 1000 characters\"\n    vowels = set(\"AEIOU\")\n    count = sum(1 for i in range(0, len(s)) if s[i].isupper() and s[i] in vowels and i % 2 == 0)\n    return count"], [0.9578433036804199, "def count_upper_case_vowels(s):\n    \"\"\"\n    Count the number of uppercase vowels in a string.\n    \n    >>> count_upper_case_vowels('ABCDE')\n    2\n    >>> count_upper_case_vowels('abcde')\n    0\n    >>> count_upper_case_vowels('ABCDEabcde')\n    2\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    return len([c for i, c in enumerate(s) if c in vowels and i % 2 == 0])"]]}
{"task_id": "HumanEval/99", "problem": [[0.919829249382019, "def complex_rounding(value, low, high):\n    '''\n    Craft a function that takes in a number represented as a string, value, and two \n    integers, low and high, establishing range delimiters. This function should yield \n    the nearest integer to the input number without falling back on standard functions such \n    as round(). Alongside this, ascertain that the specified number is a valid integer or \n    floating-point number residing within the defined interval. Otherwise, \n    reciprocate with an error alert. For numbers at an equal distance from two integers, conform it \n    towards zero.\n    '''\n    # Check if the input value is a valid number\n    try:\n        num_value = Decimal(value)\n    except InvalidOperation:\n        return \"Error: Invalid input.\"\n    \n    # Check if the value is within the given range\n    if not (low <= num_value <= high):\n        return \"Error: Beyond range.\"\n      \n    # Round according to the rules specified\n    decimal, integer = divmod(num_value, 1)\n    \n    if decimal >= Decimal('0.5'):\n        return int(integer + 1)\n    elif decimal <= Decimal('-0.5'):\n        return int(integer - 1)\n    else:\n        return int(integer)"], [0.9197555780410767, "def complex_rounding(value, low, high):\n    \"\"\"\n    Create a function that takes in a number represented as a string, value, and two \n    integers, low and high, establishing range parameters. This function should yield \n    the nearest integer to the input number without falling back on standard functions such\n    as round(). Alongside this, ascertain that the specified number is a valid integer or \n    floating-point number residing within the defined interval. Otherwise, \n    reciprocate with an error alert. For numbers at an equal distance from two integers, round it \n    towards zero.\n    \"\"\"\n    # Check if the input value is a valid number\n    try:\n        num_value = Decimal(value)\n    except InvalidOperation:\n        return \"Error: Invalid input.\"\n\n    # Check if the value is within the given range\n    if not (low <= num_value <= high):\n        return \"Error: Beyond range.\"\n\n    # Round according to the rules specified\n    decimal, integer = divmod(num_value, 1)\n\n    if decimal <= Decimal('0.5'):\n        return int(integer + 1)\n    elif decimal <= Decimal('-0.5'):\n        return int(integer - 1)\n    else:\n        return int(integer)"], [0.9087346792221069, "def closest_integer(value):\n    \"\"\"\n    Find the closest integer to the given value.\n    \n    Args:\n        value (float): The value to find the closest integer to.\n    \n    Returns:\n        int: The closest integer to the given value.\n    \"\"\"\n    try:\n        num = float(value)\n        rounded = int(num)\n        if num - int(num) >= 0.5:\n            if num < 0:\n                rounded += 1\n            else:\n                rounded -= 1\n        if not is_prime(rounded):\n            rounded = closest_prime(rounded)\n        return rounded\n    except ValueError:\n        return \"Error: Invalid input.\""], [0.9084100723266602, "def closest_integer(value):\n    \"\"\"\n    Find the closest integer to the given value.\n    \n    Args:\n        value (float): The value to find the closest integer to.\n    \n    Returns:\n        int: The closest integer to the given value.\n    \"\"\"\n    try:\n        num = float(value)\n        rounded = int(num)\n        if num - int(num) >= 0.5:\n            if num > 0:\n                rounded += 1\n            else:\n                rounded -= 1\n        if not is_prime(rounded):\n            rounded = closest_prime(rounded)\n        return rounded\n    except ValueError:\n        return \"Error: Invalid input.\""]]}
{"task_id": "HumanEval/100", "problem": [[0.9172462224960327, "def make_a_pile(n, pattern, offset=0):\n    \"\"\"\n    Make a pile of stones.\n    \n    :param n: number of stones\n    :param pattern: 'odd' or 'even'\n    :param offset: offset of the first stone\n    :return: list of stones\n    \"\"\"\n    stones = [n + offset]\n    for i in range(1, n):\n        if pattern == 'odd':\n            stones.append(stones[-1] + 2*i - 1)\n        elif pattern == 'even':\n            stones.append(stones[-1] + 2*i)\n    return stones"], [0.914806067943573, "def make_a_pile(n, pattern, offset=0):\n    \"\"\"\n    Make a pile of stones.\n    \n    Parameters\n    ----------\n    n : int\n        The number of stones in the pile.\n    pattern : str\n        The pattern of the pile. Can be 'odd' or 'even'.\n    offset : int, optional\n        The offset of the pile. Only used if pattern is 'even'.\n    \n    Returns\n    -------\n    stones : list\n        The pile of stones.\n    \"\"\"\n    stones = [n]\n    for i in range(1, n): # Start the loop from 1 because the offset in the first round should be 1.\n        if pattern == 'odd':\n            stones.append(stones[-1] + 2*i+1)\n        elif pattern == 'even':\n            stones.append(stones[-1] + 2*i+offset) # offset added here\n    return stones"], [0.9119410514831543, "def make_a_pile(n, pattern, offset=0):\n    \"\"\"\n    Make a pile of stones.\n    \n    Parameters\n    ----------\n    n : int\n        The number of stones in the pile.\n    pattern : str\n        The pattern of the pile. Can be 'odd' or 'even'.\n    offset : int, optional\n        The offset of the pile.\n    \n    Returns\n    -------\n    stones : list\n        The pile of stones.\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if pattern == 'odd':\n            stones.append(n + 2*i + offset)\n        elif pattern == 'even':\n            stones.append(n + 2*i - 1 + offset)\n    return stones"]]}
{"task_id": "HumanEval/101", "problem": [[0.9142197370529175, "def split_words(s):\n    \"\"\"\n    Split a string into words.\n    \n    >>> split_words('Hello, world!')\n    ['Hello', 'world']\n    >>> split_words('Hello, world!')\n    ['Hello', 'world']\n    >>> split_words('Hello, world!')\n    ['Hello', 'world']\n    >>> split_words('Hello, world!')\n    ['Hello', 'world']\n    >>> split_words('Hello, world!')\n    ['Hello', 'world']\n    >>> split_words('Hello, world!')\n    ['Hello', 'world']\n    >>> split\"\"\"\n    return [word.strip() for word in re.split('[, !?]', s) if word]"], [0.9071272611618042, "def string_to_words(s):\n    \"\"\"\n    Converts a string to a list of words.\n    \n    >>> string_to_words('Hello world!')\n    ['Hello', 'world!']\n    \"\"\"\n    return s.split(' ')"]]}
{"task_id": "HumanEval/102", "problem": [[0.9573804140090942, "def choose_num(x, y, z):\n    \"\"\"\n    This function accepts three positive integers x, y, and z, and its objective is to return the\n    greatest even integer within the inclusive range of [x, y] that can be evenly divided by z. In the\n    absence of such a number, the function should yield -1.\n\n    Example cases:\n    choose_num(12, 15, 2) = 14\n    choose_num(13, 12, 3) = -1\n    choose_num(10, 20, 4) = 20\n    \"\"\"\n\n    # Start checking from the largest number in the range [x, y]\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0 and num % z == 0:\n            return num\n    return -1"], [0.9471434354782104, "def choose_num(x, y):\n    \"\"\"\n    Find the largest even number between x and y\n    :param x: int\n    :param y: int\n    :return: int\n    \"\"\"\n    maxEvenNumber = -1\n    if y >= x:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                maxEvenNumber = i\n    return maxEvenNumber"], [0.9317387938499451, "def choose_num(x, y, z):\n    \"\"\"This function should take three positive numbers x, y, and z. The function must return \n    the largest even integer number that is less than or equal to y and greater than or equal \n    to x, which is also a multiple of z. In case no such number exists, the function should return None.\n    \n    Validate your code with the added complexity of handling potential exceptions.\n    \"\"\"  \n    if not (type(x) == type(y) == type(z) == int):\n        return \"Error: Inputs must be integers.\"\n\n    if not (x >= 0 and y >= 0 and z >= 0):\n        return \"Error: Inputs must be positive.\"\n\n    if x > y:\n        return \"Error: x should be less than or equal to y.\"\n\n    #Initialize the largest number as None.\n    largest_num = None\n    \n    #Iterate from y to x both inclusive to find largest even multiple of z.\n    for i in range(y, x - 1, -1):\n        if i % z == 0 and i % 2 == 0:\n            largest_num = i\n            break\n        \n    #Return the largest number.\n    return largest_num"], [0.9242070913314819, "def choose_num(x, y, z, n):\n    \"\"\"\n    Find the nth largest even number divisible by z in the range [x, y].\n\n    Args:\n        x (int): The start of the range.\n        y (int): The end of the range.\n        z (int): The divisor.\n        n (int): The index of the number to find.\n\n    Returns:\n        int: The nth largest even number divisible by z in the range [x, y].\n    \"\"\"\n    # Initialize an empty list to store the even numbers divisible by z\n    chosen_num_list = []\n\n    # If y is less than x, switch their values. This ensures x is the start of the range and y is the end.\n    if y < x:\n        x, y = y, x\n\n    # Scan every number in the range [x, y]\n    for num in range(x, y+1):\n        # If num is even and divisible by z, add it to the list\n        if num % 2 == 0 and num % z == 0:\n            chosen_num_list.append(num)\n\n    # Sort the list in descending order to get the nth largest number at index n-1\n    chosen_num_list.sort(reverse=True)\n\n    # If the length of the list is less than n (no nth largest number), return -1\n    if len(chosen_num_list) < n:\n        return -1\n    else:\n        return chosen_num_list[n-1]"], [0.9213279485702515, "def choose_num(x, y, z, w, m):\n    \"\"\"\n    Find the mth number that is divisible by z and w, and is even, in the range x to y (inclusive)\n    :param x: The lower bound of the range\n    :param y: The upper bound of the range\n    :param z: The first divisor\n    :param w: The second divisor\n    :param m: The mth number to find\n    :return: The mth number that is divisible by z and w, and is even, in the range x to y (inclusive)\n    \"\"\"\n    # Create a list to store the found numbers\n    numbers_found = []\n\n    # Iterate over the range, from y down to x (inclusive), in steps of -1\n    for num in range(y, x-1, -1):\n        # Check whether the number is even, and whether it is divisible by z and w\n        if num % 2 == 0 and num % z == 0 and num % w == 0:\n            # If so, append the number to our list\n            numbers_found.append(num)\n\n            # If we have found m numbers, return the last one found\n            if len(numbers_found) == m:\n                return numbers_found[-1]\n\n    # If no number has been found or m is larger than the count of such numbers, return -1\n    return -1"], [0.9164578914642334, "def superior_parallel_dividend(x, y, z):\n    \"\"\"Returns the largest even integer in the range [x, y] that is divisible by z or -1 if no such integer exists\"\"\"\n    \n    # The initial most paramount even integer would be the supremum value of the defined range.\n    # If y is even, it remains y. If y is odd, decrease it by one to get the highest even number\n    highest_even = y if y % 2 == 0 else y - 1\n    \n    # Iterate from the highest possible even number down to x and check each\n    for i in range(highest_even, x - 1, -2):\n        if i % z == 0:\n            return i\n            \n    # If no even and divisible number is found, return -1\n    return -1"], [0.9131156802177429, "def find_maximum_even_divisible(x, y, z):\n    \"\"\"\n    Find the maximum even number divisible by z in the range [x, y].\n    If no such number exists, return -1.\n    :param x: The lower bound of the range.\n    :param y: The upper bound of the range.\n    :param z: The divisor.\n    :return: The maximum even number divisible by z in the range [x, y].\n    \"\"\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0 and i % z == 0:\n            return i\n    return -1"], [0.9109955430030823, "def transcendent_even_quotient(x, y, z):\n    \"\"\"\n    Find the largest even number that is a multiple of z and is between x and y (inclusive).\n    \n    >>> transcendent_even_quotient(10, 20, 3)\n    18\n    >>> transcendent_even_quotient(10, 20, 4)\n    -1\n    >>> transcendent_even_quotient(10, 20, 5)\n    20\n    \"\"\"\n    for i in range(y, x - 1, -1):  \n        if i % z == 0 and i % 2 == 0: \n            return i  \n    return -1  "]]}
{"task_id": "HumanEval/103", "problem": [[0.9175417423248291, "def alternate_base_weighted_avg(n, m, base, alternate_fn):\n    \"\"\"\n    Given a range of numbers [n, m] and a base, return the weighted average of the numbers in the range.\n    The weight of a number is the number of numbers in the range that are divisible by the number.\n    The base is the base of the number system to be returned.\n    If the base is 10, return a string.\n    If the base is 2, return a binary string.\n    If the base is 8, return an octal string.\n    If the base is not valid, return -1.\n    If the range is invalid,\"\"\"\n    if n > m:\n        return -1\n    if base < 2 or base > 10:\n        return -1\n\n    total, total_weight = 0, 0\n    for i in range(n, m + 1):\n        weight_i, weight_end = alternate_fn(i, m)\n        total += i * weight_i\n        total_weight += weight_i\n\n    if total_weight == 0:\n        return format(0, '#'+str(base+1)+'b')\n\n    res = int(round(total / total_weight))\n    if base == 10:\n        return str(res)\n    elif base == 2:\n        return format(res, 'b')   \n    elif base == 8:\n        return format(res, 'o')   "], [0.9168767333030701, "def alternate_base_weighted_avg(n, m, base, alternate_fn):\n    \"\"\"\n    \"\"\"\n    if n > m:\n        return -1\n    if base < 2 or base > 10:\n        return -1\n    \n    total, total_weight = 0, 0\n    for i in range(n, m + 1):\n        weight_i, weight_end = alternate_fn(i, m)\n        total += i * weight_i\n        total_weight += weight_i\n        \n    if total_weight == 0:\n        return format(0, '#'+str(base+1)+'b')\n        \n    res = int(round(total / total_weight))\n    if base == 10:\n        return str(res)\n    elif base == 2:\n        return format(res, '#0b')   \n    elif base == 8:\n        return format(res, '#0o')   "], [0.9135559797286987, "def advanced_base_translation_avg(n, m, base):\n    \"\"\"\n    \"\"\"\n    if m < n or base < 2 or base > 10: \n        return -1\n    \n    avg = math.ceil(sum(range(n, m+1)) / (m-n+1))\n    \n    if base == 2:\n        return bin(avg)\n    elif base == 8:\n        return oct(avg)\n    elif base == 10:\n        return str(avg)\n    else:\n        return manual_base_conversion(avg, base)"], [0.9133797287940979, "def rounded_avg_custom_base(n, m, base):\n    \"\"\"\n    Calculate the rounded average of a range of integers in a given base.\n    \n    Args:\n        n (int): The starting integer of the range.\n        m (int): The ending integer of the range.\n        base (int): The base to represent the average in.\n    \n    Returns:\n        str: The rounded average of the range in the given base.\n    \n    \"\"\"\n    if not 1 <= n <= m or not 2 <= base <= 10:\n        return -1\n    total, count = 0, 0\n    for i in range(n, m+1):  # sequential integers from n to m (inclusive)\n        total += i  # accumulating the sums\n        count += 1  # count the number of integers\n    avg = round(total / count)  # approximated weighted average to the nearest integer\n    if base == 2:  # binary representation\n        return bin(avg)\n    elif base == 8:  # octal representation\n        return oct(avg)\n    elif base == 10:  # decimal representation\n        return str(avg)\n    else:  # other bases\n        return to_base_x(avg, base)"], [0.9129456281661987, "def rounded_avg_custom_base(n, m, base):\n    \"\"\"\n    Find the average of all numbers between n and m (inclusive)\n    that have an equal number of divisors in binary, octal and decimal\n    representation.\n    If there is no such number, return -1.\n    If there are multiple such numbers, return the smallest one.\n    \n    n, m, base: positive integers\n    return: a positive integer\n    \"\"\"\n    if n > m or base < 2 or base > 10:\n        return -1\n    total, weight_sum = 0, 0\n    for num in range(n, m+1):\n        weight = count_divisors(num)\n        total += num * weight\n        weight_sum += weight\n    avg = round(total / weight_sum)\n    if base == 2:\n        return bin(avg)\n    elif base == 8:\n        return oct(avg)\n    elif base == 10:\n        return avg\n    else:\n        return int(str(avg), base)"]]}
{"task_id": "HumanEval/104", "problem": [[0.9427266120910645, "def odd_sum_elements(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    _unique_ elements where the sum of their digits is an odd number.\n\n    Note: The returned list should be sorted in ascending order. \n\n    >>> odd_sum_elements([15, 33, 1422, 1, 15])\n    [1, 15]\n    >>> odd_sum_elements([152, 323, 1422, 10])\n    [323]\n\n    \"\"\"\n    odd_sum_digits = []\n    for i in set(x):\n        if sum(int(digit) for digit in str(i)) % 2 != 0:\n            odd_sum_digits.append(i)\n    return sorted(odd_sum_digits)"], [0.9351738691329956, "def unique_odd_digit_sum(x):\n    \"\"\"Given a list of integers x, return a sorted list of unique positive integers that have an odd sum of their digits. The same integer should not appear twice.  \n\n    Sort the final output list in ascending order. \n\n    E.g.:\n    >>> unique_odd_digit_sum([15, 38, 1420, 1, 15])\n    [1]\n    >>> unique_odd_digit_sum([154, 323, 1422, 10])\n    [323]\n    >>> unique_odd_digit_sum([-15, 38, -1420, -1, 15])\n    [15]\n    \"\"\"\n\n    # Create an empty list to store the resulting integers\n    result = []\n\n    # Loop over the input list x\n    for num in x:\n        # Exclude negative numbers\n        if num < 0:\n            continue\n\n        # Calculate the sum of the digits of num\n        digit_sum = sum(int(digit) for digit in str(num))\n\n        # Exclude integers with an even sum of digits\n        if digit_sum % 2 == 0:\n            continue\n\n        # Exclude integers that are already in the result list\n        if num in result:\n            continue\n\n        # Add the integer to the result list\n        result.append(num)\n        \n    return sorted(result)"], [0.9345634579658508, "def unique_odd_sum_elements(x):\n    \"\"\"\n    Supplied with a list of positive integers x, return a sorted list of unique elements that have an odd digit sum and\n    do not occur multiple times in the input list.\n\n    The final list should be sorted in ascending order.\n\n    E.g.:\n    >>> unique_odd_sum_elements([15, 38, 1420, 1, 15])\n    [1]\n    >>> unique_odd_sum_elements([154, 323, 1422, 10])\n    [323]\n    \"\"\"\n\n    # Initiate an empty list\n    unique_list = []\n\n    # Go through each element in list x\n    for ele in x:\n\n        # If element is not yet in unique_list\n        if ele not in unique_list:\n\n            # Calculate the sum of digits of the element\n            digit_sum = sum(int(digit) for digit in str(ele))\n\n            # if the sum of digits is odd, append to the unique_list\n            if digit_sum % 2 == 1:\n                unique_list.append(ele)\n        \n    # Return the sorted list\n    return sorted(unique_list)"], [0.9345054030418396, "def unique_odd_digit_sum(x):\n    \"\"\"\n    Given a list of integers x, return a sorted list of unique positive integers\n    that have an odd sum of their digits. The same integer should not appear twice.\n    Sort the final output list in ascending order.\n\n    E.g.:\n    >>< unique_odd_digit_sum([15, 38, 1420, 1, 15])\n    [1]\n    >>< unique_odd_digit_sum([154, 323, 122, 10])\n    [323]\n    >>< unique_odd_digit_sum([-15, 38, 1420, -1, 15])\n    [15]\n    \"\"\"\n    \n    # Create an empty list to store the resulting integers\n    result = []\n\n    # Loop over the input list\n    for num in x:\n        # Exclude negative numbers\n        if num < 0:\n            continue\n\n        # Calculate the sum of the digits of num\n        digit_sum = sum(int(digit) for digit in str(num))\n\n        # Exclude integers with an even sum of digits\n        if digit_sum % 2 == 0:\n            continue\n\n        # Exclude integers that are already in the result list\n        if num in result:\n            continue\n\n        # Add the integer to the result list\n        result.append(num)\n\n    return sorted(result)"], [0.9326989650726318, "def odd_sum_elements(x):\n    \"\"\"\n    Accepts a list of positive numbers (x), returning a sorted list comprising unique elements, the sum of whose digits equals an odd number.\n\n    Note: The output list must be sorted in increasing order.\n\n    >>> odd_sum_elements([15, 33, 1422, 1, 15])\n    [1, 15]\n    >>> odd_sum_elements([152, 323, 1422, 10])\n    [323]\n\n    \"\"\"\n    unique_nums = set(x)  # create a set from the list to remove duplicates\n    odd_digits_sum_nums = [num for num in unique_nums if sum(int(digit) for digit in str(num)) % 2 != 0]\n    return sorted(odd_digits_sum_nums)  # return the sorted list"], [0.9182683229446411, "def unique_odd_sum_elements(x):\n    \"\"\"\n    Given a list of numbers, return a list of all the unique numbers that have an odd sum of digits.\n    \n    Args:\n        x (list): List of numbers\n    \n    Returns:\n        list: List of unique numbers with odd sum of digits\n    \"\"\"\n    x = list(set(x))  # Remove duplicates\n    result = []\n    \n    for num in x:\n        if sum(int(digit) for digit in str(num)) % 2 != 0:  # Check if sum of digits is odd\n            result.append(num)\n    \n    result.sort()\n    return result"]]}
{"task_id": "HumanEval/105", "problem": [[0.9558837413787842, "def by_length(arr):\n    \"\"\"\n    Return an array of words of numbers in descending order of length.\n    \n    >>> by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    ['Three', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One']\n    \"\"\"\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    \n    # filter for elements of arr that are in the range 1 to 9, then sort and reverse \n    valid_nums = sorted([n for n in arr if 1 <= n <= 9], reverse=True)  \n\n    # convert to words using num2words dictionary and return\n    return [num2words[n] for n in valid_nums]"], [0.9084795117378235, "def rank_by_size(arr):\n    \"\"\"\n    Given an array of integers, return an array where the first element is the largest value, the second element is the second largest value, etc.\n    \n    For example:\n    \n    rank_by_size([4, 1, 2, 3, 5]) == [5, 4, 3, 2, 1]\n    \n    rank_by_size([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n    \n    rank_by_size([\"\"\"\n    ranked = []\n \n    while len(arr) > 0:\n        max_val = arr[0]\n \n        for item in arr:\n            if item > max_val:\n                max_val = item\n \n        arr.remove(max_val)\n        ranked.append(max_val)\n \n    return ranked"], [0.9054229855537415, "def sort_strings_by_length_descending(arr):\n    \"\"\"\n    Sort an array of strings by their length in descending order.\n    \"\"\"\n    arr.sort(key=len, reverse=True)\n    return arr\n    \n    def filter_strings_with_length_greater_than_or_equal_to_three(arr):\n    \"\"\"\n    Filter an array of strings to only include those with a length greater than or equal to 3.\n    \"\"\"\n    new_arr = []\n    for string in arr:\n        if len(string) >= 3:\n            new_arr.append(string)\n    new_arr.sort(key=len, reverse=True)\n    return new_arr"], [0.9051462411880493, "def sort_by_length(arr): \n    \"\"\"\n    Sort an array of strings by their length.\n    \n    >>> sort_by_length(['a', 'ccc', 'dddd', 'bb'])\n    ['a', 'bb', 'ccc', 'dddd']\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if len(arr[i]) < len(arr[j]): \n                arr[i], arr[j] = arr[j], arr[i] \n    return arr"], [0.90513014793396, "def sortByLength(arr):\n    \"\"\"\n    \"\"\"\n    # create a new array \n    # and store the length of each string in it\n    lengths = [] \n    for item in arr:\n        lengths.append(len(item))\n\n    # sort the length array\n    lengths.sort()\n\n    # initialise output arr\n    out_arr = []\n\n    # run loop to match the length\n    # with the actual string\n    for l in lengths:\n        for item in arr:\n            if len(item) == l:\n                out_arr.append(item)\n                arr.remove(item)\n\n    return out_arr"]]}
{"task_id": "HumanEval/106", "problem": [[0.9620736837387085, "def f(n):\n    \"\"\"\n    Return a list of n numbers, where the ith element is the factorial of i if i is even, and the cumulative sum of the first i natural numbers otherwise.\n    \n    >>> f(5)\n    [1, 1, 2, 6, 15]\n    >>> f(10)\n    [1, 1, 2, 6, 15, 45, 135, 405, 1093, 3003]\n    \"\"\"\n    resultList = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            resultList[i] = factorial(i)\n        else:\n            resultList[i] = cumulative_sum(i)\n    return resultList"], [0.9457387924194336, "def f(n):\n  \"\"\"\n  This function takes in a number n and returns a list of the results of calling the factorial function on even numbers and the sumOfSquare function on odd numbers from 1 to n.\n  \n  Args:\n    n (int): The number to iterate up to.\n  \n  Returns:\n    list: A list of the results of calling the factorial function on even numbers and the sumOfSquare function on odd numbers from 1 to n.\n  \"\"\"\n  # Initialize an empty list\n  result_list = []\n  # Use a for loop that starts at 1 and ends at n\n  for i in range(1, n+1):\n    # Use a conditional statement to check if the number is even\n    if i % 2 == 0:\n      # If the number is even, call the factorial function and append the result to the list\n      result_list.append(factorial(i))\n    else:\n      # If the number is odd, call the sumOfSquare function and append the result to the list\n      result_list.append(sumOfSquare(i))\n  return result_list"], [0.9354779720306396, "def F(n):\n    \"\"\"\n    >>> F(5)\n    [1, 1, 3, 6, 24]\n    >>> F(10)\n    [1, 1, 3, 6, 24, 120, 720, 5040, 40320, 362880]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(sum(range(i+1)))\n        else:\n            result.append(math.factorial(i))\n    return result"], [0.9354520440101624, "def F(n):\n    \"\"\"\n    >>> F(5)\n    [1, 1, 3, 6, 24]\n    >>> F(10)\n    [1, 1, 3, 6, 24, 120, 720, 5040, 40320, 362880]\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(sum(range(i+1)))\n        else:\n            result.append(math.factorial(i))\n    return result"], [0.9304181337356567, "def f(n):\n    \"\"\"\n    \"\"\"\n    result = [1] * n\n    even_val = 1\n    odd_val = 1\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_val *= i\n            result[i-1] = even_val\n        else:\n            odd_val += i\n            result[i-1] = odd_val\n    return result"]]}
{"task_id": "HumanEval/107", "problem": [[0.9247626662254333, "def even_odd_count(num):\n    \"\"\"\n    Return a tuple (even_count, odd_count) indicating the counts of each type of number in a non-negative integer.\n    \n    >>> even_odd_count(123456789)\n    (4, 5)\n    >>> even_odd_count(24680)\n    (5, 0)\n    >>> even_odd_count(-11)\n    (0, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num = abs(num)  # absolute value to ignore negative sign\n    for digit in str(num):\n        if digit != '0':\n            if int(digit) % 2 == 0: \n                even_count += 1\n            else:\n                odd_count += 1\n        else:\n            even_count += 1  # counting 0 as even\n    return even_count, odd_count"], [0.9194448590278625, "def even_odd_count(num):\n    \"\"\"Return number of even digits and odd digits in given integer.\n    >>> even_odd_count(123456789)\n    (4, 5)\n    >>> even_odd_count(-1111111)\n    (0, 7)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"], [0.9194353222846985, "def even_odd_count(num):\n    \"\"\"Return number of even digits and odd digits in given integer.\n    >>> even_odd_count(123456789)\n    (4, 5)\n    >>> even_odd_count(-1111111)\n    (0, 7)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"], [0.9194282293319702, "def even_odd_count(num):\n    \"\"\"Return number of even digits and odd digits in given integer.\n    >>> even_odd_count(123456789)\n    (4, 5)\n    >>> even_odd_count(-1111111)\n    (0, 7)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"], [0.915930986404419, "def even_odd_count(num):\n    \"\"\"\n    Return a tuple, (count_even, count_odd),\n    where count_even is the number of even digits in the given number\n    and count_odd is the number of odd digits in the given number.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n            even_sum += int(digit)\n        else:\n            odd_count += 1\n            odd_sum += int(digit)\n    return (even_count, odd_count), (even_sum, odd_sum)"], [0.9153562784194946, "def even_odd_count(num):\n    \"\"\"\n    Return a tuple containing the count of even digits and the count of odd digits in a given number.\n    \n    Args:\n        num (int): The input number.\n    \n    Returns:\n        tuple: A tuple containing the count of even digits and the count of odd digits.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):  # Converting the input to a positive string number\n        if int(digit) % 2 == 0:  # Checking if the digit is even\n            even_count += 1      # If even, increment the even_count\n        else:\n            odd_count += 1       # If odd, increment the odd_count\n    return (even_count, odd_count) # Return the counts as a tuple"], [0.9145719408988953, "def even_odd_count(num):\n    \"\"\"\n    Return a tuple containing the count of even digits and the count of odd digits in a given number.\n    \n    Args:\n        num (int): The number to analyze.\n    \n    Returns:\n        tuple: A tuple containing the count of even digits and the count of odd digits.\n    \n    Example:\n        >>> even_odd_count(123456789)\n        (4, 5)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)): #Use absolute value to handle negative numbers correctly\n        if digit.isdigit():     #This will ensure the digit is numeric (and thus skipp \"-\" sign)\n            if int(digit) % 2 == 0: #Considering '0' as even\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"], [0.911032497882843, "def even_odd_count(num):\n    \"\"\"Return a tuple in the form (even_count, odd_count) from a list of numbers.\n    \n    >>> even_odd_count([2, 1, 4, 6, 9, 11])\n    (3, 3)\n    \"\"\"\n    num = int(num) #Convert to integer in case input is binary, any other base\n    num_str = str(num)    \n    if num_str[0] == \"-\": # handle negative numbers\n        num_str = num_str[1:]\n    elif num_str[0] == \"0\" and len(num_str)>1: # handle leading zeros\n        num_str = num_str.lstrip('0')\n     \n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0: \n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"], [0.9104294776916504, "def even_odd_count(num):\n    \"\"\"\n    Given a number n, find the count of even digits and odd digits\n    \"\"\"\n    even_count, odd_count = [], []\n    i = 0\n    while i < len(str(abs(num))):\n        count = 1\n        while i + 1 < len(str(abs(num))) and str(abs(num))[i] == str(abs(num))[i + 1]:\n            i += 1\n            count += 1\n        if int(str(abs(num))[i]) % 2 == 0:\n            \"\"\"\n    num = str(abs(num))  # Convert to string and remove negative sign if present\n    even_count, odd_count = [], []\n    i = 0\n    while i < len(num):\n        count = 1\n        while i + 1 < len(num) and num[i] == num[i + 1]:\n            i += 1\n            count += 1\n        if int(num[i]) % 2 == 0:\n            even_count.append(count)\n        else:\n            odd_count.append(count)\n        i += 1\n    return even_count, odd_count"]]}
{"task_id": "HumanEval/108", "problem": [[0.940617561340332, "def count_positive_nums(arr):\n    \"\"\"\n    Return the count of numbers greater than zero in the list.\n    \n    >>> count_positive_nums([1, 2, 3, -4, 5])\n    4\n    \"\"\"\n    return sum(1 for num in arr if num > 0)"], [0.9369420409202576, "def count_nums(arr):\n    \"\"\"\n    Return the number of positive integers in the array that have a sum of their digits that is a multiple of 4.\n    \n    >>> count_nums([16, 17, 18])\n    2\n    >>> count_nums([16, 17, 18, 19, 20])\n    3\n    >>> count_nums([100, 200, 300])\n    0\n    >>> count_nums([13, 14, 15, 16])\n    0\n\"\"\"\n    count = 0\n    for number in arr:\n        digits = map(int, str(abs(number)))\n        digit_sum = sum(digits)\n\n        # consider the leading digit negative if the number itself is negative\n        if number < 0:\n            digit_sum -= 2 * digits[0]\n\n        # check if the sum is both greater than zero and a multiple of 4\n        if digit_sum > 0 and digit_sum % 4 == 0:\n            count += 1\n    return count"], [0.9256314635276794, "def count_nums(arr):\n    \"\"\"\n    Return the number of numbers in the given array that are divisible by 4.\n    \n    >>> count_nums([1, 2, 3, 4])\n    1\n    >>> count_nums([1, 2, 3, 4, 5, 6])\n    2\n    \"\"\"\n    count = 0\n    for num in arr:\n        if sum(int(i) for i in str(abs(num))) % 4 == 0:\n            count += 1\n    return count"], [0.9255802631378174, "def count_positive(arr):\n    \"\"\"\n    Return the number of positive numbers in an array\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n    def count_positive(arr):\n    \"\"\"\n    Return the number of positive numbers in an array\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count"], [0.9221453070640564, "def count_nums(arr):\n    \"\"\"\n    Return the number of numbers in the given array that satisfy the following conditions:\n    \n    The number has at least one digit with a value of 4.\n    The number has at least one digit with a value of 7.\n    The sum of the number's digits is divisible by 4.\n    \n    >>> count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1\"\"\"\n    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0 and sum(int(d) for d in str(abs(num))) % 4 == 0)"], [0.9213320016860962, "def count_nums(nums):\n    \"\"\"\n    Given a list of numbers, return the number of numbers in the list that have an even number of digits.\n    \"\"\"\n    count = 0\n    for num in nums:\n        digits = [int(d) for d in str(abs(num))]\n        if num < 0:\n            digits[0] *= -1\n\n        if len(digits) % 2 == 0:\n            count += 1\n\n    return count\n    def count_nums(nums):\n    \"\"\"\n    Given a list of numbers, return the number of numbers in the list that\"\"\"\n    count = 0\n    for num in nums:\n        digits = [int(d) for d in str(abs(num))]\n        if num < 0:\n            digits[0] *= -1\n\n        if sum(digits) % 4 == 0 and sum(digits) > 0:\n            count += 1\n\n    return count"], [0.9188624024391174, "def sum_of_positive_integers(arr):\n    \"\"\"\n    Return the sum of all positive integers in the array.\n    \n    >>> sum_of_positive_integers([1, 2, 3, -4, 5])\n    15\n    >>> sum_of_positive_integers([1, -2, 3, -4, 5])\n    9\n    >>> sum_of_positive_integers([-1, 2, -3, 4, -5])\n    6\n    \"\"\"\n    sum = 0\n    for num in arr:\n        if num > 0:\n            sum += num\n    return sum"], [0.9160480499267578, "def count_nums_plus(arr):\n    \"\"\"Count the number of positive numbers in an array.\n    >>> count_nums_plus([1, 2, 3, 4, 5])\n    5\n    >>> count_nums_plus([1, 2, 3, -4, 5])\n    5\n    >>> count_nums_plus([1, 2, 3, -4, -5])\n    4\n    >>> count_nums_plus([1, 2, 3, -4, -5, 0])\n    5\n    >>> count_nums_plus([1,\"\"\"\n    count = 0\n    for element in arr:\n        try:\n            num = int(element)\n            if num < 0:\n                num *= -1\n            if num > 0 and (num % 4 == 0 or num % 5 == 0):\n                count += 1\n        except ValueError:\n            continue\n    return count"], [0.9148925542831421, "def sum_positive_elements(arr):\n    \"\"\"\n    Return the sum of all positive elements in the array.\n    \n    >>> sum_positive_elements([1, -2, 3, -4, 5])\n    9\n    >>> sum_positive_elements([-1, -2, -3, -4, -5])\n    0\n    \"\"\"\n    # Initialize a variable to hold the sum\n    total = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # Check if the number is positive\n        if num >= 0:\n            # Add the positive number to the sum\n            total += num\n    \n    # Return the sum of positive elements\n    return total"]]}
{"task_id": "HumanEval/109", "problem": [[0.9348968863487244, "def move_three_balls(arr):\n    \"\"\"\n    Given an array 'arr'. Your task is: \n    1. Perform rightward shifting operation as required.\n    2. Swap at most three pair of balls.\n    3. After the operations, elements smaller than the first element in the array should be odd in number.\n    \n    Return True, if the array could be sorted; otherwise, False. \n    \n    Examples:\n    move_three_balls([5, 4, 5, 1, 2, 6]) -> True\n    move_three_balls([1, 3, 5, 4, 2, 6]) -> True\n    move_three_balls([1, 2, 3, 5, 4, 6]) -> True\n    move_three_balls([5, 4, 3, 1, 2, 6]) -> False\n    \"\"\"\n    \n    if not arr:\n        return True\n    \n    arr.sort()\n    for i in range(len(arr)):\n        b = arr[i:]\n        c = b.copy()\n        c.sort()\n        if b == c:\n            if count_smaller_than_first(arr[i:]) % 2 == 1:\n                return True\n    return False"], [0.9343209862709045, "def move_three_balls(arr):\n    \"\"\"\n    Given an array 'arr'. Your task is: \n        1. Perform rightward shifting operation as required.\n        2. Swap at most three pair of balls.\n        3. After the operations, elements smaller than the first element in the array should be odd in number.\n\n    Return True, if the array could be sorted, otherwise False. \n\n    Examples:\n    move_three_balls([3, 4, 5, 1, 2, 6]) => True\n    move_three_balls([1, 3, 5, 4, 2, 6]) => True\n    move_three_balls([1, 2, 3, 5, 4, 6]) => True\n    move_three_balls([5, 4, 3, 1, 2, 6]) => False\n\n    \"\"\"\n    if not arr:\n        return True\n\n    arr.sort()\n    for i in range(len(arr)):\n        b = arr[i:]\n        c = b.copy()\n        c.sort()\n        if b == c:\n            if count_smaller_than_first(arr[i:]) % 2 == 1:\n                return True\n    return False"], [0.9294252991676331, "def shiftOneNumber(arr):\n    \"\"\"\n    Given an array of integers, return true if one of the elements can be shifted to another position so that the array is sorted.\n    For example, for the array [3, 5, 0, 2, 4, 1], you should return true because if you shift 0 to index 2, the resulting array would be sorted.\n    \"\"\"\n    for i in range(len(arr)):\n        new_arr = arr[i:]+arr[:i]\n        if is_sorted(new_arr):\n            return True\n    return False\n    \n    \"\"\"\n    if len(arr) == 0:\n        return True\n    for j in range(len(arr)):\n        new_arr = arr[j:]+arr[:j]\n        if is_sorted(new_arr):\n            return True\n    return False"], [0.907691478729248, "def move_three_balls(arr):\n    \"\"\"\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    \n    swaps = [0]*len(arr)\n    temp = arr.copy()\n    temp.sort()\n    for i in range(len(arr)):\n        if arr[i] != temp[i]:\n            swaps[i] = 1\n\n    if sum(swaps) > 6:\n        return False\n    \n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 != 0:\n            for j in range(1, len(arr), 2):\n               if arr[j] % 2 == 0:\n                   arr[i], arr[j] = arr[j], arr[i]\n                   break\n\n    odd_count = len([x for x in arr if x < arr[0]])\n    if odd_count % 2 == 0:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[0]:\n                arr[0], arr[i] = arr[i], arr[0]\n                break\n\n    return arr == sorted(arr)"], [0.9068872332572937, "def move_two_balls(arr):\n    \"\"\"\n    \"\"\"\n    if len(arr) == 0:\n        return True\n\n    sorted_arr = sorted(arr)\n    arr_len = len(arr)\n    cnt = 0\n\n    for i in range(arr_len):\n        if arr[i] != sorted_arr[i]:\n            cnt += 1\n\n    if cnt == 0:\n        return check_even_small(arr[0], arr[1:])\n    elif cnt == 2 or cnt == 4:\n        return True\n    else:\n        return False"], [0.904863715171814, "def shift_one_number(arr):\n    \"\"\"\n    Given an array of integers, return true if the array contains an odd number of even numbers.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n\n    for _ in range(len(arr)):\n        odd_count = 0\n        even_count = 0\n\n        for num in arr:\n            if num % 2 == 1:\n                odd_count += 1\n            if odd_count > 0 and num % 2 == 0:\n                even_count += 1\n\n        if even_count == len(arr\"\"\"\n    if len(arr) == 0:\n        return True\n\n    for _ in range(len(arr)):\n        odd_count = 0\n        even_count = 0\n\n        for num in arr:\n            if num % 2 == 1:\n                odd_count += 1\n            if odd_count > 0 and num % 2 == 0:\n                even_count += 1\n\n        if even_count == len(arr) - odd_count:\n            return True\n\n        arr.append(arr.pop(0))\n\n    return False"], [0.9031000137329102, "def countShifts(arr):\n    \"\"\"\n    Given an array of integers arr, return the number of shifts needed to make it sorted.\n    An array arr is sorted if and only if arr[i] <= arr[i + 1] holds for every i (0-indexed).\n    We define a shift as moving the first element of an array to the end.\n    For example, [1, 2, 3] shifted once is [2, 3, 1].\n    Example 1:\n    Input: arr = [3,4,5,1,2]\n    Output: 1\n    Explanation\"\"\"\n    if len(arr) == 0:\n        return 0\n    for j in range(len(arr)):\n        new_arr = arr[j:]+arr[:j]\n        if is_sorted(new_arr):\n            return j\n    return -1"], [0.9029335379600525, "def rearrange_three_elements(arr):\n    \"\"\"\n    Given an array of integers, rearrange the array such that the first element is the smallest,\n    the second element is the largest, the third element is the second smallest, the fourth\n    element is the second largest, and so on.\n\n    If the array has an odd number of elements, the middle element is not moved.\n\n    Return true if the array can be rearranged to match these criteria, otherwise return false.\n\n    Example 1:\n    Input: arr = [1, 2, 3]\n    Output: true\n    Explanation: The array can be rearranged as [1,\"\"\"\n    if len(arr) == 0:\n        return True\n\n    arr_sorted = sorted(arr)\n    arr_first = arr[0]\n    counts = arr_sorted.count(arr_first)\n\n    lesser_elements = [y for y in arr_sorted if y < arr_first]\n\n    if len(lesser_elements) % 2 == 0:\n        if counts > 1:\n            idx = arr.index(arr_first, 1)\n            lesser_elements.append(arr_first)\n            arr[idx] = lesser_elements[0]\n            arr_sorted = sorted(arr)\n        else:\n            return False\n\n    swap_counts = sum(a != b for a, b in zip(arr, arr_sorted))\n\n    return swap_counts // 2 <= 3"]]}
{"task_id": "HumanEval/110", "problem": [[0.9631885290145874, "def exchange(lst1, lst2):\n    \"\"\"\n    Given two lists of integers, determine if it's possible to make the first list of even numbers by swapping elements between the two lists.\n    :param lst1: list of integers\n    :param lst2: list of integers\n    :return: \"YES\" or \"NO\"\n    \"\"\"\n    # Check if total sum of lst1 and lst2 are both even numbers.\n    # If not, return \"NO\" directly because even number of swaps can't make uneven sum to be even.\n    if sum(lst1) % 2 != 0 or sum(lst2) % 2 != 0:\n        return \"No\"\n\n    # If the sum of both lists are even, then check if it's possible to make lst1 to be a list of even numbers.\n    # If an odd number in lst1 is found, then try to find an even number in lst2 to swap. If not found, return \"NO\" directly.\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            has_swap = False\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    # Swap found, exchange the elements and break the loop.\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    has_swap = True\n                    break\n            if not has_swap:\n                return \"NO\"\n\n    # If all odd numbers in lst1 can find matched even numbers in lst2 to swap, return \"YES\".\n    return \"YES\""], [0.9627652764320374, "def exchange(lst1, lst2):\n    \"\"\"Swaps elements between two lists to make first list contain only even numbers.\"\"\"\n\n    # create even and odd lists\n    lst1_even = [i for i in lst1 if i % 2 == 0]\n    lst1_odd = [i for i in lst1 if i % 2 != 0]\n    lst2_even = [i for i in lst2 if i % 2 == 0]\n    lst2_odd = [i for i in lst2 if i % 2 != 0]\n\n    # if there are more odd numbers in the first list than even numbers in the second,\n    # or the sum of the odd numbers in the first list and the even numbers in the second\n    # is less than the sum of the even numbers in the first list and odd numbers in the second,\n    # then it is impossible to make the first list contain only even numbers\n    if len(lst1_odd) > len(lst2_even) or sum(lst1_odd) + sum(lst2_even) < sum(lst1_even) + sum(lst2_odd):\n        return 'NO'\n\n    # else, return 'YES'\n    return 'YES'"], [0.9627084136009216, "def exchange(lst1, lst2):\n    \"\"\"Swaps elements between two lists to make first list contain only even numbers.\"\"\"\n    \n    #create even and odd lists\n    lst1_even = [i for i in lst1 if i % 2 == 0]\n    lst1_odd = [i for i in lst1 if i % 2 != 0]\n    lst2_even = [i for i in lst2 if i % 2 == 0]\n    lst2_odd = [i for i in lst2 if i % 2 != 0]\n\n    #if there are more odd numbers in the first list than even numbers in the second,\n    # or the sum of the odd numbers in the first list and the even numbers in the second\n    # is less than the sum of the even numbers in the first list and odd numbers in the second,\n    # then it is impossible to make the first list contain only even numbers\n    if len(lst1_odd) > len(lst2_even) or sum(lst1_odd) + sum(lst2_even) < sum(lst1_even) + sum(lst2_odd):\n        return 'NO'\n\n    #else, return 'YES'\n    return 'YES'"], [0.9556036591529846, "def exchange(lst1, lst2):\n    \"\"\"\n    Given two arrays of integers, determine whether one array can be obtained from another by swapping at most one pair of elements.\n    \n    Example\n    \n    For a = [1, 2, 3, 2, 6, 2, 8] and b = [2, 3, 2, 5, 6, 2, 8], the output should be\n    exchange(a, b) = true.\n    \n    We can obtain b from a by swapping 1 with any other number.\n    \n    For a = [1, \"\"\"\n    if (sum(lst1) + sum(lst2)) % 2 != 0:\n        return \"NO\"\n        \n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_lst1) > len(even_lst2):\n        return \"NO\"\n    \n    return \"YES\""], [0.9547934532165527, "def exchange(lst1, lst2):\n    \"\"\"\n    Given two lists of integers, determine if the sum of the odd numbers in the first list is equal to the sum of the even numbers in the second list.\n    \n    Parameters\n    ----------\n    lst1 : list\n        The first list of integers.\n    lst2 : list\n        The second list of integers.\n        \n    Returns\n    -------\n    str\n        \"YES\" if the sum of the odd numbers in the first list is equal to the sum of the even numbers in the second list, otherwise \"NO\".\n    \"\"\"\n    odd1 = sum(1 for num in lst1 if num % 2 != 0)\n    even2 = sum(1 for num in lst2 if num % 2 == 0)\n        \n    return \"YES\" if odd1 == even2 else \"NO\""], [0.9503123760223389, "def exchange(lst1, lst2):\n    \"\"\"\n    :param lst1: list of integers\n    :param lst2: list of integers\n    :return: string\n    \"\"\"\n    lst1.sort()\n    lst2.sort()\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n    return \"YES\""], [0.9495387077331543, "def exchange(lst1, lst2):\n    \"\"\"\n    >>> exchange([1, 2, 3], [3, 2, 1])\n    'YES'\n    >>> exchange([1, 2, 3], [3, 2, 2])\n    'NO'\n    \"\"\"\n    s1, s2 = sum(lst1), sum(lst2)\n    for i in lst1:\n        for j in lst2:\n            new_s1, new_s2 = s1 - i + j, s2 - j + i\n            if new_s1 % 2 == 0 and new_s2 % 2 == 0:\n                return 'YES'\n    return 'NO'"], [0.9364084005355835, "def transposition(lst1, lst2):\n    \"\"\"\n    Given two lists of integers lst1 and lst2, determine if it is possible to make lst1 consists of only even numbers while keeping the sum of lst1 and lst2 constant.\n    \n    Args:\n        lst1 (list): A list of integers.\n        lst2 (list): A list of integers.\n        \n    Returns:\n        str: \"YES\" if it is possible to make lst1 consists of only even numbers while keeping the sum of lst1 and lst2 constant, otherwise \"NO\".\n    \"\"\"\n    # Calculate initial sum of all in lst1 and lst2\n    sum1, sum2 = sum(lst1), sum(lst2)\n    \n    # Calculate sum of evens in lst1 and lst2\n    even_sum1, even_sum2 = sum(i for i in lst1 if i % 2 == 0), sum(i for i in lst2 if i % 2 == 0)\n\n    # Calculate sum of odd numbers in lst1 and lst2\n    odd_sum1, odd_sum2 = sum1 - even_sum1, sum2 - even_sum2\n    \n    # Check if it is impossible to make lst1 consists of only even numbers while keeping the sum of lst1 and lst2 constant.\n    if abs(odd_sum1 - odd_sum2) % 2 != 0:\n        return \"NO\"\n        \n    # Otherwise, return \"YES\"\n    return \"YES\""], [0.9362756013870239, "def swap_for_odds(lst1, lst2):\n    \"\"\"\n    Given two lists of integers, lst1 and lst2, determine if it is possible to swap elements in the lists so that the sum of the elements in lst1 is even and the sum of the elements in lst2 is odd.\n\n    Args:\n        lst1 (list): A list of integers.\n        lst2 (list): Another list of integers.\n\n    Returns:\n        str: \"YES\" if it is possible to swap elements in the lists so that the sum of the elements in lst1 is even and the sum of the elements in lst2 is odd, otherwise \"NO\".\n    \"\"\"\n    sum_lst1 = sum(lst1)\n    sum_lst2 = sum(lst2)\n\n    if (sum_lst1 + sum_lst2) % 2 != 0:\n        return \"NO\"\n\n    has_odd_lst1 = any(i % 2 != 0 for i in lst1)\n    has_even_lst2 = any(i % 2 == 0 for i in lst2)\n\n    return \"YES\" if has_odd_lst1 and has_even_lst2 else \"NO\""]]}
{"task_id": "HumanEval/111", "problem": [[0.9551845788955688, "def advanced_histogram(test):\n    \"\"\"\n    Write a function that takes a string and returns a dictionary with the letters as keys and the number of times they appear in the string as values.\n    \n    For example:\n    \n    advanced_histogram(\"Hello world\") \u279e { \"e\": 3, \"l\": 3, \"o\": 2, \"r\": 1, \"u\": 1, \"w\": 1 }\n    \n    The letter \"h\" does not appear in the string so it is not included in the dictionary.\n    \n    Notes:\n    \n    The string will be in lowercase\"\"\"\n    count = {}\n    for char in test:\n        if char != ' ':\n            if char.lower() in count:\n                count[char.lower()] += 1\n            else:\n                count[char.lower()] = 1\n    max_freq = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_freq}"], [0.9455186128616333, "def advanced_histogram(test):\n    \"\"\"\n    \"\"\"\n    # count all character in the test\n    count = {}\n    for char in test:\n        if char != ' ':\n            if char.lower() in count:\n                count[char.lower()] += 1\n            else:\n                count[char.lower()] = 1\n                \n    # find the maximum frequency\n    max_freq = max(count.values()) if count else 0\n\n    # return only the characters with the maximum frequency\n    return {char: count for char, count in count.items() if count == max_freq}"], [0.9435921907424927, "def advanced_histogram(test):\n    \"\"\"\n    \"\"\"\n    # Track counts\n    count = {}\n    for char in test:\n        if char != ' ':\n            if char.lower() in count:\n                count[char.lower()] += 1\n            else:\n                count[char.lower()] = 1\n\n    # Find maximum count\n    max_count = 0\n    for char, cnt in count.items():\n        if cnt > max_count:\n            max_count = cnt\n    \n    # Collect chars that have max_count \n    max_chars = {}\n    for char, cnt in count.items():\n        if cnt == max_count:\n            max_chars[char] = cnt\n    \n    return max_chars"], [0.9435725808143616, "def advanced_histogram(test):\n    \"\"\"\n    \"\"\"\n    count = {}\n    max_count = 0\n    max_count_chars = []\n    \n    # Counting frequency of all characters\n    for char in test:\n        if char != ' ':\n            if char.lower() in count:\n                count[char.lower()] += 1\n            else:\n                count[char.lower()] = 1\n            # Keeping track of maximum count\n            if count[char.lower()] > max_count:\n                max_count = count[char.lower()]\n\n    # Adding characters with max_count in list\n    for char, char_count in count.items():\n        if char_count == max_count:\n            max_count_chars.append(char)\n\n    # Preparing final dictionary\n    result = {char: max_count for char in max_count_chars}\n    return result"], [0.9431872963905334, "def advanced_histogram(test):\n    \"\"\"\n    \"\"\"\n    count = {}\n    for char in test:\n        if char != ' ':\n            if char.lower() in count:\n                count[char.lower()] += 1\n            else:\n                count[char.lower()] = 1\n    \n    # find the highest frequency\n    max_value = max(count.values()) if count else 0\n\n    # keep only those characters with max value\n    return {k: v for k, v in count.items() if v == max_value}"]]}
{"task_id": "HumanEval/112", "problem": [[0.9110395908355713, "def checkPalindromeDistinctAlphabets(s, c, n):\n    \"\"\"\n    :type s: str\n    :type c: str\n    :type n: int\n    :rtype: str, bool, bool\n    \"\"\"\n    result = ''.join(ch for ch in s if ch not in c)\n    palindrome = result == result[::-1]\n    num_alphabets = len(set(result))\n    \n    return result, palindrome, num_alphabets == n"], [0.9017837047576904, "def check_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome\n    \"\"\"\n    # Complete the function to check if the input string s is a palindrome\n    # Return True if s is a palindrome, and False otherwise\n    # A palindrome reads the same forward and backward, ignoring spaces, punctuation, and capitalization\n    # Example: \"A man, a plan, a canal, Panama\" is a palindrome\n    # Example: \"racecar\" is a palindrome\n    # Example: \"hello\" is not a palindrome\n    return s.lower().replace(' ', '').replace(',', '').replace('.', '') == s[::-1].lower().replace(' ', '').replace(',', '').replace('.', '')"], [0.9008333086967468, "def replace_and_reverse(s, ch):\n    \"\"\"\n    Given a string s and a character ch, replace all occurrences of ch with space\n    and reverse the string. If the resulting string is a valid palindrome, return\n    the resulting string. Otherwise, return an empty string.\n    \n    A valid palindrome is a string that reads the same forward and backward.\n    \n    Example 1:\n    Input: s = \"abbab\", ch = \"b\"\n    Output: \"abba\"\n    Explanation: Replace 'b' with space to get \"a b b a\".\n    Reverse the string to get \"abba\".\n    \"abba\"\"\"\n    # Replace the given character with space\n    s = s.replace(ch, ' ')\n\n    # Split the string into words\n    words = deque(s.split())\n\n    # Initialize final result with an empty string\n    res = \"\"\n\n    while words:\n        # If the current string does not form a valid palindrome\n        # Remove a word from the front or back of the queue and \n        # add to the appropriate end based on which makes a valid palindrome\n        if res.replace(\" \", \"\") != res[::-1].replace(\" \", \"\"):\n            if words[0][::-1] in res:\n                res = words.popleft() + \" \" + res\n            else:\n                res = res + \" \" + words.pop()\n        # If the current string forms a valid palindrome, add the next word\n        # to the end\n        else:\n            res = res + \" \" + words.pop()\n            \n    # If the result is not a valid palindrome, return an empty string\n    return res if res.replace(\" \", \"\") == res[::-1].replace(\" \", \"\") else \"\""], [0.8956347703933716, "def is_palindrome(s):\n    \"\"\"\n    Return True if the given string is a palindrome.\n    \n    >>> is_palindrome('tacocat')\n    True\n    >>> is_palindrome('tacodog')\n    False\n    \"\"\"\n    s = ''.join(c for c in s if c.isalnum()) # remove special characters\n    s = s.lower() # make all letters lowercase\n    return s == s[::-1] # Check the string s is palindrome or not"], [0.8943114280700684, "def is_palindrome(s):\n    \"\"\"\n    Return True if the given string is a palindrome.\n    \n    >>> is_palindrome('tacocat')\n    True\n    >>> is_palindrome('tacodog')\n    False\n    \"\"\"\n    s = s.replace(' ', '')  # This line is to remove spaces in the string\n    return s == s[::-1]"], [0.893972635269165, "def is_palindrome(string):\n    \"\"\"\n    Check if a string is a palindrome\n    \"\"\"\n    # remove all the whitespaces\n    string = ''.join(string.split())\n\n    # reverse the string\n    reverse = ''.join(reversed(string))\n\n    # check if string is equal to its reverse\n    if string == reverse:\n        return True\n    else:\n        return False\n    def is_palindrome(string):\n    \"\"\"\n    Check if a string is a palindrome\n    \"\"\"\n    # remove all the whitespaces\n    string = ''.join(string.split())\n\n    # reverse the string\n    reverse = ''.join(reversed(string))\n\n    # check if string is equal to its reverse\n    if string == reverse:\n        return True\n    else:\n        return False"], [0.8931553959846497, "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # The translation table is created with maketrans function to remove all punctuation\n    # and .lower() function is used to convert string into lower case.\n    s = s.translate(str.maketrans('', '', string.punctuation)).replace(\" \", \"\").lower()\n    return s == s[::-1]"], [0.893057107925415, "def isPalindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    # Using predefined function to get rid of spaces\n    s = s.replace(' ', '')\n    # Converting all the letters of the string into lowercase\n    s = s.lower()\n    # Reversing the string\n    rev = s[::-1]\n\n    # Comparing the reversed string with the original string\n    if rev == s:\n        return True\n    else:\n        return False"]]}
{"task_id": "HumanEval/113", "problem": [[0.9626791477203369, "def unusual_addition(lst):\n    \"\"\"This function accepts a list solely made up of strings containing numerical digits only and returns a list.\n    In the output, for each element, replace the 'i' with the true count of odd digits and 'e' with the true count of even digits in \n    the i'th string from the input.\n\n    >>> unusual_addition(['1234567'])\n    [\"the number of odd elements 4n the str3ng 3 of the 4nput.\"]\n    >>> unusual_addition(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str0ng 0 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for idx, str in enumerate(lst):\n        odd_count = sum(1 for s in str if int(s) % 2 != 0)\n        even_count = sum(1 for s in str if int(s) % 2 == 0)\n        replace_string = f\"the number of odd elements {odd_count}n the str{even_count}ng {even_count} of the {odd_count}nput.\"\n        output.append(replace_string)\n\n    return output"], [0.9587107300758362, "def unusual_addition(lst):\n    \"\"\"\n    This function accepts a list solely made up of strings containing numerical digits only and returns a list.\n    In the output, for each element, replace the '1' with the true count of odd digits and 'e' with the true count of even digits in\n    the nth string from the input.\n\n    >>> unusual_addition(['1234567'])\n    [\"the number of odd elements are 3 of the string 1 of the input.\"]\n    >>> unusual_addition(['3', \"1111111\"])\n    [\"the number of odd elements are 1 of the string 1 of the input.\",\n    \"the number of odd elements are 7 of the string 0 of the input.\"]\n    \"\"\"\n    output = []\n    for idx, string in enumerate(lst):\n        odd_count = sum(1 for s in string if int(s) % 2 != 0)\n        even_count = sum(1 for s in string if int(s) % 2 == 0)\n        replace_string = f\"the number of odd elements are {odd_count} of the string {even_count} of the input\"\n        output.append(replace_string)\n\n    return output"], [0.950128436088562, "def even_characters(lst):\n    \"\"\"\n    Return a list of strings, each of which contains the number of even characters in the corresponding string in the input list.\n    \n    >>> even_characters(['abc', '101', '10010'])\n    ['the number of even characters 0 in the string 1 of the input.', 'the number of even characters 1 in the string 2 of the input.', 'the number of even characters 3 in the string 3 of the input.']\n    \"\"\"\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(1 for c in s if c in '24680')\n        result.append(\"the number of even characters {}n the str{}ng {} of the {}nput.\".format(count, i, count, i))\n    return result"], [0.9476467967033386, "def complex_sum(lst):\n    \"\"\"Count the number of odd digits in each string in the list.\"\"\"\n    result = []\n    for i, s in enumerate(lst):\n        if not isinstance(s, str):\n            raise ValueError(\"ERROR: All elements in the list must be strings.\")\n        try:\n            odd_nums = len([int(n) for n in s if int(n) % 2 != 0])\n        except ValueError:\n            raise ValueError(\"ERROR: All characters in the strings must be numeric.\")\n        result.append(\"the calculation of odd segments {}n the str{}ng {} of the {}nput set.\".format(odd_nums, i+1, odd_nums, i+1))\n    return result"], [0.9435551166534424, "def unusual_addition(lst):\n    \"\"\"Given a list consisting only of strings with numerical characters, return a list.\n    Each 'i' in the output statement for each element, \"the number of odd elements present in the\n    i'th input string.\", should be replaced with the actual count of odd numbers.\"\"\"\n\n    results = []\n\n    for i, string in enumerate(lst):\n        totals = [0, 0]  # [total_odd_numbers, total_even_numbers]\n\n        # Count number of odd and even numbers within the string\n        for char in string:\n            if int(char) % 2 == 0:\n                totals[1] += 1\n            else:\n                totals[0] += 1\n\n        # For increasing the complexity, Compute square of counts\n        totals = [num**2 for num in totals]\n\n        # Misleading task here: unnecessarily loop through list twice\n        odd_squares = [el for el in range(totals[0])]\n        even_squares = [el for el in range(totals[1])]\n\n        odd_square_totals = sum([num**2 for num in odd_squares])\n        even_square_totals = sum([num**2 for num in even_squares])\n\n        output_string = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            odd_square_totals, odd_square_totals, odd_square_totals, odd_square_totals)\n\n        results.append(output_string)\n\n    return results"]]}
{"task_id": "HumanEval/114", "problem": [[0.9398595690727234, "def optimize_array(array):\n  \"\"\"\n  Given an array of integers, return the sum of the minimum contiguous subarray.\n  \n  For example, given the array [1, -1, -2, 1], return 1.\n  \n  The sum of the minimum contiguous subarray in this case is 1 + (-1) + (-2) = -2.\n  \n  You may assume the array contains at least one integer.\n  \"\"\"\n  array.sort()\n  result = 0\n  for num in array:\n    if result + num < 0:\n      result += num\n  return result"], [0.9258475303649902, "def max_subarray_sum(nums):\n    \"\"\"\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n    \n    Example 1:\n    \n    Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n    Output: 6\n    Explanation: [4,-1,2,1] has the largest sum = 6.\n    \n    Example 2:\n    \n    Input: nums = [1]\n    Output: 1\n    \n    Example 3:\n    \n\"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"], [0.9225354194641113, "def max_subarray_sum(arr):\n    \"\"\"\n    Find the contiguous subarray (containing at least one number) which has the largest sum.\n    \n    For example:\n    Given the array [-2,1,-3,4,-1,2,1,-5,4],\n    the contiguous subarray [4,-1,2,1] has the largest sum = 6.\n    \n    For this problem, return the maximum sum.\n    \"\"\"\n    curr_sum = arr[0]\n    max_sum = arr[0]\n    for num in arr[1:]:\n        curr_sum = max(curr_sum + num, num)\n        max_sum = max(curr_sum, max_sum)\n    return max_sum"], [0.9222379922866821, "def max_subarray_sum(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"], [0.9207543134689331, "def max_subarray_sum(array):\n    \"\"\"\n    Find the contiguous subarray (containing at least one number) which has the largest sum.\n    \n    For example:\n    \n    Given the array [-2,1,-3,4,-1,2,1,-5,4],\n    the contiguous subarray [4,-1,2,1] has the largest sum = 6.\n    \n    For this problem, return the maximum sum.\n    \"\"\"\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n\n    for num in array:\n        max_sum_ending_here = max(max_sum_ending_here + num, 0)\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    return max_sum_so_far"], [0.9198276996612549, "def maxSubArraySum(arr):\n    \"\"\"\n    Find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    \n    For example:\n    \n    Given the array [-2,1,-3,4,-1,2,1,-5,4],\n    the contiguous subarray [4,-1,2,1] has the largest sum = 6.\n    \n    For this problem, return the maximum sum.\n    \"\"\"\n    max_so_far = 0 \n    max_ending_here = 0 \n    \n    for i in range(0, len(arr)): \n        max_ending_here = max_ending_here + arr[i] \n        \n        if (max_ending_here < 0): \n            max_ending_here = 0\n        \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n    \n    return max_so_far "], [0.9195113778114319, "def maxSubArraySum(array):\n    \"\"\"\n    Find the contiguous subarray within an array (containing at least one number) which has the largest sum.\n    \n    For example:\n    \n    Given the array [-2,1,-3,4,-1,2,1,-5,4],\n    the contiguous subarray [4,-1,2,1] has the largest sum = 6.\n    \n    For this problem, return the maximum sum.\n    \n    \"\"\"\n    max_sum = array[0]\n    curr_sum = array[0]\n      \n    for i in range(1,len(array)):         \n        curr_sum = max(array[i], curr_sum + array[i])\n        max_sum = max(curr_sum, max_sum)\n      \n    return max_sum"], [0.9192203283309937, "def max_subarray_sum(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums or all(num <= 0 for num in nums):\n        return 0\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"]]}
{"task_id": "HumanEval/115", "problem": [[0.939333975315094, "def well_emptying(grid, capacity):\n    \"\"\"\n    Returns the number of times a bucket needs to be lowered to empty all the wells in the grid.\n\n    Args:\n        grid (list): A 2D list representing the grid of wells.\n        capacity (int): The capacity of the bucket.\n\n    Returns:\n        int: The number of times a bucket needs to be lowered to empty all the wells in the grid.\n    \"\"\"\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n\n    # Initialize the number of bucket lowerings to 0\n    lowerings = 0\n\n    # Iterate over the rows in the grid\n    for i in range(rows):\n        # Initialize the remaining capacity of the bucket\n        remaining_capacity = capacity\n\n        # Iterate over the columns in the row\n        for j in range(cols):\n            # If the current well has water\n            if grid[i][j] == 1:\n                # Decrease the remaining capacity of the bucket\n                remaining_capacity -= 1\n\n                # If the bucket is full, empty it and reset the capacity\n                if remaining_capacity == 0:\n                    lowerings += 1\n                    remaining_capacity = capacity\n\n        # If the bucket has water after finishing a row, empty it\n        if remaining_capacity != capacity:\n            lowerings += 1\n\n    return lowerings"], [0.9317306280136108, "def minTimeToEmptyWells(grid, bucket_capacity):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type bucket_capacity: int\n    :rtype: int\n    \"\"\"\n    count = [0] * len(grid[0])\n    for row in grid:\n        for j in range(len(row)):\n            count[j] += row[j]\n    count.sort()\n\n    time = 0\n    while count:\n        i = len(count) - 1\n        while i >= 0 and count[i] > 0:\n            count[i] -= bucket_capacity\n            i -= 1\n        count = [x for x in count if x > 0]\n        time += 1\n\n    return time - 1 if len(grid[0]) > bucket_capacity else time"], [0.9000563621520996, "def water_plants(plants, capacity):\n    \"\"\"\n    Given an array of non-negative integers representing the amount of water needed to\n    water each plant in the garden. You have a watering can with capacity `capacity`\n    liters of water. You need to water all the plants in a single pass.\n    Return the number of steps needed to water all the plants.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n    \n    def water_plants(plants, capacity):\n    \"\"\"\n    Given an array of non-negative integers representing the amount of water needed to\n    water each plant in the garden. You\"\"\"\n    steps = 0\n    water_left = 0\n\n    for i, plant in enumerate(plants):\n        if water_left < plant:\n            steps += 2 * i + 1  # Refill the watering can\n            water_left = capacity\n        water_left -= plant\n        steps += 1  # Move to the next plant\n\n    return steps"], [0.9000486135482788, "def water_plants(plants, capacity):\n    \"\"\"\n    Given an array of non-negative integers representing the amount of water needed to\n    water each plant in the garden. You have a watering can with capacity `capacity`\n    liters of water. You need to water all the plants in a single pass.\n    Return the number of steps needed to water all the plants.\n    \"\"\"\n    # TODO: Write your code here\n    return 0\n    \n    def water_plants(plants, capacity):\n    \"\"\"\n    Given an array of non-negative integers representing the amount of water needed to\n    water each plant in the garden. You\"\"\"\n    steps = 0\n    water_left = 0\n\n    for i, plant in enumerate(plants):\n        if water_left < plant:\n            steps += 2 * i + 1  # Refill the watering can\n            water_left = capacity\n        water_left -= plant\n        steps += 1  # Move to the next plant\n\n    return steps"]]}
{"task_id": "HumanEval/116", "problem": [[0.9513192772865295, "def sort_by_binary_one_count(arr): \n    \"\"\"\n    Given an array of integers, return the array sorted in ascending order by the number of 1s in each integer. For example, the binary representation of 1234 is 10011010010, so the answer of this function for this example would be [0,1,12,123,1234].\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"], [0.9464341402053833, "def sort_by_binary_len(arr):\n    \"\"\"\n    Rearrange an array of non-negative integers considering the lengths \n    of their binary notations. Sort the numbers by their decimal values \n    in case of binary length matches. \n\n    The expected output will be: \n    >>> sort_by_binary_len([1, 31, 15, 2, 7]) == [1, 2, 7, 15, 31]\n    >>> sort_by_binary_len([14, 58, 39, 41, 61]) == [14, 39, 41, 58, 61]\n    >>> sort_by_binary_len([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    \n    sorted_arr = sorted(arr, key=lambda x: (bin(x)[2:].zfill(8), x))\n    return sorted_arr"], [0.943915605545044, "def sort_by_binary_len(arr):\n    \"\"\"\n    Sort an array of integers by the length of their binary representation.\n    If two integers have the same length, the smaller number should come first.\n    \n    >>> sort_by_binary_len([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1])\n    [1, 2, 4, 8, 16, 32, 64, 128, 256, 51\"\"\"\n    return sorted(arr, key=lambda x: (len(bin(abs(x)))-2, abs(x)))"], [0.9437627792358398, "def sort_by_binary_len(arr):\n    \"\"\"\n    Sort an array of integers by the length of their binary representation.\n    If two numbers have the same length, the smaller number should come first.\n    \n    >>> sort_by_binary_len([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1])\n    [1, 2, 4, 8, 16, 32, 64, 128, 256, 51\"\"\"\n    return sorted(arr, key=lambda x: (len(bin(abs(x)))-2, x >= 0, x))"], [0.9400618076324463, "def sort_by_binary_len(arr):\n    \"\"\"\n    Reorders an array of strictly positive integers according to\n    the length of their binary representations, in increasing order.\n    In instances of overlapping binary lengths, the array uses\n    decimal numerical values as the basis for establishing order.\n\n    The output produced should conform to the examples provided:\n    >>> sort_by_binary_len([1, 31, 15, 2, 7]) == [1, 2, 7, 15, 31]\n    >>> sort_by_binary_len([14, 58, 39, 41, 61]) == [14, 39, 41, 58, 61]\n    >>> sort_by_binary_len([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Sort the array based on binary length and then value\n    return sorted(arr, key = lambda x: (bin(x)[2:], x))"], [0.9343607425689697, "def sortByBits(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"]]}
{"task_id": "HumanEval/117", "problem": [[0.9436567425727844, "def select_words(s, n):\n    \"\"\"\n    Select words from a string s that have exactly n consonants.\n    Return a list of tuples (count_vowels, word) in ascending order of count_vowels.\n    \"\"\"\n    def count_consonants(word):\n        \"\"\"\n        Count the number of consonants in a word.\n        \"\"\"\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        count = 0\n        for letter in word:\n            if letter.lower() in consonants:\n                count += 1\n        return count\n    def count_vowels(word\"\"\"\n    words = s.split()\n    selected_words = []\n    for i in range(len(words)):\n        if count_consonants(words[i]) == n:\n            if selected_words and i > 0 and count_consonants(words[i-1]) == n:\n                selected_words[-1] += words[i]\n            else:\n                selected_words.append(words[i])\n    return [(count_vowels(word), word) for word in selected_words]"], [0.9255451560020447, "def select_phrases(s, n, m):\n    \"\"\"\n    Select phrases from a string based on the number of consonants and vowels in each word.\n    \n    Args:\n        s (str): The string containing the phrases.\n        n (int): The number of consonants in each phrase.\n        m (int): The number of vowels in each phrase.\n    \n    Returns:\n        list: A list of phrases that meet the criteria.\n    \"\"\"\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    if not s:\n        return []\n\n    phrases_with_required_counts = []\n    current_phrase = []\n    current_consonants = 0\n    current_vowels = 0\n\n    for word in s.split():\n        word_cons = len([ch for ch in word.lower() if ch in consonants])\n        word_vows = len([ch for ch in word.lower() if ch in vowels])\n\n        if (current_consonants + word_cons == n) and (current_vowels + word_vows == m):\n            current_phrase.append(word)\n            phrases_with_required_counts.append(' '.join(current_phrase))\n            current_phrase = []\n            current_consonants = 0\n            current_vowels = 0\n\n        elif (current_consonants + word_cons > n) or (current_vowels + word_vows > m):\n            current_phrase = [word]\n            current_consonants = word_cons\n            current_vowels = word_vows\n\n        else:\n            current_phrase.append(word)\n            current_consonants += word_cons\n            current_vowels += word_vows\n\n    return phrases_with_required_counts"], [0.9229823350906372, "def select_merge_words(s, n):\n    \"\"\"\n    \"\"\"\n    import re\n    if len(s)==0:\n        return []\n    else:\n        words = re.findall(r'\\b\\w+\\b', s)\n        res=[]\n        cnt=0\n        vwl=0\n        for i in words:\n            cnc=len(i) - len(re.findall(r'[aeiou]',i, re.I))\n            vw=len(re.findall(r'[aeiou]',i, re.I))\n            if cnc==n:\n                cnt += cnc\n                vwl += vw             \n            else:\n                if cnt == n:\n                    res.append(str(vwl)+i)\n                cnt=0   \n                vwl=0\n        if cnt == n:\n            res.append(str(vwl)+i)\n        return res"], [0.9227286577224731, "def word_segments(s, n):\n    \"\"\"\n    Given a string s and an integer n, return a list of all words in s that are n vowels long.\n    For this problem, we consider a word to be a contiguous sequence of characters delimited by white space.\n    \n    Example 1:\n    Input: s = \"the quick brown fox jumped over the lazy dog\", n = 3\n    Output: [\"the\",\"quick\",\"brown\",\"over\"]\n    \n    Example 2:\n    Input: s = \"the quick brown fox jumped over the lazy dog\", n = 4\n    Output: [\"quick\",\"brown\",\"over\"\"\"\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    segments = []\n    for word in words:\n        cnt = 0\n        segment = \"\"\n        for char in word:\n            if char in vowels:\n                cnt += 1\n            segment += char\n            if cnt == n:\n                segments.append(segment)\n                cnt = 0\n                segment = \"\"\n    return segments"], [0.9206824898719788, "def select_words(s, n, l):\n    \"\"\"\n    Select words from a string s that contain exactly n vowels and are in the list l.\n    If there are multiple words that satisfy the condition, select one at random.\n    If there are no words that satisfy the condition, return an empty list.\n    :param s: a string\n    :param n: an integer\n    :param l: a list of strings\n    :return: a list of strings\n    \"\"\"\n    if not s or not any(letter in s for letter in l):\n        return []\n    vowels = set(l)\n    words = s.split()\n    result = []\n    for word in words:\n        if sum(1 for ch in word if ch in vowels) == n:\n            if result and sum(1 for ch in result[-1] if ch in vowels) == n:\n                removed_vowel = random.choice([vowel for vowel in result[-1] if vowel in vowels])\n                result[-1] = result[-1].replace(removed_vowel, '', 1)\n                result[-1] += word\n            else:\n                result.append(word)\n    return result"], [0.9205326437950134, "def select_merge_words(s, n):\n    \"\"\"\n    \"\"\"\n    if len(s) == 0:\n        return []\n    else:\n        words = re.findall(r'\\b\\w+\\b', s)\n        res = []\n        cnt = 0\n        vwl = 0\n        for i in words:\n            cn = len(i) - len(re.findall(r'[aeiou]',i, re.I))\n            vw = len(re.findall(r'[aeiou]',i, re.I))\n            if cn == n:\n                cnt += cn\n                vwl += vw             \n            else:\n                if cnt == n:\n                    res.append(str(vwl) + i)\n                cnt = 0   \n                vwl = 0\n            if cnt == n:\n                res.append(str(vwl) + i)\n        return res"], [0.9203342199325562, "def word_segments(s, n):\n    \"\"\"\n    Given a string s and an integer n, return a list of all words in s that have a vowel count of n.\n    \n    Note: The only vowels are a, e, i, o, and u.\n    \n    Example 1:\n    \n    Input: s = \"the quick brown fox jumped over the lazy dog\", n = 2\n    Output: [\"the\",\"quick\",\"brown\",\"jumped\",\"over\",\"the\",\"lazy\"]\n    Explanation: The words in s that have a vowel count of 2 are \"the\", \"quick\", \"brown\", \"jumped\"\"\"\n    if not s:\n        return []\n    \n    # list of vowels\n    vowels = \"aeiouAEIOU\"\n\n    result = []\n\n    for word in s.split():\n        word_vowels = [char for char in word if char in vowels]  # count vowels in word\n        if len(word_vowels) == n:\n            result.append(word)\n        else:\n            segments = [word[i:i + n] for i in range(0, len(word), n)]\n            # only add to 'result' if vowel count matches 'n'\n            result.extend(segment for segment in segments if sum(ch in vowels for ch in segment) == n)\n\n    return result"], [0.91740483045578, "def select_merge_words(s, n):\n    \"\"\"\n    \"\"\"\n    if not s:\n        return []\n\n    vowels_set = set('aeiouAEIOU')\n    words = s.split(' ')\n    result = []\n    merge_word = ''\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter not in vowels_set)\n        if consonant_count == n:\n            vowel_count = len(word) - consonant_count\n            merge_word += word\n        else:\n            if merge_word:\n                result.append(f'{merge_word.count(\"a\")+merge_word.count(\"e\")+merge_word.count(\"i\")+merge_word.count(\"o\")+merge_word.count(\"u\")+merge_word.count(\"A\")+merge_word.count(\"E\")+merge_word.count(\"I\")+merge_word.count(\"O\")+merge_word.count(\"U\")}{merge_word}')\n                merge_word = ''\n\n    # append last word\n    if merge_word:\n        result.append(f'{merge_word.count(\"a\")+merge_word.count(\"e\")+merge_word.count(\"i\")+merge_word.count(\"o\")+merge_word.count(\"u\")+merge_word.count(\"A\")+merge_word.count(\"E\")+merge_word.count(\"I\")+merge_word.count(\"O\")+merge_word.count(\"U\")}{merge_word}')\n\n    return result"]]}
{"task_id": "HumanEval/118", "problem": [[0.9708237051963806, "def get_closest_vowel(word):\n    \"\"\"\n    Enter a word, proceeding to pinpoint the nearest vowel nestled between a \n    dual of consonants, initiating from the right portion of the word, whilst \n    honoring case-sensitivity. Overlook vowels situated at the word's inception \n    or termination. Relay an unoccupied string if such a character is absent. \n    Assume the input string to be constituted exclusively of English alphabets.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""], [0.9679190516471863, "def get_closest_vowel(word):\n    \"\"\"Input a word and then find out the vowel closest from the right side of the word that is \n    between two consonants, distinguishing between upper and lower case. Ignore vowels at the \n    beginning or end of the word. If this kind of vowel does not exist, return an empty string. \n    Assume that the input string only contains English letters.\n\n    Examples:\n    get_closest_vowel(\"yogurt\") => \"u\"\n    get_closest_vowel(\"FULL\") => \"U\"\n    get_closest_vowel(\"quick\") => \"\"\n    get_closest_vowel(\"ab\") => \"\"\n    \"\"\"\n\n    # First, strip any vowels from the beginning and end of the word,\n    while len(word) > 0 and (word[0] in 'aeiouAEIOU' or word[-1] in 'aeiouAEIOU'):\n        if word[0] in 'aeiouAEIOU':\n            word = word[1:]\n\n        if len(word) > 0 and word[-1] in 'aeiouAEIOU':\n            word = word[:-1]\n\n    # Then, find the closest vowel sequence from the right side,\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in 'aeiouAEIOU':\n            return word[i]\n    return \"\""], [0.9643682241439819, "def get_closest_vowel(word):\n    \"\"\"Insert a word, and then retrieve the nearest vowel that is ensconced amid a pair of consonants, \n    starting from the right section of the word, while being case-sensitive. \n    Bypass vowels at either the genesis or finale of the word. \n    Respond with a vacant string if such a vowel is nonexistent. \n    Presume that the input string is comprised strictly of English letters.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    vowels = 'aeiouAEIOU'\n    for i in reversed(range(1, len(word) - 1)): #not including the first and the last characters\n        if (word[i] in vowels) and (word[i - 1] not in vowels) and (word[i + 1] not in vowels):\n            return word[i]\n    return ''"], [0.9418500661849976, "def get_closest_vowel(word):\n    \"\"\"\n    Accepts a single word input, then ascertains the closest vowel positioned between \n    two consonants originating from the word's right-most character, accounting for \n    case sensitivity. Vowels at the beginning or end of the word should not be \n    considered, and an empty string should be returned if the specified vowel does not \n    exist. The input string is assumed to be formed exclusively by English letters.\n    \"\"\"\n\n    # reverse the word to start from the right-most character\n    reversed_word = word[::-1]\n\n    for i in range(1, len(reversed_word)-1):\n        # check if current character is a vowel, the previous and next characters are consonants\n        if reversed_word[i] in 'aeiouAEIOU' and reversed_word[i-1] not in 'aeiouAEIOU' and reversed_word[i+1] not in 'aeiouAEIOU':\n            return reversed_word[i]  # found the vowel\n\n    return \"\"  # return empty string if no such vowel exists"], [0.9412038326263428, "def get_closest_vowel(word):\n    \"\"\"\n    Accepts a single word input, then ascertains the closest vowel positioned between \n    two consonants originating from the word's right-most character, accounting for \n    case sensitivity. Vowels at the beginning or end of the word should not be \n    considered, and an empty string should be returned if the specified vowel does not \n    exist. The input string is assumed to be formed exclusively by English letters.\n    \"\"\"\n\n    # reverse the word to start from the right-most character\n    reversed_word = word[::-1]\n\n    for i in range(1, len(reversed_word) - 1):\n        # check if current character is a vowel, the previous and next characters are consonants\n        if reversed_word[i] in 'aeiouAEIOU' and reversed_word[i - 1] not in 'aeiouAEIOU' and reversed_word[i + 1] not in 'aeiouAEIOU':\n            return reversed_word[i]  # found the vowel\n\n    return \"\"  # return empty string if no such vowel exists"], [0.937449038028717, "def getClosestVowel(word):\n    \"\"\"\n    Given a word, return the closest vowel to the middle of the word.\n    If there are two equally close vowels, return the one that comes first.\n    If there are no vowels, return an empty string.\n    \n    >>> getClosestVowel('banana')\n    'a'\n    >>> getClosestVowel('apple')\n    'e'\n    >>> getClosestVowel('xray')\n    'a'\n    >>> getClosestVowel('computer')\n    'o'\n    >>> getClosestVowel('zzzzzzzz')\n    ''\n    \"\"\"\n    vowels = 'AEIOUaeiou'\n    word = word[1:-1]  # Ignore first and last characters\n    for i in range(len(word)-1, -1, -1):  # Loop backwards\n        if word[i] in vowels:\n            if i>0 and word[i-1] not in vowels and i<len(word)-1 and word[i+1] not in vowels:\n                return word[i]\n    return ''"], [0.9360096454620361, "def get_closest_vowel(word):\n    \"\"\"\n    Find the closest vowel to the middle of the word.\n    If there are two equally close vowels, choose the one that comes first.\n    If there are no vowels, return an empty string.\n    \n    Args:\n        word (str): The word to search.\n    \n    Returns:\n        str: The closest vowel to the middle of the word.\n    \"\"\"\n    # check if word length is less than 3. Word must be at least 3 letters to have vowels between consonants\n    if len(word) < 3: \n        return ''\n\n    # convert word to whether each character is vowel or not\n    # True for vowels, False for consonants\n    is_vowel = ['aeiouAEIOU'.find(c) != -1 for c in word]\n\n    # Iterate from right (excluding the last letter)\n    for i in range(len(word)-2, 0, -1):\n        # Check if this and surrounding letters are consonant-vowel-consonant\n        if is_vowel[i-1] == is_vowel[i+1] == False and is_vowel[i] == True:\n            return word[i]\n    \n    # Return empty string if no such vowel exists\n    return ''"], [0.9360020160675049, "def get_first_consonant_flanked_vowel(word):\n    \"\"\"Given a word, find the first vowel that is enclosed by consonants from the left side of the word (case sensitive). Do not include vowels at the initiation or cessation of the word. Return an empty string if no such vowel found. The input string must only have English characters.\n\n    Example:\n    get_first_consonant_flanked_vowel(\"umbrella\") ==> \"e\"\n    get_first_consonant_flanked_vowel(\"STRONG\") ==> \"O\"\n    get_first_consonant_flanked_vowel(\"grape\") ==> \"a\"\n    get_first_consonant_flanked_vowel(\"fly\") ==> \"\"\n    \"\"\"\n    vowels = 'AEIOUaeiou'\n    for i in range(1, len(word) - 1):  # Skip first and last characters\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n    \n    return \"\"  # Return empty string if no vowel found"], [0.9355776309967041, "def get_last_vowel_flanked_consonant(word):\n    \"\"\"Given a word, find the last consonant that is surrounded by vowels from the right side of the word (case sensitive). Do not include consonants at the beginning or end of the word. Return an empty string if no such consonant is found. Assume the input string contains only English letters.\"\"\"\n\n    vowels = set('aeiouAEIOU')\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i-1] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\""], [0.9320828318595886, "def get_first_consonant_flanked_vowel(word):\n    \"\"\"\n    Given a word, find the first vowel that is enclosed by consonants from the left side of the word (case sensitive). \n    Do not include vowels at the initiation or cessation of the word. \n    Return an empty string if no such vowel found. \n    The input string must only have English characters.\n\n    Example:\n    get_first_consonant_flanked_vowel(\"umbrella\") --> \"e\"\n    get_first_consonant_flanked_vowel(\"STRONG\") --> \"O\"\n    get_first_consonant_flanked_vowel(\"grape\") --> \"a\"\n    get_first_consonant_flanked_vowel(\"fly\") --> \"\"\n    \"\"\"\n    vowels = 'AEIOUaeiou'\n\n    for i in range(1, len(word) - 1):  # Skip first and last characters\n        if word[i] in vowels and word[i - 1] not in vowels:\n            return word[i]\n\n    return \"\"  # Return empty_string if no vowel found"]]}
{"task_id": "HumanEval/119", "problem": [[0.9470334053039551, "def match_parens(lst):\n    \"\"\"\n    Given a string, return 'Yes' if the string is a valid sequence of parentheses, and 'No' otherwise.\n\n    match_parens('()') => 'Yes'\n    match_parens('((()))') => 'Yes'\n    match_parens('((())') => 'No'\n    \"\"\"\n    s = ''.join(lst) # Concatenate the strings \n    stack = []\n    mapping = {')':'(', ']':'['}\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return 'No'\n    return 'Yes' if not stack else 'No'"], [0.9416623711585999, "def match_parens(lst):\n    '''\n    This function returns 'Yes' if a valid string can be constructed by concatenating the strings\n    in the provided list. If it is not possible, it should return 'No'.\n    '''\n    opening_brackets = 0\n    for sub in lst:\n        for char in sub:\n            if char == '(':\n                opening_brackets += 1    # increment the count for opening bracket             \n            elif char == ')':\n                if opening_brackets == 0: \n                    return 'No'           # return 'No' if there is not matching opening bracket\n                opening_brackets -= 1     # decrement the count for closing bracket\n    return 'Yes' if opening_brackets == 0 else 'No'   # return 'No' if there is unpaired opening bracket"], [0.9407490491867065, "def match_parens(lst):\n    \"\"\"\n    Given a string, return 'Yes' if parentheses are balanced, 'No' otherwise.\n    \n    >>> match_parens('()')\n    'Yes'\n    >>> match_parens('((()))')\n    'Yes'\n    >>> match_parens('((())')\n    'No'\n    >>> match_parens('(()')\n    'No'\n    \"\"\"\n    total = ''.join(lst)\n    stack = []\n\n    for char in total:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack: # no opening bracket to match with\n               return 'No'\n            stack.pop()  # remove one opening bracket\n\n    # if there are still opening brackets left in the stack then return 'No'\n    return 'Yes' if not stack else 'No'"], [0.934323787689209, "def match_parens_and_brackets(lst):\n    \"\"\"\n    Given a list of strings, return \"Yes\" if all parentheses and brackets are matched, and \"No\" otherwise.\n    \n    For example, given the following list:\n    \n    [\"[\", \"(\", \")\", \"]\", \"{\", \"}\", \"(\"]\n    \n    The function should return \"No\", since the brackets are not matched.\n    \n    Given the following list:\n    \n    [\"[\", \"(\", \")\", \"]\", \"{\", \"}\", \"(\"]\n    \n    The function should return \"Yes\", since the brackets are matched.\n    \n    You may assume the\"\"\"\n    # create mapping of matched parentheses\n    brackets = {')': '(', ']': '['}\n    # join strings for easy processing\n    s = ''.join(lst)\n    # stack used to handle brackets\n    stack = []\n    \n    for char in s:\n        if char in brackets.values():\n            stack.append(char)\n        elif char in brackets.keys():\n            if stack == [] or brackets[char] != stack.pop():\n                return \"No\"\n    # if the stack is empty, all brackets were matched correctly\n    return \"Yes\" if stack == [] else \"No\""], [0.9306803345680237, "def match_braces_parens_brackets(lst):\n    \"\"\"\n    Given a string, return 'Yes' if the brackets (), braces {}, and\n    parentheses [] are properly balanced. Otherwise, return 'No'.\n    \"\"\"\n    mapping = {'}': '{', ']': '[', ')': '('}\n    stack = []\n    for s in lst:\n        for c in s:\n            if c not in mapping:\n                stack.append(c)\n            elif not stack or stack.pop() != mapping[c]:\n                return 'No'\n    if stack:\n        return 'No'\n    return 'Yes'"], [0.930337131023407, "def match_parens_brackets(lst):\n    \"\"\"\n    Given a string, return 'Yes' if the string is a valid sequence of parentheses, brackets and curly braces\n    'No' otherwise.\n\n    Ex:\n    match_parens_brackets(['(', ')']) == 'Yes'\n    match_parens_brackets(['(', ')', '(', ')']) == 'No'\n    match_parens_brackets(['(', ')', '(', ')', '{', '}', '[', ']', '[', ']']) == 'Yes'\n    \"\"\"\n    s = ''.join(lst)\n\n    stack = []\n    mapping = {')': '(', ']': '['}\n\n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return 'No'\n        else:\n            return 'No'\n\n    if stack:\n        return 'No'\n    else:\n        return 'Yes'"], [0.9241124391555786, "def intricate_nested_parentheses(lst):\n    \"\"\"\n    Given a list of strings, return 'Yes' if all strings in the list are valid parentheses,\n    and 'No' otherwise.\n    \n    >>> intricate_nested_parentheses(['((()))', '(()())', '((()))'])\n    'Yes'\n    >>> intricate_nested_parentheses(['((()))', '(()())', '((()))', '(()'])\n    'No'\n    \"\"\"\n    stack = []\n    for string in lst:\n        for char in string:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return 'No'\n    return 'Yes' if not stack else 'No'"], [0.9219058752059937, "def match_braces(lst):\n    \"\"\"\n    Given a list of characters, return 'Yes' if the list contains a valid sequence of parentheses, or 'No' otherwise.\n    \n    Args:\n        lst (list): A list of characters.\n    \n    Returns:\n        str: 'Yes' if the list contains a valid sequence of parentheses, or 'No' otherwise.\n    \"\"\"\n    # Concatenate all the parentheses into a single string\n    opening_parentheses = ['(', '[']\n    closing_parentheses = [')', ']']\n    stack = []\n    s = ''.join(lst)\n    for i in s:\n        # If the character is an opening parentheses, push it onto the stack\n        if i in opening_parentheses:\n            stack.append(i)\n        # If the character is a closing parentheses, check if it matches with the last opening parentheses on the stack\n        elif i in closing_parentheses:\n            # If the stack is empty or there is no match, return 'No'\n            if not stack or opening_parentheses.index(stack.pop()) != closing_parentheses.index(i):\n                return 'No'\n    # If there are still unmatched opening parentheses in the stack, return 'No'\n    if stack:\n        return 'No'\n    return 'Yes'"]]}
{"task_id": "HumanEval/120", "problem": [[0.9450473785400391, "def find_max_k_numbers(arr, k):\n    \"\"\"\n    Find the k largest numbers in an array.\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    arr.sort(reverse=True)\n    return arr[:k]"], [0.934553861618042, "def top_k_elements(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    arr.sort()\n    return arr[-k:]"], [0.9279983043670654, "def findKLargest(arr, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    arr.sort(reverse=True)\n    ans = []\n    for i in range(k):\n        ans.append(arr[i])\n    return ans"], [0.9240082502365112, "def solution(arr, N):\n    \"\"\"\n    :type arr: List[int]\n    :type N: int\n    :rtype: List[int]\n    \"\"\"\n    # sorting the array in ascending order\n    arr.sort()\n    \n    # slicing the array to get N numbers\n    seq_order = arr[:N]\n    \n    return seq_order"], [0.9235668182373047, "def top_k_largest(arr, k):\n    \"\"\"\n    Find the k largest elements in an array.\n    :param arr: List[int]\n    :param k: int\n    :return: List[int]\n    \"\"\"\n    return heapq.nlargest(k, arr)\n    \n    def top_k_largest(arr, k):\n    \"\"\"\n    Find the k largest elements in an array.\n    :param arr: List[int]\n    :param k: int\n    :return: List[int]\n    \"\"\"\n    return heapq.nlargest(k, arr)\n    \n    def top\"\"\"\n    return quickselect(arr, 0, len(arr) - 1, k)"], [0.9202628135681152, "def kthLargest(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    arr.sort()\n    return arr[-k]"]]}
{"task_id": "HumanEval/121", "problem": [[0.9831711053848267, "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(value for index, value in enumerate(lst) if index % 2 == 0 and value % 2 != 0)"], [0.9614441394805908, "def enhanced_solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are at even positions.    \n\n    Examples\n    enhanced_solution([5, 8, 7, 1]) => 5\n    enhanced_solution([3, 3, 3, 3, 3]) => 9\n    enhanced_solution([30, 13, 24, 321]) => 30\n    \"\"\"\n    return sum(num for i, num in enumerate(lst[::2]) if num % 2 == 1)"], [0.9608632326126099, "def solution(lst):\n    \"\"\"\n    Given a list of integers, return the sum of all the elements that are odd indexed and odd.\n    \n    Args:\n        lst (list): list of integers\n    \n    Returns:\n        int: sum of odd indexed and odd elements\n    \"\"\"\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)"], [0.9389135241508484, "def sum_odd_numbers(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of all odd numbers in the list.\n    \n    >>> sum_odd_numbers([1, 2, 7, -5])\n    9\n    \n    >>> sum_odd_numbers([1, 2, 8, 9, 10, 11, 12, 13, 14, 15])\n    26\n    \n    >>> sum_odd_numbers([])\n    0\n    \"\"\"\n    result = 0\n    for num in lst:\n        if num % 2 == 1:\n            result += num\n    return result"]]}
{"task_id": "HumanEval/122", "problem": [[0.8996666669845581, "def sum_of_first_three(arr, index=0):\n    \"\"\"\n    Given an array of integers, return the sum of the first three elements.\n    \n    If the array has fewer than three elements, return the sum of all elements.\n    \n    For example, given [1, 2, 3, 4], return 6.\n    \n    Given [1, 2], return 3.\n    \n    Given [1], return 1.\n    \n    Given [], return 0.\n    \"\"\"\n    if index >= len(arr):\n        return 0\n    \n    if index == 2:\n        return max(arr[index] + arr[index - 1] + arr[index - 2], 0)\n    \n    return arr[index] + sum_of_first_three(arr, index + 1)"], [0.8964042663574219, "def sum_three_digits(arr):\n    \"\"\"\n    Given an array of integers, return the sum of all the three digit numbers in the array\n    \n    >>> sum_three_digits([123, 456, 789, 10, 11, 12])\n    123 + 456 + 789 = 1368\n    \"\"\"\n    total = 0\n    for num in arr:\n        if len(str(num)) == 3:\n            total += num\n    return total"], [0.8953759670257568, "def max_sum_under_k(nums, k):\n    \"\"\"\n    Find the maximum sum of two elements in a list under a given value k.\n    :param nums: a list of integers\n    :param k: an integer\n    :return: an integer\n    \"\"\"\n    max_sum = -1\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            _sum = nums[i] + nums[j]\n            if _sum < k and _sum > max_sum:\n                max_sum = _sum\n    return max_sum"], [0.8951952457427979, "def compute_sum_of_max_digits(arr, K):\n    \"\"\"\n    Compute the sum of the maximum digits in the array.\n    \n    Args:\n        arr (list): The input array.\n        K (int): The number of maximum digits to consider.\n    \n    Returns:\n        int: The sum of the maximum digits in the array.\n    \"\"\"\n    if K > len(arr):\n        return -1\n    \n    if all(num <= 0 for num in arr):\n        return 0\n    \n    arr.sort()\n    max_sum = 0\n    num_of_zeros = 0\n    \n    for num in arr:\n        if num == 0:\n            num_of_zeros += 1\n        elif num < 0:\n            break\n        else:\n            max_sum += num\n            K -= 1\n            if K == 0:\n                break\n    \n    if num_of_zeros >= K:\n        return 0\n    \n    if K > 0:\n        return -1\n    \n    return max_sum"], [0.8946809768676758, "def sum_base(n: int, k: int) -> int:\n    \"\"\"\n    Given a positive integer n written in base k, return the sum of its digits.\n    \n    Example 1:\n    \n    Input: n = 34, k = 6\n    Output: 7\n    Explanation: 34 (base 6) = 5 + 4 = 9, so the result should be 5 + 4 = 9.\n    \n    Example 2:\n    \n    Input: n = 10, k = 10\n    Output: 1\n    Explanation: 10 (base 10\"\"\"\n    s = 0\n    while n:\n        s += n % k\n        n //= k\n    return s"], [0.8911867141723633, "def sum_smallest_three(arr):\n    \"\"\"\n    Given an array of integers, return the sum of the three smallest numbers.\n    \n    >>> sum_smallest_three([1, 2, 3, 4, 5])\n    6\n    >>> sum_smallest_three([1, 1, 1])\n    3\n    >>> sum_smallest_three([1, 2, 3, 4, 5, 6])\n    6\n    >>> sum_smallest_three([1, 2, 3, 4, 5, 6, 7])\n    9\n    \"\"\"\n    if len(arr) < 3:\n        return sum(arr)\n    smallest_nums = [float('inf')] * 3\n    for num in arr:\n        if num < smallest_nums[2]:\n            smallest_nums = sorted(smallest_nums[:-1] + [num])\n    return sum(smallest_nums)"], [0.8909388780593872, "def sum_last_digits(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of the last digits.\n    \n    >>> sum_last_digits([2, 3, 4])\n    9\n    >>> sum_last_digits([13, 22, 14])\n    9\n    \"\"\"\n    ans = 0\n    for num in lst:\n        ans += int(num[-1])\n    return ans"]]}
{"task_id": "HumanEval/123", "problem": [[0.9223209023475647, "def getOddCollatz(n):\n    \"\"\"\n    Function to get odd numbers in the Collatz sequence of n\n    \"\"\"\n    collatz = collatzSequence(n)\n    collatz = [i for i in collatz if i % 2 != 0]\n    collatz.sort()\n    return collatz\n    \n    def getPrimeCollatz(n):\n    \"\"\"\n    Function to get prime numbers in the Collatz sequence of n\n    \"\"\"\n    # Function to get prime numbers in the Collatz sequence of n\n    collatz = collatzSequence(n)\n    primes = generatePrimes(max(collatz))\n    collatz = [i for i in collatz if i in primes]\n    collatz.sort()\n    return collatz"], [0.9133251905441284, "def collatz(n):\n    \"\"\"\n    Returns the Collatz sequence starting at n and ending at 1.\n    \n    >>> collatz(1)\n    [1]\n    >>> collatz(5)\n    [5, 16, 8, 4, 2, 1]\n    >>> collatz(10)\n    [10, 5, 16, 8, 4, 2, 1]\n    \"\"\"\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sequence"], [0.9110569953918457, "def collatz(n):\n    \"\"\"\n    Return a tuple (sequence, steps) where sequence is a list of integers\n    and steps is the number of steps to reach 1.\n    \"\"\"\n    collatz_dict = {1: ([1], 0)}\n    if n == 1:\n        return collatz_dict[1]\n    else:\n        return collatz_helper(n)\n    \n    def collatz_helper(n):\n    \"\"\"\n    Return a tuple (sequence, steps) where sequence is a list of integers\n    and steps is the number of steps to reach 1.\"\"\"\n    if n not in collatz_dict:\n        if n % 2 == 0:\n            sequence, steps = collatz(n//2)\n            collatz_dict[n] =  ([n] + sequence, steps + 1)\n        else:\n            sequence, steps = collatz(3*n + 1)\n            collatz_dict[n] =  ([n] + sequence, steps + 1)\n    return collatz_dict[n]"], [0.9094589352607727, "def collatz(n):\n    \"\"\"\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows:\n\n    start with any positive integer n\n    if n is even, divide n by 2 to get n / 2\n    if n is odd, multiply n by 3 and add 1, to get 3n + 1\n    continue this process indefinitely\n    The conjecture is that no matter what value of n, the sequence will reach 1.\n\n    Implement a function collatz() that takes in one integer argument n and returns the number of steps required to reach 1.\n    \"\"\"\n    steps = 0\n    highest_number = n\n    while n != 1:\n        print(n)\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3*n + 1\n        if n > highest_number:\n            highest_number = n\n        steps += 1\n    print(n)\n    return steps, highest_number"], [0.9055607914924622, "def collatz(n):\n    \"\"\"\n    Return the collatz sequence starting at n and ending at 1.\n    \n    Args:\n        n (int): Starting value of the collatz sequence.\n    \n    Returns:\n        list: Collatz sequence starting at n and ending at 1.\n    \n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    elif n <=0:\n        raise ValueError(\"Input must be a positive integer.\")\n    else:\n        sequence = []\n        while n != 1:\n            sequence.append(n)\n            n = n / 2 if n % 2 == 0 else 3*n + 1\n        sequence.append(1)\n\n    return sequence"]]}
{"task_id": "HumanEval/124", "problem": [[0.9189660549163818, "def validDate(date): \n    \"\"\"\n    Check if the date is valid\n    :param date: date to check\n    :return: True if the date is valid, False otherwise\n    \"\"\"\n    # Regex to check valid date format \n    regex = r\"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\"\n    p = re.compile(regex) \n  \n    # If the date is not matched with regex \n    if(re.search(p, date) == None): \n        return False\n    else: \n        mm,dd,yyyy = map(int,date.split('-'))\n         \n        if is_leap_year(yyyy) and mm==2 and dd>29:\n            return False\n        if not is_leap_year(yyyy) and mm==2 and dd>28:\n            return False\n        if dd>monthrange(yyyy,mm)[1]:\n            return False\n        return True"], [0.9145088195800781, "def validate(date): \n    \"\"\"\n    Check if the date is valid or not\n    :param date: date to validate\n    :return: True if date is valid else False\n    \"\"\"\n    # Regex to check valid date format \n    regex_= \"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\"\n    p = re.compile(regex)\n\n    # If the date is not matched with regex \n    if(re.search(p, date) == None): \n        return False\n    else: \n        mm,dd,yyyy = map(int,date.split('-'))\n\n        if is_leap_year(yyyy) and mm==2 and dd>29:\n            return False\n        if not is_leap_year(yyyy) and mm==2 and dd>28:\n            return False\n        if dd>monthrange(yyyy,mm)[1]:\n            return False\n        return True"]]}
{"task_id": "HumanEval/125", "problem": [[0.8996844291687012, "def count_words(lst):\n    \"\"\"Count the number of words in a list of strings.\n    \n    >>> count_words(['hello', 'world'])\n    2\n    >>> count_words(['hello', 'world', 'hello'])\n    3\n    >>> count_words(['hello', 'world', 'hello', 'world'])\n    4\n    >>> count_words(['hello', 'world', 'hello', 'world', 'hello'])\n    5\n    >>> count_words(['hello', 'world', 'hello', 'world', 'hello', 'world'])\n    6\n    >>> count_words(['hello', '\"\"\"\n    return sum(1 for item in lst if item.startswith('a'))"], [0.8970270156860352, "def count_words(s):\n    \"\"\"\n    Count the number of words in a string.\n    \n    >>> count_words(\"Hello, world!\")\n    2\n    >>> count_words(\"Hi\")\n    1\n    \"\"\"\n    words = s.split(' ')\n    count = 0\n    for word in words:\n        if word != '':\n            count += 1\n    return count"], [0.8968707323074341, "def parse_details(s):\n    '''\n    Given a string s, split it into a list of words divided by either a comma or a colon. \n    If neither exist, return the total count of lower-case alphabetic characters that \n    have an odd ASCII value in the string.\n    '''\n    if ',' in s:\n        return s.split(',')\n    elif ':' in s:\n        return s.split(':')\n    else:\n        return len([i for i in s if i.islower() and ord(i) % 2 == 1])"]]}
{"task_id": "HumanEval/126", "problem": [[0.9436646699905396, "def is_sorted(lst):\n    \"\"\"\n    Returns True if the list is sorted in ascending order and False otherwise.\n    \n    >>> is_sorted([1, 2, 2])\n    True\n    >>> is_sorted(['b', 'a'])\n    False\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"], [0.9436306953430176, "def is_sorted(lst):\n    \"\"\"\n    Returns True if the list is sorted in ascending order and False otherwise.\n    \n    >>> is_sorted([1, 2, 2])\n    True\n    >>> is_sorted(['b', 'a'])\n    False\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"], [0.9406965970993042, "def is_sorted(lst):\n    \"\"\"\n    Returns True if the list is sorted in ascending order and False otherwise.\n    \n    >>> is_sorted([1, 2, 2])\n    True\n    >>> is_sorted(['b', 'a'])\n    False\n    \"\"\"\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"], [0.9313151836395264, "def is_sorted_asc(lst):\n    \"\"\"\n    Return True if the given list is sorted in ascending order and False otherwise.\n    \n    >>> is_sorted_asc([1, 2, 2])\n    True\n    >>> is_sorted_asc([2, 1, 2])\n    False\n    >>> is_sorted_asc([1, 2, 3])\n    True\n    >>> is_sorted_asc([3, 2, 1])\n    False\n    \"\"\"\n    return all(a <= b for a, b in zip(lst, lst[1:]))"], [0.9303023815155029, "def is_sorted(arr):\n    \"\"\"\n    Returns True if the given array is sorted in ascending order.\n    \n    >>> is_sorted([1, 2, 2])\n    True\n    >>> is_sorted(['b', 'a'])\n    False\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"], [0.929305374622345, "def is_sorted_ascending(numbers):\n    \"\"\"\n    Check if a list of numbers is sorted in ascending order.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i+1]:\n            return False\n    return True\n    def is_sorted_ascending(numbers):\n    \"\"\"\n    Check if a list of numbers is sorted in ascending order.\n    \"\"\"\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i+1]:\n            return False\n    return True"], [0.926800012588501, "def is_sorted(lst):\n    \"\"\"\n    Check if a list is sorted in ascending order.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Base case: if the list is empty, it is considered sorted\n    if not lst:\n        return True\n\n    # Compare the first two elements\n    if lst[0] > lst[1]:\n        return False\n\n    # Recursively call the function with the remaining elements in the list\n    return is_sorted(lst[1:])"], [0.9266473054885864, "def is_sorted_ascending(nums):\n   \"\"\"\n   Return True if the given list of numbers is sorted in ascending order.\n   :param nums: a list of integers\n   :return: True if the given list is sorted in ascending order\n   \"\"\"\n   return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))\n    def is_sorted_ascending(nums):\n   \"\"\"\n   Return True if the given list of numbers is sorted in ascending order.\n   :param nums: a list of integers\n   :return: True if the given list is sorted in ascending order\n   \"\"\"\n   return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))"], [0.9261072874069214, "def is_sorted(lst):\n    \"\"\"\n    Check if a list is sorted in ascending order.\n    \n    Args:\n        lst (list): The list to be checked.\n    \n    Returns:\n        bool: True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n    \n    # Check if the list contains any duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True"]]}
{"task_id": "HumanEval/127", "problem": [[0.898186445236206, "def prime_numbers(start, end):\n    \"\"\"\n    Returns a list of prime numbers between start and end (inclusive).\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \"\"\"\n    # Base case\n    if start > end:  \n        return []\n    else:\n        # Recursive case\n        if is_prime(start):  \n            return [start] + prime_numbers(start + 1, end) \n        else:  \n            return prime_numbers(start + 1, end)"], [0.8955169916152954, "def prime_numbers(x, y, z):\n    \"\"\"\n    Find all prime numbers between x and y.\n    If z is True, include x and y in the list.\n    If z is False, exclude x and y from the list.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \"\"\"\n    primes = []\n    if z:\n        if is_prime(x):\n            primes.append(x)\n        if is_prime(y):\n            primes.append(y)\n    else:\n        x += 1\n        y -= 1\n    for num in range(x, y + 1):\n        if is_prime(num):\n            primes.append(num)\n    return primes"]]}
{"task_id": "HumanEval/128", "problem": [[0.957078218460083, "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, return the product of the magnitudes of all prime numbers in the array, multiplied by the sign of the sum of all prime numbers in the array.\n    \n    If there are no prime numbers in the array, return None.\n    \n    The sign of a number is:\n    \n    1 if the number is positive\n    -1 if the number is negative\n    0 if the number is 0\n    \n    Examples\n    prod_signs([1, 2, 3, 4]) \u279e 6\n    \n    prod_signs([1\"\"\"\n    unique_primes = set()\n    for i in arr:\n        if is_prime(abs(i)):\n            unique_primes.add(i)\n    if not unique_primes:\n        return None\n    summed_magnitudes = sum(abs(x) for x in unique_primes)\n    multiplied_signs = sign(sum(sign(x) for x in unique_primes))\n    return summed_magnitudes * multiplied_signs"], [0.9558929204940796, "def prod_signs(arr):\n    \"\"\"\n    Given an array arr made up of non-zero integers (size between 1 to 500), return the product of the signs (represented as 1, -1, or 0) of all unique digits and the sum of their corresponding absolute values. If arr is empty or contains values greater than 500, return None.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == None\n    >>> prod_signs([]) == None\n    >>> prod_signs([501, 1]) == None\n    \"\"\"\n    if not arr or len(arr) > 500 or any(abs(x) > 500 for x in arr):\n        return None\n\n    arr = [x for x in arr if x != 0]  # remove zero\n    unique_arr = list(set(arr))  # remove duplicates\n\n    sign_product = 1\n    sum_ = 0\n\n    for x in unique_arr:\n        sign_product *= (1 if x > 0 else -1)\n        sum_ += abs(x)\n\n    return sign_product * sum_"], [0.9527512788772583, "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, return the product of all the elements in the array,\n    ignoring any zeros. If there are no non-zero elements, return None.\n    \n    >>> prod_signs([1, 2, 3, 4])\n    12\n    >>> prod_signs([1, 2, 0, 4])\n    None\n    >>> prod_signs([0, 0, 0, 0])\n    None\n    >>> prod_signs([0, 1, 2, 3])\n    None\n    <|file_separator|>\"\"\"\n    if not arr or 0 in arr:\n        return None\n\n    distinct_arr = list(set(arr))\n    signs_prod = 1\n\n    for num in distinct_arr:\n        signs_prod *= (1 if num > 0 else -1)\n\n    sum_abs = sum(abs(num) for num in distinct_arr)\n\n    return signs_prod * sum_abs"], [0.9524534940719604, "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, return the product of all the signs of the numbers in the array.\n    \n    For example, given the array [1, -2, 3, -4], return -24.\n    \n    You can assume the array will not be empty.\n    \"\"\"\n    primes = [x for x in arr if is_prime(abs(x))]\n    if not primes: return None\n    sums = sum(abs(p) * (1 if p > 0 else -1) for p in set(primes))\n    return sums"], [0.9488802552223206, "def prod_signs(arr):\n\"\"\"\n    This function calculates the product of all elements in an array.\n    \n    Parameters:\n    arr (list): The input array.\n    \n    Returns:\n    int or None: The product of all elements in the array, or None if the array is empty or contains a zero.\n    \n    Example:\n    >>> prod_signs([1, 2, 3, 4, 5])\n    120\n    >>> prod_signs([1, -2, 3, -4, 5])\n    -120\n    >>> prod_signs\"\"\"\n\n    if not arr:  # condition for empty array\n        return None\n    \n    val, sign = 0,1\n\n    for num in arr:\n        if num == 0:  # condition for existence of zero in array\n            return None\n        else:   # calculate sum of values multiplied by sign.\n            val += abs(num)*(1 if num>0 else -1)\n    return val "], [0.9485249519348145, "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, return the product of all the elements in the array.\n    If the array is empty, return None.\n    If the array contains a zero, return 0.\n    \"\"\"\n    # Write your code here\n    \"\"\"\n    Given an array of integers, return the product of all the elements in the array.\n    If the array is empty, return None.\n    If the array contains a zero, return 0.\n    \"\"\"\n    if not arr:  # check for empty list\n        return None\n\n    if 0 in arr:  # check if the array contains a zero\n        return None\n\n    signs = 1\n    unique_set = set()\n\n    for num in arr:\n        # convert to absolute\n        abs_num = abs(num)\n\n        # calculate product of unique abosultes\n        if abs_num not in unique_set:\n            unique_set.add(abs_num)\n            signs = signs * abs_num if num > 0 else -1 * signs * abs_num\n\n    return signs"], [0.9473488330841064, "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, return the product of distinct signs of the array elements and sum of distinct absolute values of the array elements.\n    If the array contains 0, return None.\n    \n    Args:\n        arr (list): An array of integers.\n    \n    Returns:\n        int: The product of distinct signs of the array elements and sum of distinct absolute values of the array elements.\n    \"\"\"\n    if not arr: return None\n    distinct_signs_product = 1  # initial product of distinct signs\n    distinct_absolute_sums = 0  # initial sum of distinct absolute values\n    distinct_elements = set()  # a set to keep track of encountered distinct elements\n\n    for n in arr:\n        if n == 0:  # ignore 0 as per requirement\n            return None  # whenever a 0 is encountered, the function should return None as per requirement\n        absolute_value = abs(n)  # absolute value of the current number\n        if absolute_value in distinct_elements:\n            continue  # if this absolute value has been encountered before, ignore it\n        distinct_elements.add(absolute_value)  # mark this absolute value as encountered\n        sign = n/absolute_value  # sign of the current number\n        distinct_signs_product *= sign  # update the product of distinct signs\n        distinct_absolute_sums += absolute_value  # update the sum of distinct absolute values\n      \n    return distinct_signs_product*distinct_absolute_sums  # return the product as per requirement"], [0.9464897513389587, "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, return the product of all the elements in the array.\n    If the array is empty, return None.\n    If any of the elements is not an integer, return None.\n    If any of the elements is a string, return None.\n    If any of the elements is a list, flatten it and multiply the elements.\n    If any of the elements is a tuple, flatten it and multiply the elements.\n    If any of the elements is a set, flatten it and multiply the elements.\n    If any of the elements is a dictionary, flatten it and multiply\"\"\"\n    if not arr or not all(isinstance(i, (int, list)) for i in arr):\n        return None\n    flat_arr = flatten(arr)\n    if any(isinstance(i, str) for i in flat_arr):\n        return None\n    unique_values = set(abs(i) for i in flat_arr if i != 0)\n    total = sum(unique_values)\n    sign = multiply_signs(flat_arr)\n    return None if 0 in flat_arr else total * sign"], [0.9461845755577087, "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, return the product of all the elements.\n    \n    You can assume that the array is not empty.\n    \n    Example 1:\n    \n    Input: [1, 2, 3, 4, 5]\n    Output: 120\n    \n    Example 2:\n    \n    Input: [2, 5, 0, 3]\n    Output: 0\n    \n    Example 3:\n    \n    Input: [1, 2, 3, 4, 5]\"\"\"\n    if len(arr) == 0 or (len(arr) == 1 and arr[0] == 0):\n        return None\n    \n    result = 0\n    total_sign = 1\n    seen = set()\n    \n    for num in arr:\n        if num != 0:\n            sign = 1 if num > 0 else -1\n            total_sign *= sign\n            seen.add(abs(num))\n            \n    result = total_sign * sum(seen)\n    return result"], [0.9442607760429382, "def prod_signs(arr):\n    \"\"\"\n    Given an array of integers, return the product of the signs of the numbers\n    and the sum of the absolute values of the numbers.\n    \n    Parameters\n    ----------\n    arr : list\n        The array of integers.\n    \n    Returns\n    -------\n    int\n        The product of the signs of the numbers and the sum of the absolute\n        values of the numbers.\n    \"\"\"\n    if not arr:  # returns None if array 'arr' is empty\n        return None\n    arr = list(set([i for i in arr if i != 0]))  # remove duplicates and zeros\n    if not arr:  # returns None if array 'arr' is empty after removing zeros\n        return None\n\n    sign_product = 1  # initialize the product of signs\n    abs_val_sum = 0  # initialize the summation variable\n\n    for i in arr:\n        sign_product *= (-1 if i < 0 else 1)  # compute the product of signs\n        abs_val_sum += abs(i)  # compute the sum of absolute values\n\n    return sign_product * abs_val_sum  # return the final result"]]}
{"task_id": "HumanEval/129", "problem": [[0.9429476857185364, "def minPath(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    n = len(grid)\n    visited = set()\n    heap = [(grid[0][0], 0, 0)]\n    res = []\n\n    while len(res) < k:\n        val, x, y = heapq.heappop(heap)\n        if (x, y) not in visited:\n            res.append(val)\n            visited.add((x, y))\n\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                    heapq.heappush(heap, (grid[nx][ny], nx, ny))\n\n    return sorted(res)"], [0.9407023191452026, "def minPath(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    n = len(grid)\n    \n    # Convert grid into priority queue with cell value as priority\n    pq = PriorityQueue()\n    for i in range(n):\n        for j in range(n):\n            pq.put((grid[i][j], (i, j)))\n    \n    # Get smallest k paths from priority queue\n    smallest_k_paths = []\n    for _ in range(k):\n        _, (i, j) = pq.get()\n        \n        # Perform BFS from this point to find shortest path\n        visited = [[False]*n for _ in range(n)]\n        visited[i][j] = True\n        q = deque([(i, j, [grid[i][j]])])\n        while q:\n            x, y, path = q.popleft()\n            \n            # If path length is k, add it to smallest_k_paths and break\n            if len(path) == k:\n                smallest_k_paths.append(sorted(path))\n                break\n            \n            # Visit all directions in counter-clockwise order\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if isValid(nx, ny, n) and not visited[nx][ny]:\n                    visited[nx][ny] = True\n                    q.append((nx, ny, path + [grid[nx][ny]]))\n    \n    return smallest_k_paths"], [0.9406327605247498, "def minPath(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    n = len(grid)\n    directions = [(-1,0), (0,-1), (1,0), (0,1)]\n    q, visited = [(grid[0][0], 0, 0)], set((0,0))\n    res = []\n\n    while len(res) < k and q:\n        dist, x, y = heapq.heappop(q)\n        res.append(dist)\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                heapq.heappush(q, (grid[nx][ny], nx, ny))\n\n    return sorted(res)[:k]"], [0.9404962062835693, "def minPath(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    # size of the grid\n    N = len(grid)\n    # Priority Queue\n    minheap = [(grid[0][0], 0, 0, [grid[0][0]])]\n    visited = set([(0, 0)])\n\n    # iterating over all the elements in Priority Queue\n    while minheap:\n        cost, i, j, path = heapq.heappop(minheap)\n        # checking if the path size is k\n        if len(path) == k:\n            return path[:k]\n        # checking all the neighbors of the current node\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < N and 0 <= y < N and (x, y) not in visited:\n                visited.add((x, y))\n                new_cost = cost + grid[x][y]\n                new_path = path + [grid[x][y]]\n                heapq.heappush(minheap, (new_cost, x, y, new_path))"], [0.9404431581497192, "def minPath(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    pq, path, visited, result = [], [], set(), []\n    n = len(grid)\n    # start from the left top cell\n    pq.append((grid[0][0], 0, 0))\n    while pq:\n        val, x, y = heapq.heappop(pq)\n        if (x, y) not in visited:\n            visited.add((x, y))\n            path.append(val)\n            # if we have visited 'k' cells, stop\n            if len(path) == k:\n                return path\n            # move to neighboring cells\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                # check if the new cell is within grid boundaries\n                if 0 <= new_x < n and 0 <= new_y < n:\n                    # add new cell to the priority queue\n                    heapq.heappush(pq, (grid[new_x][new_y], new_x, new_y))\n    # if the entire grid is traversed but we still have not visited 'k' cells,\n    # return the path so far\n    return path"], [0.940376877784729, "def minPath(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    pq, path, visited, result = [], [], set(), []\n    n = len(grid)\n    # start from the left top cell\n    pq.append((grid[0][0], 0, 0))\n    while pq:\n        val, x, y = heapq.heappop(pq)\n        if (x, y) not in visited:\n            visited.add((x, y))\n            path.append(val)\n            # if we have visited 'k' cells, stop\n            if len(path) == k:\n                return path\n            # move to neighboring cells\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                # check if the new cell is within grid boundaries\n                if 0 <= new_x < n and 0 <= new_y < n:\n                    # add new cell to the priority queue\n                    heapq.heappush(pq, (grid[new_x][new_y], new_x, new_y))\n    # if the entire grid is traversed but we still have not visited 'k' cells,\n    # then return the path so far\n    return path"], [0.9403154850006104, "def minPath(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    N = len(grid)\n    dists = [[float('inf')] * N for _ in range(N)]\n    spanned = [[False] * N for _ in range(N)]\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    pq = [(grid[0][0], 0, 0)]\n    \n    while pq:\n        d, r, c = heapq.heappop(pq)\n        if spanned[r][c]:\n            continue\n        spanned[r][c] = True\n        dists[r][c] = d\n        for move in moves:\n            nr, nc = r + move[0], c + move[1]\n            if 0 <= nr < N and 0 <= nc < N and not spanned[nr][nc]:\n                heapq.heappush(pq, (d + grid[nr][nc], nr, nc))\n                \n    path_values = sorted([val for sublist in dists for val in sublist])[:k]\n    return path_values"], [0.9403022527694702, "def minPath(grid,k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    if not grid or len(grid) == 0:\n        return []\n\n    N = len(grid)\n    M = len(grid[0])\n    if k < N * M:\n        return []\n\n    dp = [[0 for _ in range(N)] for __ in range(M)]\n    dp[0][0] = grid[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + grid[i][0]\n    for i in range(1, M):\n        dp[0][i] = dp[0][i - 1] + grid[0][i]\n\n    for i in range(1, M):\n        for j in range(1, N):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    \n    path = []\n    i, j= M - 1, N - 1\n    while len(path) < k:\n        path.append(grid[i][j])\n        if i > 0 and j > 0:\n            if dp[i - 1][j] < dp[i][j - 1]:\n                i -= 1\n            else:\n                j -= 1\n        elif i > 0:\n            i -= 1\n        elif j > 0:\n            j -= 1\n        else:\n            break\n\n    return sorted(path)"], [0.9387074708938599, "def minPath(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    heap_queue = [(grid[0][0], 0, 0, [grid[0][0]])]\n    visited = {(0, 0): grid[0][0]}\n    while heap_queue:\n        sum_, x, y, path = heapq.heappop(heap_queue)\n        if len(path) == k:\n            return path\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if nx < 0 or nx >= m or ny < 0 or ny >= n or (nx, ny) in visited and visited[nx, ny] <= sum_ + grid[nx][ny]:\n                continue\n            heapq.heappush(heap_queue, (sum_ + grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n            visited[nx, ny] = sum_ + grid[nx][ny]\n    return []"], [0.9382081031799316, "def pathFinder(grid, k):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type k: int\n    :rtype: List[int]\n    \"\"\"\n    n = len(grid)\n    directions = [(0,1), (0,-1), (1,0), (-1,0), (-1,-1), (-1,1), (1,-1), (1,1)]\n    heap = [(grid[0][0], 0, 0)]\n    visit = [[0 for _ in range(n)] for _ in range(n)]\n    visit[0][0] = 1\n    cell_values = []\n\n    while heap:\n        value, x, y = heapq.heappop(heap)\n        cell_values.append(value)\n        if len(cell_values) == k:\n            break\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visit[nx][ny]:\n                visit[nx][ny] = 1\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n\n    return sorted(cell_values[:k])"]]}
{"task_id": "HumanEval/130", "problem": [[0.9431739449501038, "def tri(n):\n    \"\"\"\n    Returns the first n terms of the tribonacci sequence.\n    \n    Args:\n        n (int): number of terms to return\n    \n    Returns:\n        list: first n terms of the tribonacci sequence\n    \"\"\"\n    sequence = []\n    if n < 0:\n        return sequence\n    if n >= 0:\n        sequence.append(3)\n    if n >= 2:\n        sequence.append(2)\n    if n >= 3:\n        sequence.append(sequence[-2] + sequence[-1] + 1)\n    for i in range(4, n+1):\n        if i%2==0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-2] + sequence[-1] + sequence[-3])\n    return sequence"], [0.9394316673278809, "def tribonacci(n):\n    \"\"\"\n    The tribonacci sequence is a generalization of the Fibonacci sequence where each number is the sum of the three previous ones.\n    The first three numbers are 0, 0, 1.\n    The next numbers are calculated like this:\n    tribonacci(n) = tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n    The function tribonacci(n) should return the nth number of the tribonacci sequence.\n    For example:\n    tribonacci(1) = 0\n    tri\"\"\"\n    sequence = [0, 0, 1]\n    while len(sequence) < n + 1:\n        sequence.append(sum(sequence[-3:]))\n    return sequence[n]"], [0.9270888566970825, "def tribonacci(n: int) -> int:\n    \"\"\"\n    The Tribonacci sequence Tn is defined as follows: \n    T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\n    Given n, return the value of Tn.\n    \n    Example 1:\n    Input: n = 4\n    Output: 4\n    Explanation:\n    T_3 = 0 + 1 + 1 = 2\n    T_4 = 1 + 1 + 2 = 4\n    \n\"\"\"\n    if n == 0: return 0\n    if n == 1 or n == 2: return 1\n    a, b, c = 0, 1, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c"], [0.9240311980247498, "def tribonacci(n: int, memo = {}):\n    \"\"\"\n    The Tribonacci sequence adheres to the following rules:\n    tribonacci(0) = 0\n    tribonacci(1) = 1\n    tribonacci(2) = 1\n    tribonacci(n) = tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3) for n > 2\n    tribonacci(n) = tribonacci(n+3) - tribonacci(n+2) - tribonacci(n+1) for n < 0\n\n    Apply dynamic programming and cache intermediate results using memoization for optimization.\n    >>> tribonacci(1)\n    1\n    >>> tribonacci(5)\n    7\n    >>> tribonacci(8)\n    44\n    >>> tribonacci(-1)\n    1\n    >>> tribonacci(-5)\n    -7\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    elif n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    elif n < 0:\n        result = tribonacci(n + 3, memo) - tribonacci(n + 2, memo) - tribonacci(n + 1, memo)\n    else:\n        result = tribonacci(n - 1, memo) + tribonacci(n - 2, memo) + tribonacci(n - 3, memo)\n        \n    memo[n] = result\n    return result"], [0.9239284992218018, "def fibonacci_three(n):\n    \"\"\"\n    Return the first n numbers in the fibonacci sequence.\n    \n    >>> fibonacci_three(10)\n    [0, 1, 1, 2, 4, 7, 13, 24, 44, 81]\n    \"\"\"\n    # handle base cases\n    if n<1:\n        return []\n    if n==1:\n        return [0]\n    if n==2:\n        return [0, 1]\n    if n==3:\n        return [0, 1, 1]\n\n    #generate the sequence\n    sequence = [0, 1, 1]\n    for i in range(3, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3]) \n\n    return sequence"]]}
{"task_id": "HumanEval/131", "problem": [[0.9347140789031982, "def product_of_digits(n):\n    \"\"\"\n    Given an integer n, return the product of all digits in the number.\n    \n    >>> product_of_digits(1234)\n    24\n    >>> product_of_digits(402)\n    8\n    >>> product_of_digits(123456789)\n    0\n    >>> product_of_digits(0)\n    0\n    \"\"\"\n    product = 1\n    if n > 0:\n        while n != 0:\n            digit = n % 10\n            product *= digit\n            n = n // 10\n    return product"], [0.9339938759803772, "def product_of_digits(n):\n    \"\"\"\n    Given an integer n, return the product of all digits in the number.\n    \n    >>> product_of_digits(1234)\n    24\n    >>> product_of_digits(402)\n    8\n    >>> product_of_digits(123456789)\n    0\n    >>> product_of_digits(0)\n    0\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        product *= digit\n        n //= 10\n    return product"], [0.9312758445739746, "def digits(n):\n    \"\"\"\n    Given an integer n, return the sum of the digits of n that are odd.\n    If the sum is greater than or equal to 10, then return the sum of the digits of the new number.\n    Keep repeating this process until the new number has only 1 digit.\n    \n    Example 1:\n    Input: n = 3456\n    Output: 5\n    Explanation: \n    The sum of the digits of n is 18. Since 18 >= 10, the sum of the digits of 18 is 9.\"\"\"\n    n = [int(i) for i in str(n)]\n    odd = [i for i in n if i % 2 != 0]\n    even = [i for i in n if i % 2 == 0]\n\n    if len(odd) == 0:  # all digits are even\n        half = len(even) // 2\n        product = 1\n        for num in even[:half]:\n            product *= num\n        return product\n\n    elif len(even) == 0:  # all digits are odd\n        half = len(odd) // 2\n        return sum(odd[:half])\n        \n    else:  # mix of odd and even digits\n        product = 1\n        for num in odd:\n            product *= num\n        return product + sum(even)"], [0.9307226538658142, "def digits(n):\n    \"\"\"\n    Given an integer n, return the sum of the even digits and the product of the odd digits in n.\n    \n    >>> digits(123456789)\n    48\n    >>> digits(2468)\n    24\n    >>> digits(13579)\n    12\n    \"\"\"\n    # convert the integer into a list of its digits\n    n = [int(i) for i in str(n)]\n    \n    # separate even and odd digits\n    evens = [i for i in n if i % 2 == 0]\n    odds  = [i for i in n if i % 2 != 0]\n    \n    # error checking in case the input number only has even or odd digits\n    if len(odds) == 0:\n        half = len(evens) // 2\n        product = 1\n        for i in range(half):\n            product *= evens[i]\n        return product\n    elif len(evens) == 0:\n        half = len(odds) // 2\n        return sum(odds[:half])\n    else:\n        # compute the product of odd digits and the sum of even ones\n        return sum(evens) + (eval('*'.join(str(i) for i in odds)))"], [0.930366039276123, "def prodDigits(n):\n    \"\"\"\n    Given a positive integer n, return the product of all digits in the number.\n    \n    >>> prodDigits(1234)\n    24\n    >>> prodDigits(402)\n    8\n    >>> prodDigits(123456789)\n    0\n    >>> prodDigits(0)\n    0\n    \"\"\"\n    product = 1\n    for d in str(n):\n        product *= int(d)\n    return product"], [0.9301921129226685, "def product_of_digits(n):\n    \"\"\"\n    Given an integer n, return the product of all digits in the number.\n    \n    >>> product_of_digits(1234)\n    24\n    >>> product_of_digits(402)\n    8\n    >>> product_of_digits(123456789)\n    0\n    >>> product_of_digits(0)\n    0\n    \"\"\"\n    product = 1\n    for num in n:\n        while num != 0:\n            product *= num % 10\n            num //= 10\n    return product"], [0.9260784983634949, "def product_of_odds(lst):\n    \"\"\"\n    Given a list of integers, return the product of all odd numbers.\n    \n    >>> product_of_odds([1, 2, 3, 4, 5])\n    15\n    >>> product_of_odds([4, 5, 6, 7, 8, 9])\n    9\n    \"\"\"\n    result = 1\n    for num in lst:\n        if num % 2 != 0:\n            result *= num\n    return result"], [0.9228826761245728, "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the sum of all even digits and the product of all odd digits in n.\n    \n    Example 1:\n    Input: n = 3485\n    Output: 12\n    Explanation: The even digits are 4 and 8, and their sum is 12.\n    \n    Example 2:\n    Input: n = 247\n    Output: 2\n    Explanation: The only odd digit is 7, and its factorial is 2.\n    \n    Example 3:\n    Input:\"\"\"\n    str_n = str(n)\n    even_digits = [int(i) for i in str_n if int(i) % 2 == 0]\n    odd_digits = [int(i) for i in str_n if int(i) % 2 != 0]\n    \n    if not even_digits and odd_digits:  # all digits are odd\n        half = len(odd_digits) // 2\n        return factorial(sum(odd_digits[:half]))\n    elif not odd_digits and even_digits:  # all digits are even\n        half = len(even_digits) // 2\n        return math.sqrt(math.prod(even_digits[:half]))\n    else:\n        return sum([i**2 for i in even_digits]) + sum([factorial(i) for i in odd_digits])"], [0.9211040139198303, "def product_of_digits(num):\n    \"\"\"\n    Given an integer, return the product of all the digits in the number.\n    \n    >>> product_of_digits(1234)\n    24\n    >>> product_of_digits(602)\n    12\n    \"\"\"\n    product = 1\n    for digit in str(num):\n        product *= int(digit)\n    return product"], [0.9173450469970703, "def product_of_odd_numbers(numbers, product=1):\n    \"\"\"\n    Returns the product of all odd numbers in a list.\n    \n    >>> product_of_odd_numbers([1, 2, 3, 4, 5])\n    15\n    >>> product_of_odd_numbers([4, 3, 10, 20, 5, 6])\n    15\n    >>> product_of_odd_numbers([10, 15, 20, 2, 5])\n    15\n    \"\"\"\n    if not numbers:\n        return round(product)\n    elif 10 < numbers[0] < 20 and numbers[0] % 2 != 0:\n        return product_of_odd_numbers(numbers[1:], product * numbers[0])\n    else:\n        return product_of_odd_numbers(numbers[1:], product)"]]}
{"task_id": "HumanEval/132", "problem": [[0.9119871854782104, "def is_nested(string):\n    \"\"\"\n    This function checks for the balance and proper nesting of brackets.\n    If the brackets are not properly nested or balanced, it returns the position of the error.\n    \"\"\"\n    stack = []\n    brackets_map = {\"(\":\")\", \"[\": \"]\", \"{\": \"}\", \"<\": \">\"}\n\n    for index, character in enumerate(string, start=1):\n        if character in brackets_map:  # encountered an open bracket\n            stack.append(character)\n        elif character in brackets_map.values():  # encountered a close bracket\n            if not stack or brackets_map[stack.pop()] != character:\n                return False, f\"Position {index}\"\n        else:\n            return False, f\"Position {index} - Invalid character {character}\"\n\n    # If the stack is empty then brackets were balanced\n    return (not stack, None) if not stack else (False, f\"Position {len(string)} - unmatched {stack[-1]}\")"], [0.9083614349365234, "def is_nested_and_balanced(s):\n    \"\"\"\n    \"\"\"\n    stack = []\n    openers_to_closers = {\n        '(': ')',\n        '[': ']',\n        '{': '}',\n        '<': '>',\n    }\n    closers = set(openers_to_closers.values())\n\n    for char in s: \n        if char in openers_to_closers:\n            stack.append(char)\n        elif char in closers:\n            if not stack: \n                return False\n            else: \n                last_unclosed_opener = stack.pop()\n                if not char == openers_to_closers[last_unclosed_opener]:\n                    return False\n\n    return stack == [] # stack should be empty at the end"], [0.9082558751106262, "def is_nested(string):\n    \"\"\"\n    Check if a string has balanced brackets.\n    \n    Args:\n        string (str): string to check\n    \n    Returns:\n        tuple: (boolean, str)\n    \"\"\"\n    stack = []\n    brackets = {'(': ')', '[': ']', '{': '}', '<': '>'}\n    for i, char in enumerate(string):\n        if char in brackets:\n            stack.append((char, i))\n        elif len(stack) == 0 or brackets[stack.pop()[0]] != char:\n            return False, 'Position ' + str(i)\n    return (len(stack) == 0, None) if len(stack) == 0 else (False, 'Position ' + str(stack[0][1]))"], [0.9062117338180542, "def complex_brackets(lst):\n    \"\"\"\n    Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n    An input string is valid if:\n    Open brackets must be closed by the same type of brackets.\n    Open brackets must be closed in the correct order.\n    Note that an empty string is also considered valid.\n    Example 1:\n    Input: \"()\"\n    Output: true\n    Example 2:\n    Input: \"()[]{}\"\n    Output: true\n    Example 3:\n    Input: \"(]\"\n    Output\"\"\"\n    brackets = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    }\n    input_string = ''.join(lst)\n    stack = []\n    for bracket in input_string:\n        if bracket in brackets.values():   # for any open bracket, we push it into the stack\n            stack.append(bracket)\n        elif bracket in brackets.keys():   # for any close bracket\n            if stack == [] or brackets[bracket] != stack.pop(): # if the stack is empty or if the last open bracket does not match the current close bracket then the brackets are not balanced\n                return False\n    return stack == []   # after going through all brackets, if there is any open bracket left in the stack then the brackets are not well balanced"]]}
{"task_id": "HumanEval/133", "problem": [[0.9320711493492126, "def add_squared_values(lst):\n    \"\"\"\n    Return the sum of the squares of the values in the list.\n    \n    >>> add_squared_values([1, 2, 3])\n    14\n    \"\"\"\n    # Apply math.ceil function to take ceiling value of absolute of each number in the list.\n    # Then square and sum them up.\n    return sum(map(lambda x: math.ceil(abs(x)) ** 2, lst))"], [0.9173702597618103, "def sum_of_squares(lst):\n    \"\"\"\n    Return the sum of the squares of the numbers in the list.\n    >>> sum_of_squares([1, 2, 3])\n    14\n    >>> sum_of_squares([1, 2, 3, 4])\n    30\n    \"\"\"\n    return sum([num**2 for num in lst])"], [0.9173552989959717, "def sum_of_squares(lst):\n    \"\"\"\n    Return the sum of the squares of the numbers in the list.\n    >>> sum_of_squares([1, 2, 3])\n    14\n    >>> sum_of_squares([1, 2, 3, 4])\n    30\n    \"\"\"\n    return sum([num**2 for num in lst])"]]}
{"task_id": "HumanEval/134", "problem": [[0.9041742086410522, "def last_char_is_vowel(word):\n    \"\"\"\n    Return True if the last letter of a word is a vowel, False otherwise.\n    \n    >>> last_char_is_vowel('apple')\n    True\n    >>> last_char_is_vowel('banana')\n    False\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_char = word[-1].lower()\n    return last_char in vowels"], [0.9011815786361694, "def ends_with_letter(word):\n    \"\"\"\n    Returns True if the word ends with a letter, False otherwise.\n    \"\"\"\n    return word.endswith(letter)\n    def ends_with_letter(word):\n    \"\"\"\n    Returns True if the word ends with a letter, False otherwise.\n    \"\"\"\n    return word.endswith(letter)"], [0.8970685005187988, "def check_words(my_string):\n    \"\"\"\n    Check if all words in a string start and end with the same letter.\n    \n    >>> check_words('banana')\n    True\n    >>> check_words('banana banana')\n    False\n    >>> check_words('banana banana banana')\n    False\n    >>> check_words('banana banana banana banana')\n    True\n    >>> check_words('banana banana banana banana banana')\n    False\n    >>> check_words('banana banana banana banana banana banana')\n    True\n    >>> check_words('banana banana banana banana banana banana banana')\n    False\n    >>> check\"\"\"\n    word_list = my_string.split()\n    for word in word_list:\n        if word[0] != word[-1]:\n            return False\n    return True"], [0.8932734727859497, "def check_words(s):\n    \"\"\"\n    Check if all words in a string have the same first and last letter.\n    \n    >>> check_words('banana')\n    True\n    >>> check_words('banana banana')\n    False\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if word[0] != word[-1]:\n            return False\n    return True"], [0.8907321095466614, "def has_penultimate_t(words):\n    \"\"\"\n    Return True if the penultimate letter of any word in the list of words is 't'.\n    \n    >>> has_penultimate_t(['test', 'testt', 't'])\n    True\n    >>> has_penultimate_t(['test', 'testt', 'tt'])\n    False\n    \"\"\"\n    for word in words:\n        if len(word) >= 2 and word[-2].lower() == 't':\n            return True\n    return False"], [0.8879511952400208, "def check_word(word):\n    \"\"\"\n    Check if a word contains at least two e's,\n    except the first and last characters do not count.\n    \n    check_word('free') \u2192 True\n    check_word('xxrexx') \u2192 True\n    check_word('yxxrexx') \u2192 False\n    \"\"\"\n    if len(word) >= 2 and word[1] == 'e' and word[-2] == 'e':\n        return True\n    return False"]]}
{"task_id": "HumanEval/135", "problem": [[0.9190825819969177, "def can_arrange(arr):\n    \"\"\"\n    Given an array of integers, determine if it is possible to rearrange the array such that it is sorted in ascending order.\n    If it is possible, return an array of the indices of the elements that need to be swapped. If it is not possible, return an empty array.\n    \n    Example:\n    Input: [2, 1, 3, 4]\n    Output: [1, 2]\n    Explanation: Swap elements at indices 1 and 2 to get [2, 3, 1, 4], which is sorted in ascending order.\n    \n\"\"\"\n    # Initialize the results as -1 indicating missing elements\n    result = {'index': -1, 'swap_with': -1}\n\n    # Iterate over the array using enumerate to get both index and value\n    for i, num in enumerate(arr):\n        # Exclude the last element as we can't check the next element for it\n        if i != len(arr) - 1:\n            # Check if current element is greater than the next one\n            if num > arr[i + 1]:\n                # Update result['index']\n                result['index'] = i + 1\n                # Identifying the index of the next smaller item that could potentially be swapped \n                for j in range(i + 1, -1, -1):\n                    if arr[j] < arr[result['index']]:\n                        result['swap_with'] = j\n                        break\n    return result"], [0.9129917025566101, "def can_arrange(arr):\n    \"\"\"\n    \"\"\"\n    swaps, candidate, candidate_lexiographical = 0, None, None\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i - 1] > arr[i]:\n\n            swaps += 1\n            \n            if candidate is None or arr[candidate] > arr[i - 1]:\n                candidate = i - 1\n                candidate_lexiographical = i\n\n            elif arr[i] < arr[candidate]:\n                candidate_lexiographical = i\n\n    if candidate is None:\n        return {'index': -1, 'swap_with': -1, 'total_swaps': 0}\n    else:\n        return {'index': candidate, 'swap_with': candidate_lexiographical, 'total_swaps': swaps}"], [0.9120304584503174, "def can_arrange(arr):\n    \"\"\"\n    \"\"\"\n    total_swaps = 0\n    for index in range(1, len(arr)):\n        if arr[index] < arr[index - 1]:\n            # Find the maximum element which is smaller than arr[index - 1].\n            # It would be the right candidate for swap.\n            swap_with = max((v, i) for i, v in enumerate(arr) if v < arr[index - 1])\n            arr[swap_with[1]], arr[index - 1] = arr[index - 1], arr[swap_with[1]]\n            total_swaps += 1\n            return {\n                'index': index,\n                'swap_with': swap_with[1],\n                'total_swaps': total_swaps,\n            }\n\n    return {'index': -1, 'swap_with': -1, 'total_swaps': 0}"], [0.9107561111450195, "def can_arrange(arr):\n    \"\"\"\n    \"\"\"\n    n = len(arr)\n    index = -1\n    res = {'index': index, 'swap_with': -1, 'num_swaps': 0}\n\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            index = i\n            break\n\n    if index != -1:\n        for j in range(index + 1, n):\n            if arr[j] <= arr[index]:\n                res['swap_with'] = j\n\n        if res['swap_with'] != -1:\n            arr[index], arr[index + 1] = arr[index + 1], arr[index]  # Swap elements with next one\n        else:\n            arr[index], arr[res['swap_with']] = arr[res['swap_with']], arr[index]  # Swap elements\n\n        res['index'] = index\n        res['num_swaps'] = 1\n\n    return res"], [0.9097989797592163, "def can_arrange(arr):\n    \"\"\"\n    \"\"\"\n    last_checked_index = -1\n    total_swaps = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            last_checked_index = i - 1\n            break\n    if last_checked_index == -1:\n        return {'index': -1, 'swap_with': -1, 'total_swaps': 0}\n    swap_with_index = -1\n    for i in range(last_checked_index + 1, len(arr)):\n        if arr[i] > arr[last_checked_index]:\n            swap_with_index = i\n            break\n    if swap_with_index != -1:\n        total_swaps += 1\n    return {'index': last_checked_index, 'swap_with': swap_with_index, 'total_swaps': total_swaps}"], [0.9070905447006226, "def can_arrange(arr):\n    \"\"\"\n    \"\"\"\n    n = len(arr)\n    index = -1\n    swap_with = -1\n    numOfSwaps = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            index = i\n            break\n    if index != -1:\n        for i in range(n-1, -1, -1):\n            if arr[i] < arr[index]:\n                swap_with = i\n                numOfSwaps = abs(swap_with - index)\n                break\n    return {'index': index, 'swap_with': swap_with, 'num_swaps': numOfSwaps}"], [0.9065263867378235, "def can_arrange(arr):\n    \"\"\"\n    Given an array of integers, determine the minimum number of swaps required to sort the array in ascending order.\n    \n    For example, given the array arr = [7, 1, 3, 2, 4, 5, 6], we make the following three swaps to sort the array:\n    \n    Swap    Array\n    0       [7, 1, 3, 2, 4, 5, 6]\n    1       [7, 1, 3, 2, 4, 5, 6]\n    2       \"\"\"\n    n = len(arr)\n    swap_index = -1\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            swap_index = i-1\n            break\n    if swap_index == -1:\n        return {'index': -1, 'swap_with': -1, 'total_swaps': 0, 'swapped_elements': []}\n    else:\n        swap_with = -1\n        for i in range(swap_index+1, n):\n            if arr[i] > arr[swap_index] and (swap_with == -1 or arr[i] < arr[swap_with]):\n                swap_with = i\n        swapped_elements = [arr[swap_index], arr[swap_with]]\n        arr[swap_index], arr[swap_with] = arr[swap_with], arr[swap_index]\n        return {'index': swap_index, 'swap_with': swap_with, 'total_swaps': 1, 'swapped_elements': swapped_elements}"], [0.9062120914459229, "def can_arrange(arr):\n    \"\"\"\n    \"\"\"\n    num_swaps, largest_index, swap_with, inversions = 0, -1, -1, 0\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n            swap_with = i\n            num_swaps += 1\n            inversions += 1\n            \n    if num_swaps == 0:\n        return {'index': largest_index, 'swap_with': swap_with, 'num_swaps': num_swaps, 'inversions': inversions}\n    \n    for i in range(largest_index-1, -1, -1):\n        if arr[i] > arr[swap_with]:\n            swap_with = i\n            num_swaps += 1\n        else:\n            break\n            \n    return {'index': largest_index, 'swap_with': swap_with, 'num_swaps': num_swaps, 'inversions': inversions}"], [0.9055923819541931, "def can_arrange(arr):\n    \"\"\"\n    \"\"\"\n    num_swaps, largest_index, swap_with, inversions = 0, -1, -1, 0\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            largest_index = i - 1\n            swap_with = i\n            num_swaps += 1\n            inversions += 1\n\n    if num_swaps == 0:\n        return {'index': largest_index, 'swap_with': swap_with, 'num_swaps': num_swaps, 'inversions': inversions}\n\n    for i in range(largest_index - 1, -1, -1):\n        if arr[i] > arr[swap_with]:\n            swap_with = i\n            num_swaps += 1\n        else:\n            break\n\n    return {'index': largest_index, 'swap_with': swap_with, 'num_swaps': num_swaps, 'inversions': inversions}"]]}
{"task_id": "HumanEval/136", "problem": [[0.9590673446655273, "def largest_smallest_integers(lst):\n    \"\"\"\n    Given a list of integers, return the largest and smallest integers,\n    in that order.\n    \n    >>> largest_smallest_integers([1, 2, 3, 4, 5])\n    [5, 1]\n    >>> largest_smallest_integers([1, 2, -3, 4, 5])\n    [5, -3]\n    >>> largest_smallest_integers([1, 2, 3, 4, -5])\n    [4, -5]\n    >>> largest_smallest_integers([1, \"\"\"\n    neg = sorted([n for n in lst if n < 0], reverse=True)[0] if any(n < 0 for n in lst) else None\n    pos = sorted([n for n in lst if n > 0])[0] if any(n > 0 for n in lst) else None\n    return [neg, pos]"], [0.9563831686973572, "def largest_smallest_integers(lst):\n    \"\"\"\n    Given a list of integers, return the largest negative integer, the smallest positive integer, the largest odd integer, and the smallest even integer.\n    If any of the integers cannot be found, return None for that position.\n    \n    >>> largest_smallest_integers([1, 2, 3, 4, 5, 6])\n    (None, 1, 5, 2)\n    >>> largest_smallest_integers([1, 2, 3, 4, -5, -6])\n    (-5, 1, None, 2)\"\"\"\n    \n    if not lst:\n        return (None, None, None, None)\n\n    all_negative = list(filter(lambda x: x<0, lst))\n    all_non_negative = list(filter(lambda x: x>=0, lst))\n    \n    negative_even = [i for i in all_negative if i%2==0]\n    negative_odd = [i for i in all_negative if i%2!=0]\n    non_negative_even = [i for i in all_non_negative if i%2==0]\n    non_negative_odd = [i for i in all_non_negative if i%2!=0]\n    \n    a = max(negative_even) if negative_even else None\n    b = min(non_negative_even) if non_negative_even else None\n    c = max(negative_odd) if negative_odd else None\n    d = min(non_negative_odd) if non_negative_odd else None\n\n    return a, b, c, d"], [0.9527288675308228, "def largest_smallest_integers(lst):\n\"\"\"\n    Given a list of integers, return the largest negative integer, the smallest positive integer, the largest odd integer, and the smallest even integer.\n    If any of the integers cannot be found, return None for that position.\n    \n    >>> largest_smallest_integers([1, 2, 3, 4, 5, 6])\n    (None, 1, 5, 2)\n    >>> largest_smallest_integers([1, 2, 3, 4, -5, -6])\n    (-5, 1, None, 2)\"\"\"\n\n    if not lst:\n        return (None, None, None, None)\n\n    all_negative = list(filter(lambda x: x<0, lst))\n    all_non_negative = list(filter(lambda x: x>=0, lst))\n\n    negative_even = [i for i in all_negative if i%2==0] \n    negative_odd = [i for i in all_negative if i%2!=0]\n    non_negative_even = [i for i in all_non_negative if i%2==0]\n    non_negative_odd = [i for i in all_non_negative if i%2!=0]\n\n    a = max(negative_even) if negative_even else None\n    b = min(non_negative_even) if non_negative_even else None\n    c = max(negative_odd) if negative_odd else None\n    d = min(non_negative_odd) if non_negative_odd else None\n\n    return a, b, c, d"], [0.9465733766555786, "def largest_smallest_integers(lst):\n    \"\"\"\n    Given a list of integers, return the largest negative integer, the smallest\n    positive integer, the largest odd integer, and the smallest even integer.\n    All integers will be either positive, negative, or zero.\n\n    >>> largest_smallest_integers([1, 2, 3, 4, -5, -6])\n    (-5, 1, 3, 2)\n    >>> largest_smallest_integers([1, 1, 1, -1, -1, -1, 0])\n    (-1, 1, None, None)\n\"\"\"\n    negative_evens = [x for x in lst if x < 0 and x % 2 == 0]\n    non_negative_evens = [x for x in lst if x >= 0 and x % 2 == 0]\n    negative_odds = [x for x in lst if x < 0 and x % 2 != 0]\n    non_negative_odds = [x for x in lst if x >= 0 and x % 2 != 0]\n\n    a = max(negative_evens) if negative_evens else None\n    b = min(non_negative_evens) if non_negative_evens else None\n    c = max(negative_odds) if negative_odds else None\n    d = min(non_negative_odds) if non_negative_odds else None\n\n    return (a, b, c, d)"], [0.9422871470451355, "def largest_smallest_summed_integers(lst):\n    \"\"\"\n    Given a list of integers, return the sum of the largest negative integer and the smallest positive integer.\n    If there is no negative integer or positive integer, return None.\n    If there is no negative integer, return the sum of the smallest positive integer and the second smallest positive integer.\n    If there is no positive integer, return the sum of the largest negative integer and the second largest negative integer.\n    If there is no negative integer and no positive integer, return 0.\n    If there is no negative integer and no positive integer and no second smallest positive integer, return the sum of the smallest positive\"\"\"\n    # Filtering the list into even and odd numbers\n    evens = [x for x in lst if x % 2 == 0]\n    odds = [x for x in lst if x % 2 != 0]\n    # Finding the maximum of negative numbers and minimum of positive numbers\n    a = max([x for x in evens if x < 0], default=None)\n    b = min([x for x in evens if x > 0], default=None)\n    c = max([x for x in odds if x < 0], default=None)\n    d = min([x for x in odds if x > 0], default=None)\n    # Calculating the sum 'e' and 'f'\n    e = (a if a else 0) + (b if b else 0) + (c if c else 0) + (d if d else 0)\n    f = e + (e if e else 0)\n    return a, b, c, d, e, f"], [0.9412734508514404, "def largest_smallest_integers(lst):\n    \"\"\"\n    Given a list of integers, return the largest negative even integer, the largest non-negative even integer, the smallest negative even integer, the smallest non-negative even integer, the smallest negative odd integer, and the largest non-negative odd integer.\n    \n    If there is a tie for any of the values, return the smallest integer.\n    \n    If there are no negative even integers, return None for the largest negative even integer.\n    \n    If there are no non-negative even integers, return None for the largest non-negative even integer.\n    \n    If there are no negative even\"\"\"\n    highest_neg_even = highest_non_neg_even = smallest_neg_even = smallest_non_neg_even = smallest_neg_odd = highest_non_neg_odd = None\n    \n    for num in lst:\n        if num%2 == 0: # Check if the number is even\n            if num < 0: # Check if the number is negative\n                if highest_neg_even is None or highest_neg_even < num: # Get the highest negative even number\n                    highest_neg_even = num\n                if smallest_neg_even is None or smallest_neg_even > num: # Get the smallest negative even number\n                    smallest_neg_even = num\n            else: # If the number is non negative\n                if highest_non_neg_even is None or highest_non_neg_even < num: # Get the highest non-negative even number\n                    highest_non_neg_even = num\n                if smallest_non_neg_even is None or smallest_non_neg_even > num: # Get the smallest non-negative even number\n                    smallest_non_neg_even = num\n        else: # If the number is odd\n            if num < 0: # Check if the number is negative\n                if smallest_neg_odd is None or smallest_neg_odd > num: # Get the smallest negative odd number\n                    smallest_neg_odd = num\n            else: # If the number is non negative\n                if highest_non_neg_odd is None or highest_non_neg_odd < num: # Get the highest non-negative odd number\n                    highest_non_neg_odd = num\n                    \n    return (highest_neg_even, highest_non_neg_even, smallest_neg_even, smallest_non_neg_even, smallest_neg_odd, highest_non_neg_odd)"], [0.9324386715888977, "def largest_smallest_summed_integers(lst):\n    \"\"\"\n    Given a list of integers, return the sum of the largest negative integer and the smallest positive integer.\n    If there is no negative integer or positive integer, return None.\n    If there is no negative integer, return the sum of the smallest positive integer and the second smallest positive integer.\n    If there is no positive integer, return the sum of the largest negative integer and the second largest negative integer.\n    If there is no negative integer and no positive integer, return 0.\n    \n    Parameters\n    ----------\n    lst : list\n        A list of integers.\n    \n    Returns\n\"\"\"\n    # filtering the list into even and odd numbers\n    evens = [x for x in lst if x % 2 == 0]\n    odds = [x for x in lst if x % 2 != 0]\n    # finding the maximum of negative numbers and minimum of positive numbers\n    a = max([x for x in evens if x < 0], default=None)\n    b = min([x for x in evens if x > 0], default=None)\n    c = max([x for x in odds if x < 0], default=None)\n    d = min([x for x in odds if x > 0], default=None)\n    # calculating the sum 'e' and 'f'\n    e = (a if a else 0) + (b if b else 0) + (c if c else 0) + (d if d else 0)\n    f = e + (e if e else 0)\n    return a, b, c, d, e, f"], [0.9314712285995483, "def largest_smallest_integers(lst):\n    \"\"\"\n    Find the largest negative even integer and the smallest non-negative even integer in a list,\n    and the largest negative odd integer and the smallest non-negative odd integer in a list.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    tuple: A tuple containing the largest negative even integer, the smallest non-negative even integer,\n           the largest negative odd integer, and the smallest non-negative odd integer in the list.\n    \"\"\"\n    max_neg_even = max_neg_odd = min_non_neg_even = min_non_neg_odd = None\n\n    for num in lst:\n        if num % 2 == 0:  # num is even\n            if num >= 0:  # num is non-negative\n                if min_non_neg_even is None or num < min_non_neg_even:\n                    min_non_neg_even = num\n            else:  # num is negative\n                if max_neg_even is None or num > max_neg_even:\n                    max_neg_even = num\n        else:  # num is odd\n            if num >= 0:  # num is non-negative\n                if min_non_neg_odd is None or num < min_non_neg_odd:\n                    min_non_neg_odd = num\n            else:  # num is negative\n                if max_neg_odd is None or num > max_neg_odd:\n                    max_neg_odd = num\n\n    return max_neg_even, min_non_neg_even, max_neg_odd, min_non_neg_odd"], [0.9309178590774536, "def largest_smallest_integer(lst):\n    \"\"\"\n    Given a list of integers, return the largest negative even number, the smallest non-negative even number, the smallest negative odd number, and the largest non-negative odd number.\n    If there is a tie, return the smallest number.\n    If there is no negative even number, return None.\n    If there is no non-negative even number, return None.\n    If there is no negative odd number, return None.\n    If there is no non-negative odd number, return None.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    \"\"\"\n    highest_neg_even = smallest_neg_even = highest_non_neg_even = smallest_non_neg_even = smallest_neg_odd = highest_non_neg_odd = None\n\n    for num in lst:\n        if num % 2 == 0:  # Check if the number is even\n            if num < 0:  # Check if the number is negative\n                if highest_neg_even is None or highest_neg_even < num:  # Get the highest negative even number\n                    highest_neg_even = num\n                if smallest_neg_even is None or smallest_neg_even > num:  # Get the smallest negative even number\n                    smallest_neg_even = num\n            else:  # If the number is non negative\n                if highest_non_neg_even is None or highest_non_neg_even < num:  # Get the highest non-negative even number\n                    highest_non_neg_even = num\n                if smallest_non_neg_even is None or smallest_non_neg_even > num:  # Get the smallest non-negative even number\n                    smallest_non_neg_even = num\n        else:  # If the number is odd\n            if num < 0:  # Check if the number is negative\n                if smallest_neg_odd is None or smallest_neg_odd > num:  # Get the smallest negative odd number\n                    smallest_neg_odd = num\n            else:  # If the number is non negative\n                if highest_non_neg_odd is None or highest_non_neg_odd < num:  # Get the highest non-negative odd number\n                    highest_non_neg_odd = num\n\n    return highest_neg_even, highest_non_neg_even, smallest_neg_even, smallest_non_neg_even, smallest_neg_odd, highest_non_neg_odd"]]}
{"task_id": "HumanEval/137", "problem": [[0.9227480888366699, "def compare_one(a, b):\n    \"\"\"\n    Compare two values and return the one with the highest value.\n    If the values are equal, return None.\n    :param a: First value\n    :param b: Second value\n    :return: Highest value\n    \"\"\"\n    # Convert to string, replace optional ',' by '.'\n    aC = str(a).replace(',', '.') if isinstance(a, str) else str(a)\n    bC = str(b).replace(',', '.') if isinstance(b, str) else str(b)\n\n    # Convert strings to numbers for comparison\n    aN = float(aC)\n    bN = float(bC)\n\n    # Compare values\n    if aN > bN:\n        return a\n    elif aN < bN:\n        return b\n\n    # If values are equal, return None\n    return None"], [0.9146048426628113, "def compareOne(a, b):\n    \"\"\"\n    Compara dois valores e retorna o maior\"\"\"\n    try:\n        if isinstance(a, str):\n            a = float(a.replace(\",\", \".\"))\n        if isinstance(b, str):\n            b = float(b.replace(\",\", \".\"))\n\n        if a > b:\n            return isinstance(a, float) and str(a).replace(\".\", \",\") or a\n        elif b > a:\n            return isinstance(b, float) and str(b).replace(\".\", \",\") or b\n        \n        return None\n    except ValueError:\n        return None"], [0.9114009141921997, "def get_larger_number(num1, num2):\n    \"\"\"\n    This function takes two numbers and returns the larger one.\n    \"\"\"\n    if num1 == num2:\n        return \"The two numbers are equal.\"\n    elif isinstance(num1, complex) or isinstance(num2, complex):\n        if isinstance(num1, complex) and isinstance(num2, complex):\n            return max(num1, num2, key=lambda x: abs(x))\n        elif isinstance(num1, complex):\n            return num1\n        else:\n            return num2\n    else:\n        num1 = abs(num1)\n        num2 = abs(num2)\n        if num1 == num2:\n            return \"The two numbers have the same absolute value.\"\n        elif num1 > num2:\n            return num1\n        else:\n            return num2"], [0.9063088893890381, "def find_larger_num(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns the larger number.\n    If the numbers are equal, it returns \"Both numbers are equal.\"\n    If both numbers are negative, it returns the number with the smaller absolute value.\n    If one of the numbers is negative and the other is positive, it returns the positive number.\n    If both numbers are positive, it returns the larger number.\n    If one of the numbers is a float and the other is an integer, it returns the float number.\n    If both numbers are integers, it returns the larger number.\n    \n    Parameters:\n\"\"\"\n    if num1 == num2:\n        return \"Both numbers are equal.\"\n    elif num1 < 0 and num2 < 0:\n        if abs(num1) < abs(num2):\n            return num1\n        else:\n            return num2\n    elif num1 < 0 or num2 < 0:\n        if abs(num1) > abs(num2):\n            return num1\n        else:\n            return num2\n    elif isinstance(num1, float) or isinstance(num2, float):\n        if isinstance(num1, int):\n            num1 = float(num1)\n        if isinstance(num2, int):\n            num2 = float(num2)\n        if num1 > num2:\n            return num1\n        else:\n            return num2\n    else:\n        if num1 > num2:\n            return num1\n        else:\n            return num2"]]}
{"task_id": "HumanEval/138", "problem": [[0.9034540057182312, "def is_sum_even(x, y, z): \n    \"\"\"\n    Return True if the sum of x, y, and z is even.\n    >>> is_sum_even(1, 2, 3)\n    False\n    >>> is_sum_even(1, 2, 4)\n    True\n    \"\"\"\n    sum = x + y + z \n    if (sum % 2 == 0): \n        return True\n    else: \n        return False"], [0.8991937637329102, "def is_even_digits(n):\n    \"\"\"\n    Check if all digits of the given integer are even\n    :param n: int\n    :return: bool\n    \"\"\"\n    return len(str(n)) % 2 == 0"], [0.8972862958908081, "def has_even_sum(lst):\n    \"\"\"\n    Return True if the sum of the numbers in the list is even.\n    >>> has_even_sum([1, 2, 3])\n    True\n    >>> has_even_sum([1, 1, 1])\n    False\n    \"\"\"\n    running_sum = 0\n    for num in lst:\n        running_sum += num\n        if running_sum % 2 != 0:  # check if running sum is odd\n            return False\n    return running_sum % 2 == 0  # check if final sum is even"], [0.8955768346786499, "def is_even(n):\n    \"\"\"\n    Return True if n is even, otherwise return False\n    :param n: int\n    :return: bool\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"], [0.8955762386322021, "def is_even(n):\n    \"\"\"\n    Return True if n is even, otherwise return False\n    :param n: int\n    :return: bool\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"]]}
{"task_id": "HumanEval/139", "problem": [[0.9245625138282776, "def factorial(n): \n    \"\"\"\n    Return n!\n    \n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    \"\"\"\n    if n == 0: \n        return 1 \n    return n * factorial(n - 1) "], [0.9241386651992798, "def factorial(n):\n    \"\"\"\n    Calculate the factorial of n.\n\n    n int -> int\n    pre: n >= 0\n    post: return n!\n    \"\"\"\n    # base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n    # recursive case: n! = n * (n-1)!\n    else:\n        return n * factorial(n-1)"], [0.9231563210487366, "def factorial(n):\n    \"\"\"\n    Return n!\n    \n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    \"\"\"\n    return 1 if n == 0 else n * factorial(n-1)"], [0.9221312999725342, "def factorial(n):\n    \"\"\"\n    Return n!\n    \n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    \"\"\"\n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1)"], [0.9219096899032593, "def factorial(n):\n    \"\"\"\n    Return n!\n    \n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    \"\"\"\n    # base case\n    if n == 0:\n        return 1\n    # recursive case\n    else:\n        return n * factorial(n-1)"], [0.9219053387641907, "def factorial(n):\n    \"\"\"\n    Return n!\n    \n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    \"\"\"\n    # base case\n    if n == 0:\n        return 1\n    # recursive case\n    else:\n        return n * factorial(n-1)"], [0.9218941926956177, "def factorial(n):\n    \"\"\"\n    Return n!\n    \n    >>> factorial(4)\n    24\n    >>> factorial(6)\n    720\n    \"\"\"\n    # base case\n    if n == 0:\n        return 1\n    # recursive case\n    else:\n        return n * factorial(n-1)"], [0.9210484027862549, "def factorial(n):\n    \"\"\"\n    Return the factorial of a non-negative integer n.\n    \n    >>> factorial(5)\n    120\n    >>> factorial(3)\n    6\n    >>> factorial(1)\n    1\n    >>> factorial(0)\n    1\n    >>> factorial(10)\n    3628800\n    >>> factorial(100)\n    9332621544394415268169923885626670049071596\"\"\"\n    if isinstance(n, float) or isinstance(n, str):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"], [0.9204044342041016, "def factorial(n):\n    \"\"\"\n    Return the factorial of n.\n    \n    >>> factorial(5)\n    120\n    >>> factorial(3)\n    6\n    >>> factorial(1)\n    1\n    >>> factorial(0)\n    1\n    \"\"\"\n    # base case: factorial of 1 is 1\n    if n == 1:\n        return 1\n    else:\n        # recursive case: n! = n * (n-1)!\n        return n * factorial(n-1)"], [0.9198404550552368, "def factorial(n):\n    \"\"\"\n    Return the factorial of n.\n    \n    >>> factorial(5)\n    120\n    >>> factorial(3)\n    6\n    >>> factorial(1)\n    1\n    >>> factorial(0)\n    1\n    \"\"\"\n    # Check that the input is a positive integer\n    if not n >= 0:\n        print(\"Input must be a positive integer\")\n        return None\n    # The base case: 0! = 1\n    elif n == 0:\n        return 1\n    # Recursive case: n! = n * (n-1)!\n    else:\n        return n * factorial(n-1)"]]}
{"task_id": "HumanEval/140", "problem": [[0.9504166841506958, "def fix_spaces(text):\n    \"\"\"\n    \"\"\"\n    text = re.sub(r' {2,}', '-', text) # replaces instances of two or more consecutive spaces with a dash\n    text = re.sub(r' $', '!', text) # replaces a single space at the end of the string with an exclamation mark\n    text = text.replace(\" \", \"_\") # replaces all other single spaces with underscores\n    text = re.sub(r'-\\b', '_', text) # replaces a dash followed by word boundary with underscore\n    text = re.sub(r'-{2,}$', lambda m: '!'*len(m.group()), text) # replaces ending dashes with exlamation marks.\n    \n    return text"], [0.9331302642822266, "def underscore_spaces(text):\n    \"\"\"\n    Converts a string with spaces to a string with underscores.\n    \n    Args:\n        text (str): The string to convert.\n        \n    Returns:\n        str: The converted string.\n    \"\"\"\n    keywords = [\n        # Add more programming keywords here\n        'if', 'else', 'while', 'for', 'return', \n        'int', 'float', 'def', 'class', 'public', \n        'private', 'protected'\n    ]\n    series = []\n    current_word = ''\n    \n    for c in text:\n        if c == ' ':\n            if current_word not in keywords:\n                current_word = current_word.replace(' ', '_')\n            series.append(current_word)\n            current_word = ''\n        else:\n            current_word += c\n    if current_word not in keywords:\n        current_word = current_word.replace(' ', '_')\n    series.append(current_word)\n\n    return ' '.join(series)"], [0.9230737686157227, "def replace_spaces_with_underscores(text):\n    \"\"\"\n    Replace spaces with underscores in a given text.\n    \n    Args:\n        text (str): The input text.\n        \n    Returns:\n        str: The text with spaces replaced by underscores.\n    \"\"\"\n    return text.replace(\" \", \"_\")"], [0.913632333278656, "def replace_space(string):\n    \"\"\"\n    Replace all spaces in a string with underscores.\n    \n    >>> replace_space(\"I am a string!\")\n    'I_am_a_string!'\n    \"\"\"\n    return string.replace(\" \", \"_\")"], [0.9091977477073669, "def add_underscores(text):\n    \"\"\"\n    Add underscores to words that end with punctuation.\n    \n    >>> add_underscores(\"This is a test.\")\n    'This_is_a_test.'\n    >>> add_underscores(\"This is a test!\")\n    'This_is_a_test!'\n    >>> add_underscores(\"This is a test?\")\n    'This_is_a_test?'\n    >>> add_underscores(\"This is a test!\")\n    'This_is_a_test!'\n    >>> add_underscores(\"This is a test!\")\n    'This_is\"\"\"\n    results = re.sub(r'(\\b\\w+[.,;:!?\\-])(\\s)', lambda match: match.group(1) + '_' + match.group(2), text)\n    return ''.join(results)"], [0.9075530171394348, "def integrate_underscores(text):\n    \"\"\"\n    Replace spaces after words followed by punctuation with underscores.\n    \n    Args:\n        text (str): The text to be processed.\n    \n    Returns:\n        str: The processed text with underscores instead of spaces.\n    \"\"\"\n    # find words followed by punctuation and replace the space after with '_'\n    return re.sub(r'(\\w+[\\.,;:!?\\)])( )', r'\\1_', text)"], [0.9074998497962952, "def sophisticated_text_modification(input_text):\n    \"\"\"\n    \"\"\"\n    # Remove excess spaces\n    input_text = re.sub(' +', ' ', input_text)\n\n    # Split words\n    words = input_text.split(' ')\n    \n    # Convert all words into upper case\n    words = [word.upper() for word in words]\n\n    # Join words with underscores\n    input_text = '_'.join(words)\n    \n    # Replace two or more successive underscores with a hyphen\n    input_text = re.sub('_+', '-', input_text)\n\n    return input_text"], [0.9072759747505188, "def underscore_punctuation(text):\n    \"\"\"\n    Replace spaces between words with underscores in a given text.\n\n    Args:\n        text (str): The input text.\n\n    Returns:\n        str: The text with spaces between words replaced with underscores.\n    \"\"\"\n    # Define a Regular Expression pattern to match punctuated words, while excluding punctuations within parentheses, quotes, HTML tags, URLs, markdown syntax, special symbols, mathematical equations, and code snippets.\n    pattern = r'(?<![<\\[\\\"\\(\\\\])(\\b[\\w]+\\b(?=[\\.\\?\\!\\:\\;]))\\s(?!\\s*?(<|\\[|\\\"|\\(|\\\\))'\n\n    # Use the re.sub() function to replace matched spaces with underscores.\n    result = re.sub(pattern, r'\\1_', text)\n\n    return result"], [0.907170295715332, "def convert_underscore_string(string):\n    \"\"\"\n    Converts a string with underscores to a string with spaces.\n    \n    >>> convert_underscore_string(\"hello_world\")\n    'Hello World'\n    \"\"\"\n    words = string.split('_')\n\n    new_string = \"\"\n    for word in words:\n        new_string += word.capitalize()\n        new_string += \" \"\n\n    return new_string[:-1]"], [0.9067783355712891, "def underscore_punctuation(text):\n    \"\"\"\n    Replace spaces around punctuation with underscores\n    :param text:\n    :return:\n    \"\"\"\n    # It's match URLs using a simple regex first and replace them temporarily\n    url_pattern = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\\\(\\\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    urls = re.findall(url_pattern, text)\n    for i, url in enumerate(urls):\n        text = text.replace(url, 'URLPLACEHOLDER{}'.format(i))\n\n    # Then we match HTML tags and replace them\n    html_tag_pattern = re.compile('<.*?>')\n    html_tags = re.findall(html_tag_pattern, text)\n    for i, html_tag in enumerate(html_tags):\n        text = text.replace(html_tag, 'HTMLTAGPLACEHOLDER{}'.format(i))\n\n    # Now let's match anything that is enclosed in quotes or parentheses and replace them\n    quotes_pattern = re.compile(r'[{\"\\[\\']].*?[\"\\)\\'])')\n    quotes = re.findall(quotes_pattern, text)\n    for i, quote in enumerate(quotes):\n        text = text.replace(quote, 'QUOTEPLACEHOLDER{}'.format(i))\n\n    # Split words and replace spaces around punctuation with underscores\n    words = text.split(' ')\n    for i in range(len(words)):\n        if any(char in string.punctuation for char in words[i]):\n            words[i] = words[i].replace(' ', '_')\n    text = ' '.join(words)\n\n    # Finally replace placeholders with originals\n    for i, url in enumerate(urls):\n        text = text.replace('URLPLACEHOLDER{}'.format(i), url)\n    for i, html_tag in enumerate(html_tags):\n        text = text.replace('HTMLTAGPLACEHOLDER{}'.format(i), html_tag)\n    for i, quote in enumerate(quotes):\n        text = text.replace('QUOTEPLACEHOLDER{}'.format(i), quote)\n\n    return text"]]}
{"task_id": "HumanEval/141", "problem": [[0.9476853609085083, "def file_name_check(file_name):\n    \"\"\"\n    Check if the given file name is valid.\n    \n    Args:\n        file_name (str): The name of the file to check.\n        \n    Returns:\n        str: \"Yes\" if the file name is valid, \"No\" otherwise.\n    \"\"\"\n    # Check if the file's name length is within the allowed range\n    if not 5 <= len(file_name) <= 50:\n        return \"No\"\n    \n    name, dot, extension = file_name.rpartition('.')\n    \n    # Check if the file's name has exactly one dot and a valid extension\n    if not dot or extension not in ['txt', 'exe', 'dll', 'pdf', 'jpeg']:\n        return \"No\"\n    \n    # Check if the file's name has valid alphanumeric characters, and has at least\n    # one uppercase, one lowercase, and maximum of three consecutive digits\n    if not (re.match(r'[A-Za-z].*$', name) and\n            re.search(r'[A-Z]', name) and\n            re.search(r'[a-z]', name) and\n            not re.search(r'\\d{4,}', name)):\n        return \"No\"\n    \n    # Check if the file's name has exactly two latin alphabet letters\n    if len(re.findall(r'[A-Za-z]', name)) < 2:\n        return \"No\"\n    \n    return \"Yes\""], [0.9475350379943848, "def file_name_check(file_name):\n    \"\"\"\n    Check if the given file name is valid.\n\n    Args:\n        file_name (str): The name of the file to check.\n\n    Returns:\n        str: \"Yes\" if the file name is valid, \"No\" otherwise.\n    \"\"\"\n    # Check if the file's name length is within the allowed range\n    if not 5 <= len(file_name) <= 50:\n        return \"No\"\n\n    name, dot, extension = file_name.rpartition('.')\n\n    # Check if the file's name has exactly one dot and a valid extension\n    if not dot or extension not in ['txt', 'exe', 'dll', 'pdf', 'jpeg']:\n        return \"No\"\n\n    # Check if the file's name has valid alphanumeric characters, and has at least\n    # one uppercase, one lowercase, and maximum of three consecutive digits\n    if not (re.search(r'[A-Za-z].*', name) and\n            re.search(r'[A-Z]', name) and\n            re.search(r'[a-z]', name) and\n            not re.search(r'\\d{4,}', name)):\n        return \"No\"\n\n    # Check if the file's name has exactly two latin alphabet letters\n    if len(re.findall(r'[A-Za-z]', name)) != 2:\n        return \"No\"\n    \n    return \"Yes\""], [0.9323183298110962, "def file_name_check(file_name):\n    \"\"\"\n    Check if the given file name is valid.\n    \n    Args:\n        file_name (str): The file name to check.\n    \n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check for the reserved Windows characters\n    reserved_chars = ['<', '>', ':', '\"', '/', '\\\\', '|', '?', '*']\n    if any(c in file_name for c in reserved_chars):\n        return 'No'\n    # Check for the length requirement\n    if not (5 <= len(file_name) <= 50):\n        return 'No'\n    # Check if the file name has exactly one dot and get the name and extension parts\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    name, extension = parts\n    # Check the conditions for the name part\n    if not re.match(r'^[a-zA-Z][a-zA-Z0-9]*$', name) or not any(c.isupper() for c in name) or not any(c.islower() for c in name) or len(re.findall(r'\\d{4,}', name)) > 0:\n        return 'No'\n    # Check the conditions for the extension part\n    if extension not in ['txt', 'exe', 'dll', 'pdf', 'jpeg']:\n        return 'No'\n    return 'Yes'"], [0.9318896532058716, "def complex_file_name_validator(file_name):\n    \"\"\"\n    This function checks if the given file name is valid or not.\n    It returns 'Yes' if the file name is valid, and 'No' otherwise.\n    \"\"\"\n    import re\n\n    # Check if the file name is empty\n    if not file_name:\n        return 'No'\n\n    # Check if the file name contains any special characters\n    if re.search(r'[^a-zA-Z0-9.]', file_name):\n        return 'No'\n\n    # Check if the file name contains any consecutive numbers\n    if re.search(r\"\"\"\n    # Check if length of tile name is good\n    if len(file_name) < 5 or len(file_name) > 50:\n        return 'No'\n\n    # Check for only alphanumeric characters, at least 1 uppercase and lowercase letter and one dot\n    if not re.match(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[.])[^A-Z]*{A-Z}[^A-Z]*$', file_name):\n        return 'No'\n\n    # Check for more than three consecutive numbers\n    if re.search(r'\\d{4,}', file_name):\n        return 'No'\n\n    # Check the substring before dot\n    split_name = file_name.split('.')\n\n    # Check for multiple extensions\n    if len(split_name) != 2:\n        return 'No'\n\n    # Check if substring before dot starts with alphabet and of length at least 2\n    if not re.match(r'^[a-zA-Z]', split_name[0]) or len(split_name[0]) < 2:\n        return 'No'\n\n    # Check for valid extensions\n    valid_extensions = ['txt', 'exe', 'dll', 'pdf', 'jpeg']\n    if split_name[1] not in valid_extensions:\n        return 'No'\n\n    # If all the conditions are satisfied, return 'Yes'\n    return 'Yes'"], [0.9311316013336182, "def validate_file_name(file_name):\n    \"\"\"\n    Check if the given file name is valid.\n    \n    Args:\n        file_name (str): The file name to check.\n        \n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check for the reserved Windows characters\n    reserved_chars = {'<', '>', ':', '\"', '/', '\\\\', '|', '?', '*'}\n    if any(c in file_name for c in reserved_chars):\n        return 'No'\n    # Check for the length requirement\n    if not (5 <= len(file_name) <= 50):\n        return 'No'\n    # Check if the file name has exactly one dot and get the name and extension parts\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    name, extension = parts\n    # Check the conditions for the name part\n    if not re.match(r'^[a-zA-Z][a-zA-Z0-9]*$', name) \\\n       or not any(c.isupper() for c in name) \\\n       or not any(c.islower() for c in name) \\\n       or len(re.findall(r'\\d{4,}', name)) > 0:\n        return 'No'\n    # Check the conditions for the extension part\n    if extension not in ['txt', 'exe', 'dll', 'pdf', 'jpeg']:\n        return 'No'\n    return 'Yes'"]]}
{"task_id": "HumanEval/142", "problem": [[0.9176299571990967, "def positive_cubes_sum(lst):\n    '''\n    This function calculates sum of cubes of both odd and even positive integers in a list.\n    \n    positive_cubes_sum([1, 2, 3, 4]) == 1 + 8 + 27 + 64 = 100\n    positive_cubes_sum([-1, -2, 1, 2]) == 9\n    positive_cubes_sum([8, -3]) == 512\n    positive_cubes_sum([0]) == 0\n\n    If input is empty, function should return 0.\n    '''\n    return sum(i**3 for i in lst if i > 0)"], [0.9146968126296997, "def sum_of_cubes(array):\n  \"\"\"\n  Return the sum of the cubes of all numbers in the array, except for numbers that are multiples of 3.\n  \"\"\"\n  total = 0\n  for i in range(len(array)):\n    # Check if i+1 is a multiple of 3\n    if (i + 1) % 3 == 0:\n      total -= array[i] ** 3\n    else:\n      total += array[i] ** 3\n  return total\n    def sum_of_cubes(array):\n  \"\"\"\n  Return the sum of the cubes of\"\"\"\n  total = 0\n  for i in range(len(array)):\n    # Check if i+1 is a multiple of 3\n    if (i + 1) % 3 == 0:\n      total -= array[i] ** 3\n    else:\n      total += array[i] ** 3\n  return total"]]}
{"task_id": "HumanEval/143", "problem": [[0.9533295035362244, "def words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, return a string of all the words whose length is a prime number.\n    \n    >>> words_in_sentence(\"Hello world\")\n    'Hello'\n    >>> words_in_sentence(\"It is raining cats and dogs\")\n    'It raining cats and dogs'\n    \"\"\"\n    # split the sentence into words\n    words = sentence.split(\" \")\n    \n    # create an empty list to store words\n    result = []\n\n    # iterate over each word in the sentence\n    for word in words:\n        # If length of word is a prime number\n        if is_prime(len(word)):\n            # append that word to result list\n            result.append(word)\n            \n    # Join words in the list into a string with space (' ') as the separator\n    # and return\n    return ' '.join(result)"], [0.9463455080986023, "def wordsInSentence(sentence):\n    \"\"\"\n    Given a sentence, return a string of all the words in the sentence\n    that are prime numbers.\n    \n    >>> wordsInSentence(\"Hello world\")\n    'Hello'\n    >>> wordsInSentence(\"I am a prime number\")\n    'I a prime number'\n    >>> wordsInSentence(\"I am not a prime number\")\n    'I'\n    \"\"\"\n    output = \"\"\n    words = sentence.split()\n    for word in words:\n        word_stripped = word.strip('.,?!')  # Remove punctuation\n        if check_prime(len(word_stripped)):\n            if output != \"\":\n                output += \" \"\n            output += word\n    return output"], [0.9141407608985901, "def prime_length_substrings(sentence):\n    \"\"\"\n    Given a sentence, return the longest substring of prime length.\n    \n    >>> prime_length_substrings(\"I am a boy\")\n    'I am a boy'\n    >>> prime_length_substrings(\"I am a boy\")\n    'I am a boy'\n    >>> prime_length_substrings(\"I am a boy\")\n    'I am a boy'\n    >>> prime_length_substrings(\"I am a boy\")\n    'I am a boy'\n    >>> prime_length_substrings(\"I am a boy\")\n    'I am\"\"\"\n    sentence = ''.join(sentence.split(' '))\n\n    # Stores the added characters\n    added_chars = set() \n    result = ''\n\n    # Check all substrings of prime lengths\n    for length in range(len(sentence)):\n        # Check if this length is prime\n        if is_prime(length):\n            for i in range(len(sentence) - length + 1):\n                substring = sentence[i:i + length]\n\n                # Check if any char in this substring is added before\n                is_added_before = False\n                for char in substring:\n                    if char in added_chars:\n                        is_added_before = True\n                        break\n\n                if not is_added_before: # If all chars are new\n                    result += substring\n                    for char in substring:\n                        added_chars.add(char)\n\n    return result"]]}
{"task_id": "HumanEval/144", "problem": []}
{"task_id": "HumanEval/145", "problem": [[0.9173712134361267, "def orderSumDigits(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    for i in range(len(nums)):\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if sum_of_digits(nums[j]) > sum_of_digits(nums[max_index]):\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"], [0.9156618714332581, "def sortBySumOfDigits(lst):\n    \"\"\"\n    Given a list of numbers, return a list of numbers sorted by the sum of their digits.\n    \n    >>> sortBySumOfDigits([123456789, 1234567890, 12345678901, 123456789012])\n    [123456789012, 12345678901, 1234567890, 123456\"\"\"\n    return sorted(lst, key=lambda x: sum(map(int, str(x))))"], [0.908204197883606, "def sort_by_digit_sum(arr):\n    \"\"\"\n    Sort an array of integers by the sum of their digits.\n    \n    Args:\n        arr (list): List of integers\n    \n    Returns:\n        list: Sorted list of integers\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(digit) for digit in str(x)), x))"], [0.908193826675415, "def sort_by_digit_sum(arr):\n    \"\"\"\n    Sort an array of integers by the sum of their digits.\n    \n    Args:\n        arr (list): List of integers\n    \n    Returns:\n        list: Sorted list of integers\n    \"\"\"\n    return sorted(arr, key=lambda x: (sum(int(digit) for digit in str(x)), x))"], [0.9069902896881104, "def sort_by_sum_of_digits(arr):\n    \"\"\"\n    Given an array of integers, sort the array in ascending order based on the sum of digits in each integer.\n    For example, the sum of digits in 25 is 7 (2 + 5) and the sum of digits in 8 is 8.\n    The array [25, 8, 12] will be sorted as [8, 25, 12].\n    :param arr: array of integers\n    :return: sorted array\n    \"\"\"\n    # Base case\n    if not arr:\n        return []\n\n    # Initializing variables\n    result = []\n    sum_of_digits = []\n\n    for i in range(0, len(arr)):\n        # Calculating the sum of digits of each element in the array\n        digit_sum = 0\n        for j in str(arr[i]):\n            digit_sum += int(j)\n\n        # Storing the number and its sum of digits in two separate lists\n        result.append(arr[i])\n        sum_of_digits.append(digit_sum)\n\n    # Sorting the sums list and storing the index of the sorted list.\n    sorted_index = [i[0] for i in sorted(enumerate(sum_of_digits), key=lambda p: p[1])]\n\n    # Preparing the sorted array based on the index of the sorted list.\n    sorted_arr = []\n    for k in sorted_index:\n        sorted_arr.append(result[k])\n\n    return sorted_arr"], [0.9067859649658203, "def sort_by_sum_of_digits(lst):\n    \"\"\"\n    Sort a list of numbers by the sum of their digits in descending order.\n    \n    Args:\n        lst (list): A list of numbers.\n    \n    Returns:\n        list: A list of numbers sorted by the sum of their digits in descending order.\n    \"\"\"\n    return sorted(lst, key=lambda x: sum_of_digits(x), reverse=True)"]]}
{"task_id": "HumanEval/146", "problem": [[0.9138548374176025, "def count_odd_numbers(arr):\n    \"\"\"\n    Count the number of odd numbers in the array that are greater than 10 and less than 100.\n    \n    Args:\n        arr (list): List of integers\n    \n    Returns:\n        int: Number of odd numbers in the array\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 10 and num < 100 and num % 2 != 0:\n            count += 1\n    return count"], [0.9111778736114502, "def count_odd_numbers(arr):\n    \"\"\"\n    Count the number of odd numbers in the array that are greater than 10 and less than 100.\n    \n    Args:\n        arr (list): List of integers\n    \n    Returns:\n        int: Number of odd numbers in the array\n    \"\"\"\n    odd_numbers = []\n    for num in arr:\n        if num > 0 and num % 2 != 0 and num > 10 and num < 100:\n            odd_numbers.append(num)\n    \n    count = 0\n    for i in range(len(odd_numbers)):\n        is_duplicate = False\n        for j in range(i+1, len(odd_numbers)):\n            if odd_numbers[i] == odd_numbers[j]:\n                is_duplicate = True\n                break\n        if not is_duplicate:\n            count += 1\n    \n    return count"]]}
{"task_id": "HumanEval/147", "problem": [[0.9493870735168457, "def get_max_triples(n):\n    \"\"\"\n    Given an integer n, return the number of triples (a, b, c) such that a < b < c and a * b % c == 0.\n    :param n: Integer\n    :return: Integer\n    \"\"\"\n    # Create an array 'a' of length 'n' with elements as per the given formula\n    a = [(i * i - i + 1) + (i % 3) for i in range(1, n + 1)]\n    triple_count = 0  # Initialize variable to count triples\n\n    #For all possible combinations of three items (a[i], a[j], a[k])\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Calculate the modulus of the product of any two elements by the third\n                product = (a[i] * a[j]) % a[k]\n                # Check if the result is a multiple of n\n                if product % n == 0:\n                    triple_count += 1  # Increment the counter if true\n\n    return triple_count  # Return the number of desired triples"], [0.9346858859062195, "def get_matrix_triples(n):\n    \"\"\"\n    This function calculates the number of triples in a list of numbers.\n    The list is generated by the formula: a[i] = i * i - i + 1\n    The function returns the number of triples in the list.\n    :param n: The number of elements in the list.\n    :return: The number of triples in the list.\n    \"\"\"\n    # Initialize the list 'a', 'count' and 'pairs' as per the requirement.\n    a = [0]*n\n    count = [0]*3\n    pairs = [0]*3\n\n    triples = 0\n\n    # This loop will calculate the values of 'a' and increment the respective 'count'.\n    for i in range(n):\n        a[i] = i * i - i + 1\n        count[a[i] % 3] += 1\n\n    # This loop calculates the values of 'pairs' and 'triples' as per the given logic.\n    for j in range(3):\n        for k in range(j+1, 3):\n            pairs[k] += count[j]*count[k]\n        triples += (count[j]*(count[j]-1)*(count[j]-2))//6  # Use '//' for integer division\n\n    triples += pairs[0] + 2*(pairs[1]+pairs[2])\n\n    # returns the number of triples.\n    return triples"], [0.9174444675445557, "def get_max_triples(n, p):\n    \"\"\"\n    Calculate the number of triples (a[i], a[j], a[k]) such that\n    i < j < k and (a[i] * a[j]) % a[k] is a multiple of n or p.\n\n    Parameters:\n    n (int): The first number.\n    p (int): The second number.\n\n    Returns:\n    int: The number of triples.\n    \"\"\"\n    # calculate the array 'a' according to formula\n    a = [(i * i - i + p) + (i % p) for i in range(1, n+1)]\n    \n    # initialize count of triples to 0\n    counters = 0\n\n    # consider all triples a[i], a[j], a[k] such that i < j < k\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                # calculate modulus of product a[i]*a[j] by a[k]\n                product_modulus = (a[i] * a[j]) % a[k]\n\n                # check if the result is a multiple of n or p, increment the count\n                if product_modulus % n == 0 or product_modulus % p == 0:\n                    counters += 1\n\n    return counters"]]}
{"task_id": "HumanEval/148", "problem": [[0.9597816467285156, "def bf(planet1, planet2, planet3):\n    \"\"\"\n    Given the names of three planets, return a tuple of the names of planets that are in between the first and third planet.\n    \n    The names of the planets will be strings, and the names will not be repeated.\n    \n    If there are fewer than two planets between the two outer planets, return an empty tuple.\n    \n    The order of the planets in the tuple does not matter.\n    \n    For example:\n    \n    bf(\"Earth\", \"Mars\", \"Venus\") \u279e (\"Mars\", \"Venus\")\n    \n    bf(\"Mercury\", \"Jupiter\", \"Saturn\"\"\"\n    if is_valid(planet1) and is_valid(planet2) and is_valid(planet3): \n        # sort the planets based on their position in the solar system\n        planets = sorted([planet1, planet2, planet3], key=SOLAR_SYSTEM.index)\n        return get_neighbors(planets[-1])  # return the neighbors of the furthest planet\n    else:\n        return ()"], [0.9540389180183411, "def bf(planet1, planet2):\n    \"\"\"\n    Find the planets between two planets in a solar system.\n\n    Args:\n        planet1 (str): The name of the first planet.\n        planet2 (str): The name of the second planet.\n\n    Returns:\n        tuple: A tuple containing the names of the planets between planet1 and planet2.\n    \"\"\"\n    solar_system = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n    if is_valid(planet1) and is_valid(planet2):\n        planet1_index = solar_system.index(planet1.capitalize())\n        planet2_index = solar_system.index(planet2.capitalize())\n\n        if planet1_index < planet2_index:\n            return tuple(solar_system[i] for i in range(planet1_index + 1, planet2_index))\n        \n        if planet2_index < planet1_index:\n            return tuple(solar_system[i] for i in range(planet2_index + 1, planet1_index))\n        \n        return ()\n\n    else:\n        return ()"], [0.9445393085479736, "def bf(planet1, planet2):\n    \"\"\"\n    \"\"\"\n    if is_valid(planet1) and is_valid(planet2):\n        list_of_planets = sorted(planet_distances.items(), key=lambda x: x[1])\n        planet1_index = next(i for i,v in enumerate(list_of_planets) if v[0]==planet1)\n        planet2_index = next(i for i,v in enumerate(list_of_planets) if v[0]==planet2)\n        if planet1_index < planet2_index:\n            return tuple(list_of_planets[planet1_index+1 : planet2_index])\n        else:\n            return tuple(list_of_planets[planet2_index+1 : planet1_index])\n    else:\n        return ()"], [0.9445198774337769, "def bf(planet1, planet2):\n    \"\"\"\n    \"\"\"\n    if is_valid(planet1) and is_valid(planet2):\n        list_of_planets = sorted(planet_distances.items(), key=lambda x: x[1])\n        planet1_index = next(i for i,v in enumerate(list_of_planets) if v[0]==planet1)\n        planet2_index = next(i for i,v in enumerate(list_of_planets) if v[0]==planet2)\n        if planet1_index < planet2_index:\n            return tuple(list_of_planets[planet1_index+1 : planet2_index])\n        else:\n            return tuple(list_of_planets[planet2_index+1 : planet1_index])\n    else:\n        return ()"], [0.9416651725769043, "def bf(planet1, planet2):\n    \"\"\"\n    Returns a tuple of tuples of the form (planet_name, time_to_planet)\n    for all planets between planet1 and planet2.\n    \n    If either planet is invalid, return an empty tuple.\n    \n    Parameters\n    ----------\n    planet1 : str\n        The name of the first planet.\n    planet2 : str\n        The name of the second planet.\n        \n    Returns\n    -------\n    tuple\n        A tuple of tuples of the form (planet_name, time_to_planet).\n    \"\"\"\n    if is_valid(planet1) and is_valid(planet2):\n        # Sorted list of planet names\n        sorted_planets = sorted(PLANETS, key=PLANETS.get)\n        \n        idx1, idx2 = sorted_planets.index(planet1), sorted_planets.index(planet2)\n        # Ensure idx1 is always less than idx2\n        if idx2 < idx1:\n            idx1, idx2 = idx2, idx1       \n        planets_between = sorted_planets[idx1+1:idx2]\n        \n        result = []\n        for planet in planets_between:\n            # Calculate time to travel from the sun to each planet at the speed of light\n            time_to_planet = PLANETS[planet]*10**6/SPEED_OF_LIGHT\n            result.append((planet, time_to_planet)) \n            \n        return tuple(result)\n    else:\n        return ()"]]}
{"task_id": "HumanEval/149", "problem": [[0.9483717679977417, "def complex_sorted_list(lst, reverse=False, min_sum=0, max_sum=None, sort_function=None, secondary_sort_function=None):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter and performs the following:\n    - Delete strings with odd lengths or containing numerals.\n    - Sort the list based on the sum of the ASCII values of the characters in each string.\n    - The list may contain duplicates, ignore case, and special characters.\n    - Toggle sorting between ascending and descending order using an optional boolean `reverse` (default is False).\n    - Implement an optional minimum sum `min_sum` (default is 0) to return only strings with a sum greater or equal.\n    - Implement an optional maximum sum `max_sum` to return only strings with a sum less than or equal.\n    - Implement an optional custom sorting method `sort_function` to sort strings using a custom function.\n    - Implement an optional secondary custom sorting method `secondary_sort_function` to sort strings using a secondary function.\n    \n    E.g.:\n    assert complex_sorted_list([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert complex_sorted_list([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    assert complex_sorted_list([\"ab\", \"a\", \"aaa\", \"cd\"], True) => [\"cd\", \"ab\"]\n    assert complex_sorted_list([\"ab\", \"a\", \"aaa\", \"cd\"], min_sum=200) => [\"cd\"]\n    \"\"\"\n    \n    # Remove strings with odd lengths and strings containing numerals\n    clean_lst = [s for s in lst if len(s) % 2 == 0 and not any(c.isdigit() for c in s)]\n    \n    if not sort_function:\n        sort_function = lambda s: sum(ord(c) for c in s)\n    \n    if secondary_sort_function:\n        clean_lst.sort(key=secondary_sort_function)\n    \n    # Sort strings based on the sort_function\n    clean_lst.sort(key=sort_function, reverse=reverse)\n    \n    # Filter strings based on min_sum and max_sum\n    filtered_lst = [s for s in clean_lst if min_sum <= sort_function(s) <= (max_sum if max_sum else float(\"inf\"))]\n    \n    return filtered_lst"], [0.9397662878036499, "def sorted_list(lst, reverse=False):\n    \"\"\"\n    This function takes a list of string literals, discards strings that are of odd lengths or contain digits, \n    and returns a sorted list according to the specified stipulations.\n    The list is sorted based on the length of each word in an ascending sequence. \n    For words of equivalent length, it is sorted in alphabetical order. \n    Case sensitivity and special characters are ignored during the sorting operation.\n    An optional boolean parameter `reverse`, with a default value set to False, can be used to toggle the sorting pattern \n    between ascending and descending.\n    Note:\n    The input will always be a list of string literals and can never be of numeric type.\n    The list can have duplicate elements.\n    \"\"\"\n    import re\n    \n    # Filter out string literals of odd length and those containing digits\n    filtered_list = [x for x in lst if len(x) % 2 == 0 and not bool(re.search(r'\\d', x))]\n    \n    # Sort the list first by length, then by alphabetical order (case insensitive), and optionally in reverse order\n    return sorted(filtered_list, key=lambda x: (len(x), x.lower()), reverse=reverse)"], [0.9341539144515991, "def advanced_array_aggregation(lst, reverse=False):\n    \"\"\"\n    This function accepts a list of strings, filters the list by dropping strings of odd length or containing numbers, \n    and returns a sorted list based on the following criteria:\n    - All list entries must be strings, no grouping of numbers allowed\n    - Duplicates in the list are possible\n    - List is sorted in ascending order based on word length, and then alphabetically for words of same length\n    - Ignore capitalization and special characters during sorting\n    Additionally, sorting order can be switched by initializing an optional logical 'reverse' parameter.\n\n    Furthermore, the function should also check for characters that appear more than twice in a single string and \n    discard these strings from the list.\n    \"\"\"\n    # We filter the strings of odd length or containing numbers\n    filtered = [s for s in lst if len(s) % 2 == 0 and not any(c.isdigit() for c in s)]\n    \n    # We check for characters that appear more than twice in a single string and discard these strings\n    filtered = [s for s in filtered if all(v <= 2 for v in Counter(s).values())]\n    \n    # Ignore capitalization and special characters during sorting\n    filtered = [\"\".join(ch for ch in s if ch.isalnum()) for s in filtered]\n    filtered = [s.lower() for s in filtered]\n    \n    # Add some complexity by sorting the list according to length, and then by lexical order\n    filtered = sorted(filtered, key=lambda s: (len(s), s), reverse=reverse)\n\n    return filtered"], [0.9340560436248779, "def advanced_array_aggregation(lst, reverse=False):\n    \"\"\"\n    This function accepts a list of strings, filters the list by dropping strings of odd length or containing numbers,\n    and returns a sorted list based on the following criteria:\n    = All list entries must be strings; no grouping of numbers allowed\n    = Duplicates in the list are possible\n    = List is sorted in ascending order based on word length, and then alphabetically for words of the same length\n    = Ignore capitalization and special characters during sorting\n    Additionally, sorting order can be switched by initializing an optional logical 'reverse' parameter.\n\n    Furthermore, the function should also check for characters that appear more than twice in a single string and\n    discard these strings from the list.\n    \"\"\"\n\n    # We filter the strings of odd length or containing numbers\n    filtered = [s for s in lst if len(s) % 2 == 0 and not any(c.isdigit() for c in s)]\n    \n    # We check for characters that appear more than twice in a single string and discard these strings\n    filtered = [s for s in filtered if all(v <= 2 for v in Counter(s).values())]\n    \n    # Ignore capitalization and special characters during sorting\n    filtered = [\"\".join(ch for ch in s if ch.isalnum()) for s in filtered]\n    filtered = [s.lower() for s in filtered]\n\n    # Add some complexity by sorting the list according to length, and then by lexical order\n    filtered = sorted(filtered, key=lambda s: (len(s), s) , reverse=reverse)\n    \n    return filtered"], [0.9296247363090515, "def sorted_list_sum(lst, reverse=False):\n    \"\"\"Craft a utility that takes a string list as a parameter,\n    expunges strings of odd length or those containing digits,\n    and delivers back the sorted list as per the stipulations.\n    \"\"\"\n    filtered = [string for string in lst if len(string) % 2 == 0 and not any(char.isdigit() for char in string)]\n    sorted_list = sorted(filtered, key=lambda x: (len(x), x.casefold()), reverse=reverse)\n    return sorted_list"], [0.9282634854316711, "def advanced_list_transformer(lst, flip=False):\n    \"\"\"\n    \"\"\"\n    # Remove strings that contain even number of characters\n    # or include special characters\n    lst = [s for s in lst if len(s) % 2 != 0 and s.isalpha()]\n        \n    # Sort the list based on the descending order of word lengths\n    # and for words of the same length, sort them in reverse alphabetical order\n    lst.sort(key=lambda s: (-len(s), s), reverse=flip)\n    \n    return lst"], [0.9278987646102905, "def amplified_sorted_list_sum(lst, reverse=False):\n    \"\"\"\n    Return the sum of the numbers in lst,\n    except the lowest and highest value in nums.\n    \n    nums must be length 3 or more.\n    \n    If nums is length 2 or less, then return 0.\n    \n    If there are ties for \"lowest\" or \"highest\",\n    then remove all instances of the lowest or highest values\n    in order to calculate the sum.\n    \n    \n    >>> amplified_sorted_list_sum([5, 3, 2, 4])\n    12\n    >>> amplified_sorted_list\"\"\"\n    # Remove elements from the list that have a length of an odd number or contain numerals\n    lst = [i for i in lst if len(i) % 2 == 0 and not any(char.isdigit() for char in i)]\n    # Sort the list by length of the word and then by alphabetically, consider case insensitivity\n    lst = sorted(lst, key=lambda x: (len(x), x.lower()), reverse=reverse)\n    \n    return lst"]]}
{"task_id": "HumanEval/150", "problem": [[0.9513624906539917, "def x_or_y(n, x, y):\n    \"\"\"\n    Return x if n is prime, otherwise return y.\n    \"\"\"\n    return x if _is_prime(n) else y\n    def x_or_y(n, x, y):\n    \"\"\"\n    Return x if n is prime, otherwise return y.\n    \"\"\"\n    return x if _is_prime(n) else y"], [0.9137944579124451, "def is_prime(num):\n    \"\"\"Modify this function to check if the input number is a prime number.\"\"\"\n    if num > 1:\n        # check for factors\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else: \n            return True\n    else:\n        return False"], [0.9123939275741577, "def prime(n):\n    \"\"\"\n    \"\"\"\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for x in range(2,n):\n            if (n % x) == 0:\n                return False\n        return True            "]]}
{"task_id": "HumanEval/151", "problem": [[0.9336295127868652, "def sum_odd_numbers(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of all odd numbers in the list.\n    \n    >>> sum_odd_numbers([1, 2, 7, -5])\n    9\n    \n    >>> sum_odd_numbers([1, 2, 8, 9, 10, 11, 12, 13, 14, 15])\n    26\n    \n    >>> sum_odd_numbers([])\n    0\n    \"\"\"\n    result = 0\n    for num in lst:\n        if num % 2 == 1:\n            result += num\n    return result"], [0.9273509979248047, "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(value for index, value in enumerate(lst) if index % 2 == 0 and value % 2 != 0)"], [0.9223254919052124, "def positive_cubes_sum(lst):\n    '''\n    This function calculates sum of cubes of both odd and even positive integers in a list.\n    \n    positive_cubes_sum([1, 2, 3, 4]) == 1 + 8 + 27 + 64 = 100\n    positive_cubes_sum([-1, -2, 1, 2]) == 9\n    positive_cubes_sum([8, -3]) == 512\n    positive_cubes_sum([0]) == 0\n\n    If input is empty, function should return 0.\n    '''\n    return sum(i**3 for i in lst if i > 0)"], [0.9208054542541504, "def enhanced_solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are at even positions.    \n\n    Examples\n    enhanced_solution([5, 8, 7, 1]) => 5\n    enhanced_solution([3, 3, 3, 3, 3]) => 9\n    enhanced_solution([30, 13, 24, 321]) => 30\n    \"\"\"\n    return sum(num for i, num in enumerate(lst[::2]) if num % 2 == 1)"]]}
{"task_id": "HumanEval/152", "problem": [[0.9269453883171082, "def compare(scores, guesses):\n    \"\"\"\n    Compares the scores and guesses and returns a list of differences\n    :param scores: list of scores\n    :param guesses: list of guesses\n    :return: list of differences\n    \"\"\"\n    differences = []\n    for score, guess in zip(scores, guesses):\n        difference = abs(score - guess)\n        if guess == score:\n            differences.append(difference)\n        else:\n            if guess == 0 and score != 0:\n                difference += 2\n            differences.append(difference)\n    return differences"], [0.9019462466239929, "def Compare(game, guess):\n    \"\"\"\n    Compare the game and guess and return a list of differences\n    :param game: the game to compare\n    :param guess: the guess to compare\n    :return: a list of differences\n    \"\"\"\n    differences = [abs(a-b) for a,b in zip(game, guess)]\n    # calculate variance\n    n = len(differences)\n    mean = sum(differences) / n\n    variance = sum((xi - mean) ** 2 for xi in differences) / n\n    # calculate standard deviation\n    std_dev = math.sqrt(variance)\n    # append variance and std_dev to differences\n    differences.append(variance)\n    differences.append(std_dev)\n    return differences"]]}
{"task_id": "HumanEval/153", "problem": [[0.8780055046081543, "def find_max(words, case_sensitive=False):\n    \"\"\"This function accepts a list of unique strings as its primary input.\n    Its output is the word with the greatest count of distinguished characters.\n    In the event of a tie, yield the word that appears first lexicographically.\n    If case_sensitive is specified as True, cases of characters are deemed distinct.\n    \"\"\"\n    if not case_sensitive:\n        # convert all words to lower case\n        words = [word.lower() for word in words]\n    \n    # create a list of tuples, with each tuple containing a word and its corresponding\n    # count of unique characters\n    words_and_counts = [(word, len(set(word))) for word in words]\n    \n    # sort the list of tuples lexicographically and by descending order of counts\n    words_and_counts.sort(key = lambda x: (-x[1], x[0]))\n    \n    # return the word with the maximum count of unique characters, or the\n    # lexicographically first word in case of a tie\n    return words_and_counts[0][0]"], [0.875739574432373, "def find_max(words, case_sensitive=False):\n    \"\"\"\n    This function accepts a list of distinct strings as an input, \n    It returns the string with the greatest number of unique characters.\n    If there is a tie, it provides the first word in lexicographical order. \n    Character cases are considered separate only if the parameter case_sensitive is set to True.\n\n    >>> find_max([\"name\", \"of\", \"string\"], True)\n    'string'\n    >>> find_max([\"name\", \"enam\", \"game\"])\n    'enam'\n    >>> find_max([\"aaaaaaa\", \"b13\" ,\"cc\"])\n    'aaaaaaa'\n    \"\"\"\n    \n    # Error handling for bad input types\n    if not isinstance(words, list) or not all(isinstance(w, str) for w in words):\n        raise ValueError('Invalid input type. Please enter a list of strings')\n\n    # If case_sensitive is False, convert all words to lowercase. \n    words_lower  = [word.lower() for word in words] if not case_sensitive else words\n    \n    # Loop through the words and find the word with the most unique characters.\n    # In case of tie, return the word that comes first lexicographically.\n    max_unique_chars = 0\n    max_word = ''\n    for word in words_lower:\n        num_unique_chars = len(set(word))\n        if num_unique_chars > max_unique_chars:\n            max_unique_chars = num_unique_chars\n            max_word = word\n        elif num_unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word"], [0.875052809715271, "def find_max(words, case_sensitive=False):\n    \"\"\"This function accepts a list of distinct strings as an input. \n    It returns the string with the greatest number of unique characters. \n    If there is a tie, it provides the first word in lexicographical order. \n    Character cases are considered separate only if the parameter case_sensitive is set to True.\n\n    >>> find_max([\"name\", \"of\", \"String\"], True)\n    \"String\"\n    >>> find_max([\"name\", \"enam\", \"Game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"BB\" ,\"cc\"])\n    \"aaaaaaa\"\n    \"\"\"\n    # Error handling for bad input types\n    if not isinstance(words, list) or not all(isinstance(i, str) for i in words):\n        raise ValueError('Invalid input type. Please enter a list of strings')\n\n    # If case_sensitive is False, convert all words to lowercase. \n    words_lower  = [word.lower() for word in words] if not case_sensitive else words\n\n    # Loop through the words and find the word with the most unique characters.\n    # In case of tie, return the word that comes first lexicographically.\n    max_unique_chars = 0\n    max_word = ''\n    for word in words_lower:\n        num_unique_chars = len(set(word))\n        if num_unique_chars > max_unique_chars:\n            max_unique_chars = num_unique_chars\n            max_word = word\n        elif num_unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word"], [0.8739386796951294, "def most_vowels(word_list):\n    \"\"\"\n    Find the word in word_list that contains the most vowels.\n    Return the word containing the most vowels.\n    If there is a tie, return the word that appears earliest in the list.\n    \"\"\"\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \n    # YOUR CODE HERE\n    \"\"\"\n    max_vowels = 0\n    max_word = \"\"\n\n    for word in word_list:\n        vowel_count = 0\n        vowels = \"aeiou\"\n\n        for letter in word:\n            if letter in vowels:\n                vowel_count += 1\n\n        if vowel_count > max_vowels:\n            max_vowels = vowel_count\n            max_word = word\n\n    return max_word"]]}
{"task_id": "HumanEval/154", "problem": [[0.9351611137390137, "def cycpattern_check(a , b):\n    \"\"\"Example usage:    \n    cycpattern_check(\"AbcD\",\"aBd\") => False\n    cycpattern_check(\"Hello\",\"ELl\") => True\n    cycpattern_check(\"Whas$sup\",\"pSUs\") => False\n    cycpattern_check(\"aB!ab\",\"BAa\") => True\n    cycpattern_check(\"EfEF\",\"EeFf\") => False\n    cycpattern_check(\"Hi^mensS\",\"sImen\") => True\n    \"\"\"\n    # Clean the strings: convert to lower case and remove special characters\n    a_clean = re.sub(r'\\W+', '', a).lower()\n    b_clean = re.sub(r'\\W+', '', b).lower()\n    \n    # Create all cyclic permutations of the second string\n    cyclic_permutations = [b_clean[i:] + b_clean[:i] for i in range(len(b_clean))]\n    \n    # Check if any of the permutations is in the first string\n    return any(permutation in a_clean for permutation in cyclic_permutations)"], [0.9337671399116516, "def cyc_pattern_check(a , b):\n    \"\"\"\n    \"\"\"\n    n = len(b)\n    if n == 0:\n        return True\n\n    if n > len(a):\n        return False\n\n    for i in range(n):\n        if b in a:\n            return True\n        b = b[n-1:] + b[:n-1]\n    return False"], [0.9314561486244202, "def cycpattern_check(a, b):\n    \"\"\"\n    \"\"\"\n    a = \"\".join(c.lower() for c in a if c.isalnum())\n    b = \"\".join(c.lower() for c in b if c.isalnum())\n    a_set = set(a)\n    a_temp = \"\".join(i for i in a if i in b)\n    a_list = [i for i in a if i in b]\n    b_list = list(b)\n    if a_temp != b and all(i in a_set for i in b) and a_temp == \"\".join(b_list[i] for i in range(len(b_list)) if i in [a_list.index(j) for j in b_list]):\n        return True\n    dbl_a = a + a\n    return b in dbl_a"], [0.9308421611785889, "def cycpattern_check(a, b):\n    \"\"\"\n    Checks if a string b is a cyclic pattern of a string a.\n    :param a: The string to be checked against.\n    :param b: The string to be checked.\n    :return: True if b is a cyclic pattern of a, False otherwise.\n    \"\"\"\n    # Cleaning the strings: converting to lower case and removing unusual characters\n    a = ''.join(e for e in a if e.isalnum()).lower()\n    b = ''.join(e for e in b if e.isalnum()).lower()\n\n    # Generating all possible rotational arrangements of b\n    b_rotations = [b[i:] + b[:i] for i in range(len(b))]\n\n    # Checking if any of the rotational arrangements of b form a part of a\n    for b_rot in b_rotations:\n        if b_rot in a:\n            return True\n\n    return False"]]}
{"task_id": "HumanEval/155", "problem": [[0.9617047309875488, "def even_odd_count(num):\n    \"\"\"\n    Return a tuple (even_count, odd_count) indicating the counts of each type of number in a non-negative integer.\n    \n    >>> even_odd_count(123456789)\n    (4, 5)\n    >>> even_odd_count(24680)\n    (5, 0)\n    >>> even_odd_count(-11)\n    (0, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num = abs(num)  # absolute value to ignore negative sign\n    for digit in str(num):\n        if digit != '0':\n            if int(digit) % 2 == 0: \n                even_count += 1\n            else:\n                odd_count += 1\n        else:\n            even_count += 1  # counting 0 as even\n    return even_count, odd_count"], [0.9560452699661255, "def even_odd_count(num):\n    \"\"\"Return number of even digits and odd digits in given integer.\n    >>> even_odd_count(123456789)\n    (4, 5)\n    >>> even_odd_count(-1111111)\n    (0, 7)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"], [0.9534012079238892, "def even_odd_count(num):\n    \"\"\"\n    Return a tuple containing the count of even digits and the count of odd digits in a given number.\n    \n    Args:\n        num (int): The number to analyze.\n    \n    Returns:\n        tuple: A tuple containing the count of even digits and the count of odd digits.\n    \n    Example:\n        >>> even_odd_count(123456789)\n        (4, 5)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)): #Use absolute value to handle negative numbers correctly\n        if digit.isdigit():     #This will ensure the digit is numeric (and thus skipp \"-\" sign)\n            if int(digit) % 2 == 0: #Considering '0' as even\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"], [0.948907732963562, "def even_odd_count(num):\n    \"\"\"\n    Return a tuple, (count_even, count_odd),\n    where count_even is the number of even digits in the given number\n    and count_odd is the number of odd digits in the given number.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n            even_sum += int(digit)\n        else:\n            odd_count += 1\n            odd_sum += int(digit)\n    return (even_count, odd_count), (even_sum, odd_sum)"], [0.946431577205658, "def even_odd_count(num):\n    \"\"\"Return a tuple in the form (even_count, odd_count) from a list of numbers.\n    \n    >>> even_odd_count([2, 1, 4, 6, 9, 11])\n    (3, 3)\n    \"\"\"\n    num = int(num) #Convert to integer in case input is binary, any other base\n    num_str = str(num)    \n    if num_str[0] == \"-\": # handle negative numbers\n        num_str = num_str[1:]\n    elif num_str[0] == \"0\" and len(num_str)>1: # handle leading zeros\n        num_str = num_str.lstrip('0')\n     \n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0: \n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"], [0.9421072006225586, "def even_odd_count(num):\n    \"\"\"\n    Return a tuple containing the count of even digits and the count of odd digits in a given number.\n    \n    Args:\n        num (int): The input number.\n    \n    Returns:\n        tuple: A tuple containing the count of even digits and the count of odd digits.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):  # Converting the input to a positive string number\n        if int(digit) % 2 == 0:  # Checking if the digit is even\n            even_count += 1      # If even, increment the even_count\n        else:\n            odd_count += 1       # If odd, increment the odd_count\n    return (even_count, odd_count) # Return the counts as a tuple"]]}
{"task_id": "HumanEval/156", "problem": [[0.9426429271697998, "def int_to_mini_roman(number):\n    \"\"\"Convert an integer to a Roman numeral.\n    >>> int_to_mini_roman(1990)\n    'MCMXC'\n    >>> int_to_mini_roman(2008)\n    'MMVIII'\n    >>> int_to_mini_roman(1666)\n    'MDCLXVI'\n    \"\"\"\n    mapping = [(1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"),\n               (100, \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"),\n               (10, \"x\"), (9, \"ix\"), (5, \"v\"), (4, \"iv\"), (1, \"i\")]\n    result = \"\"\n    for arabic, roman in mapping:\n        while number >= arabic:\n            result += roman\n            number -= arabic\n    return result"], [0.9274548888206482, "def int_to_mini_roman(number):\n    \"\"\"\n    Convert an integer to its corresponding roman numeral.\n    :param number: The integer to convert.\n    :return: The roman numeral representation of the integer.\n    \"\"\"\n    # Map of integers to their corresponding roman numerals\n    int_to_roman_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n                        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n                        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    roman_numeral = ''\n    for i, numeral in int_to_roman_map:\n        while number >= i:\n            roman_numeral += numeral\n            number -= i\n    return roman_numeral"], [0.9202778339385986, "def int_to_roman(number, include_subtractive):\n    \"\"\"\n    Convert an integer to a Roman numeral.\n    \"\"\"\n    numeral_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), \n    (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    result = ''\n    for integer, numeral in\"\"\"\n    numeral_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), \n    (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n\n    collapse_map = [(5000, 'v'), (10000, 'x'), (50000, 'l'), (100000, 'c')]\n\n    result = ''\n    for integer, numeral in numeral_map:\n        count = number // integer\n        result += numeral * count\n        number -= integer * count\n    if not include_subtractive:\n        for big, small in collapse_map:\n            result = result.replace(small * (big // 1000), small[0].upper() * (big // 1000))\n    return result"], [0.9192937612533569, "def int_to_mini_roman(num):\n    \"\"\"\n    Convert an integer to a mini roman numeral.\n    :param num: int\n    :return: str\n    \"\"\"\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n    mini_roman = ''\n    for i in range(len(values)):\n        count = num // values[i]\n        num %= values[i]\n\n        mini_roman += numerals[i] * count\n\n    return mini_roman"], [0.9179331660270691, "def convert_number(number, conversion_type):\n    \"\"\"\n    Converts a positive integer or roman numeral to each other.\n    Conversion types: 'int_to_roman' or 'roman_to_int'.\n    Limitations: 1 <= num <= 1000 for integers and valid roman numerals\n\n    Examples:\n    >>> convert_number(19, 'int_to_roman') == 'xix'\n    >>> convert_number(152, 'int_to_roman') == 'clii'\n    >>> convert_number('cdxxvi', 'roman_to_int') == 426\n    \"\"\"\n    # Define all unique symbols and corresponding values for roman numerals\n    VALUES = {\n    'i': 1, 'iv': 4, 'v': 5, 'ix': 9, 'x': 10, 'xl': 40, 'l': 50,\n    'xc': 90, 'c': 100, 'cd': 400, 'd': 500, 'cm': 900, 'm': 1000\n    }\n    # A reversed map of above, for int to roman conversion\n    ROMANS = {v: k for k, v in reversed(sorted(VALUES.items()))}\n\n    if conversion_type == 'int_to_roman':\n        if not isinstance(number, int) or number < 1 or number > 1000:\n            raise ValueError(\"Input integer must be between 1 and 1000.\")\n        \n        result = ''\n        for value, numeral in ROMANS.items():\n            count = number // value\n            result += numeral * count\n            number -= value * count\n        return result\n    elif conversion_type == 'roman_to_int':\n        if not isinstance(number, str) or any(i not in VALUES for i in number):\n            raise ValueError(\"Invalid Roman Numeral.\")\n        \n        result = 0\n        i = 0\n        while i < len(number):\n            # If this is a subtractive combination, process both elements\n            if i + 1 < len(number) and number[i:i+2] in VALUES:\n                result += VALUES[number[i:i+2]]\n                i += 2\n            else:\n                # Else, process one element\n                result += VALUES[number[i]]\n                i += 1\n\n        if result < 1 or result > 1000:\n            raise ValueError(\"Result is out of range!\")\n        return result\n    else:\n        raise ValueError(\"Invalid conversion type!\")"], [0.9163426160812378, "def convert_number(number, conversion_type):\n    \"\"\"\n    Converts a positive integer or Roman numeral to each other.\n    Conversion types: 'int_to_roman' or 'roman_to_int'\n    Limitations: 1 <= num <= 1000 for integers and valid Roman numerals\n\n    Examples:\n    >>> convert_number(19, 'int_to_roman') == 'xix'\n    >>> convert_number(152, 'int_to_roman') == 'clii'\n    >>> convert_number('cdxxvi', 'roman_to_int') == 426\n    \"\"\"\n    # Define all unique symbols and corresponding values for Roman numerals\n    VALUES = {\n      'i': 1, 'iv': 4, 'v': 5, 'ix': 9, 'x': 10, 'xl': 40, 'l': 50,\n      'xc': 90, 'c': 100, 'cd': 400, 'd': 500, 'cm': 900, 'm': 1000\n    }\n    # A reversed map of above, for int to Roman conversion\n    ROMANS = {v: k for k, v in reversed(sorted(VALUES.items()))}\n\n    if conversion_type == 'int_to_roman':\n        if not isinstance(number, int) or number < 1 or number > 1000:\n            raise ValueError(\"Input integer must be between 1 and 1000!\")\n        result = ''\n        for value, numeral in ROMANS.items():\n            count = number // value\n            result += numeral * count\n            number -= value * count\n        return result\n    elif conversion_type == 'roman_to_int':\n        if not isinstance(number, str) or any(i not in VALUES for i in number):\n            raise ValueError(\"Invalid Roman Numeral!\")\n        result = 0\n        i = 0\n        while i < len(number):\n            # If this is a subtractive combination, process both elements\n            if i + 1 < len(number) and number[i:i+2] in VALUES:\n                result += VALUES[number[i:i+2]]\n                i += 2\n            else:\n                # Else, process one element\n                result += VALUES[number[i]]\n                i += 1\n        if result < 1 or result > 1000:\n            raise ValueError(\"Result is out of range!\")\n        return result\n    else:\n        raise ValueError(\"Invalid conversion type!\")"], [0.9162768721580505, "def convert_number(number, conversion_type):\n    \"\"\"\n    Converts a positive integer or roman numeral to each other.\n    Conversion types: 'int_to_roman' or 'roman_to_int'\n    Limitations: 1 <= num <= 1000 for integers and valid roman numerals\n\n    Examples:\n    >>> convert_number(19, 'int_to_roman') == 'xix'\n    >>> convert_number(152, 'int_to_roman') == 'clii'\n    >>> convert_number('cdxxvi', 'roman_to_int') == 426\n    \"\"\"\n    # Define all unique symbols and corresponding values for roman numerals\n    VALUES = {\n      'i': 1, 'iv': 4, 'v': 5, 'ix': 9, 'x': 10, 'xl': 40, 'l': 50,\n      'xc': 90, 'c': 100, 'cd': 400, 'd': 500, 'cm': 900, 'm': 1000\n    }\n    # A reversed map of above, for int to roman conversion\n    ROMANS = {v: k for k, v in reversed(sorted(VALUES.items()))}\n\n    if conversion_type == 'int_to_roman':\n        if not isinstance(number, int) or number < 1 or number > 1000:\n            raise ValueError(\"Input integer must be between 1 and 1000!\")\n        result = ''\n        for value, numeral in ROMANS.items():\n            count = number // value\n            result += numeral * count\n            number -= value * count\n        return result\n    elif conversion_type == 'roman_to_int':\n        if not isinstance(number, str) or any(i not in VALUES for i in number):\n            raise ValueError(\"Invalid Roman Numeral!\")\n        result = 0\n        i = 0\n        while i < len(number):\n            # If this is a subtractive combination, process both elements\n            if i + 1 < len(number) and number[i:i+2] in VALUES:\n                result += VALUES[number[i:i+2]]\n                i += 2\n            else:\n                # Else, process one element\n                result += VALUES[number[i]]\n                i += 1\n        if result < 1 or result > 1000:\n            raise ValueError(\"Result is out of range!\")\n        return result\n    else:\n        raise ValueError(\"Invalid conversion type!\")"], [0.9161058068275452, "def intToRoman(num):\n    \"\"\"\n    :type num: int\n    :rtype: str\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"Expected integer, received \" + str(type(num)))\n    if not 0 < num < 1000001:\n        raise ValueError(\"Input must be a non-negative integer up to 1000000.\")\n    \n    vals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman = ''\n    \n    for i in range(len(vals)):\n        count = int(num / vals[i])\n        roman += syms[i] * count\n        num -= vals[i] * count\n    return roman"]]}
{"task_id": "HumanEval/157", "problem": [[0.9490985870361328, "def is_right_angled_triangle(a, b, c):\n    \"\"\"\n    Return True if a, b, c form a right-angled triangle.\n    \"\"\"\n    # Sort the sides so that c is the longest side\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n\n    # Use == for comparison, = is used for assignment\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"], [0.9382411241531372, "def is_right_triangle(a, b, c):\n    \"\"\"\n    Check if a triangle is right-angled given the lengths of its sides.\n    \n    Parameters:\n    a (float): Length of the first side of the triangle.\n    b (float): Length of the second side of the triangle.\n    c (float): Length of the third side of the triangle.\n    \n    Returns:\n    bool: True if the triangle is right-angled, False otherwise.\n    \"\"\"\n    # Check for negative side lengths or side lengths that are not valid for a triangle\n    if a <= 0 or b <= 0 or c <= 0 or a + b <= c or b + c <= a or c + a <= b:\n        return False\n    \n    # Use the Pythagorean theorem to check if the triangle is right-angled\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    \n    return False"], [0.9358680844306946, "def is_right_angled_triangle(a, b, c):\n    \"\"\"\n    Check if a triangle is a right-angled triangle.\n    \n    Args:\n        a (float): Length of side a.\n        b (float): Length of side b.\n        c (float): Length of side c.\n        \n    Returns:\n        bool: True if the triangle is a right-angled triangle, False otherwise.\n    \"\"\"\n    # Check if side lengths are valid for a triangle\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check if triangle inequality holds\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"], [0.9195489287376404, "def is_equilateral(a, b, c):\n    \"\"\"\n    Return True if all three angles are equal, False otherwise.\n    \"\"\"\n    if a == b == c:\n        return True\n    else:\n        return False"], [0.917273998260498, "def is_equilateral(a, b, c):\n    \"\"\"\n    Determines if a triangle is equilateral given the lengths of its sides a, b, and c.\n    \"\"\"\n    if a == b and b == c:\n        return True\n    else:\n        return False"], [0.9170421361923218, "def isRightTriangle(a, b, c): \n    \"\"\"\n    Check if a triangle is a right triangle or not\n    \n    Parameters\n    ----------\n    a : int\n        The length of the first side\n    b : int\n        The length of the second side\n    c : int\n        The length of the third side\n        \n    Returns\n    -------\n    bool\n        True if the triangle is a right triangle, False otherwise\n    \"\"\"\n    # Square of the two smaller sides \n    square1 = a*a + b*b \n  \n    # Square of the biggest side \n    square2 = c*c \n  \n    # Condition to determine whether the  \n    # triangle is a right triangle or not \n    if (square1 == square2): \n        return True\n    return False"], [0.9134564399719238, "def triangle_recognizer(a, b, c): \n    \"\"\"\n    \"\"\"\n    if (a + b > c) and (a + c > b) and (b + c > a): \n        return True\n    else: \n        return False"]]}
{"task_id": "HumanEval/158", "problem": [[0.9603987336158752, "def find_max(words, case_sensitive=False):\n    \"\"\"\n    This function accepts a list of distinct strings as input.\n    It outputs the word that contains the greatest number of unique characters.\n    In the event of a tie, the function will return the word that comes first lexicographically.\n    If case_sensitive is set to True, the function will treat different character cases as unique.\n    If the words list is empty, it raises a ValueError.\n\n    >>> find_max([\"name\", \"of\", \"String\"], True)\n    \"String\"\n    >>> find_max([\"name\", \"enam\", \"Game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"BB\" ,\"cc\"])\n    \"aaaaaaa\"\n    >>> find_max([])\n    ValueError: 'words' list can't be empty\n    \"\"\"\n    if not words:\n        raise ValueError(\"'words' list can't be empty\")\n    max_count, max_word = 0, \"\"\n    for word in words:\n        unique_chars = set(word.lower()) if not case_sensitive else set(word)\n        if len(unique_chars) > max_count or (len(unique_chars) == max_count and word < max_word):\n            max_count = len(unique_chars)\n            max_word = word\n    return max_word"], [0.9600564241409302, "def find_max(words, case_sensitive=False):\n    \"\"\"\n    This function accepts a list of distinct strings as an input, \n    It returns the string with the greatest number of unique characters.\n    If there is a tie, it provides the first word in lexicographical order. \n    Character cases are considered separate only if the parameter case_sensitive is set to True.\n\n    >>> find_max([\"name\", \"of\", \"string\"], True)\n    'string'\n    >>> find_max([\"name\", \"enam\", \"game\"])\n    'enam'\n    >>> find_max([\"aaaaaaa\", \"b13\" ,\"cc\"])\n    'aaaaaaa'\n    \"\"\"\n    \n    # Error handling for bad input types\n    if not isinstance(words, list) or not all(isinstance(w, str) for w in words):\n        raise ValueError('Invalid input type. Please enter a list of strings')\n\n    # If case_sensitive is False, convert all words to lowercase. \n    words_lower  = [word.lower() for word in words] if not case_sensitive else words\n    \n    # Loop through the words and find the word with the most unique characters.\n    # In case of tie, return the word that comes first lexicographically.\n    max_unique_chars = 0\n    max_word = ''\n    for word in words_lower:\n        num_unique_chars = len(set(word))\n        if num_unique_chars > max_unique_chars:\n            max_unique_chars = num_unique_chars\n            max_word = word\n        elif num_unique_chars == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word"], [0.9517487287521362, "def find_max(words):\n    \"\"\"\n    Find the word with the maximum number of unique characters.\n    If there are multiple such words, return the lexicographically smallest one.\n    \n    Args:\n        words: list of strings\n    Returns:\n        str: the word with the maximum number of unique characters\n    \"\"\"\n    max_unique_count = 0\n    max_unique_word = \"\"\n    for word in words:\n        unique_chars = len(set(word.lower()))\n        if unique_chars > max_unique_count:\n            max_unique_count = unique_chars\n            max_unique_word = word\n        elif unique_chars == max_unique_count:\n            # if the unique character counts are the same, pick the lexicographically smallest one\n            max_unique_word = min(max_unique_word, word)\n    return max_unique_word"], [0.951508641242981, "def find_max(words):\n    \"\"\" Finds the word from a list with the maximum number of unique letters\n    \n    Args:\n        words (List[str]): list of words\n\n    Returns:\n        str : the word with maximum unique letters. \n        If there are multiple such words, the one appearing first alphabetically\n\n    \"\"\"\n\n    max_word = ''\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = set(word.lower())\n        num_unique_chars = len(unique_chars)\n\n        if num_unique_chars == max_unique_chars:\n            if word.lower() < max_word.lower():\n                max_word = word\n        elif num_unique_chars > max_unique_chars:\n            max_word = word\n            max_unique_chars = num_unique_chars\n\n    return max_word"], [0.9501178860664368, "def find_max(words):\n    \"\"\"\n    Find the word with the maximum number of unique characters.\n    If there are multiple words with the same maximum number of unique characters,\n    return the word that comes first in the list.\n    \n    Args:\n        words (list): A list of words.\n    \n    Returns:\n        str: The word with the maximum number of unique characters.\n    \"\"\"\n    max_unique_count = 0\n    max_word = None\n\n    for word in words:\n        unique_count = len(set(word.lower()))\n        \n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count:\n            max_word = min(word, max_word)\n\n    return max_word"], [0.9474490284919739, "def find_max(words, case_sensitive=False):\n    \"\"\"This function accepts a list of unique strings as its primary input.\n    Its output is the word with the greatest count of distinguished characters.\n    In the event of a tie, yield the word that appears first lexicographically.\n    If case_sensitive is specified as True, cases of characters are deemed distinct.\n    \"\"\"\n    if not case_sensitive:\n        # convert all words to lower case\n        words = [word.lower() for word in words]\n    \n    # create a list of tuples, with each tuple containing a word and its corresponding\n    # count of unique characters\n    words_and_counts = [(word, len(set(word))) for word in words]\n    \n    # sort the list of tuples lexicographically and by descending order of counts\n    words_and_counts.sort(key = lambda x: (-x[1], x[0]))\n    \n    # return the word with the maximum count of unique characters, or the\n    # lexicographically first word in case of a tie\n    return words_and_counts[0][0]"], [0.9438435435295105, "def find_max(words, adjacent_chars=False, case_sensitive=False):\n    \"\"\"\n    Find the word in the list with the highest count of unique characters.\n    If there is a tie, return the lexicographically earliest word.\n    :param words: a list of words\n    :param adjacent_chars: if True, consider adjacent characters as unique\n    :param case_sensitive: if False, ignore case\n    :return: the word with the highest count of unique characters\n    \"\"\"\n    # Keep track of the max count of unique characters\n    max_count = 0\n    # Keep track of the word with highest count of unique characters,\n    # lexicographically earliest in case of a tie.\n    max_word = ''\n\n    # Process each word in the list\n    for word in words:\n        if not case_sensitive:\n            word = word.lower()\n        if adjacent_chars:\n            chars = adjacents(word)\n        else:\n            chars = set(word)\n        if len(chars) > max_count:\n            max_count = len(chars)\n            max_word = word\n        elif len(chars) == max_count:\n            max_word = min(max_word, word)\n\n    return max_word"]]}
{"task_id": "HumanEval/159", "problem": [[0.8627757430076599, "def vegetable_distribution(s, n, vegetables, servings):\n    \"\"\"\n    \"\"\"\n    left_over = n\n    distribution = {}\n    for veg in vegetables:\n        name, amount = veg.split(\" \")\n        amount = int(amount)\n        left_over -= amount \n    if left_over < 0: \n        return \"Error: More vegetables present than total number in the crate.\"\n    for leftover in servings:\n        serving = servings[leftover]\n        if type(serving) == str: \n            serving = int(serving.strip('%'))/100\n        distribution[leftover] = serving * left_over\n    return distribution"], [0.8594448566436768, "def operate(lst):\n    \"\"\"\n    \"\"\"\n    if len(lst) == 0:\n        raise Exception(\"List is empty\")\n    if not all(isinstance(x, int) for x in lst):\n        raise Exception(\"List contains non-integer element\")\n\n    if len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        return [lst[0] + lst[1]]\n    else:\n        return [lst[0] + lst[1]] + lst[2:]"], [0.8593405485153198, "def divide(dividend, divisor):\n    \"\"\"\n    :type dividend: int\n    :type divisor: int\n    :rtype: int\n    \"\"\"\n    quotient = dividend // divisor\n    remainder = dividend % divisor\n    return quotient, remainder"], [0.859325647354126, "def divide(dividend, divisor):\n    \"\"\"\n    :type dividend: int\n    :type divisor: int\n    :rtype: int\n    \"\"\"\n    quotient = dividend // divisor\n    remainder = dividend % divisor\n    return quotient, remainder"], [0.8585603833198547, "def division_remainder(list1, list2, list3):\n    \"\"\"\n    Given three lists of numbers, list1, list2 and list3, return a new list containing the remainder of dividing the sum of list1 by the sum of list2, followed by the sum of list2 divided by the sum of list3.\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \"\"\"\n    sum1 = sum(list1)\n    sum2 = sum(list2)\n    sum3 = sum(list3)\n    return [sum1%sum3, sum2%sum3]"], [0.8585577607154846, "def bakery_pastry_count(N, A):\n  \"\"\"\n  Given an integer N and an integer A, return the number of bagels, croissants, and breadsticks that the bakery has.\n  \n  The bakery has N bagels, A croissants, and the rest of the breadsticks.\n  \n  The bakery has to sell all of the breadsticks.\n  \n  The bakery has to sell at least 1 bagel and 1 croissant.\n  \n  The bakery has to sell at least 1 bagel and 1 croissant.\n  \n  The bakery has to sell at least 1 bagel and 1 croissant.\n  \n  The bakery has to\"\"\"\n  bagels = (N - A) / 3\n  croissants = A + 2 * bagels\n  breadsticks = N - croissants - bagels\n  return bagels, croissants, breadsticks"], [0.8584119081497192, "def find_missing_and_extraneous(arr1, arr2):\n    \"\"\"\n    Find missing and extraneous numbers\n    \"\"\"\n    # Your code here\n    # Hint: There are multiple ways to solve this problem.\n    # One way involves finding the sum of the two arrays,\n    # and then finding the difference between the two sums.\n    \"\"\"\n    sum1, sum2 = sum(arr1), sum(arr2)\n    diff = sum2 - sum1\n    missing = (100*101)//2 - sum1\n    extraneous = diff + missing\n    return missing, extraneous"]]}
{"task_id": "HumanEval/160", "problem": [[0.9371944665908813, "def perform_algebra(operators, operands):\n    \"\"\"\n    Perform algebraic_operations in the order they are present in the operators and operands list.\n    Possible operators include addition, subtraction, multiplication, division, modulus, and power.\n    The operators and operands lists could be empty or could contain multiple items.\n    Also, an extra modulus function has been added amongst the operators.\n    Operands can be negative and positive integers.\n    Negative_unary operators will be preceded by a zero in the operands list,\n    This function does not handle standard order of operations [PEMDAS/BODMAS] it only computes sequentially.\n    \"\"\"\n    if not operators or not operands:\n        return None\n\n    result = operands[0]\n    for i in range(0, len(operators)):\n        op = operators[i]\n        num = operands[i+1]\n        if op == \"+\":\n            result += num\n        elif op == \"-\":\n            result -= num\n        elif op == \"*\":\n            result *= num\n        elif op == \"/\":\n            result /= num\n        elif op == \"//\":\n            result //= num\n        elif op == \"**\":\n            result **= num\n        elif op == \"%\":\n            result %= num\n        else:\n            return \"Invalid operator found: {0}\".format(op)\n\n    return result"], [0.9360747337341309, "def perform_algebra(operators, operands):\n    \"\"\"\n    Perform algebraic operations in the order they are present in the operators and operands list.\n    Possible operators include addition, subtraction, multiplication, division, modulus, and power.\n    The operators and operands lists could be empty or could contain multiple items.\n    Also, an extra modulus function has been added amongst the operators.\n    Operands can be negative and positive integers.\n    Negative unary operators will be preceded by a zero in the operands list.\n    This function does not handle standard order of operations (PEMDAS/BODMAS), it only computes sequentially.\n    \"\"\"\n    if not operators or not operands:\n        return None\n\n    result = operands[0]\n    for i in range(0, len(operators)):\n        op = operators[i]\n        num = operands[i+1]\n        if op == \"+\":\n            result += num\n        elif op == \"-\":\n            result -= num\n        elif op == \"*\":\n            result *= num\n        elif op == \"/\":\n            result /= num\n        elif op == \"//\":\n            result //= num\n        elif op == \"**\":\n            result **= num\n        elif op == \"%\":\n            result %= num\n        else:\n            return \"Invalid operator found: {0}\".format(op)\n\n    return result"], [0.9360492825508118, "def perform_algebra(operators, operands):\n    \"\"\"\n    Perform algebraic operations in the order they are present in the operators and operands list.\n    Possible operators include addition, subtraction, multiplication, division, modulus, and power.\n    The operators and operands lists could be empty or could contain multiple items.\n    Also, an extra modulus function has been added amongst the operators.\n    Operands can be negative and positive integers.\n    Negative unary operators will be preceded by a zero in the operands list.\n    This function does not handle standard order of operations (PEMDAS/BODMAS), it only computes sequentially.\n    \"\"\"\n    if not operators or not operands:\n        return None\n\n    result = operands[0]\n    for i in range(0, len(operators)):\n        op = operators[i]\n        num = operands[i+1]\n        if op == \"+\":\n            result += num\n        elif op == \"-\":\n            result -= num\n        elif op == \"*\":\n            result *= num\n        elif op == \"/\":\n            result /= num\n        elif op == \"//\":\n            result //= num\n        elif op == \"**\":\n            result **= num\n        elif op == \"%\":\n            result %= num\n        else:\n            return \"Invalid operator found: {0}\".format(op)\n\n    return result"], [0.9285446405410767, "def do_algebra(operator, operand, round_off):\n    \"\"\"\n    This function takes in an arithmetic operator, a list of operands, and a boolean value for rounding off.\n    It returns the result of the arithmetic operation performed on the operands using the given operator.\n    \n    Parameters:\n    - operator (str): A string containing the arithmetic operator.\n    - operand (list): A list of numbers representing the operands.\n    - round_off (bool): A boolean value indicating whether to round off the result or not.\n    \n    Returns:\n    - result (float): The result of the arithmetic operation performed on the operands using the given operator.\n\"\"\"\n    # mapping the arithmetic operators to their respective functions\n    operators = {'+': op.add, '-': op.sub, '*': op.mul, '//': op.floordiv, '**': op.pow}\n\n    # error handling\n    if len(operand)-len(operator)!=1:\n        raise ValueError('The number of operators must be exactly one less than the number of operands.')\n\n    # initializing the result to the first operand\n    result = operand[0]\n\n    # going through each operator\n    for idx in range(len(operator)):\n         # updating the result based on the current operator and the next operand\n        result = operators[operator[idx]](result, operand[idx+1])\n    \n    # rounding off the result if needed\n    if round_off:\n        result = round(result)\n        \n    return result"], [0.9278613924980164, "def do_calculations(operator, operand):\n    \"\"\"\n    \"\"\"\n    result = operand[0]\n\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        elif operator[i] == 'sin':\n            result -= math.sin(math.radians(operand[i + 1]))\n        elif operator[i] == 'cos':\n            result -= math.cos(math.radians(operand[i + 1]))\n        elif operator[i] == 'tan':\n            result -= math.tan(math.radians(operand[i + 1]))\n            \n    return result"], [0.92371666431427, "def do_algebra(operators, operands):\n    \"\"\"\n    This function takes in a list of operators and a list of operands and returns the result of the expression.\n    \n    Args:\n        operators (list): A list of operators.\n        operands (list): A list of operands.\n    \n    Returns:\n        float: The result of the expression.\n    \"\"\"\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += \" \" + operators[i] + \" \" + str(operands[i + 1])\n    result = eval(expression)\n    return result"], [0.9236994981765747, "def perform_algebra(operators, operands):\n    \"\"\"\n    Perform algebraic operations on a list of operators and operands.\n    \n    Args:\n        operators: A list of algebraic operators.\n        operands: A list of operands.\n    \n    Returns:\n        The result of the algebraic operations.\n    \"\"\"\n    import operator\n    op = {\"+\": operator.add, \"-\": operator.sub, \"*\": operator.mul, \"//\": operator.floordiv, \"**\": operator.pow, \"%\": operator.mod}\n    operands = add_unary_minus_operator(operators, operands)\n    result = operands[0]\n    for i in range(1, len(operands)):\n        result = op[operators[i-1]](result, operands[i])\n    return result"], [0.9232066869735718, "def do_algebra_advanced(operators, operands, priority_operations):\n    \"\"\"\n    \"\"\"\n    try:\n        # Pair operators and priorities\n        op_pri_pairs = list(zip(operators, priority_operations))\n        # Sort by second item in tuple (priority)\n        sorted_op_pri_pairs = sorted(op_pri_pairs, key=lambda x: x[1])\n\n        # Pair operands and priorities missing the last item\n        opd_pri_pairs = list(zip(operands[:-1], priority_operations))\n        # Sort by second item in tuple (priority)\n        sorted_opd_pri_pairs = sorted(opd_pri_pairs, key=lambda x: x[1])\n\n        # Construct string to be evaluated\n        equation = \"({})\".format(sorted_op_pri_pairs[0][0])  # first operand\n        for i in range(1, len(operands)):\n            equation = \"({} {} {})\".format(equation, sorted_op_pri_pairs[i-1][0], sorted_opd_pri_pairs[i-1][0])\n        # Append the last operand\n        equation = equation + \" {}\".format(operands[-1])\n\n        # Evaluate the equation\n        return eval(equation)\n    except Exception as e:\n        print(\"An error occurred: \", e)"]]}
{"task_id": "HumanEval/161", "problem": [[0.9489492177963257, "def solve(s):\n    \"\"\"\n    \"\"\"\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        result = \"\"\n        for char in s:\n            if char.isalpha():\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n            else:\n                result += char\n        return result"], [0.925314724445343, "def reverse_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = ''.join([i for i in s if i.isalpha()])\n    return s[::-1]"], [0.9234504699707031, "def reverse_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = list(s)\n    letters = [i for i in s if i.isalpha()]\n    letters.reverse()\n    \n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = letters.pop(0)\n    return ''.join(s)"], [0.9234445095062256, "def reverse_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = list(s)\n    letters = [i for i in s if i.isalpha()]\n    letters.reverse()\n    \n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = letters.pop(0)\n    return ''.join(s)"]]}
{"task_id": "HumanEval/162", "problem": [[0.9375133514404297, "def string_to_md5(text):\n    \"\"\"\n    Converts a string to its md5 hash.\n\n    Args:\n        text (str): The string to be converted to md5 hash.\n\n    Returns:\n        str: The md5 hash of the input string.\n\n    \"\"\"\n    # If 'text' is an empty string, return None\n    if text == '':\n        return None\n\n    # Create an md5 hash object\n    hash_object = hashlib.md5()\n\n    # Update the hash object with 'text', encoded into utf-8 bytes\n    hash_object.update(text.encode('utf-8'))\n\n    # Return the hexadecimal representation of the md5 hash\n    return hash_object.hexdigest()"], [0.8899655342102051, "def md5_hash(input_string):\n    \"\"\"\n    Generate an MD5 hash of the given input string.\n    \n    Args:\n        input_string (str): The input string to hash.\n    \n    Returns:\n        str: The MD5 hash of the input string.\n    \"\"\"\n    return hashlib.md5(input_string.encode()).hexdigest()"]]}
{"task_id": "HumanEval/163", "problem": [[0.9303196668624878, "def even_number_list(a, b):\n    \"\"\"\n    Return a list of even numbers between a and b\n    \"\"\"\n    \"\"\"\n    return list(i for i in range(a, b+1) if i%2 == 0)"], [0.917346715927124, "def generate_numbers():\n    \"\"\"\n    Generate a list of 10 even numbers starting from 26.\n    \"\"\"\n    numbers = []\n    current_number = 26\n\n    while len(numbers) < 10:\n        digits = [int(digit) for digit in str(current_number)]\n        if all(digit % 2 == 0 for digit in digits):\n            numbers.append(current_number)\n        current_number += 2\n\n    return numbers"], [0.9141643643379211, "def generate_even_numbers(n):\n    \"\"\"\n    Generate even numbers from 0 to n.\n    \"\"\"\n    for i in range(n + 1):\n        if i % 2 == 0:\n            yield i\n    \n    def generate_even_numbers(n):\n    \"\"\"\n    Generate even numbers from 0 to n.\n    \"\"\"\n    num = 0\n    for _ in range(n):\n        yield num\n        num += 2"], [0.9122541546821594, "def get_even_numbers(arr):\n    \"\"\"\n    Return a new array of all even numbers from the given array, in ascending order.\n    \n    >>> get_even_numbers([7, 8, 10, 1, 2, 2])\n    [2, 2, 8]\n    \"\"\"\n    even_numbers = []\n    for num in arr:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    even_numbers.sort()\n    return even_numbers"], [0.9097756743431091, "def first_n_even(n):\n    \"\"\"\n    Return the first n even numbers.\n    >>> first_n_even(5)\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    result = []\n    for i in range(2, 2*n+1, 2):\n        result.append(i)\n    return result"], [0.9082360863685608, "def generate_even_numbers(start, end):\n    \"\"\"\n    Generate a list of even numbers within a given range.\n\n    Args:\n        start (int): The starting number of the range.\n        end (int): The ending number of the range.\n\n    Returns:\n        list: A list of even numbers within the given range.\n    \"\"\"\n    even_numbers = []\n    for number in range(start, end + 1):\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"], [0.9079514145851135, "def filter(numbers):\n    \"\"\"\n    Filter the given list of numbers, keeping only the even numbers.\n    \n    >>> filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10]\n    \"\"\"\n    return [n for n in numbers if n > 10 and n % 2 == 0]"]]}
