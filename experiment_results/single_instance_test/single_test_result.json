{
  "task_id": "HumanEval/0",
  "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
  "generated_code": "Here's the implementation of the `has_close_elements` function:\n\n```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n```\n\nThe function takes two arguments:\n\n1. `numbers`: a list of floating-point numbers\n2. `threshold`: a floating-point number representing the maximum allowed difference between any two numbers in the list\n\nThe function then iterates through the list of numbers, comparing each number with every other number in the list. If the absolute difference between any two numbers is less than the given `threshold`, the function returns `True`, indicating that there are two numbers in the list that are closer to each other than the threshold.\n\nIf no such pair of numbers is found, the function returns `False`.\n\nThe docstring includes two example usages of the function, along with their expected outputs.",
  "syntax_valid": false,
  "model": "claude-3-haiku-20240307",
  "augmentation_type": "no_rag",
  "metrics": {
    "input_tokens": 137,
    "output_tokens": 348,
    "total_tokens": 485,
    "input_cost": 3.425e-05,
    "output_cost": 0.000435,
    "total_cost": 0.00046925,
    "latency_seconds": 3.0385982990264893,
    "timestamp": "2025-08-04T01:08:32.249657",
    "model_name": "claude-3-haiku-20240307",
    "success": true,
    "error_message": ""
  },
  "timestamp": "2025-08-04T01:08:35.288488"
}