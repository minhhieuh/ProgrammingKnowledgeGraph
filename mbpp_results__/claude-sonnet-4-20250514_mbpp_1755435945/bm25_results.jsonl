{"task_id": 11, "generation": "def remove_Occ(string, char):\n    if char not in string:\n        return string\n    \n    # Find first occurrence\n    first_index = string.find(char)\n    \n    # Find last occurrence\n    last_index = string.rfind(char)\n    \n    # If there's only one occurrence, remove it\n    if first_index == last_index:\n        return string[:first_index] + string[first_index + 1:]\n    \n    # Remove both first and last occurrences\n    # First remove the last occurrence (higher index)\n    result = string[:last_index] + string[last_index + 1:]\n    \n    # Then remove the first occurrence from the modified string\n    result = result[:first_index] + result[first_index + 1:]\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 12, "generation": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)", "is_syntactically_valid": true}
{"task_id": 13, "generation": "from collections import Counter\n\ndef count_common(words):\n    # Count frequency of each word\n    word_counts = Counter(words)\n    \n    # Get the maximum frequency\n    max_count = max(word_counts.values())\n    \n    # Find all words with maximum frequency\n    most_common = [(word, count) for word, count in word_counts.items() if count == max_count]\n    \n    # Sort by word alphabetically for consistent output\n    most_common.sort(key=lambda x: x[0])\n    \n    return most_common", "is_syntactically_valid": true}
{"task_id": 14, "generation": "def find_Volume(base, height, length):\n    return (base * height * length) // 2", "is_syntactically_valid": true}
{"task_id": 15, "generation": "def split_lowerstring(s):\n    result = []\n    current_segment = \"\"\n    \n    for char in s:\n        if char.islower():\n            if current_segment:\n                result.append(current_segment)\n                current_segment = \"\"\n            current_segment += char\n        else:\n            current_segment += char\n    \n    if current_segment:\n        result.append(current_segment)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 16, "generation": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 17, "generation": "def square_perimeter(side_length):\n    return 4 * side_length", "is_syntactically_valid": true}
{"task_id": 18, "generation": "def remove_dirty_chars(first_string, second_string):\n    # Convert second string to a set for faster lookup\n    chars_to_remove = set(second_string)\n    \n    # Build result string by keeping only characters not in second string\n    result = \"\"\n    for char in first_string:\n        if char not in chars_to_remove:\n            result += char\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 19, "generation": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))", "is_syntactically_valid": true}
{"task_id": 20, "generation": "def is_woodall(n):\n    if n < 1:\n        return False\n    \n    # Check if n is a Woodall number by testing the formula k * 2^k - 1 = n\n    # Rearranging: k * 2^k = n + 1\n    target = n + 1\n    k = 1\n    \n    while k * (2 ** k) <= target:\n        if k * (2 ** k) == target:\n            return True\n        k += 1\n        # Prevent infinite loop for very large numbers\n        if k > 50:  # reasonable upper bound\n            break\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 21, "generation": "def multiples_of_num(m, n):\n    return [n * i for i in range(1, m + 1)]", "is_syntactically_valid": true}
{"task_id": 22, "generation": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "is_syntactically_valid": true}
{"task_id": 23, "generation": "def maximum_Sum(lists):\n    max_sum = 0\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum", "is_syntactically_valid": true}
{"task_id": 24, "generation": "def binary_to_decimal(binary):\n    \"\"\"\n    Converts a binary number to its decimal equivalent.\n    Args:\n        binary: binary number as an integer\n    Returns:\n        The decimal equivalent of the binary number\n    \"\"\"\n    binary_str = str(binary)\n    decimal = 0\n    power = 0\n    \n    # Process digits from right to left\n    for i in range(len(binary_str) - 1, -1, -1):\n        digit = int(binary_str[i])\n        decimal += digit * (2 ** power)\n        power += 1\n    \n    return decimal", "is_syntactically_valid": true}
{"task_id": 25, "generation": "def find_Product(arr, n):\n    # Count frequency of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Find product of non-repeated elements (elements with frequency 1)\n    product = 1\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n    \n    return product", "is_syntactically_valid": true}
{"task_id": 26, "generation": "def check_k_elements(tuple_list, k):\n    for tuple_item in tuple_list:\n        if k not in tuple_item:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 27, "generation": "def remove(lst):\n    result = []\n    for string in lst:\n        new_string = \"\"\n        for char in string:\n            if not char.isdigit():\n                new_string += char\n        result.append(new_string)\n    return result", "is_syntactically_valid": true}
{"task_id": 28, "generation": "def binomial_Coeff(n, k):\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Use the multiplicative formula for efficiency\n    result = 1\n    for i in range(min(k, n - k)):\n        result = result * (n - i) // (i + 1)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 29, "generation": "def get_Odd_Occurrence(arr, n):\n    count_dict = {}\n    \n    # Count frequency of each element\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Find element with odd frequency\n    for num, count in count_dict.items():\n        if count % 2 == 1:\n            return num", "is_syntactically_valid": true}
{"task_id": 30, "generation": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    # Count single character substrings\n    count += n\n    \n    # Count substrings of length 2 or more with same start and end characters\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 31, "generation": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Count frequency of each integer across all lists\n    counter = Counter()\n    for lst in lists:\n        for num in lst:\n            counter[num] += 1\n    \n    # Use a min heap to keep track of top k elements\n    # We store (-frequency, number) to simulate max heap behavior\n    heap = []\n    \n    for num, freq in counter.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        elif freq > heap[0][0]:\n            heapq.heapreplace(heap, (freq, num))\n    \n    # Extract elements from heap and sort by frequency (descending)\n    result = []\n    while heap:\n        freq, num = heapq.heappop(heap)\n        result.append((freq, num))\n    \n    # Sort by frequency descending, then by value ascending for ties\n    result.sort(key=lambda x: (-x[0], x[1]))\n    \n    return [num for freq, num in result]", "is_syntactically_valid": true}
{"task_id": 32, "generation": "def max_Prime_Factors(n):\n    max_prime = -1\n    \n    # Handle factor 2\n    while n % 2 == 0:\n        max_prime = 2\n        n = n // 2\n    \n    # Check odd factors from 3 onwards\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n        i += 2\n    \n    # If n is still greater than 1, then it's a prime\n    if n > 1:\n        max_prime = n\n    \n    return max_prime", "is_syntactically_valid": true}
{"task_id": 33, "generation": "def decimal_To_Binary(n):\n    if n == 0:\n        return 0\n    \n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    \n    return int(binary)", "is_syntactically_valid": true}
{"task_id": 34, "generation": "def find_missing(arr, n):\n    \"\"\"Find the missing number in a sorted array of n-1 elements from 1 to n\"\"\"\n    # Calculate expected sum of numbers from 1 to n\n    expected_sum = n * (n + 1) // 2\n    \n    # Calculate actual sum of elements in array\n    actual_sum = sum(arr)\n    \n    # The difference is the missing number\n    return expected_sum - actual_sum", "is_syntactically_valid": true}
{"task_id": 35, "generation": "def find_rect_num(n):\n    return n * (n + 1)", "is_syntactically_valid": true}
{"task_id": 36, "generation": "def find_Nth_Digit(numerator, denominator, n):\n    # Perform long division to find the nth digit after decimal point\n    remainder = numerator % denominator\n    \n    for i in range(n):\n        remainder *= 10\n        digit = remainder // denominator\n        remainder = remainder % denominator\n        \n        if i == n - 1:  # nth digit (1-indexed)\n            return digit\n    \n    return digit", "is_syntactically_valid": true}
{"task_id": 37, "generation": "def sort_mixed_list(mixed_list):\n    integers = []\n    strings = []\n    \n    for item in mixed_list:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n    \n    integers.sort()\n    strings.sort()\n    \n    return integers + strings", "is_syntactically_valid": true}
{"task_id": 38, "generation": "def div_even_odd(lst):\n    # Find first even number\n    first_even = None\n    for num in lst:\n        if num % 2 == 0:\n            first_even = num\n            break\n    \n    # Find first odd number\n    first_odd = None\n    for num in lst:\n        if num % 2 == 1:\n            first_odd = num\n            break\n    \n    # Return division of first even by first odd\n    if first_even is not None and first_odd is not None:\n        return first_even // first_odd\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 39, "generation": "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Create a max heap (using negative values for max heap behavior)\n    heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(heap)\n    \n    result = []\n    prev_count, prev_char = 0, ''\n    \n    while heap:\n        # Get the most frequent character\n        count, char = heapq.heappop(heap)\n        count = -count  # Convert back to positive\n        \n        # Add it to result\n        result.append(char)\n        \n        # If we have a previous character to put back, do it now\n        if prev_count > 0:\n            heapq.heappush(heap, (-prev_count, prev_char))\n        \n        # Update previous character info\n        prev_count = count - 1\n        prev_char = char\n    \n    # Check if we used all characters\n    if len(result) != len(s):\n        return \"\"  # Not possible to rearrange\n    \n    return ''.join(result)", "is_syntactically_valid": true}
{"task_id": 40, "generation": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened = []\n    for sublist in list_of_lists:\n        flattened.extend(sublist)\n    \n    # Use Counter to count frequencies\n    frequency_counter = Counter(flattened)\n    \n    # Convert Counter to dictionary and return\n    return dict(frequency_counter)", "is_syntactically_valid": true}
{"task_id": 41, "generation": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))", "is_syntactically_valid": true}
{"task_id": 42, "generation": "def find_Sum(arr, n):\n    element_count = {}\n    \n    # Count occurrences of each element\n    for element in arr:\n        element_count[element] = element_count.get(element, 0) + 1\n    \n    # Sum elements that appear more than once\n    total_sum = 0\n    for element, count in element_count.items():\n        if count > 1:\n            total_sum += element\n    \n    return total_sum", "is_syntactically_valid": true}
{"task_id": 43, "generation": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 44, "generation": "import re\n\ndef text_match_string(text):\n    pattern = r'^python'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 45, "generation": "import math\n\ndef get_gcd(arr):\n    if not arr:\n        return 0\n    \n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = math.gcd(result, arr[i])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 46, "generation": "def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))", "is_syntactically_valid": true}
{"task_id": 47, "generation": "def compute_Last_Digit(a, b):\n    if a >= b:\n        return 1\n    \n    result = 1\n    for i in range(a + 1, b + 1):\n        result = (result * i) % 10\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 48, "generation": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set (1st, 3rd, 5th, etc.)\n    # In binary: ...10101010101010101010101010101010\n    # This is 0xAAAAAAAA for 32-bit numbers\n    odd_mask = 0xAAAAAAAA\n    \n    # OR the number with the odd mask to set all odd bits\n    return n | odd_mask", "is_syntactically_valid": true}
{"task_id": 49, "generation": "def specified_element(two_d_list, index):\n    result = []\n    for row in two_d_list:\n        result.append(row[index])\n    return result", "is_syntactically_valid": true}
{"task_id": 50, "generation": "def min_length_list(lists):\n    min_list = min(lists, key=lambda x: len(x))\n    return (len(min_list), min_list)", "is_syntactically_valid": true}
{"task_id": 51, "generation": "def check_equilateral(a, b, c):\n    return a == b == c", "is_syntactically_valid": true}
{"task_id": 52, "generation": "def parallelogram_area(base, height):\n    return base * height", "is_syntactically_valid": true}
{"task_id": 53, "generation": "def check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "is_syntactically_valid": true}
{"task_id": 54, "generation": "def counting_sort(arr):\n    if not arr:\n        return arr\n    \n    # Find the range of input\n    min_val = min(arr)\n    max_val = max(arr)\n    range_val = max_val - min_val + 1\n    \n    # Create count array\n    count = [0] * range_val\n    \n    # Count occurrences of each element\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Build the sorted array\n    result = []\n    for i in range(range_val):\n        result.extend([i + min_val] * count[i])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 55, "generation": "def tn_gp(a, n, r):\n    \"\"\"\n    Find the nth term of a geometric series.\n    \n    Args:\n        a: first term\n        n: term number (1-indexed)\n        r: common ratio\n    \n    Returns:\n        The nth term of the geometric series\n    \"\"\"\n    return a * (r ** (n - 1))", "is_syntactically_valid": true}
{"task_id": 56, "generation": "def check(n):\n    # Convert number to string to easily reverse it\n    str_n = str(n)\n    \n    # Reverse the string and convert back to integer\n    reversed_n = int(str_n[::-1])\n    \n    # Check if n is one less than twice its reverse\n    return n == (2 * reversed_n) - 1", "is_syntactically_valid": true}
{"task_id": 57, "generation": "def find_Max_Num(digits, n):\n    # Sort digits in descending order to get the largest number\n    digits.sort(reverse=True)\n    \n    # Convert each digit to string and join them\n    result = ''.join(str(digit) for digit in digits)\n    \n    # Convert back to integer and return\n    return int(result)", "is_syntactically_valid": true}
{"task_id": 58, "generation": "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)", "is_syntactically_valid": true}
{"task_id": 59, "generation": "def is_octagonal(n):\n    return n * (3 * n - 2)", "is_syntactically_valid": true}
{"task_id": 60, "generation": "def max_len_sub(arr, max_diff):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n  # dp[i] = max length of subsequence ending at index i\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= max_diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 61, "generation": "def count_Substrings(s, n):\n    count = 0\n    \n    # Check all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            length = len(substring)\n            digit_sum = sum(int(char) for char in substring)\n            \n            # Check if sum of digits equals length\n            if digit_sum == length:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 62, "generation": "def smallest_num(numbers):\n    return min(numbers)", "is_syntactically_valid": true}
{"task_id": 63, "generation": "def max_difference(tuple_list):\n    max_diff = 0\n    for pair in tuple_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "is_syntactically_valid": true}
{"task_id": 64, "generation": "def subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 65, "generation": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "is_syntactically_valid": true}
{"task_id": 66, "generation": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)", "is_syntactically_valid": true}
{"task_id": 67, "generation": "def bell_number(n):\n    if n == 0:\n        return 1\n    \n    # Create Bell triangle\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        # First element in each row is same as last element of previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]", "is_syntactically_valid": true}
{"task_id": 68, "generation": "def is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    \n    # Check if array is non-decreasing (monotonic increasing)\n    is_increasing = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            is_increasing = False\n            break\n    \n    # Check if array is non-increasing (monotonic decreasing)\n    is_decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            is_decreasing = False\n            break\n    \n    return is_increasing or is_decreasing", "is_syntactically_valid": true}
{"task_id": 69, "generation": "def is_sublist(main_list, sub_list):\n    if len(sub_list) == 0:\n        return True\n    \n    if len(sub_list) > len(main_list):\n        return False\n    \n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 70, "generation": "def get_equal(tuples_list, expected_length):\n    for tuple_item in tuples_list:\n        if len(tuple_item) != expected_length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'", "is_syntactically_valid": true}
{"task_id": 71, "generation": "def comb_sort(arr):\n    if not arr:\n        return arr\n    \n    # Make a copy to avoid modifying the original array\n    arr = arr.copy()\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted_flag = False\n    \n    while not sorted_flag:\n        # Update the gap value for next comb\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted_flag = True\n        \n        # A single \"comb\" over the input list\n        i = 0\n        while i + gap < n:\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted_flag = False\n            i += 1\n    \n    return arr", "is_syntactically_valid": true}
{"task_id": 72, "generation": "def dif_Square(n):\n    # A number can be represented as difference of two squares if and only if\n    # it is not of the form 4k + 2 (i.e., n % 4 != 2)\n    return n % 4 != 2", "is_syntactically_valid": true}
{"task_id": 73, "generation": "import re\n\ndef multiple_split(text):\n    return re.split(r'[\\n*]', text)", "is_syntactically_valid": true}
{"task_id": 74, "generation": "def is_samepatterns(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    \n    map1_to_2 = {}\n    map2_to_1 = {}\n    \n    for i in range(len(arr1)):\n        elem1 = arr1[i]\n        elem2 = arr2[i]\n        \n        if elem1 in map1_to_2:\n            if map1_to_2[elem1] != elem2:\n                return False\n        else:\n            map1_to_2[elem1] = elem2\n            \n        if elem2 in map2_to_1:\n            if map2_to_1[elem2] != elem1:\n                return False\n        else:\n            map2_to_1[elem2] = elem1\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 75, "generation": "def find_tuples(tuple_list, k):\n    result = []\n    for tuple_item in tuple_list:\n        if all(element % k == 0 for element in tuple_item):\n            result.append(tuple_item)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 76, "generation": "def count_Squares(m, n):\n    total_squares = 0\n    \n    # For each possible square size from 1x1 to min(m,n) x min(m,n)\n    for size in range(1, min(m, n) + 1):\n        # Number of squares of this size that can fit\n        squares_of_this_size = (m - size + 1) * (n - size + 1)\n        total_squares += squares_of_this_size\n    \n    return total_squares", "is_syntactically_valid": true}
{"task_id": 77, "generation": "def is_Diff(num):\n    even_sum = 0\n    odd_sum = 0\n    \n    # Convert number to string to iterate through digits\n    for digit_char in str(num):\n        digit = int(digit_char)\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n    \n    # Return True if difference is odd, False if difference is even\n    return (even_sum - odd_sum) % 2 != 0", "is_syntactically_valid": true}
{"task_id": 78, "generation": "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n + 1):\n        # Count the number of set bits (1s) in the binary representation\n        set_bits = bin(i).count('1')\n        # Check if the number of set bits is odd\n        if set_bits % 2 == 1:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 79, "generation": "def word_len(word):\n    return len(word) % 2 == 1", "is_syntactically_valid": true}
{"task_id": 80, "generation": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    The tetrahedral number formula is: T(n) = n * (n + 1) * (n + 2) / 6\n    \"\"\"\n    return n * (n + 1) * (n + 2) / 6", "is_syntactically_valid": true}
{"task_id": 81, "generation": "def zip_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i], tuple2[i % len(tuple2)]))\n    return result", "is_syntactically_valid": true}
{"task_id": 82, "generation": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3", "is_syntactically_valid": true}
{"task_id": 83, "generation": "def get_Char(s):\n    total = sum(ord(char) for char in s)\n    return chr(total)", "is_syntactically_valid": true}
{"task_id": 84, "generation": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    \n    # Initialize the sequence with first two values\n    newman_conway = [0] * (n + 1)  # 0-indexed, so we need n+1 elements\n    newman_conway[1] = 1\n    newman_conway[2] = 1\n    \n    # Generate the sequence using the recurrence relation\n    # P(n) = P(P(n-1)) + P(n - P(n-1))\n    for i in range(3, n + 1):\n        newman_conway[i] = newman_conway[newman_conway[i-1]] + newman_conway[i - newman_conway[i-1]]\n    \n    return newman_conway[n]", "is_syntactically_valid": true}
{"task_id": 85, "generation": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2", "is_syntactically_valid": true}
{"task_id": 86, "generation": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1", "is_syntactically_valid": true}
{"task_id": 87, "generation": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}", "is_syntactically_valid": true}
{"task_id": 88, "generation": "def freq_count(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency", "is_syntactically_valid": true}
{"task_id": 89, "generation": "def closest_num(n):\n    return n - 1", "is_syntactically_valid": true}
{"task_id": 90, "generation": "def len_log(words):\n    return max(len(word) for word in words)", "is_syntactically_valid": true}
{"task_id": 91, "generation": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 92, "generation": "def is_undulating(num_str):\n    if len(num_str) < 3:\n        return len(num_str) == 3 and num_str[0] != num_str[1] and num_str[0] == num_str[2]\n    \n    if num_str[0] == num_str[1]:\n        return False\n    \n    for i in range(2, len(num_str)):\n        if i % 2 == 0:\n            if num_str[i] != num_str[0]:\n                return False\n        else:\n            if num_str[i] != num_str[1]:\n                return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 93, "generation": "def power(a, b):\n    return a ** b", "is_syntactically_valid": true}
{"task_id": 94, "generation": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_name = None\n    \n    for name, value in tuples_list:\n        if value < min_value:\n            min_value = value\n            min_name = name\n    \n    return min_name", "is_syntactically_valid": true}
{"task_id": 95, "generation": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)", "is_syntactically_valid": true}
{"task_id": 96, "generation": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 97, "generation": "def frequency_lists(lists):\n    frequency = {}\n    for lst in lists:\n        for element in lst:\n            if element in frequency:\n                frequency[element] += 1\n            else:\n                frequency[element] = 1\n    return frequency", "is_syntactically_valid": true}
{"task_id": 98, "generation": "def multiply_num(numbers):\n    if not numbers:\n        return 0.0\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product / len(numbers)", "is_syntactically_valid": true}
{"task_id": 99, "generation": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    \n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    \n    return binary", "is_syntactically_valid": true}
{"task_id": 100, "generation": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        s = str(num)\n        return s == s[::-1]\n    \n    # Start checking from n+1\n    candidate = n + 1\n    \n    while True:\n        if is_palindrome(candidate):\n            return candidate\n        candidate += 1", "is_syntactically_valid": true}
{"task_id": 101, "generation": "def kth_element(arr, n, k):\n    return arr[k-1]", "is_syntactically_valid": true}
{"task_id": 102, "generation": "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    return ''.join(word.capitalize() for word in words)", "is_syntactically_valid": true}
{"task_id": 103, "generation": "def eulerian_num(n, m):\n    # Base cases\n    if m == 0:\n        return 1 if n == 0 else 0\n    if m >= n:\n        return 0\n    \n    # Create a table to store Eulerian numbers\n    # A(n, m) can be computed using dynamic programming\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: A(0, 0) = 1\n    dp[0][0] = 1\n    \n    # Fill the table using the recurrence relation:\n    # A(n, m) = (m + 1) * A(n-1, m) + (n - m) * A(n-1, m-1)\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = 1\n            elif j == i:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = (j + 1) * dp[i-1][j] + (i - j) * dp[i-1][j-1]\n    \n    return dp[n][m]", "is_syntactically_valid": true}
{"task_id": 104, "generation": "def sort_sublists(list_of_lists):\n    return list(map(lambda sublist: sorted(sublist), list_of_lists))", "is_syntactically_valid": true}
{"task_id": 105, "generation": "def count(boolean_list):\n    return sum(boolean_list)", "is_syntactically_valid": true}
{"task_id": 106, "generation": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)", "is_syntactically_valid": true}
{"task_id": 107, "generation": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        num_str = str(num)\n        is_hex = True\n        for char in num_str:\n            if char not in '0123456789ABCDEFabcdef':\n                is_hex = False\n                break\n        if is_hex:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 108, "generation": "import heapq\n\ndef merge_sorted_list(*lists):\n    # First, sort each input list\n    sorted_lists = [sorted(lst) for lst in lists]\n    \n    # Create a min heap with (value, list_index, element_index) tuples\n    heap = []\n    \n    # Initialize heap with first element from each non-empty list\n    for i, lst in enumerate(sorted_lists):\n        if lst:  # Only add if list is not empty\n            heapq.heappush(heap, (lst[0], i, 0))\n    \n    result = []\n    \n    # Process heap until empty\n    while heap:\n        # Get the smallest element\n        value, list_idx, elem_idx = heapq.heappop(heap)\n        result.append(value)\n        \n        # Add next element from the same list if it exists\n        if elem_idx + 1 < len(sorted_lists[list_idx]):\n            next_value = sorted_lists[list_idx][elem_idx + 1]\n            heapq.heappush(heap, (next_value, list_idx, elem_idx + 1))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 109, "generation": "def odd_Equivalent(binary_string, n):\n    count = 0\n    current = binary_string\n    \n    for i in range(n):\n        # Check if current rotation represents an odd number (ends with '1')\n        if current[-1] == '1':\n            count += 1\n        \n        # Rotate the string: move first character to the end\n        current = current[1:] + current[0]\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 110, "generation": "def extract_missing(ranges, start, end):\n    result = []\n    \n    # Add gap before first range\n    if ranges:\n        first_start = ranges[0][0]\n        if start < first_start:\n            result.append((start, first_start))\n    \n    # Add gap after last range\n    if ranges:\n        last_end = ranges[-1][1]\n        if last_end < end:\n            result.append((last_end, end))\n    \n    # Add gaps between consecutive ranges\n    for i in range(len(ranges) - 1):\n        current_end = ranges[i][1]\n        next_start = ranges[i + 1][0]\n        if current_end < next_start:\n            result.append((current_end, next_start))\n    \n    # Add gap from each range end to overall end\n    for i in range(len(ranges)):\n        range_end = ranges[i][1]\n        if range_end < end:\n            result.append((range_end, end))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 111, "generation": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    # Start with the first list as the initial set of common elements\n    common = set(nested_lists[0])\n    \n    # Find intersection with each subsequent list\n    for lst in nested_lists[1:]:\n        common = common.intersection(set(lst))\n    \n    # Convert back to list and return\n    return list(common)", "is_syntactically_valid": true}
{"task_id": 112, "generation": "def perimeter(radius, height):\n    return 2 * (radius + height)", "is_syntactically_valid": true}
{"task_id": 113, "generation": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "is_syntactically_valid": true}
{"task_id": 114, "generation": "def assign_freq(tuple_list):\n    # Count frequency of each tuple\n    freq_dict = {}\n    for tup in tuple_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    \n    # Create result list with tuples and their frequencies\n    result = []\n    for tup, freq in freq_dict.items():\n        result.append(tup + (freq,))\n    \n    # Convert to string representation\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 115, "generation": "def empty_dit(data):\n    if isinstance(data, dict):\n        return len(data) == 0\n    \n    if isinstance(data, list):\n        return all(len(item) == 0 for item in data)\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 116, "generation": "def tuple_to_int(t):\n    result = 0\n    for digit in t:\n        result = result * 10 + digit\n    return result", "is_syntactically_valid": true}
{"task_id": 117, "generation": "def list_to_float(lst):\n    def convert_element(element):\n        if isinstance(element, (tuple, list)):\n            return tuple(convert_element(item) for item in element)\n        else:\n            try:\n                return float(element)\n            except (ValueError, TypeError):\n                return element\n    \n    result = [convert_element(item) for item in lst]\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 118, "generation": "def string_to_list(s):\n    return s.split()", "is_syntactically_valid": true}
{"task_id": 119, "generation": "def search(arr, n):\n    for i in range(0, n, 2):\n        if i == n - 1 or arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1", "is_syntactically_valid": true}
{"task_id": 120, "generation": "def max_product_tuple(tuples_list):\n    max_product = 0\n    for tuple_pair in tuples_list:\n        product = tuple_pair[0] * tuple_pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product", "is_syntactically_valid": true}
{"task_id": 121, "generation": "Looking at the test cases, I need to write a function `check_triplet` that takes an array and three values, then checks if there exists a triplet in the array that sums to the sum of those three values.\n\nLet me analyze the test cases:\n1. `check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)` should return `True`\n   - Target sum: 8 + 6 + 0 = 14\n   - Need to find three numbers in the array that sum to 14\n   - Example: 2 + 7 + 5 = 14 \u2713\n\n2. `check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)` should return `False`\n   - Target sum: 8 + 6 + 0 = 14\n   - Need to check if any triplet sums to 14\n\n3. `check_triplet([10, 4, 2, 3, 5], 5, 15, 0)` should return `True`\n   - Target sum: 5 + 15 + 0 = 20\n   - Example: 10 + 2 + 3 + 5 = 20, but we need exactly 3 numbers\n   - Actually: 10 + 5 + 5 = 20, but there's only one 5\n   - Let me check: 10 + 4 + 2 + 3 + 5 = 24, so maybe 10 + 5 + 5, but we only have one 5\n   - Actually: 10 + 2 + 3 = 15, 10 + 4 + 2 = 16, 10 + 4 + 3 = 17, 10 + 4 + 5 = 19, 10 + 2 + 5 = 17, 10 + 3 + 5 = 18, 4 + 2", "is_syntactically_valid": false}
{"task_id": 122, "generation": "def smartNumber(n):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    def prime_factors(num):\n        factors = []\n        d = 2\n        while d * d <= num:\n            while num % d == 0:\n                factors.append(d)\n                num //= d\n            d += 1\n        if num > 1:\n            factors.append(num)\n        return factors\n    \n    def is_smart(num):\n        if num < 10:\n            return False\n        \n        digit_sum = sum_of_digits(num)\n        factors = prime_factors(num)\n        factor_digit_sum = sum(sum_of_digits(factor) for factor in factors)\n        \n        return digit_sum == factor_digit_sum\n    \n    count = 0\n    num = 10\n    \n    while count < n:\n        if is_smart(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n    \n    return num", "is_syntactically_valid": true}
{"task_id": 123, "generation": "def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        divisors_sum = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors_sum += i\n                if i != 1 and i != num // i:\n                    divisors_sum += num // i\n        return divisors_sum\n    \n    amicable_sum = 0\n    checked = set()\n    \n    for i in range(1, n + 1):\n        if i in checked:\n            continue\n            \n        sum_i = sum_of_divisors(i)\n        sum_sum_i = sum_of_divisors(sum_i)\n        \n        if i == sum_sum_i and i != sum_i and sum_i <= n:\n            amicable_sum += i\n            checked.add(i)\n            if sum_i <= n:\n                amicable_sum += sum_i\n                checked.add(sum_i)\n    \n    return amicable_sum", "is_syntactically_valid": true}
{"task_id": 124, "generation": "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)", "is_syntactically_valid": true}
{"task_id": 125, "generation": "def find_length(binary_string, n):\n    max_diff = 0\n    current_diff = 0\n    \n    for char in binary_string:\n        if char == '0':\n            current_diff += 1\n        else:  # char == '1'\n            current_diff -= 1\n        \n        max_diff = max(max_diff, current_diff)\n        \n        if current_diff < 0:\n            current_diff = 0\n    \n    return max_diff", "is_syntactically_valid": true}
{"task_id": 126, "generation": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    def get_divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return divisors\n    \n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n    \n    common_divisors = []\n    for div in divisors_a:\n        if div in divisors_b:\n            common_divisors.append(div)\n    \n    return sum(common_divisors)", "is_syntactically_valid": true}
{"task_id": 127, "generation": "def multiply_int(a, b):\n    if b == 0:\n        return 0\n    \n    # Handle negative numbers\n    negative = False\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        negative = True\n    \n    a = abs(a)\n    b = abs(b)\n    \n    result = 0\n    for i in range(b):\n        result += a\n    \n    return -result if negative else result", "is_syntactically_valid": true}
{"task_id": 128, "generation": "def long_words(n, text):\n    words = text.split()\n    return [word for word in words if len(word) > n]", "is_syntactically_valid": true}
{"task_id": 129, "generation": "def magic_square_test(square):\n    n = len(square)\n    \n    # Check if it's a square matrix\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    # Calculate the magic sum (sum of first row)\n    magic_sum = sum(square[0])\n    \n    # Check all rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check all columns\n    for col in range(n):\n        col_sum = sum(square[row][col] for row in range(n))\n        if col_sum != magic_sum:\n            return False\n    \n    # Check main diagonal (top-left to bottom-right)\n    main_diag_sum = sum(square[i][i] for i in range(n))\n    if main_diag_sum != magic_sum:\n        return False\n    \n    # Check anti-diagonal (top-right to bottom-left)\n    anti_diag_sum = sum(square[i][n-1-i] for i in range(n))\n    if anti_diag_sum != magic_sum:\n        return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 130, "generation": "from collections import Counter\n\ndef max_occurrences(lst):\n    # Count frequency of each element\n    counter = Counter(lst)\n    \n    # Find the maximum frequency\n    max_freq = max(counter.values())\n    \n    # Find the element with maximum frequency\n    for item, freq in counter.items():\n        if freq == max_freq:\n            return (item, freq)", "is_syntactically_valid": true}
{"task_id": 131, "generation": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    vowel_chars = []\n    vowel_indices = []\n    \n    # Extract vowels and their positions\n    for i, char in enumerate(s_list):\n        if char in vowels:\n            vowel_chars.append(char)\n            vowel_indices.append(i)\n    \n    # Reverse the vowels and put them back\n    vowel_chars.reverse()\n    for i, index in enumerate(vowel_indices):\n        s_list[index] = vowel_chars[i]\n    \n    return ''.join(s_list)", "is_syntactically_valid": true}
{"task_id": 132, "generation": "def tup_string(tup):\n    return ''.join(tup)", "is_syntactically_valid": true}
{"task_id": 133, "generation": "def sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))", "is_syntactically_valid": true}
{"task_id": 134, "generation": "def check_last(arr, n, p):\n    # Make a copy of the array to avoid modifying the original\n    result_arr = arr[:]\n    \n    # Perform the operation n times\n    for _ in range(n):\n        # Rotate right by p positions\n        if len(result_arr) > 0:\n            p_mod = p % len(result_arr)\n            result_arr = result_arr[-p_mod:] + result_arr[:-p_", "is_syntactically_valid": false}
{"task_id": 135, "generation": "def hexagonal_num(n):\n    return n * (2 * n - 1)", "is_syntactically_valid": true}
{"task_id": 136, "generation": "def cal_electbill(units):\n    if units <= 50:\n        return units * 2.60\n    elif units <= 150:\n        return 50 * 2.60 + (units - 50) * 3.25\n    elif units <= 250:\n        return 50 * 2.60 + 100 * 3.25 + (units - 150) * 5.26\n    else:\n        return 50 * 2.60 + 100 * 3.25 + 100 * 5.26 + (units - 250) * 7.75", "is_syntactically_valid": true}
{"task_id": 137, "generation": "def zero_count(arr):\n    if not arr:\n        return 0.0\n    \n    zero_count = sum(1 for num in arr if num == 0)\n    return round(zero_count / len(arr), 2)", "is_syntactically_valid": true}
{"task_id": 138, "generation": "def is_Sum_Of_Powers_Of_Two(n):\n    return n % 2 == 0", "is_syntactically_valid": true}
{"task_id": 139, "generation": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius", "is_syntactically_valid": true}
{"task_id": 140, "generation": "def extract_singly(tuple_list):\n    # Flatten all tuples into a single list\n    all_elements = []\n    for tup in tuple_list:\n        all_elements.extend(tup)\n    \n    # Count occurrences of each element\n    element_count = {}\n    for element in all_elements:\n        element_count[element] = element_count.get(element, 0) + 1\n    \n    # Extract elements that occur only once, maintaining order\n    result = []\n    seen = set()\n    for element in all_elements:\n        if element_count[element] == 1 and element not in seen:\n            result.append(element)\n            seen.add(element)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 141, "generation": "def pancake_sort(arr):\n    def flip(arr, k):\n        \"\"\"Flip the first k elements of the array\"\"\"\n        return arr[:k][::-1] + arr[k:]\n    \n    def find_max_index(arr, n):\n        \"\"\"Find the index of the maximum element in the first n elements\"\"\"\n        max_val = max(arr[:n])\n        return arr.index(max_val)\n    \n    arr = arr.copy()  # Don't modify the original array\n    n = len(arr)\n    \n    # Start from the complete array and reduce the size one by one\n    for curr_size in range(n, 1, -1):\n        # Find index of the maximum element in arr[0..curr_size-1]\n        max_idx = find_max_index(arr, curr_size)\n        \n        # If maximum element is not at the end, do following steps:\n        if max_idx != curr_size - 1:\n            # First move the maximum element to beginning if it's not already there\n            if max_idx != 0:\n                arr = flip(arr, max_idx + 1)\n            \n            # Now move the maximum element to the end by flipping the entire current array\n            arr = flip(arr, curr_size)\n    \n    return arr", "is_syntactically_valid": true}
{"task_id": 142, "generation": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 143, "generation": "def find_lists(tuple_input):\n    count = 0\n    for item in tuple_input:\n        if isinstance(item, list):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 144, "generation": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total += abs(arr[i] - arr[j])\n    return total", "is_syntactically_valid": true}
{"task_id": 145, "generation": "def max_Abs_Diff(arr, n):\n    if n <= 1:\n        return 0\n    \n    min_val = min(arr)\n    max_val = max(arr)\n    \n    return max_val - min_val", "is_syntactically_valid": true}
{"task_id": 146, "generation": "def ascii_value_string(s):\n    return sum(ord(char) for char in s)", "is_syntactically_valid": true}
{"task_id": 147, "generation": "def max_path_sum(triangle, rows, cols):\n    # Create a DP table to store maximum path sums\n    dp = [[0] * cols for _ in range(rows)]\n    \n    # Initialize the first row\n    dp[0][0] = triangle[0][0]\n    \n    # Fill the DP table\n    for i in range(1, rows):\n        for j in range(i + 1):  # Only consider valid positions in triangle\n            # Can come from (i-1, j-1) or (i-1, j)\n            if j == 0:\n                # Can only come from (i-1, 0)\n                dp[i][j] = dp[i-1][0] + triangle[i][j]\n            elif j == i:\n                # Can only come from (i-1, j-1)\n                dp[i][j] = dp[i-1][j-1] + triangle[i][j]\n            else:\n                # Can come from either direction, take maximum\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]\n    \n    # Return the maximum value from the last row\n    return max(dp[rows-1][j] for j in range(rows))", "is_syntactically_valid": true}
{"task_id": 148, "generation": "def sum_digits_twoparts(n):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    \n    max_sum = 0\n    \n    # Try all possible ways to split the number\n    for i in range(1, n):\n        part1 = i\n        part2 = n - i\n        current_sum = digit_sum(part1) + digit_sum(part2)\n        max_sum = max(max_sum, current_sum)\n    \n    # Also consider the case where we don't split (entire number)\n    max_sum = max(max_sum, digit_sum(n))\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 149, "generation": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    \n    # dp[i] stores the length of longest subsequence ending at index i\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if current element and previous element differ by 1\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 150, "generation": "Looking at the test cases, I need to understand what this function should do:\n\n- `does_Contain_B(1,7,3) == True`\n- `does_Contain_B(1,-3,5) == False` \n- `does_Contain_B(3,2,5) == False`\n\nThis appears to be checking if a number B (third parameter) is present in an arithmetic sequence starting with A (first parameter) and having common difference D (second parameter).\n\nThe arithmetic sequence would be: A, A+D, A+2D, A+3D, ...\n\nFor B to be in this sequence, there must exist some non-negative integer n such that:\nB = A + n*D\n\nSolving for n: n = (B - A) / D\n\nFor B to be in the sequence:\n1. D cannot be 0 (unless A = B)\n2. (B - A) must be divisible by D\n3. n must be non-negative\n\nLet me verify with the test cases:\n- `does_Contain_B(1,7,3)`: n = (3-1)/7 = 2/7, not an integer, so False... but test expects True\n- Wait, let me reconsider the parameter order...\n\nLooking again, maybe the parameters are (A, D, B) where we check if B is in sequence starting at A with difference D:\n- `does_Contain_B(1,7,3)`: sequence is 1, 8, 15, 22... 3 is not here\n- Let me try (B, D, A): check if A is in sequence starting at B with difference D\n- `does_Contain_B(1,7,3)`: sequence starting at 1 with difference 7: 1, 8, 15... 3 is not here\n\nLet me try another interpretation: maybe it's checking if the third parameter can be reached from the first parameter using steps of the second parameter.\n\nActually, let me check if 3 can be reached from 1 using steps of 7 (including negative steps):\n1 + n*7 = 3\nn*7 = 2\nn = 2/7 (not integer)", "is_syntactically_valid": false}
{"task_id": 151, "generation": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1", "is_syntactically_valid": true}
{"task_id": 152, "generation": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 153, "generation": "def parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola given by y = ax^2 + bx + c\n    The vertex is at x = -b/(2a), y = c - b^2/(4a)\n    \"\"\"\n    x = -b / (2 * a)\n    y = c - (b * b) / (4 * a)\n    return (x, y)", "is_syntactically_valid": true}
{"task_id": 154, "generation": "def specified_element(two_d_list, index):\n    result = []\n    for row in two_d_list:\n        result.append(row[index])\n    return result", "is_syntactically_valid": true}
{"task_id": 155, "generation": "def even_bit_toggle_number(n):\n    # Create a mask with all even bits set to 1\n    # Even bits are at positions 0, 2, 4, 6, 8, etc.\n    # The pattern is 01010101... in binary\n    mask = 0\n    bit_position = 0\n    \n    # Create mask for even bit positions (0-indexed)\n    while bit_position < 32:  # Assuming 32-bit integers\n        if bit_position % 2 == 0:  # Even bit position\n            mask |= (1 << bit_position)\n        bit_position += 1\n    \n    # Toggle even bits using XOR with the mask\n    return n ^ mask", "is_syntactically_valid": true}
{"task_id": 156, "generation": "def tuple_int_str(tuple_of_tuples):\n    return tuple(tuple(int(value) for value in inner_tuple) for inner_tuple in tuple_of_tuples)", "is_syntactically_valid": true}
{"task_id": 157, "generation": "def encode_list(data):\n    if not data:\n        return []\n    \n    result = []\n    current_element = data[0]\n    count = 1\n    \n    for i in range(1, len(data)):\n        if data[i] == current_element:\n            count += 1\n        else:\n            result.append([count, current_element])\n            current_element = data[i]\n            count = 1\n    \n    # Add the last group\n    result.append([count, current_element])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 158, "generation": "def min_Ops(arr, n, k):\n    # Check if all elements have the same remainder when divided by k\n    remainders = [x % k for x in arr]\n    if len(set(remainders)) > 1:\n        return -1\n    \n    # If all elements are already equal\n    if len(set(arr)) == 1:\n        return 0\n    \n    # Sort the array to find median\n    sorted_arr = sorted(arr)\n    \n    # Find the median\n    if n % 2 == 1:\n        median = sorted_arr[n // 2]\n    else:\n        # For even number of elements, try both middle elements\n        mid1 = sorted_arr[n // 2 - 1]\n        mid2 = sorted_arr[n // 2]\n        \n        ops1 = sum(abs(x - mid1) // k for x in arr)\n        ops2 = sum(abs(x - mid2) // k for x in arr)\n        \n        return min(ops1, ops2)\n    \n    # Calculate total operations needed\n    total_ops = sum(abs(x - median) // k for x in arr)\n    \n    return total_ops", "is_syntactically_valid": true}
{"task_id": 159, "generation": "def month_season(month, day):\n    # Define season boundaries\n    # Spring: March 20 - June 20\n    # Summer: June 21 - September 22\n    # Autumn: September 23 - December 20\n    # Winter: December 21 - March 19\n    \n    month_lower = month.lower()\n    \n    if month_lower == 'december':\n        if day >= 21:\n            return 'winter'\n        else:\n            return 'autumn'\n    elif month_lower == 'january' or month_lower == 'february':\n        return 'winter'\n    elif month_lower == 'march':\n        if day >= 20:\n            return 'spring'\n        else:\n            return 'winter'\n    elif month_lower == 'april' or month_lower == 'may':\n        return 'spring'\n    elif month_lower == 'june':\n        if day >= 21:\n            return 'summer'\n        else:\n            return 'spring'\n    elif month_lower == 'july' or month_lower == 'august':\n        return 'summer'\n    elif month_lower == 'september':\n        if day >= 23:\n            return 'autumn'\n        else:\n            return 'summer'\n    elif month_lower == 'october' or month_lower == 'november':\n        return 'autumn'", "is_syntactically_valid": true}
{"task_id": 160, "generation": "def solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n    \n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return 'No solution'\n    \n    x *= n // gcd\n    y *= n // gcd\n    \n    return ('x = ', x, ', y = ', y)", "is_syntactically_valid": true}
{"task_id": 161, "generation": "def remove_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 162, "generation": "def sum_series(n):\n    total = 0\n    current = n\n    while current > 0:\n        total += current\n        current -= 2\n    return total", "is_syntactically_valid": true}
{"task_id": 163, "generation": "import math\n\ndef area_polygon(n, s):\n    \"\"\"\n    Calculate the area of a regular polygon.\n    \n    Args:\n    n: number of sides\n    s: side length\n    \n    Returns:\n    area of the regular polygon\n    \"\"\"\n    area = (n * s * s) / (4 * math.tan(math.pi / n))\n    return area", "is_syntactically_valid": true}
{"task_id": 164, "generation": "def areEquivalent(num1, num2):\n    def sum_of_divisors(n):\n        divisors_sum = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n    \n    return sum_of_divisors(num1) == sum_of_divisors(num2)", "is_syntactically_valid": true}
{"task_id": 165, "generation": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s):\n        # Convert character to lowercase and get its position in alphabet (0-based)\n        char_pos = ord(char.lower()) - ord('a')\n        # Check if character position matches string index\n        if char_pos == i:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 166, "generation": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 167, "generation": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    \n    # If n is already a power of 2, return n\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the position of the most significant bit\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power", "is_syntactically_valid": true}
{"task_id": 168, "generation": "def frequency(arr, num):\n    count = 0\n    for element in arr:\n        if element == num:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 169, "generation": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Use iterative approach to calculate nth Pell number\n    # Pell sequence: P(n) = 2*P(n-1) + P(n-2)\n    prev_prev = 0  # P(0)\n    prev = 1       # P(1)\n    \n    for i in range(2, n + 1):\n        current = 2 * prev + prev_prev\n        prev_prev = prev\n        prev = current\n    \n    return prev", "is_syntactically_valid": true}
{"task_id": 170, "generation": "def sum_range_list(lst, start_index, end_index):\n    return sum(lst[start_index:end_index+1])", "is_syntactically_valid": true}
{"task_id": 171, "generation": "def perimeter_pentagon(side_length):\n    return side_length * 5", "is_syntactically_valid": true}
{"task_id": 172, "generation": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i <= len(s) - 3:\n        if s[i:i+3] == 'std':\n            count += 1\n        i += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 173, "generation": "def remove_splchar(s):\n    return ''.join(char for char in s if char.isalnum())", "is_syntactically_valid": true}
{"task_id": 174, "generation": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result", "is_syntactically_valid": true}
{"task_id": 175, "generation": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    \n    return len(stack) == 0", "is_syntactically_valid": true}
{"task_id": 176, "generation": "def perimeter_triangle(a, b, c):\n    return a + b + c", "is_syntactically_valid": true}
{"task_id": 177, "generation": "import math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef answer(low, high):\n    # Try simple cases first - consecutive numbers or small multiples\n    for a in range(1, high + 1):\n        for b in range(a + 1, high + 1):\n            lcm_val = lcm(a, b)\n            if low <= lcm_val <= high:\n                return (a, b)\n    \n    # If no solution found in the simple cases, return None\n    return None", "is_syntactically_valid": true}
{"task_id": 178, "generation": "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return 'Matched!'\n    return 'Not Matched!'", "is_syntactically_valid": true}
{"task_id": 179, "generation": "def is_num_keith(n):\n    # Convert number to string to get individual digits\n    digits = [int(d) for d in str(n)]\n    num_digits = len(digits)\n    \n    # Start with the digits as the initial sequence\n    sequence = digits[:]\n    \n    # Generate sequence until we either find n or exceed it\n    while sequence[-1] < n:\n        # Calculate next term as sum of last num_digits terms\n        next_term = sum(sequence[-num_digits:])\n        sequence.append(next_term)\n    \n    # Check if the last term equals n\n    return sequence[-1] == n", "is_syntactically_valid": true}
{"task_id": 180, "generation": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    # Haversine formula\n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    \n    a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    \n    # Earth's radius in kilometers\n    r = 6371\n    \n    # Calculate the distance\n    distance = r * c * 1000  # Convert to meters\n    \n    return distance", "is_syntactically_valid": true}
{"task_id": 181, "generation": "def common_prefix(strings, n):\n    if not strings or n == 0:\n        return \"\"\n    \n    # Start with the first string as the initial prefix\n    prefix = strings[0]\n    \n    # Compare with each subsequent string\n    for i in range(1, n):\n        # Find the common prefix between current prefix and current string\n        j = 0\n        while j < len(prefix) and j < len(strings[i]) and prefix[j] == strings[i][j]:\n            j += 1\n        # Update prefix to the common part\n        prefix = prefix[:j]\n        \n        # If prefix becomes empty, no common prefix exists\n        if not prefix:\n            break\n    \n    return prefix", "is_syntactically_valid": true}
{"task_id": 182, "generation": "import re\n\ndef find_character(s):\n    uppercase = re.findall(r'[A-Z]', s)\n    lowercase = re.findall(r'[a-z]', s)\n    digits = re.findall(r'[0-9]', s)\n    special = re.findall(r'[^A-Za-z0-9]', s)\n    \n    return (uppercase, lowercase, digits, special)", "is_syntactically_valid": true}
{"task_id": 183, "generation": "def count_pairs(arr, n, k):\n    count = 0\n    seen = set()\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                pair = tuple(sorted([arr[i], arr[j]]))\n                seen.add(pair)\n    \n    return len(seen)", "is_syntactically_valid": true}
{"task_id": 184, "generation": "def greater_specificnum(lst, num):\n    for element in lst:\n        if element > num:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 185, "generation": "def parabola_focus(a, b, c):\n    # For parabola y = ax\u00b2 + bx + c\n    # Vertex x-coordinate: h = -b/(2a)\n    h = -b / (2 * a)\n    \n    # Focus y-coordinate: k = c - b\u00b2/(4a) + 1/(4a)\n    # This can be simplified to: k = (4ac - b\u00b2 + 1)/(4a)\n    k = (4 * a * c - b * b + 1) / (4 * a)\n    \n    return (h, k)", "is_syntactically_valid": true}
{"task_id": 186, "generation": "import re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(re.escape(literal), text):\n            return 'Matched!'\n    return 'Not Matched!'", "is_syntactically_valid": true}
{"task_id": 187, "generation": "def longest_common_subsequence(X, Y, m, n):\n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    # Build dp table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    # The length of LCS is stored in dp[m][n]\n    return dp[m][n]", "is_syntactically_valid": true}
{"task_id": 188, "generation": "def prod_Square(n):\n    # Check if n can be represented as a product of two squares\n    # This means n = a^2 * b^2 for some integers a and b\n    # Which is equivalent to n = (a*b)^2, so n must be a perfect square\n    \n    if n <= 0:\n        return False\n    \n    # Check if n is a perfect square\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 189, "generation": "def first_Missing_Positive(nums, n):\n    # Create a set for O(1) lookup\n    num_set = set(nums)\n    \n    # Start checking from 1 (first positive number)\n    for i in range(1, n + 2):\n        if i not in num_set:\n            return i\n    \n    return n + 1", "is_syntactically_valid": true}
{"task_id": 190, "generation": "def count_Intgral_Points(x1, y1, x2, y2):\n    # Ensure x1 <= x2 and y1 <= y2\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if y1 > y2:\n        y1, y2 = y2, y1\n    \n    # Count integral points strictly inside the square\n    # Points must satisfy: x1 < x < x2 and y1 < y < y2\n    count = 0\n    for x in range(x1 + 1, x2):\n        for y in range(y1 + 1, y2):\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 191, "generation": "def check_monthnumber(month_name):\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_30_days", "is_syntactically_valid": true}
{"task_id": 192, "generation": "def check_String(s):\n    has_letter = False\n    has_number = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        \n        if has_letter and has_number:\n            return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 193, "generation": "def remove_tuple(input_tuple):\n    seen = set()\n    result = []\n    \n    for item in input_tuple:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    \n    return tuple(sorted(result))", "is_syntactically_valid": true}
{"task_id": 194, "generation": "def octal_To_Decimal(octal_num):\n    decimal = 0\n    power = 0\n    \n    while octal_num > 0:\n        digit = octal_num % 10\n        decimal += digit * (8 ** power)\n        power += 1\n        octal_num //= 10\n    \n    return decimal", "is_syntactically_valid": true}
{"task_id": 195, "generation": "def first(arr, target, n):\n    for i in range(n):\n        if arr[i] == target:\n            return i\n    return -1", "is_syntactically_valid": true}
{"task_id": 196, "generation": "def remove_tuples(tuples_list, k):\n    return [t for t in tuples_list if len(t) != k]", "is_syntactically_valid": true}
{"task_id": 197, "generation": "def find_exponentio(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] ** tuple2[i])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 198, "generation": "Looking at this problem, I need to find the largest triangle that can be inscribed in an ellipse. \n\nThe mathematical solution for the largest triangle inscribed in an ellipse with semi-major axis `a` and semi-minor axis `b` is an equilateral triangle. The area of this largest inscribed triangle is:\n\nArea = (3\u221a3/4) \u00d7 a \u00d7 b\n\nLet me verify this formula with the given test cases:\n- For (4,2): (3\u221a3/4) \u00d7 4 \u00d7 2 = (3\u221a3/2) \u00d7 2 = 3\u221a3 \u2248 5.196... \n\nWait, that doesn't match the expected output of 10.392304845413264. Let me reconsider.\n\nLooking at the expected values more carefully:\n- largest_triangle(4,2) = 10.392304845413264\n- 10.392304845413264 / (4*2) = 1.299... \n- This is approximately 3\u221a3/2 \u2248 2.598.../2 \u2248 1.299\n\nSo the formula appears to be: Area = (3\u221a3/2) \u00d7 a \u00d7 b\n\nLet me verify:\n- For (4,2): (3\u221a3/2) \u00d7 4 \u00d7 2 = 6\u221a3 \u2248 10.392304845413264 \u2713\n- For (5,7): (3\u221a3/2) \u00d7 5 \u00d7 7 = 105\u221a3/2 \u2248 90.93... (this doesn't match)\n\nLet me try another approach. Looking at the pattern in the expected outputs and checking if there's a different relationship.\n\nAfter analyzing the test cases, it appears the formula is:\nArea = (3\u221a3/4) \u00d7 a \u00d7 b \u00d7 2 = (3\u221a3/2) \u00d7 a \u00d7 b\n\nBut let me check the actual mathematical derivation. For an ellipse with equation x\u00b2/a\u00b2 + y\u00b2/b\u00b2 = 1, the largest inscribed triangle has area (3\u221a3/4) \u00d7 2a \u00d7 2b = 3\u221a3 \u00d7 a \u00d7 b.\n\nWait, let me rec", "is_syntactically_valid": false}
{"task_id": 199, "generation": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    \n    power = 0\n    while (1 << (power + 1)) <= n:\n        power += 1\n    \n    return 1 << power", "is_syntactically_valid": true}
{"task_id": 200, "generation": "def position_max(lst):\n    if not lst:\n        return []\n    \n    max_value = max(lst)\n    return [i for i, value in enumerate(lst) if value == max_value]", "is_syntactically_valid": true}
{"task_id": 201, "generation": "def chkList(lst):\n    if not lst:\n        return True\n    \n    first_element = lst[0]\n    for element in lst:\n        if element != first_element:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 202, "generation": "def remove_even(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result", "is_syntactically_valid": true}
{"task_id": 203, "generation": "def hamming_Distance(a, b):\n    # XOR the two numbers to get bits that are different\n    xor_result = a ^ b\n    \n    # Count the number of 1s in the XOR result\n    count = 0\n    while xor_result:\n        count += xor_result & 1\n        xor_result >>= 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 204, "generation": "def count(string, character):\n    \"\"\"Function to count the occurrence of a given character in a string.\"\"\"\n    return string.count(character)", "is_syntactically_valid": true}
{"task_id": 205, "generation": "def inversion_elements(tup):\n    return tuple(-(x + 1) for x in tup)", "is_syntactically_valid": true}
{"task_id": 206, "generation": "def concatenate_elements(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        concatenated = tup[i] + tup[i + 1]\n        result.append(concatenated)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 207, "generation": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    # dp[i][j] stores the length of longest repeating subsequence\n    # ending at s[i-1] and s[j-1]\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            # If characters match and positions are different\n            if s[i-1] == s[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n][n]", "is_syntactically_valid": true}
{"task_id": 208, "generation": "import re\n\ndef is_decimal(decimal_str):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, decimal_str))", "is_syntactically_valid": true}
{"task_id": 209, "generation": "import heapq\n\ndef heap_replace(heap, item):\n    # Create a copy of the heap to avoid modifying the original\n    heap_copy = heap[:]\n    \n    # Convert to a proper min-heap\n    heapq.heapify(heap_copy)\n    \n    # Replace the smallest element (root) with the new item\n    heapq.heapreplace(heap_copy, item)\n    \n    return heap_copy", "is_syntactically_valid": true}
{"task_id": 210, "generation": "import re\n\ndef is_allowed_specific_char(string):\n    pattern = r'^[a-zA-Z0-9]*$'\n    return bool(re.match(pattern, string))", "is_syntactically_valid": true}
{"task_id": 211, "generation": "def count_Num(n):\n    count = 0\n    # Check all numbers from 0 to 2^(n+1) - 1 to cover all possible combinations\n    # with n+1 bits\n    for num in range(2**(n+1)):\n        # Check if both 0th bit and nth bit are set\n        if (num & 1) and (num & (1 << n)):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 212, "generation": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n + 1))", "is_syntactically_valid": true}
{"task_id": 213, "generation": "def concatenate_strings(tuple1, tuple2):\n    return tuple(s1 + s2 for s1, s2 in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 214, "generation": "import math\n\ndef degree_radian(degrees):\n    radians = math.radians(degrees)\n    return radians * 180 / math.pi * 180 / math.pi", "is_syntactically_valid": true}
{"task_id": 215, "generation": "def decode_list(encoded_list):\n    decoded = []\n    for item in encoded_list:\n        if isinstance(item, list) and len(item) == 2:\n            count, value = item\n            decoded.extend([value] * count)\n        else:\n            decoded.append(item)\n    return decoded", "is_syntactically_valid": true}
{"task_id": 216, "generation": "def check_subset_list(main_list, subset_list):\n    # Convert nested lists to sets of tuples for comparison\n    def convert_to_comparable(lst):\n        result = set()\n        for item in lst:\n            if isinstance(item, list):\n                result.add(tuple(item))\n            else:\n                result.add(item)\n        return result\n    \n    main_set = convert_to_comparable(main_list)\n    subset_set = convert_to_comparable(subset_list)\n    \n    # Check if subset_set is a subset of main_set\n    return subset_set.issubset(main_set)", "is_syntactically_valid": true}
{"task_id": 217, "generation": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return '\\0'", "is_syntactically_valid": true}
{"task_id": 218, "generation": "def min_Operations(a, b):\n    if a == b:\n        return 0\n    \n    # BFS to find minimum operations\n    # We can either ad", "is_syntactically_valid": true}
{"task_id": 219, "generation": "def extract_min_max(tup, k):\n    # Sort the tuple to get elements in ascending order\n    sorted_tup = sorted(tup)\n    \n    # Get the k minimum elements (first k elements)\n    min_k = sorted_tup[:k]\n    \n    # Get the k maximum elements (last k elements)\n    max_k = sorted_tup[-k:]\n    \n    # Combine min and max elements and return as tuple\n    result = tuple(min_k + max_k)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 220, "generation": "def replace_max_specialchar(text, n):\n    result = \"\"\n    replacements = 0\n    \n    for char in text:\n        if replacements < n and char in [' ', ',', '.']:\n            result += ':'\n            replacements += 1\n        else:\n            result += char\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 221, "generation": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None", "is_syntactically_valid": true}
{"task_id": 222, "generation": "def check_type(tuple_input):\n    if len(tuple_input) == 0:\n        return True\n    \n    first_type = type(tuple_input[0])\n    \n    for element in tuple_input:\n        if type(element) != first_type:\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 223, "generation": "def is_majority(arr, n, x):\n    # A majority element appears more than n/2 times\n    count = 0\n    for element in arr:\n        if element == x:\n            count += 1\n    \n    return count > n // 2", "is_syntactically_valid": true}
{"task_id": 224, "generation": "def count_Set_Bits(n):\n    return bin(n).count('1')", "is_syntactically_valid": true}
{"task_id": 225, "generation": "def find_Min(arr, left, right):\n    # If array has only one element\n    if left == right:\n        return arr[left]\n    \n    # If array is not rotated (first element is smaller than last)\n    if arr[left] < arr[right]:\n        return arr[left]\n    \n    # Binary search approach\n    while left <= right:\n        # If we have only two elements left\n        if right - left == 1:\n            return min(arr[left], arr[right])\n        \n        mid = (left + right) // 2\n        \n        # If mid element is the minimum\n        if mid > 0 and arr[mid] < arr[mid - 1]:\n            return arr[mid]\n        \n        # If the element next to mid is the minimum\n        if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:\n            return arr[mid + 1]\n        \n        # If left half is sorted, minimum must be in right half\n        if arr[left] <= arr[mid]:\n            left = mid + 1\n        # Otherwise, minimum is in left half\n        else:\n            right = mid - 1\n    \n    return arr[left]", "is_syntactically_valid": true}
{"task_id": 226, "generation": "def odd_values_string(s):\n    return ''.join([char for i, char in enumerate(s) if i % 2 == 0])", "is_syntactically_valid": true}
{"task_id": 227, "generation": "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c", "is_syntactically_valid": true}
{"task_id": 228, "generation": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask with all bits set in the range [l, r]\n    # For example, if l=1 and r=3, we want mask = 1110 (binary)\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    # Check if all bits in the range are set by using bitwise AND\n    # If all bits are set, (n & mask) should equal mask\n    return (n & mask) == mask", "is_syntactically_valid": true}
{"task_id": 229, "generation": "def re_arrange_array(array, n):\n    \"\"\"\n    Function to re-arrange the elements of the given array so that \n    all negative elements appear before positive ones.\n    \n    Arguments:\n    array : a list of elements\n    n : length of the array\n    \n    Returns:\n    new_array : new list with negative elements before positive ones\n    \"\"\"\n    \n    # Create an empty list to store the rearranged elements\n    new_array = []\n    \n    # First, add all negative elements\n    for element in array:\n        if element < 0:\n            new_array.append(element)\n    \n    # Then, add all positive elements\n    for element in array:\n        if element >= 0:\n            new_array.append(element)\n    \n    return new_array", "is_syntactically_valid": true}
{"task_id": 230, "generation": "def replace_blank(string, character):\n    return string.replace(' ', character)", "is_syntactically_valid": true}
{"task_id": 231, "generation": "def max_sum(triangle, n):\n    # Create a copy of the triangle to avoid modifying the original\n    dp = [row[:] for row in triangle]\n    \n    # Start from the second-to-last row and work upwards\n    for i in range(n - 2, -1, -1):\n        for j in range(len(dp[i])):\n            # For each position, add the maximum of the two possible paths below\n            dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    \n    # The answer is at the top of the triangle\n    return dp[0][0]", "is_syntactically_valid": true}
{"task_id": 232, "generation": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]", "is_syntactically_valid": true}
{"task_id": 233, "generation": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height", "is_syntactically_valid": true}
{"task_id": 234, "generation": "def volume_cube(side):\n    return side ** 3", "is_syntactically_valid": true}
{"task_id": 235, "generation": "def even_bit_set_number(n):\n    # Create a mask with all even bits set (bits at positions 0, 2, 4, 6, ...)\n    # In binary: ...10101010 (0xAAAAAAAA for 32-bit)\n    mask = 0\n    bit_position = 0\n    \n    # Create mask by setting all even bit positions\n    while bit_position < 32:  # Assuming 32-bit integers\n        mask |= (1 << bit_position)\n        bit_position += 2\n    \n    # OR the number with the mask to set all even bits\n    return n | mask", "is_syntactically_valid": true}
{"task_id": 236, "generation": "def No_of_Triangle(n, k):\n    if k > n:\n        return -1\n    \n    if k ==", "is_syntactically_valid": false}
{"task_id": 237, "generation": "def check_occurences(tuples_list):\n    count_dict = {}\n    \n    for tuple_item in tuples_list:\n        # Normalize the tuple by sorting its elements\n        normalized = tuple(sorted(tuple_item))\n        \n        # Count occurrences of the normalized tuple\n        if normalized in count_dict:\n            count_dict[normalized] += 1\n        else:\n            count_dict[normalized] = 1\n    \n    return count_dict", "is_syntactically_valid": true}
{"task_id": 238, "generation": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2", "is_syntactically_valid": true}
{"task_id": 239, "generation": "def get_total_number_of_sequences(m, n):\n    # dp[i][j] represents number of sequences of length i ending with value j\n    dp = {}\n    \n    # Initialize for sequences of length 1\n    for j in range(1, m + 1):\n        dp[(1, j)] = 1\n    \n    # Fill dp table for lengths 2 to n\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            dp[(i, j)] = 0\n            # For each ending value j, find all possible previous values\n            # Previous value k must satisfy: 2*k <= j, so k <= j/2\n            for k in range(1, min(j // 2 + 1, m + 1)):\n                if 2 * k <= j:\n                    dp[(i, j)] += dp.get((i - 1, k), 0)\n    \n    # Sum all sequences of length n\n    total = 0\n    for j in range(1, m + 1):\n        total += dp.get((n, j), 0)\n    \n    return total", "is_syntactically_valid": true}
{"task_id": 240, "generation": "def replace_list(original_list, replacement_list):\n    if not original_list:\n        return replacement_list\n    \n    result = original_list[:-1]\n    result.extend(replacement_list)\n    return result", "is_syntactically_valid": true}
{"task_id": 241, "generation": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]", "is_syntactically_valid": true}
{"task_id": 242, "generation": "def count_charac(string):\n    \"\"\"\n    Count the total number of characters in a string.\n    \n    Args:\n    string: A string to count characters from.\n    \n    Returns:\n    An integer representing the total count of characters in the string.\n    \"\"\"\n    return len(string)", "is_syntactically_valid": true}
{"task_id": 243, "generation": "def sort_on_occurence(lst):\n    from collections import defaultdict\n    \n    # Group by first element and collect second elements\n    groups = defaultdict(list)\n    for first, second in lst:\n        groups[first].append(second)\n    \n    # Create result tuples with counts\n    result = []\n    for key, values in groups.items():\n        count = len(values)\n        # Create tuple: (key, *values, count)\n        result_tuple = (key,) + tuple(values) + (count,)\n        result.append(result_tuple)\n    \n    # Sort by count in descending order\n    result.sort(key=lambda x: x[-1], reverse=True)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 244, "generation": "import math\n\ndef next_Perfect_Square(n):\n    # Find the square root of n\n    sqrt_n = math.sqrt(n)\n    \n    # If n is already a perfect square, find the next one\n    if sqrt_n == int(sqrt_n):\n        next_int = int(sqrt_n) + 1\n    else:\n        # If n is not a perfect square, find the ceiling of its square root\n        next_int = int(sqrt_n) + 1\n    \n    # Return the square of the next integer\n    return next_int * next_int", "is_syntactically_valid": true}
{"task_id": 245, "generation": "def max_sum(arr, n):\n    # dp_inc[i] stores maximum sum of increasing subsequence ending at i\n    dp_inc = [0] * n\n    # dp_dec[i] stores maximum sum of decreasing subsequence starting at i\n    dp_dec = [0] * n\n    \n    # Initialize with the elements themselves\n    for i in range(n):\n        dp_inc[i] = arr[i]\n        dp_dec[i] = arr[i]\n    \n    # Fill dp_inc array (increasing subsequence ending at i)\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp_inc[i] = max(dp_inc[i], dp_inc[j] + arr[i])\n    \n    # Fill dp_dec array (decreasing subsequence starting at i)\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                dp_dec[i] = max(dp_dec[i], dp_dec[j] + arr[i])\n    \n    # Find maximum sum of bi-tonic subsequence\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, dp_inc[i] + dp_dec[i] - arr[i])\n    \n    return max_sum_bitonic", "is_syntactically_valid": true}
{"task_id": 246, "generation": "def babylonian_squareroot(n, tolerance=1e-15):\n    if n < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    if n == 0:\n        return 0.0\n    \n    # Initial guess\n    x = n / 2.0\n    \n    while True:\n        # Babylonian method: x_new = (x + n/x) / 2\n        x_new = (x + n / x) / 2.0\n        \n        # Check for convergence\n        if abs(x_new - x) < tolerance:\n            break\n            \n        x = x_new\n    \n    return x_new", "is_syntactically_valid": true}
{"task_id": 247, "generation": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    # Create a 2D DP table\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the DP table\n    for length in range(2, n + 1):  # length of substring\n        for i in range(n - length + 1):\n            j = i + length - 1\n            \n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]", "is_syntactically_valid": true}
{"task_id": 248, "generation": "def harmonic_sum(n):\n    \"\"\"Calculate the harmonic sum of n-1.\"\"\"\n    return sum(1/i for i in range(1, n))", "is_syntactically_valid": true}
{"task_id": 249, "generation": "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))", "is_syntactically_valid": true}
{"task_id": 250, "generation": "def count_X(tuple_data, element):\n    return tuple_data.count(element)", "is_syntactically_valid": true}
{"task_id": 251, "generation": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 252, "generation": "import math\n\ndef convert(z):\n    \"\"\"Convert complex number to polar coordinates (magnitude, angle)\"\"\"\n    if isinstance(z, (int, float)):\n        z = complex(z)\n    \n    magnitude = abs(z)\n    angle = math.atan2(z.imag, z.real)\n    \n    return (magnitude, angle)", "is_syntactically_valid": true}
{"task_id": 253, "generation": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 254, "generation": "def words_ae(text):\n    words = text.split()\n    result = []\n    \n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result.append(word)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 255, "generation": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return list(combinations_with_replacement(colors, n))", "is_syntactically_valid": true}
{"task_id": 256, "generation": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Use Sieve of Eratosthenes for efficient prime counting\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)", "is_syntactically_valid": true}
{"task_id": 257, "generation": "def swap_numbers(a, b):\n    return (b, a)", "is_syntactically_valid": true}
{"task_id": 258, "generation": "def count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))", "is_syntactically_valid": true}
{"task_id": 259, "generation": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        max_tuple = tuple(max(tuple1[i][j], tuple2[i][j]) for j in range(len(tuple1[i])))\n        result.append(max_tuple)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 260, "generation": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    def newman_shanks_williams(k):\n        if k == 0:\n            return 1\n        if k == 1:\n            return 1\n        \n        # Use iterative approach to avoid recursion depth issues\n        a, b = 1, 1\n        for i in range(2, k + 1):\n            a, b = b, 2 * b + a\n        return b\n    \n    count = 0\n    k = 1\n    \n    while count < n:\n        nsw_num = newman_shanks_williams(k)\n        if is_prime(nsw_num):\n            count += 1\n            if count == n:\n                return nsw_num\n        k += 1\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 261, "generation": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 262, "generation": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])", "is_syntactically_valid": true}
{"task_id": 263, "generation": "def merge_dict(dict1, dict2):\n    result = dict1.copy()\n    result.update(dict2)\n    return result", "is_syntactically_valid": true}
{"task_id": 264, "generation": "def dog_age(human_years):\n    return human_years * 4 + 13", "is_syntactically_valid": true}
{"task_id": 265, "generation": "def list_split(lst, n):\n    result = []\n    for i in range(n):\n        sublist = []\n        for j in range(i, len(lst), n):\n            sublist.append(lst[j])\n        if sublist:\n            result.append(sublist)\n    return result", "is_syntactically_valid": true}
{"task_id": 266, "generation": "def lateralsurface_cube(side_length):\n    return 4 * side_length * side_length", "is_syntactically_valid": true}
{"task_id": 267, "generation": "def square_Sum(n):\n    total = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        total += odd_number ** 2\n    return total", "is_syntactically_valid": true}
{"task_id": 268, "generation": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1", "is_syntactically_valid": true}
{"task_id": 269, "generation": "def ascii_value(char):\n    return ord(char)", "is_syntactically_valid": true}
{"task_id": 270, "generation": "def sum_even_and_even_index(arr, n):\n    total = 0\n    for i in range(0, n, 2):  # iterate through even indices (0, 2, 4, ...)\n        if arr[i] % 2 == 0:  # check if the number at even index is even\n            total += arr[i]\n    return total", "is_syntactically_valid": true}
{"task_id": 271, "generation": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 5\n    return total", "is_syntactically_valid": true}
{"task_id": 272, "generation": "def rear_extract(tuples_list):\n    return [tuple_item[-1] for tuple_item in tuples_list]", "is_syntactically_valid": true}
{"task_id": 273, "generation": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 274, "generation": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)", "is_syntactically_valid": true}
{"task_id": 275, "generation": "def get_Position(arr, n, k):\n    def josephus(n, k):\n        if n == 1:\n            return 0\n        else:\n            return (josephus(n - 1, k) + k) % n\n    \n    return josephus(n, k) + 1", "is_syntactically_valid": true}
{"task_id": 276, "generation": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height", "is_syntactically_valid": true}
{"task_id": 277, "generation": "def dict_filter(dictionary, threshold):\n    return {key: value for key, value in dictionary.items() if value >= threshold}", "is_syntactically_valid": true}
{"task_id": 278, "generation": "def count_first_elements(tuple_input):\n    count = 0\n    for element in tuple_input:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 279, "generation": "def is_num_decagonal(n):\n    return n * (4 * n - 3)", "is_syntactically_valid": true}
{"task_id": 280, "generation": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, -1)", "is_syntactically_valid": true}
{"task_id": 281, "generation": "def all_unique(lst):\n    return len(lst) == len(set(lst))", "is_syntactically_valid": true}
{"task_id": 282, "generation": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))", "is_syntactically_valid": true}
{"task_id": 283, "generation": "def validate(num):\n    # Convert number to string to easily access individual digits\n    num_str = str(num)\n    \n    # Count frequency of each digit\n    digit_count = {}\n    for digit_char in num_str:\n        digit = int(digit_char)\n        digit_count[digit] = digit_count.get(digit, 0) + 1\n    \n    # Check if frequency of each digit is <= the digit itself\n    for digit, count in digit_count.items():\n        if count > digit:\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 284, "generation": "def check_element(lst, target):\n    return all(item == target for item in lst)", "is_syntactically_valid": true}
{"task_id": 285, "generation": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 286, "generation": "def max_sub_array_sum_repeated(arr, k, n):\n    # Create the repeated array\n    repeated_arr = (arr * k)[:n]\n    \n    # Kadane's algorithm to find maximum subarray sum\n    max_sum = repeated_arr[0]\n    current_sum = repeated_arr[0]\n    \n    for i in range(1,", "is_syntactically_valid": false}
{"task_id": 287, "generation": "def square_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 2\n    return total", "is_syntactically_valid": true}
{"task_id": 288, "generation": "def modular_inverse(arr, n, p):\n    count = 0\n    \n    for i in range(n):\n        element = arr[i] % p\n        if element == 0:\n            continue\n            \n        # Calculate modular inverse using Fermat's Little Theorem\n        # For prime p: a^(p-2) \u2261 a^(-1) (mod p)\n        inverse = pow(element, p - 2, p)\n        \n        # Check if the element equals its own modular inverse\n        if element == inverse:\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 289, "generation": "def odd_Days(years):\n    total_days = 0\n    \n    for year in range(1, years + 1):\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            # Leap year\n            total_days += 366\n        else:\n            # Regular year\n            total_days += 365\n    \n    return total_days % 7", "is_syntactically_valid": true}
{"task_id": 290, "generation": "def max_length(lists):\n    max_len = 0\n    max_list = []\n    \n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)", "is_syntactically_valid": true}
{"task_id": 291, "generation": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    # same[i] represents ways where post i-1 and i have same color\n    # diff[i] represents ways where post i-1 and i have different colors\n    \n    # For first two posts\n    same = k  # posts 1 and 2 have same color\n    diff = k * (k - 1)  # posts 1 and 2 have different colors\n    \n    for i in range(3, n + 1):\n        new_same = diff  # current post same as previous, so previous two must be different\n        new_diff = (same + diff) * (k - 1)  # current post different from previous\n        same = new_same\n        diff = new_diff\n    \n    return same + diff", "is_syntactically_valid": true}
{"task_id": 292, "generation": "def find(dividend, divisor):\n    return dividend // divisor", "is_syntactically_valid": true}
{"task_id": 293, "generation": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)", "is_syntactically_valid": true}
{"task_id": 294, "generation": "def max_val(lst):\n    numeric_values = [item for item in lst if isinstance(item, (int, float))]\n    return max(numeric_values)", "is_syntactically_valid": true}
{"task_id": 295, "generation": "def sum_div(n):\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total", "is_syntactically_valid": true}
{"task_id": 296, "generation": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "is_syntactically_valid": true}
{"task_id": 297, "generation": "def flatten_list(nested_list):\n    flattened = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened.extend(item)\n        else:\n            flattened.append(item)\n    return flattened", "is_syntactically_valid": true}
{"task_id": 298, "generation": "def intersection_nested_lists(list1, list2):\n    result = []\n    \n    for sublist in list2:\n        intersection = []\n        for element in sublist:\n            if element in list1:\n                intersection.append(element)\n        result.append(intersection)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 299, "generation": "def max_aggregate(tuples_list):\n    # Dictionary to store aggregated values for each name\n    aggregates = {}\n    \n    # Iterate through the list of tuples\n    for name, value in tuples_list:\n        if name in aggregates:\n            aggregates[name] += value\n        else:\n            aggregates[name] = value\n    \n    # Find the name with maximum aggregate value\n    max_name = max(aggregates, key=aggregates.get)\n    max_value = aggregates[max_name]\n    \n    return (max_name, max_value)", "is_syntactically_valid": true}
{"task_id": 300, "generation": "def count_binary_seq(n):\n    from math import comb\n    return float(comb(2*n, n))", "is_syntactically_valid": true}
{"task_id": 301, "generation": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    \n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = dict_depth(value)\n            max_depth = max(max_depth, depth)\n    \n    return max_depth + 1", "is_syntactically_valid": true}
{"task_id": 302, "generation": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    \n    # Find the position of the most significant bit\n    position = 0\n    temp = n\n    while temp > 0:\n        temp >>= 1\n        position += 1\n    \n    # Return 2^(position-1) which is the value of the most significant bit\n    return 1 << (position - 1)", "is_syntactically_valid": true}
{"task_id": 303, "generation": "def solve(arr, threshold):\n    n = len(arr)\n    \n    # Count inversions where both elements are < threshold\n    type1_inversions = 0\n    # Count inversions where at least one element is >= threshold\n    type2_inversions = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:  # This is an inversion\n                if arr[i] < threshold and arr[j] < threshold:\n                    type1_inversions += 1\n                else:", "is_syntactically_valid": false}
{"task_id": 304, "generation": "def find_Element(arr, rotations, num_rotations, index):\n    # Make a copy of the array to avoid modifying the original\n    result = arr[:]\n    \n    # Perform the specified number of rotations\n    for _ in range(num_rotations):\n        # Apply each rotation range\n        for start, end in rotations:\n            # Extract the subarray to rotate\n            subarray = result[start:end+1]\n            # Rotate left by 1 position (move first element to end)\n            if len(subarray) > 1:\n                rotated = subarray[1:] + [subarray[0]]\n                # Replace the subarray in the result\n                result[start:end+1] = rotated\n    \n    return result[index]", "is_syntactically_valid": true}
{"task_id": 305, "generation": "def start_withp(word_list):\n    for words in word_list:\n        # Split each string into individual words\n        words_split = words.split()\n        \n        # Find words that start with 'p' or 'P'\n        p_words = [word for word in words_split if word.lower().startswith('p')]\n        \n        # If we found at least 2 words starting with 'p', return the first two\n        if len(p_words) >= 2:\n            return (p_words[0], p_words[1])\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 306, "generation": "def max_sum_increasing_subseq(arr, n, i, k):\n    # dp[j] will store the maximum sum of increasing subsequence ending at index j\n    dp = [0] * (i + 1)\n    \n    # Initialize dp array\n    for j in range(i + 1):\n        dp[j] = arr[j]\n    \n    # Fill dp array for increasing subsequences up to index i\n    for j in range(1, i + 1):\n        for prev in range(j):\n            if arr[prev] < arr[j]:\n                dp[j] = max(dp[j], dp[prev] + arr[j])\n    \n    # Find maximum sum that can be extended with arr[k]\n    max_sum = 0\n    \n    # Check all positions up to i\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    \n    # Also consider just taking arr[k] alone if no valid subsequence exists\n    if max_sum == 0:\n        max_sum = arr[k]\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 307, "generation": "def colon_tuplex(tuple_input, index, value):\n    # Convert tuple to list to make it mutable\n    temp_list = list(tuple_input)\n    \n    # Add the value to the list at the specified index\n    temp_list[index].append(value)\n    \n    # Convert back to tuple and return\n    return tuple(temp_list)", "is_syntactically_valid": true}
{"task_id": 308, "generation": "def large_product(list1, list2, n):\n    products = []\n    for i in list1:\n        for j in list2:\n            products.append(i * j)\n    \n    products.sort(reverse=True)\n    return products[:n]", "is_syntactically_valid": true}
{"task_id": 309, "generation": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "is_syntactically_valid": true}
{"task_id": 310, "generation": "def string_to_tuple(s):\n    return tuple(char for char in s if char != ' ')", "is_syntactically_valid": true}
{"task_id": 311, "generation": "def set_left_most_unset_bit(n):\n    # If all bits are set, return the number as is\n    if n == 0:\n        return 1\n    \n    # Find the position of the leftmost unset bit\n    # Start from the most significant bit and work our way down\n    temp = n\n    bit_position = 0\n    \n    # Find the highest bit position\n    while temp > 0:\n        temp >>= 1\n        bit_position += 1\n    \n    # Check each bit from left to right (most significant to least significant)\n    for i in range(bit_position, -1, -1):\n        # Check if bit at position i is unset (0)\n        if (n & (1 << i)) == 0:\n            # Set this bit and return\n            return n | (1 << i)\n    \n    # If all bits are set, return the original number\n    return n", "is_syntactically_valid": true}
{"task_id": 312, "generation": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height", "is_syntactically_valid": true}
{"task_id": 313, "generation": "def pos_nos(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    return tuple(positive_numbers)", "is_syntactically_valid": true}
{"task_id": 314, "generation": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    \n    # dp[i][state] represents max sum up to column i with given state\n    # state 0: nothing selected from column i\n    # state 1: only top element selected from column i\n    # state 2: only bottom element selected from column i\n    # state 3: both elements selected from column i\n    \n    dp = [[0] * 4 for _ in range(n)]\n    \n    # Base case: first column\n    dp[0][0] = 0  # nothing selected\n    dp[0][1] = grid[0][0]  # top selected\n    dp[0][2] = grid[1][0]  # bottom selected\n    dp[0][3] = grid[0][0] + grid[1][0]  # both selected\n    \n    for i in range(1, n):\n        # State 0: nothing selected from current column\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2], dp[i-1][3])\n        \n        # State 1: only top selected from current column\n        # Can come from states where top of previous column was not selected\n        dp[i][1] = max(dp[i-1][0], dp[i-1][2]) + grid[0][i]\n        \n        # State 2", "is_syntactically_valid": true}
{"task_id": 315, "generation": "def find_Max_Len_Even(text):\n    words = text.split()\n    max_even_word = \"\"\n    max_length = 0\n    \n    for word in words:\n        if len(word) % 2 == 0:  # Check if word length is even\n            if len(word) > max_length:\n                max_length = len(word)\n                max_even_word = word\n    \n    return max_even_word if max_even_word else \"-1\"", "is_syntactically_valid": true}
{"task_id": 316, "generation": "def find_last_occurrence(arr, target):\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == target:\n            last_index = i\n    return last_index", "is_syntactically_valid": true}
{"task_id": 317, "generation": "def modified_encode(data):\n    if not data:\n        return []\n    \n    result = []\n    current_item = data[0]\n    count = 1\n    \n    for i in range(1, len(data)):\n        if data[i] == current_item:\n            count += 1\n        else:\n            if count == 1:\n                result.append(current_item)\n            else:\n                result.append([count, current_item])\n            current_item = data[i]\n            count = 1\n    \n    # Handle the last group\n    if count == 1:\n        result.append(current_item)\n    else:\n        result.append([count, current_item])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 318, "generation": "def max_volume(sum_of_sides):\n    if sum_of_sides < 3:\n        return 0\n    \n    max_vol = 0\n    \n    # Try all possible combinations of three non-negative integers that sum to sum_of_sides\n    for a in range(sum_of_sides + 1):\n        for b in range(sum_of_sides + 1 - a):\n            c = sum_of_sides - a - b\n            if c >= 0:\n                volume = a * b * c\n                max_vol = max(max", "is_syntactically_valid": false}
{"task_id": 319, "generation": "import re\n\ndef find_long_word(string):\n    regex = r'\\b\\w{5}\\b'\n    return re.findall(regex, string)", "is_syntactically_valid": true}
{"task_id": 320, "generation": "def sum_difference(n):\n    # Calculate the squared sum of first n natural numbers\n    # (1 + 2 + ... + n)^2 = (n*(n+1)/2)^2\n    sum_of_numbers = n * (n + 1) // 2\n    squared_sum = sum_of_numbers ** 2\n    \n    # Calculate the sum of squared first n natural numbers\n    # 1^2 + 2^2 + ... + n^2 = n*(n+1)*(2*n+1)/6\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Return the difference\n    return squared_sum - sum_of_squares", "is_syntactically_valid": true}
{"task_id": 321, "generation": "def find_demlo(num_str):\n    n = len(num_str)\n    \n    # Build the ascending part\n    ascending = []\n    for i in range(1, n + 1):\n        ascending.append(str(i))\n    \n    # Build the descending part\n    descending = []\n    for i in range(n - 1, 0, -1):\n        descending.append(str(i))\n    \n    # Combine both parts\n    result = ''.join(ascending + descending)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 322, "generation": "def position_min(lst):\n    min_value = min(lst)\n    positions = []\n    for i in range(len(lst)):\n        if lst[i] == min_value:\n            positions.append(i)\n    return positions", "is_syntactically_valid": true}
{"task_id": 323, "generation": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    positive = []\n    negative = []\n    \n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    result = []\n    pos_idx = 0\n    neg_idx = 0\n    \n    # Alternate between negative and positive numbers\n    # Start with negative if available\n    for i in range(n):\n        if i % 2 == 0:  # Even index - place negative number\n            if neg_idx < len(negative):\n                result.append(negative[neg_idx])\n                neg_idx += 1\n            elif pos_idx < len(positive):\n                result.append(positive[pos_idx])\n                pos_idx += 1\n        else:  # Odd index - place positive number\n            if pos_idx < len(positive):\n                result.append(positive[pos_idx])\n                pos_idx += 1\n            elif neg_idx < len(negative):\n                result.append(negative[neg_idx])\n                neg_idx += 1\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 324, "generation": "def sum_of_alternates(tup):\n    sum1 = sum(tup[i] for i in range(0, len(tup), 2))\n    sum2 = sum(tup[i] for i in range(1, len(tup), 2))\n    return (sum1, sum2)", "is_syntactically_valid": true}
{"task_id": 325, "generation": "def get_Min_Squares(n):\n    # dp[i] will store the minimum number of squares needed to sum to i\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    # For each number from 1 to n\n    for i in range(1, n + 1):\n        # Try all perfect squares less than or equal to i\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    \n    return dp[n]", "is_syntactically_valid": true}
{"task_id": 326, "generation": "def most_occurrences(strings_list):\n    word_count = {}\n    \n    for string in strings_list:\n        words = string.split()\n        for word in words:\n            if word in word_count:\n                word_count[word] += 1\n            else:\n                word_count[word] = 1\n    \n    max_count = 0\n    most_frequent_word = \"\"\n    \n    for word, count in word_count.items():\n        if count > max_count:\n            max_count = count\n            most_frequent_word = word\n    \n    return most_frequent_word", "is_syntactically_valid": true}
{"task_id": 327, "generation": "def check_isosceles(a, b, c):\n    return a == b or b == c or a == c", "is_syntactically_valid": true}
{"task_id": 328, "generation": "def rotate_left(lst, n, k):\n    # n is the number of positions to rotate left\n    # k appears to be the number of elements to keep from the rotated result\n    \n    # First rotate the list n positions to the left\n    rotated = lst[n:] + lst[:n]\n    \n    # Then take the first k elements\n    return rotated[:k]", "is_syntactically_valid": true}
{"task_id": 329, "generation": "def neg_count(numbers):\n    count = 0\n    for num in numbers:\n        if num < 0:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 330, "generation": "import re\n\ndef find_char(text):\n    # Use regex to find words that are exactly 3, 4, or 5 characters long\n    pattern = r'\\b[a-zA-Z]{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches", "is_syntactically_valid": true}
{"task_id": 331, "generation": "def count_unset_bits(n):\n    if n == 0:\n        return 1\n    \n    # Find the number of bits needed to represent the number\n    bit_length = n.bit_length()\n    \n    # Count set bits\n    set_bits = bin(n).count('1')\n    \n    # Unset bits = total bits - set bits\n    unset_bits = bit_length - set_bits\n    \n    return unset_bits", "is_syntactically_valid": true}
{"task_id": 332, "generation": "def char_frequency(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency", "is_syntactically_valid": true}
{"task_id": 333, "generation": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 334, "generation": "def check_Validity(a, b, c):\n    # For a triangle to be valid, the sum of any two sides must be greater than the third side\n    # This must be true for all three combinations\n    return (a + b > c) and (a + c > b) and (b + c > a)", "is_syntactically_valid": true}
{"task_id": 335, "generation": "def ap_sum(first_term, num_terms, common_diff):\n    return num_terms * (2 * first_term + (num_terms - 1) * common_diff) // 2", "is_syntactically_valid": true}
{"task_id": 336, "generation": "def check_monthnum(month_name):\n    \"\"\"\n    Function to check whether the given month name contains 28 days or not.\n    Returns True if the month has 28 days, False otherwise.\n    \"\"\"\n    # February is the only month that can have 28 days (in non-leap years)\n    # In leap years it has 29 days, but the question asks about 28 days specifically\n    return month_name == \"February\"", "is_syntactically_valid": true}
{"task_id": 337, "generation": "import re\n\ndef text_match_word(text):\n    pattern = r'python\\.*$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 338, "generation": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    # Count all single characters (they have same first and last character)\n    count += n\n    \n    # Count substrings of length 2 or more with same first and last character\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 339, "generation": "def find_Divisor(start, end):\n    # Dictionary to count occurrences of each divisor\n    divisor_count = {}\n    \n    # For each number in the range [start, end]\n    for num in range(start, end + 1):\n        # Find all divisors of the current number\n        for divisor in range(1, num + 1):\n            if num % divisor == 0:\n                divisor_count[divisor] = divisor_count.get(divisor, 0) + 1\n    \n    # Find the divisor with maximum occurrences\n    max_count = 0\n    max_divisor = 0\n    \n    for divisor, count in divisor_count.items():\n        if count > max_count:\n            max_count = count\n            max_divisor = divisor\n    \n    return max_divisor", "is_syntactically_valid": true}
{"task_id": 340, "generation": "def sum_three_smallest_nums(numbers):\n    # Filter out non-positive numbers\n    positive_numbers = [num for num in numbers if num > 0]\n    \n    # Sort the positive numbers in ascending order\n    positive_numbers.sort()\n    \n    # Return the sum of the first three elements\n    return sum(positive_numbers[:3])", "is_syntactically_valid": true}
{"task_id": 341, "generation": "def set_to_tuple(input_set):\n    return tuple(sorted(input_set))", "is_syntactically_valid": true}
{"task_id": 342, "generation": "import heapq\n\ndef find_minimum_range(arrays):\n    # Create a min heap with the first element from each array\n    # Each element in heap is (value, array_index, element_index)\n    heap = []\n    max_val = float('-inf')\n    \n    # Initialize heap with first element from each array\n    for i, arr in enumerate(arrays):\n        if arr:  # Check if array is not empty\n            heapq.heappush(heap, (arr[0], i, 0))\n            max_val = max(max_val, arr[0])\n    \n    min_range = float('inf')\n    result_range = None\n    \n    while len(heap) == len(arrays):\n        # Get the minimum element\n        min_val, arr_idx, elem_idx = heapq.heappop(heap)\n        \n        # Update the minimum range if current range is smaller\n        current_range = max_val - min_val\n        if current_range < min_range:\n            min_range = current_range\n            result_range = (min_val, max_val)\n        \n        # Move to next element in the same array\n        if elem_idx + 1 < len(arrays[arr_idx]):\n            next_val = arrays[arr_idx][elem_idx + 1]\n            heapq.heappush(heap, (next_val, arr_idx, elem_idx + 1))\n            max_val = max(max_val, next_val)\n        else:\n            # If we can't move forward in this array, we're done\n            break\n    \n    return result_range", "is_syntactically_valid": true}
{"task_id": 343, "generation": "def dig_let(s):\n    letters = 0\n    digits = 0\n    \n    for char in s:\n        if char.isalpha():\n            letters += 1\n        elif char.isdigit():\n            digits += 1\n    \n    return (letters, digits)", "is_syntactically_valid": true}
{"task_id": 344, "generation": "import math\n\ndef count_Odd_Squares(start, end):\n    # Find the smallest integer whose square is >= start\n    sqrt_start = math.ceil(math.sqrt(start))\n    \n    # Find the largest integer whose square is <= end\n    sqrt_end = math.floor(math.sqrt(end))\n    \n    # Count perfect squares in range\n    if sqrt_start <= sqrt_end:\n        return sqrt_end - sqrt_start + 1\n    else:\n        return 0", "is_syntactically_valid": true}
{"task_id": 345, "generation": "def diff_consecutivenums(nums):\n    if len(nums) < 2:\n        return []\n    \n    differences = []\n    for i in range(1, len(nums)):\n        differences.append(nums[i] - nums[i-1])\n    \n    return differences", "is_syntactically_valid": true}
{"task_id": 346, "generation": "def zigzag(n, k):\n    # Create a 2D array to store Entringer numbers\n    # We need (n+1) rows and (n+1) columns\n    e = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: e(0, 0) = 1\n    e[0][0] = 1\n    \n    # Fill the Entringer triangle using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j == 0:\n                e[i][j] = 0\n            else:\n                e[i][j] = e[i][j-1] + e[i-1][i-j]\n    \n    return e[n][k]", "is_syntactically_valid": true}
{"task_id": 347, "generation": "def count_Squares(m, n):\n    total = 0\n    max_size = min(m, n)\n    \n    for k in range(1, max_size + 1):\n        total += (m - k + 1) * (n - k + 1)\n    \n    return total", "is_syntactically_valid": true}
{"task_id": 348, "generation": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    \n    k = n // 2\n    \n    # Calculate the kth Catalan number: C_k = (1/(k+1)) * C(2k, k)\n    # C(2k, k) = (2k)! / (k! * k!)\n    \n    # Calculate binomial coefficient C(2k, k)\n    numerator = 1\n    denominator = 1\n    \n    for i in range(k):\n        numerator *= (2 * k - i)\n        denominator *= (i + 1)\n    \n    binomial = numerator // denominator\n    \n    # Catalan number is binomial / (k + 1)\n    catalan = binomial // (k + 1)\n    \n    return catalan", "is_syntactically_valid": true}
{"task_id": 349, "generation": "def check(s):\n    for char in s:\n        if char not in '01':\n            return \"No\"\n    return \"Yes\"", "is_syntactically_valid": true}
{"task_id": 350, "generation": "def minimum_Length(s):\n    from collections import Counter\n    \n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Find the character with maximum frequency\n    max_freq = max(char_count.values())\n    \n    # The minimum length after removing all occurrences of the most frequent character\n    # is the total length minus the maximum frequency\n    return len(s) - max_freq", "is_syntactically_valid": true}
{"task_id": 351, "generation": "def first_Element(arr, n, k):\n    count_dict = {}\n    \n    for elem in arr:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n        \n        if count_dict[elem] == k:\n            return elem\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 352, "generation": "def unique_Characters(s):\n    return len(s) == len(set(s))", "is_syntactically_valid": true}
{"task_id": 353, "generation": "def remove_column(nested_list, column_index):\n    result = []\n    for row in nested_list:\n        if column_index < len(row):\n            new_row = row[:column_index] + row[column_index + 1:]\n        else:\n            new_row = row[:]\n        result.append(new_row)\n    return result", "is_syntactically_valid": true}
{"task_id": 354, "generation": "Looking at the test cases, I need to understand what the function parameters represent:\n\n- `tn_ap(1,5,2)==9`: This suggests finding a term in an arithmetic progression\n- `tn_ap(2,6,4)==22`: Another test case\n- `tn_ap(1,4,5)==16`: Another test case\n\nLet me analyze the pattern. In an arithmetic progression, the nth term is given by:\n`tn = a + (n-1) * d`\n\nWhere:\n- `a` is the first term\n- `d` is the common difference\n- `n` is the term number\n\nLooking at the test cases:\n- `tn_ap(1,5,2)==9`: If a=1, d=5, n=2, then tn = 1 + (2-1)*5 = 1 + 5 = 6 \u2260 9\n- Let me try a different interpretation: maybe it's `tn_ap(a, d, n)`\n- `tn_ap(1,5,2)==9`: a=1, d=5, n=2 \u2192 tn = 1 + (2-1)*5 = 6 \u2260 9\n\nLet me try another interpretation: `tn_ap(first_term, common_difference, term_position)`\n- `tn_ap(1,5,2)==9`: a=1, d=5, n=2 \u2192 tn = 1 + (2-1)*5 = 6 \u2260 9\n\nWait, let me check if it's `tn_ap(a, n, d)`:\n- `tn_ap(1,5,2)==9`: a=1, n=5, d=2 \u2192 tn = 1 + (5-1)*2 = 1 + 8 = 9 \u2713\n- `tn_ap(2,6,4)==22`: a=2, n=6, d=4 \u2192 tn = 2 + (6-1)*4 = 2 + 20 = 22 \u2713\n- `tn_ap", "is_syntactically_valid": false}
{"task_id": 355, "generation": "def count_Rectangles(r):\n    if r == 0:\n        return 0\n    \n    count = 0\n    # Consider all possible bottom-left corners\n    for x1 in range(-r, r + 1):\n        for y1 in range(-r, r + 1):\n            # Consider all possible top-right corners\n            for x2 in range(x1, r + 1):\n                for y2 in range(y1, r + 1):\n                    # Check if all four corners are within the circle\n                    corners = [(x1, y1), (x1, y2), (x2, y1), (x2, y2)]\n                    if all(x*x + y*y <= r*r for x, y in corners):\n                        count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 356, "generation": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2", "is_syntactically_valid": true}
{"task_id": 357, "generation": "def find_max(tuple_records):\n    max_element = float('-inf')\n    for tuple_record in tuple_records:\n        for element in tuple_record:\n            if element > max_element:\n                max_element = element\n    return max_element", "is_syntactically_valid": true}
{"task_id": 358, "generation": "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))", "is_syntactically_valid": true}
{"task_id": 359, "generation": "import math\n\ndef Check_Solution(a, b, c):\n    # Calculate discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if roots are real\n    if discriminant < 0:\n        return \"No\"\n    \n    # Calculate the two roots\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    \n    # Check if one root is twice the other\n    if abs(root1 - 2*root2) < 1e-10 or abs(root2 - 2*root1) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"", "is_syntactically_valid": true}
{"task_id": 360, "generation": "def get_carol(n):\n    return (2**n - 1)**2 - 2", "is_syntactically_valid": true}
{"task_id": 361, "generation": "def remove_empty(lst):\n    return [item for item in lst if item != []]", "is_syntactically_valid": true}
{"task_id": 362, "generation": "def max_occurrences(lst):\n    if not lst:\n        return None\n    \n    # Count occurrences of each item\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    \n    # Find the maximum count\n    max_count = max(count_dict.values())\n    \n    # Find all items with maximum count\n    max_items = [item for item, count in count_dict.items() if count == max_count]\n    \n    # If there's only one item with max count, return it\n    if len(max_items) == 1:\n        return max_items[0]\n    \n    # If there are multiple items with max count, return them as a tuple\n    return tuple(sorted(max_items))", "is_syntactically_valid": true}
{"task_id": 363, "generation": "def add_K_element(tuples_list, k):\n    result = []\n    for tuple_item in tuples_list:\n        new_tuple = tuple(element + k for element in tuple_item)\n        result.append(new_tuple)\n    return result", "is_syntactically_valid": true}
{"task_id": 364, "generation": "def min_flip_to_make_string_alternate(s):\n    n = len(s)\n    \n    # Count flips needed for pattern starting with '0'\n    flips_pattern_0 = 0\n    for i in range(n):\n        expected = '0' if i % 2 == 0 else '1'\n        if s[i] != expected:\n            flips_pattern_0 += 1\n    \n    # Count flips needed for pattern starting with '1'\n    flips_pattern_1 = 0\n    for i in range(n):\n        expected = '1' if i % 2 == 0 else '0'\n        if s[i] != expected:\n            flips_pattern_1 += 1\n    \n    # Return minimum flips needed\n    return min(flips_pattern_0, flips_pattern_1)", "is_syntactically_valid": true}
{"task_id": 365, "generation": "def count_Digit(number):\n    return len(str(abs(number)))", "is_syntactically_valid": true}
{"task_id": 366, "generation": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return 0\n    \n    max_product = nums[0] * nums[1]\n    \n    for i in range(1, len(nums) - 1):\n        product = nums[i] * nums[i + 1]\n        if product > max_product:\n            max_product = product\n    \n    return max_product", "is_syntactically_valid": true}
{"task_id": 367, "generation": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0, True\n        \n        left_height, left_balanced = check_balance(node.left)\n        if not left_balanced:\n            return 0, False\n        \n        right_height, right_balanced = check_balance(node.right)\n        if not right_balanced:\n            return 0, False\n        \n        height_diff = abs(left_height - right_height)\n        is_balanced = height_diff <= 1\n        \n        return max(left_height, right_height) + 1, is_balanced\n    \n    _, balanced = check_balance(root)\n    return balanced\n\n# Test cases setup\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.left.left = TreeNode(3)\nroot.left.left.left = TreeNode(4)\n\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.right = TreeNode(3)\nroot2.left.left = TreeNode(4)\nroot2.left.right = TreeNode(5)\nroot2.left.left.left = TreeNode(6)", "is_syntactically_valid": true}
{"task_id": 368, "generation": "def repeat_tuples(tuple_input, n):\n    return tuple(tuple_input for _ in range(n))", "is_syntactically_valid": true}
{"task_id": 369, "generation": "def lateralsurface_cuboid(length, width, height):\n    \"\"\"\n    Function to find the lateral surface area of a cuboid\n    \n    Parameters:\n    length (int/float): length of the cuboid\n    width (int/float): width of the cuboid\n    height (int/float): height of the cuboid\n    \n    Return:\n    int/float: lateral surface area of the cuboid\n    \"\"\"\n    return 2 * height * (length + width)", "is_syntactically_valid": true}
{"task_id": 370, "generation": "def float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]), reverse=True)", "is_syntactically_valid": true}
{"task_id": 371, "generation": "def smallest_missing(arr, start, end):\n    # If the array is empty or start > end, return 0\n    if start > end:\n        return 0\n    \n    # If the first element is not 0, then 0 is missing\n    if arr[start] != start:\n        return start\n    \n    # Binary search approach\n    left = start\n    right = end\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If arr[mid] == mid, then the missing element is on the right side\n        if arr[mid] == mid:\n            left = mid + 1\n        else:\n            # Missing element is on the left side\n            right = mid - 1\n    \n    return left", "is_syntactically_valid": true}
{"task_id": 372, "generation": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    result = []\n    while lst:\n        result.append(heapq.heappop(lst))\n    return result", "is_syntactically_valid": true}
{"task_id": 373, "generation": "def volume_cuboid(length, width, height):\n    return length * width * height", "is_syntactically_valid": true}
{"task_id": 374, "generation": "def permute_string(s):\n    if len(s) <= 1:\n        return [s]\n    \n    result = []\n    for i in range(len(s)):\n        char = s[i]\n        remaining = s[:i] + s[i+1:]\n        for perm in permute_string(remaining):\n            result.append(char + perm)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 375, "generation": "def round_num(num, multiple):\n    remainder = num % multiple\n    if remainder < multiple / 2:\n        return num - remainder\n    else:\n        return num + (multiple - remainder)", "is_syntactically_valid": true}
{"task_id": 376, "generation": "def remove_replica(tup):\n    # Count occurrences of each element\n    count_dict = {}\n    for item in tup:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    \n    # Track how many times we've seen each element\n    seen_count = {}\n    result = []\n    \n    for item in tup:\n        if item not in seen_count:\n            seen_count[item] = 0\n        \n        seen_count[item] += 1\n        \n        # If this is the first occurrence, keep the original value\n        if seen_count[item] == 1:\n            result.append(item)\n        # If this is a duplicate occurrence, replace with 'MSP'\n        else:\n            result.append('MSP')\n    \n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 377, "generation": "def remove_Char(string, char):\n    return string.replace(char, '')", "is_syntactically_valid": true}
{"task_id": 378, "generation": "def move_first(lst):\n    if len(lst) <= 1:\n        return lst\n    return [lst[-1]] + lst[:-1]", "is_syntactically_valid": true}
{"task_id": 379, "generation": "def surfacearea_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)", "is_syntactically_valid": true}
{"task_id": 380, "generation": "def multi_list(rows, cols):\n    result = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(i * j)\n        result.append(row)\n    return result", "is_syntactically_valid": true}
{"task_id": 381, "generation": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])", "is_syntactically_valid": true}
{"task_id": 382, "generation": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    \n    left = 0\n    right = len(arr) - 1\n    \n    # If array is not rotated\n    if arr[left] <= arr[right]:\n        return 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid is the rotation point\n        if mid > 0 and arr[mid] < arr[mid - 1]:\n            return mid\n        \n        # Check if mid + 1 is the rotation point\n        if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        \n        # If left half is sorted, rotation point is in right half\n        if arr[left] <= arr[mid]:\n            left = mid + 1\n        # Otherwise, rotation point is in left half\n        else:\n            right = mid - 1\n    \n    return 0", "is_syntactically_valid": true}
{"task_id": 383, "generation": "def even_bit_toggle_number(n):\n    # Create a mask with 1s at even positions (0, 2, 4, 6, ...)\n    # For a 32", "is_syntactically_valid": false}
{"task_id": 384, "generation": "def frequency_Of_Smallest(n, arr):\n    if not arr:\n        return 0\n    \n    smallest = min(arr)\n    frequency = arr.count(smallest)\n    \n    return frequency", "is_syntactically_valid": true}
{"task_id": 385, "generation": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)", "is_syntactically_valid": true}
{"task_id": 386, "generation": "def swap_count(s):\n    open_count = 0\n    close_count = 0\n    \n    for char in s:\n        if char == '[':\n            open_count += 1\n        elif char == ']':\n            if open_count > 0:\n                open_count -= 1\n            else:\n                close_count += 1\n    \n    return (open_count + 1) // 2 + (close_count + 1) // 2", "is_syntactically_valid": true}
{"task_id": 387, "generation": "def even_or_odd(hex_string):\n    # Convert hexadecimal string to integer\n    decimal_value = int(hex_string, 16)\n    \n    # Check if the decimal value is even or odd\n    if decimal_value % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "is_syntactically_valid": true}
{"task_id": 388, "generation": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    \n    return power", "is_syntactically_valid": true}
{"task_id": 389, "generation": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b", "is_syntactically_valid": true}
{"task_id": 390, "generation": "def add_string(lst, template):\n    return [template.format(item) for item in lst]", "is_syntactically_valid": true}
{"task_id": 391, "generation": "def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        nested_dict = {list1[i]: {list2[i]: list3[i]}}\n        result.append(nested_dict)\n    return result", "is_syntactically_valid": true}
{"task_id": 392, "generation": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        \n        if n <= 0:\n            return 0\n        \n        # Calculate f(n/2) + f(n/3) + f(n/4) + f(n/5)\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        \n        # Return max of sum_parts and n\n        result = max(sum_parts, n)\n        memo[n] = result\n        return result\n    \n    return helper(n)", "is_syntactically_valid": true}
{"task_id": 393, "generation": "def max_length_list(lists):\n    max_list = max(lists, key=lambda x: len(x))\n    return (len(max_list), max_list)", "is_syntactically_valid": true}
{"task_id": 394, "generation": "def check_distinct(tup):\n    return len(tup) == len(set(tup))", "is_syntactically_valid": true}
{"task_id": 395, "generation": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count frequency of each character\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find first character with count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 396, "generation": "import re\n\ndef check_char(string):\n    pattern = r'^(.).*\\1$|^.$'\n    if re.match(pattern, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "is_syntactically_valid": true}
{"task_id": 397, "generation": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])", "is_syntactically_valid": true}
{"task_id": 398, "generation": "def sum_of_digits(lst):\n    def get_digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    def process_item(item):\n        if isinstance(item, int):\n            return get_digit_sum(item)\n        elif isinstance(item, list):\n            total = 0\n            for sub_item in item:\n                if isinstance(sub_item, int):\n                    total += get_digit_sum(sub_item)\n            return total\n        else:\n            return 0\n    \n    total_sum = 0\n    for item in lst:\n        total_sum += process_item(item)\n    \n    return total_sum", "is_syntactically_valid": true}
{"task_id": 399, "generation": "def bitwise_xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 400, "generation": "def extract_freq(tuple_list):\n    unique_tuples = set()\n    \n    for tup in tuple_list:\n        # Sort the tuple to make order irrelevant\n        sorted_tuple = tuple(sorted(tup))\n        unique_tuples.add(sorted_tuple)\n    \n    return len(unique_tuples)", "is_syntactically_valid": true}
{"task_id": 401, "generation": "def add_nested_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        inner_tuple = tuple(tuple1[i][j] + tuple2[i][j] for j in range(len(tuple1[i])))\n        result.append(inner_tuple)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 402, "generation": "def ncr_modp(n, r, p):\n    # Handle edge cases\n    if r > n or r < 0:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Use the property that C(n,r) = C(n, n-r) to minimize computation\n    if r > n - r:\n        r = n - r\n    \n    # Calculate nCr using the formula: C(n,r) = n! / (r! * (n-r)!)\n    # But we need to be careful with modular arithmetic\n    \n    # Calculate numerator and denominator separately\n    numerator = 1\n    denominator = 1\n    \n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n        denominator = (denominator * (i + 1)) % p\n    \n    # Find modular inverse of denominator\n    def mod_inverse(a, m):\n        # Using Fermat's little theorem: a^(p-1) \u2261 1 (mod p) for prime p\n        # So a^(-1) \u2261 a^(p-2) (mod p)\n        return pow(a, m - 2, m)\n    \n    # Calculate result\n    result = (numerator * mod_inverse(denominator, p)) % p\n    return result", "is_syntactically_valid": true}
{"task_id": 403, "generation": "import re\n\ndef is_valid_URL(url):\n    pattern = r'^https?://[^\\s/$.?#].[^\\s]*$'\n    return bool(re.match(pattern, url))", "is_syntactically_valid": true}
{"task_id": 404, "generation": "def minimum(a, b):\n    return a if a < b else b", "is_syntactically_valid": true}
{"task_id": 405, "generation": "def check_tuplex(tuple_input, element):\n    return element in tuple_input", "is_syntactically_valid": true}
{"task_id": 406, "generation": "def find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "is_syntactically_valid": true}
{"task_id": 407, "generation": "def rearrange_bigger(num):\n    # Convert number to list of digits\n    digits = list(str(num))\n    n = len(digits)\n    \n    # Find the rightmost digit that is smaller than the digit next to it\n    i = n - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such digit is found, return False (no bigger number possible)\n    if i == -1:\n        return False\n    \n    # Find the smallest digit on right side of above character that is greater than digits[i]\n    j = n - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the found characters\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the substring after position i\n    digits[i + 1:] = reversed(digits[i + 1:])\n    \n    # Convert back to integer and return\n    return int(''.join(digits))", "is_syntactically_valid": true}
{"task_id": 408, "generation": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k == 0:\n        return []\n    \n    # Min heap to store (sum, i, j) where i is index in nums1, j is index in nums2\n    heap = []\n    result = []\n    \n    # Initialize heap with pairs from first element of nums1 with all elements of nums2\n    for j in range(min(len(nums2), k)):\n        heapq.heappush(heap, (nums1[0] + nums2[j], 0, j))\n    \n    while heap and len(result) < k:\n        sum_val, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # Add next pair from nums1 if exists\n        if i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 409, "generation": "def min_product_tuple(tuples_list):\n    min_product = float('inf')\n    \n    for tuple_pair in tuples_list:\n        product = tuple_pair[0] * tuple_pair[1]\n        if product < min_product:\n            min_product = product\n    \n    return min_product", "is_syntactically_valid": true}
{"task_id": 410, "generation": "def min_val(lst):\n    numeric_values = [item for item in lst if isinstance(item, (int, float))]\n    return min(numeric_values)", "is_syntactically_valid": true}
{"task_id": 411, "generation": "import re\n\ndef snake_to_camel(snake_str):\n    # Split by underscore and capitalize each word\n    return re.sub(r'_(.)', lambda m: m.group(1).upper(), snake_str.capitalize())", "is_syntactically_valid": true}
{"task_id": 412, "generation": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]", "is_syntactically_valid": true}
{"task_id": 413, "generation": "def extract_nth_element(list_of_tuples, n):\n    return [tuple_item[n] for tuple_item in list_of_tuples]", "is_syntactically_valid": true}
{"task_id": 414, "generation": "def overlapping(seq1, seq2):\n    return bool(set(seq1) & set(seq2))", "is_syntactically_valid": true}
{"task_id": 415, "generation": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    result_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    \n    return result_pair", "is_syntactically_valid": true}
{"task_id": 416, "generation": "def breakSum(n):\n    memo = {}\n    \n    def helper(num):\n        if num in memo:\n            return memo[num]\n        \n        if num <= 0:\n            return 0\n        \n        # Option 1: Don't break the number\n        no_break = num\n        \n        # Option 2: Break into three parts\n        part1 = num // 3\n        part2 = num // 3\n        part3 = num // 3 + num % 3\n        \n        break_sum = helper(part1) + helper(part2) + helper(part3)\n        \n        # Take the maximum\n        result = max(no_break, break_sum)\n        memo[num] = result\n        return result\n    \n    return helper(n)", "is_syntactically_valid": true}
{"task_id": 417, "generation": "def group_tuples(tuples_list):\n    from collections import defaultdict\n    \n    # Group tuples by their first element\n    groups = defaultdict(list)\n    for tup in tuples_list:\n        groups[tup[0]].append(tup)\n    \n    result = []\n    for first_element, group in groups.items():\n        # Collect all elements from tuples with the same first element\n        all_elements = [first_element]\n        for tup in group:\n            all_elements.extend(tup[1:])\n        result.append(tuple(all_elements))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 418, "generation": "def Find_Max(lists):\n    max_length = 0\n    max_sublist = []\n    \n    for sublist in lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    \n    return max_sublist", "is_syntactically_valid": true}
{"task_id": 419, "generation": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)", "is_syntactically_valid": true}
{"task_id": 420, "generation": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 3\n    return total", "is_syntactically_valid": true}
{"task_id": 421, "generation": "def concatenate_tuple(tup):\n    return '-'.join(str(element) for element in tup)", "is_syntactically_valid": true}
{"task_id": 422, "generation": "def find_Average_Of_Cube(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i ** 3\n    return total_sum / n", "is_syntactically_valid": true}
{"task_id": 423, "generation": "def get_maxgold(grid, m, n):\n    # Create a DP table to store maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Fill the rightmost column (base case)\n    for i in range(m):\n        dp[i][n-1] = grid[i][n-1]\n    \n    # Fill the DP table from right to left\n    for j in range(n-2, -1, -1):\n        for i in range(m):\n            # Three possible moves: right, right-up diagonal, right-down diagonal\n            right = dp[i][j+1]\n            right_up = dp[i-1][j+1] if i > 0 else 0\n            right_down = dp[i+1][j+1] if i < m-1 else 0\n            \n            # Take maximum of the three possibilities\n            dp[i][j] = grid[i][j] + max(right, right_up, right_down)\n    \n    # Return the maximum value from the first column\n    return max(dp[i][0] for i in range(m))", "is_syntactically_valid": true}
{"task_id": 424, "generation": "def extract_rear(tuple_of_strings):\n    return [string[-1] for string in tuple_of_strings]", "is_syntactically_valid": true}
{"task_id": 425, "generation": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 426, "generation": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))", "is_syntactically_valid": true}
{"task_id": 427, "generation": "import re\n\ndef change_date_format(date_string):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replacement = r'\\3-\\2-\\1'\n    return re.sub(pattern, replacement, date_string)", "is_syntactically_valid": true}
{"task_id": 428, "generation": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            arr[j] = temp\n        \n        gap //= 2\n    \n    return arr", "is_syntactically_valid": true}
{"task_id": 429, "generation": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 430, "generation": "Looking at the test cases, I need to figure out what formula is being used for the \"directrix of a parabola\" based on the expected outputs.\n\nLet me analyze the test cases:\n- parabola_directrix(5,3,2) == -198\n- parabola_directrix(9,8,4) == -2336  \n- parabola_directrix(2,4,6) == -130\n\nLet me try different combinations to find the pattern:\n\nFor (5,3,2) = -198:\n- 5*3*2 = 30, not close\n- 5\u00b2*3*2 = 150, not close\n- 5*3\u00b2*2 = 90, not close\n- 5*3*2\u00b2 = 60, not close\n- Let me try: -(5\u00b2*3*2 + 5*3\u00b2*2 + 5*3*2\u00b2) = -(150 + 90 + 60) = -300, not it\n- Let me try: -(5\u00b2*3\u00b2 + 5\u00b2*2\u00b2 + 3\u00b2*2\u00b2) = -(225 + 100 + 36) = -361, not it\n- Let me try: -2*(5*3\u00b2 + 3*2\u00b2 + 5*2\u00b2) = -2*(45 + 12 + 20) = -154, close but not exact\n- Let me try: -(5\u00b2*3\u00b2 + 5*3*2\u00b2*2) = -(225 + 60) = -285, not it\n- Let me try: -2*(5\u00b2*3 + 5*2\u00b2 + 3*2\u00b2) = -2*(75 + 20 + 12) = -214, not it\n- Let me try: -2*(5*3*2\u00b2 + 5\u00b2*3 + 5*3\u00b2) = -2*(60 + 75 + 45) = -360, not it\n- Wait, let me try the surface area formula pattern: -2*(a*b\u00b2 + b*c\u00b2 + a*c\u00b2)\n- For (5,3,2): -2*(5*9", "is_syntactically_valid": false}
{"task_id": 431, "generation": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return None", "is_syntactically_valid": true}
{"task_id": 432, "generation": "def median_trapezium(a, b, c):\n    values = sorted([a, b, c])\n    return (values[0] + values[1]) / 2", "is_syntactically_valid": true}
{"task_id": 433, "generation": "def check_greater(array, number):\n    if number > max(array):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'", "is_syntactically_valid": true}
{"task_id": 434, "generation": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 435, "generation": "def last_Digit(num):\n    return num % 10", "is_syntactically_valid": true}
{"task_id": 436, "generation": "def neg_nos(lst):\n    negative_numbers = [num for num in lst if num < 0]\n    return tuple(negative_numbers)", "is_syntactically_valid": true}
{"task_id": 437, "generation": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 1:\n            result += s[i]\n    return result", "is_syntactically_valid": true}
{"task_id": 438, "generation": "def count_bidirectional(tuples_list):\n    count = 0\n    for i, tuple1 in enumerate(tuples_list):\n        reversed_tuple = (tuple1[1], tuple1[0])\n        if reversed_tuple in tuples_list:\n            count += 1\n    return str(count)", "is_syntactically_valid": true}
{"task_id": 439, "generation": "def multiple_to_single(numbers):\n    result = \"\"\n    for num in numbers:\n        result += str(num)\n    return int(result)", "is_syntactically_valid": true}
{"task_id": 440, "generation": "import re\n\ndef find_adverb_position(sentence):\n    # Find adverbs (words ending with 'ly') at the beginning of the sentence\n    match = re.match(r'^(\\w*ly)', sentence)\n    \n    if match:\n        adverb = match.group(1)\n        start_pos = 0\n        end_pos = len(adverb) - 1\n        return (start_pos, end_pos, adverb)\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 441, "generation": "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2", "is_syntactically_valid": true}
{"task_id": 442, "generation": "def positive_count(numbers):\n    if not numbers:\n        return 0.0\n    \n    positive_numbers = sum(1 for num in numbers if num > 0)\n    total_numbers = len(numbers)\n    \n    ratio = positive_numbers / total_numbers\n    return round(ratio, 2)", "is_syntactically_valid": true}
{"task_id": 443, "generation": "def largest_neg(lst):\n    negative_numbers = [num for num in lst if num < 0]\n    if not negative_numbers:\n        return None\n    return max(negative_numbers)", "is_syntactically_valid": true}
{"task_id": 444, "generation": "def trim_tuple(tuple_list, k):\n    result = []\n    for tup in tuple_list:\n        trimmed = tup[k:-k] if k < len(tup) // 2 else ()\n        result.append(trimmed)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 445, "generation": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        inner_tuple = []\n        for j in range(len(tuple1[i])):\n            inner_tuple.append(tuple1[i][j] * tuple2[i][j])\n        result.append(tuple(inner_tuple))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 446, "generation": "def count_Occurrence(tuple_data, list_data):\n    count = 0\n    for element in list_data:\n        count += tuple_data.count(element)\n    return count", "is_syntactically_valid": true}
{"task_id": 447, "generation": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))", "is_syntactically_valid": true}
{"task_id": 448, "generation": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    \n    # Initialize first three Perrin numbers\n    perrin = [3, 0, 2]\n    \n    # Generate Perrin numbers up to index n-1\n    for i in range(3, n):\n        next_perrin = perrin[i-2] + perrin[i-3]\n        perrin.append(next_perrin)\n    \n    # Return sum of first n Perrin numbers\n    return sum(perrin[:n])", "is_syntactically_valid": true}
{"task_id": 449, "generation": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area using the cross product formula\n    # Area = 0.5 * |x1(y2-y3) + x2(y3-y1) + x3(y1-y2)|\n    area = abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n    \n    # If area is 0, the points are collinear (not a valid triangle)\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'", "is_syntactically_valid": true}
{"task_id": 450, "generation": "def extract_string(string_list, size):\n    result = []\n    for string in string_list:\n        if len(string) == size:\n            result.append(string)\n    return result", "is_syntactically_valid": true}
{"task_id": 451, "generation": "import re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)", "is_syntactically_valid": true}
{"task_id": 452, "generation": "def loss_amount(cost_price, selling_price):\n    if selling_price < cost_price:\n        return cost_price - selling_price\n    else:\n        return None", "is_syntactically_valid": true}
{"task_id": 453, "generation": "def sumofFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    \n    even_sum = 0\n    for factor in factors:\n        if factor % 2 == 0:\n            even_sum += factor\n    \n    return even_sum", "is_syntactically_valid": true}
{"task_id": 454, "generation": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\w*z\\w*', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 455, "generation": "def check_monthnumb_number(month):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month in months_with_31_days", "is_syntactically_valid": true}
{"task_id": 456, "generation": "def reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]", "is_syntactically_valid": true}
{"task_id": 457, "generation": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist", "is_syntactically_valid": true}
{"task_id": 458, "generation": "def rectangle_area(length, width):\n    return length * width", "is_syntactically_valid": true}
{"task_id": 459, "generation": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)", "is_syntactically_valid": true}
{"task_id": 460, "generation": "def Extract(lst):\n    return [sublist[0] for sublist in lst]", "is_syntactically_valid": true}
{"task_id": 461, "generation": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 462, "generation": "def combinations_list(lst):\n    result = []\n    n = len(lst)\n    \n    # Generate all possible combinations using bit manipulation\n    for i in range(2**n):\n        combination = []\n        for j in range(n):\n            # Check if j-th bit is set in i\n            if i & (1 << j):\n                combination.append(lst[j])\n        result.append(combination)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 463, "generation": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 464, "generation": "def check_value(dictionary, value):\n    return all(v == value for v in dictionary.values())", "is_syntactically_valid": true}
{"task_id": 465, "generation": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}", "is_syntactically_valid": true}
{"task_id": 466, "generation": "def find_peak(arr, n):\n    # Handle edge cases\n    if n == 1:\n        return 0\n    \n    # Check if first element is peak\n    if arr[0] >= arr[1]:\n        return 0\n    \n    # Check if last element is peak\n    if arr[n-1] >= arr[n-2]:\n        return n-1\n    \n    # Check for peak in the middle elements\n    for i in range(1, n-1):\n        if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n            return i\n    \n    # If no peak found, return -1 (shouldn't happen with valid input)\n    return -1", "is_syntactically_valid": true}
{"task_id": 467, "generation": "def decimal_to_Octal(decimal):\n    if decimal == 0:\n        return 0\n    \n    octal = \"\"\n    while decimal > 0:\n        remainder = decimal % 8\n        octal = str(remainder) + octal\n        decimal = decimal // 8\n    \n    return int(octal)", "is_syntactically_valid": true}
{"task_id": 468, "generation": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    \n    # dp[i] stores the maximum product of increasing subsequence ending at index i\n    dp = [0] * n\n    \n    # Initialize with individual elements\n    for i in range(n):\n        dp[i] = arr[i]\n    \n    # Fill dp array\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    # Return maximum product among all subsequences\n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 469, "generation": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    \n    # If k is large enough, we can make as many transactions as we want\n    if k >= n // 2:\n        profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                profit += prices[i] - prices[i-1]\n        return profit\n    \n    # DP approach for limited transactions\n    # buy[i][j] = max profit after at most i transactions, currently holding stock\n    # sell[i][j] = max profit after at most i transactions, not holding stock\n    buy = [[-float('inf')] * n for _ in range(k+1)]\n    sell = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        buy[i][0] = -prices[0]\n        for j in range(1, n):\n            buy[i][j] = max(buy[i][j-1], sell[i-1][j-1] - prices[j])\n            sell[i][j] = max(sell[i][j-1], buy[i][j-1] + prices[j])\n    \n    return sell[k][n-1]", "is_syntactically_valid": true}
{"task_id": 470, "generation": "def add_pairwise(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 471, "generation": "def find_remainder(arr, length, n):\n    product = 1\n    for i in range(length):\n        product = (product * arr[i]) % n\n    return product", "is_syntactically_valid": true}
{"task_id": 472, "generation": "def check_Consecutive(lst):\n    if len(lst) <= 1:\n        return True\n    \n    # Remove duplicates and sort the list\n    unique_sorted = sorted(set(lst))\n    \n    # If removing duplicates changed the length, there were duplicates\n    if len(unique_sorted) != len(lst):\n        return False\n    \n    # Check if the sorted unique list forms consecutive numbers\n    for i in range(1, len(unique_sorted)):\n        if unique_sorted[i] - unique_sorted[i-1] != 1:\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 473, "generation": "def tuple_intersection(list1, list2):\n    # Normalize tuples by sorting their elements to handle order independence\n    def normalize_tuple(t):\n        return tuple(sorted(t))\n    \n    # Create sets of normalized tuples\n    set1 = {normalize_tuple(t) for t in list1}\n    set2 = {normalize_tuple(t) for t in list2}\n    \n    # Find intersection\n    intersection = set1 & set2\n    \n    return intersection", "is_syntactically_valid": true}
{"task_id": 474, "generation": "def replace_char(string, old_char, new_char):\n    result = \"\"\n    for char in string:\n        if char == old_char:\n            result += new_char\n        else:\n            result += char\n    return result", "is_syntactically_valid": true}
{"task_id": 475, "generation": "def sort_counter(counter_dict):\n    return sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)", "is_syntactically_valid": true}
{"task_id": 476, "generation": "def big_sum(arr):\n    return max(arr) + min(arr)", "is_syntactically_valid": true}
{"task_id": 477, "generation": "def is_lower(string):\n    return string.lower()", "is_syntactically_valid": true}
{"task_id": 478, "generation": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if not char.islower():\n            result += char\n    return result", "is_syntactically_valid": true}
{"task_id": 479, "generation": "def first_Digit(num):\n    # Convert to string to easily access the first character\n    num_str = str(abs(num))  # Use abs to handle negative numbers\n    # Return the first digit as an integer\n    return int(num_str[0])", "is_syntactically_valid": true}
{"task_id": 480, "generation": "def get_max_occuring_char(s):\n    char_count = {}\n    \n    # Count occurrences of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the character with maximum count\n    max_char = None\n    max_count = 0\n    \n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    \n    return max_char", "is_syntactically_valid": true}
{"task_id": 481, "generation": "def is_subset_sum(arr, n, target_sum):\n    # Create a 2D DP table\n    # dp[i][j] represents whether sum j can be achieved using first i elements\n    dp = [[False for _ in range(target_sum + 1)] for _ in range(n + 1)]\n    \n    # Base case: sum 0 can always be achieved with empty subset\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Fill the DP table\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            # If current element is greater than target sum, exclude it\n            if arr[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                # Include current element or exclude it\n                dp[i][j] = dp[i-1][j] or dp[i-1][j - arr[i-1]]\n    \n    return dp[n][target_sum]", "is_syntactically_valid": true}
{"task_id": 482, "generation": "import re\n\ndef match(string):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, string):\n        return 'Yes'\n    else:\n        return 'No'", "is_syntactically_valid": true}
{"task_id": 483, "generation": "def first_Factorial_Divisible_Number(x):\n    n = 1\n    factorial = 1\n    \n    while factorial % x != 0:\n        n += 1\n        factorial *= n\n    \n    return n", "is_syntactically_valid": true}
{"task_id": 484, "generation": "def remove_matching_tuple(tuple1, tuple2):\n    result = []\n    for item in tuple1:\n        if item not in tuple2:\n            result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 485, "generation": "def largest_palindrome(arr, n):\n    def is_palindrome(num):\n        str_num = str(num)\n        return str_num == str_num[::-1]\n    \n    palindromes = [num for num in arr if is_palindrome(num)]\n    \n    if not palindromes:\n        return None\n    \n    return max(palindromes)", "is_syntactically_valid": true}
{"task_id": 486, "generation": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute binomial probability for given parameters.\n    \n    Args:\n        n: number of trials\n        k: number of successes\n        p: probability of success on each trial\n    \n    Returns:\n        float: binomial probability\n    \"\"\"\n    # Calculate binomial coefficient C(n, k) = n! / (k! * (n-k)!)\n    binomial_coeff = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    \n    # Calculate binomial probability: C(n, k) * p^k * (1-p)^(n-k)\n    probability = binomial_coeff * (p ** k) * ((1 - p) ** (n - k))\n    \n    return probability", "is_syntactically_valid": true}
{"task_id": 487, "generation": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])", "is_syntactically_valid": true}
{"task_id": 488, "generation": "import math\n\ndef area_pentagon(side):\n    \"\"\"Calculate the area of a regular pentagon given its side length.\n    \n    Args:\n        side (float): The side length of the pentagon\n    \n    Returns:\n        float: The area of the pentagon\n    \"\"\"\n    return (1/4) * math.sqrt(25 + 10 * math.sqrt(5)) * side * side", "is_syntactically_valid": true}
{"task_id": 489, "generation": "def frequency_Of_Largest(n, arr):\n    if not arr:\n        return 0\n    \n    largest_value = max(arr)\n    frequency = arr.count(largest_value)\n    \n    return frequency", "is_syntactically_valid": true}
{"task_id": 490, "generation": "def extract_symmetric(tuple_list):\n    result = set()\n    tuple_set = set(tuple_list)\n    \n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in tuple_set and pair != reversed_pair:\n            result.add(pair)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 491, "generation": "def sum_gp(a, n, r):\n    \"\"\"Function to find the sum of geometric progression series.\n    \n    Args:\n        a: first term\n        n: number of terms\n        r: common ratio\n    \n    Returns:\n        sum of the geometric progression\n    \"\"\"\n    if r == 1:\n        return a * n\n    else:\n        return a * (r**n - 1) // (r - 1)", "is_syntactically_valid": true}
{"task_id": 492, "generation": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 493, "generation": "import math\n\ndef calculate_polygons(x, y, width, height, size):\n    polygons = []\n    \n    # Calculate hexagon dimensions\n    hex_width = size * 2\n    hex_height = size * math.sqrt(3)\n    \n    # Calculate horizontal and vertical spacing\n    h_spacing = hex_width * 0.75\n    v_spacing = hex_height\n    \n    for row in range(height):\n        for col in range(width):\n            # Calculate center position\n            center_x = x + col * h_spacing\n            center_y = y + row * v_spacing\n            \n            # Offset every other row\n            if row % 2 == 1:\n                center_x += h_spacing / 2\n            \n            # Generate hexagon vertices\n            vertices = []\n            for i in range(7):  # 7 points to close the polygon\n                angle = i * math.pi / 3  # 60 degrees in radians\n                vertex_x = center_x + size * math.cos(angle)\n                vertex_y = center_y + size * math.sin(angle)\n                vertices.append((vertex_x, vertex_y))\n            \n            polygons.append(vertices)\n    \n    return polygons", "is_syntactically_valid": true}
{"task_id": 494, "generation": "def binary_to_integer(binary_tuple):\n    result = 0\n    for i, bit in enumerate(reversed(binary_tuple)):\n        result += bit * (2 ** i)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 495, "generation": "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)", "is_syntactically_valid": true}
{"task_id": 496, "generation": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    return heapq.nsmallest(k, numbers)", "is_syntactically_valid": true}
{"task_id": 497, "generation": "import math\n\ndef surfacearea_cone(radius, height):\n    # Calculate slant height using Pythagorean theorem\n    slant_height = math.sqrt(radius**2 + height**2)\n    \n    # Surface area of cone = \u03c0 * r\u00b2 + \u03c0 * r * l\n    # where r is radius and l is slant height\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    \n    return base_area + lateral_area", "is_syntactically_valid": true}
{"task_id": 498, "generation": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "is_syntactically_valid": true}
{"task_id": 499, "generation": "def diameter_circle(radius):\n    return radius * 2", "is_syntactically_valid": true}
{"task_id": 500, "generation": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)", "is_syntactically_valid": true}
{"task_id": 501, "generation": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    \n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            count += 1\n            if i != g // i:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 502, "generation": "def find(a, b):\n    return a % b", "is_syntactically_valid": true}
{"task_id": 503, "generation": "def add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result", "is_syntactically_valid": true}
{"task_id": 504, "generation": "def sum_Of_Series(n):\n    return sum(i**3 for i in range(1, n+1))", "is_syntactically_valid": true}
{"task_id": 505, "generation": "def re_order(arr):\n    # Create a new list to store non-zero elements\n    result = []\n    zero_count = 0\n    \n    # Iterate through the array\n    for num in arr:\n        if num != 0:\n            result.append(num)\n        else:\n            zero_count += 1\n    \n    # Add zeros at the end\n    result.extend([0] * zero_count)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 506, "generation": "def permutation_coefficient(n, k):\n    if k > n or k < 0:\n        return 0\n    \n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 507, "generation": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]", "is_syntactically_valid": true}
{"task_id": 508, "generation": "def same_order(list1, list2):\n    # Find common elements while preserving order from list1\n    common_in_list1 = [item for item in list1 if item in list2]\n    \n    # Find common elements while preserving order from list2\n    common_in_list2 = [item for item in list2 if item in list1]\n    \n    # Check if the order of common elements is the same\n    return common_in_list1 == common_in_list2", "is_syntactically_valid": true}
{"task_id": 509, "generation": "def average_Odd(n):\n    odd_numbers = []\n    for i in range(1, n + 1, 2):\n        odd_numbers.append(i)\n    return sum(odd_numbers) // len(odd_numbers)", "is_syntactically_valid": true}
{"task_id": 510, "generation": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    count = 0\n    \n    # Generate all possible subsequences using bit manipulation\n    for i in range(1, 2**n):\n        product = 1\n        for j in range(n):\n            if i & (1 << j):\n                product *= arr[j]\n                if product >= k:\n                    break\n        if product < k:\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
