{"task_id": 11, "generation": "def remove_Occ(string, char):\n    if char not in string:\n        return string\n    \n    # Find first occurrence\n    first_index = string.find(char)\n    \n    # Find last occurrence\n    last_index = string.rfind(char)\n    \n    # If there's only one occurrence, remove it\n    if first_index == last_index:\n        return string[:first_index] + string[first_index + 1:]\n    \n    # Remove both first and last occurrences\n    # Remove last occurrence first to avoid index shifting\n    result = string[:last_index] + string[last_index + 1:]\n    # Then remove first occurrence\n    result = result[:first_index] + result[first_index + 1:]\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 12, "generation": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)", "is_syntactically_valid": true}
{"task_id": 13, "generation": "from collections import Counter\n\ndef count_common(words):\n    counter = Counter(words)\n    most_common = counter.most_common()\n    \n    # Group by frequency and sort by frequency descending, then by alphabetical order\n    freq_groups = {}\n    for word, count in most_common:\n        if count not in freq_groups:\n            freq_groups[count] = []\n        freq_groups[count].append(word)\n    \n    result = []\n    for freq in sorted(freq_groups.keys(), reverse=True):\n        sorted_words = sorted(freq_groups[freq])\n        for word in sorted_words:\n            result.append((word, freq))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 14, "generation": "def find_Volume(base, height, length):\n    return (base * height * length) // 2", "is_syntactically_valid": true}
{"task_id": 15, "generation": "def split_lowerstring(s):\n    if not s:\n        return []\n    \n    result = []\n    current = \"\"\n    \n    for i, char in enumerate(s):\n        if char.islower():\n            if current:\n                result.append(current)\n            current = char\n        else:\n            current += char\n    \n    if current:\n        result.append(current)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 16, "generation": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 17, "generation": "def square_perimeter(side_length):\n    return 4 * side_length", "is_syntactically_valid": true}
{"task_id": 18, "generation": "def remove_dirty_chars(string1, string2):\n    # Create a set of characters to remove for O(1) lookup\n    chars_to_remove = set(string2)\n    \n    # Build result string by keeping only characters not in string2\n    result = \"\"\n    for char in string1:\n        if char not in chars_to_remove:\n            result += char\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 19, "generation": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))", "is_syntactically_valid": true}
{"task_id": 20, "generation": "def is_woodall(num):\n    if num < 1:\n        return False\n    \n    n = 1\n    while True:\n        woodall = n * (2 ** n) - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1", "is_syntactically_valid": true}
{"task_id": 21, "generation": "def multiples_of_num(m, n):\n    return [n * i for i in range(1, m + 1)]", "is_syntactically_valid": true}
{"task_id": 22, "generation": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "is_syntactically_valid": true}
{"task_id": 23, "generation": "def maximum_Sum(lists):\n    max_sum = 0\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum", "is_syntactically_valid": true}
{"task_id": 24, "generation": "def binary_to_decimal(binary):\n    binary_str = str(binary)\n    decimal = 0\n    power = 0\n    \n    for digit in reversed(binary_str):\n        if digit == '1':\n            decimal += 2 ** power\n        power += 1\n    \n    return decimal", "is_syntactically_valid": true}
{"task_id": 25, "generation": "def find_Product(arr, n):\n    # Count frequency of each element\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    # Find product of elements that appear only once\n    product = 1\n    for num, count in freq.items():\n        if count == 1:\n            product *= num\n    \n    return product", "is_syntactically_valid": true}
{"task_id": 26, "generation": "def check_k_elements(tuple_list, k):\n    for tuple_item in tuple_list:\n        if tuple_item.count(k) != k:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 27, "generation": "def remove(lst):\n    result = []\n    for string in lst:\n        new_string = \"\"\n        for char in string:\n            if not char.isdigit():\n                new_string += char\n        result.append(new_string)\n    return result", "is_syntactically_valid": true}
{"task_id": 28, "generation": "def binomial_Coeff(n, k):\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    # Use the property C(n,k) = C(n,n-k) to minimize calculations\n    if k > n - k:\n        k = n - k\n    \n    result = 1\n    for i in range(k):\n        result = result * (n - i) // (i + 1)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 29, "generation": "def get_Odd_Occurrence(arr, n):\n    freq_dict = {}\n    for item in arr:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    for key, value in freq_dict.items():\n        if value % 2 == 1:\n            return key", "is_syntactically_valid": true}
{"task_id": 30, "generation": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    # Count all single characters (they start and end with same character)\n    count += n\n    \n    # Count substrings of length 2 or more\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 31, "generation": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    # Count frequency of each integer across all lists\n    frequency = Counter()\n    for lst in lists:\n        for num in lst:\n            frequency[num] += 1\n    \n    # Use a min heap to keep track of top k elements\n    # We store (-frequency, num) so that higher frequencies have higher priority\n    heap = []\n    \n    for num, freq in frequency.items():\n        if len(heap) < k:\n            heapq.heappush(heap, (freq, num))\n        elif freq > heap[0][0]:\n            heapq.heapreplace(heap, (freq, num))\n    \n    # Extract elements from heap and sort by frequency (descending) then by value (ascending)\n    result = []\n    while heap:\n        freq, num = heapq.heappop(heap)\n        result.append((freq, num))\n    \n    # Sort by frequency descending, then by value ascending\n    result.sort(key=lambda x: (-x[0], x[1]))\n    \n    return [num for freq, num in result]", "is_syntactically_valid": true}
{"task_id": 32, "generation": "def max_Prime_Factors(n):\n    max_prime = -1\n    \n    # Handle factor 2\n    while n % 2 == 0:\n        max_prime = 2\n        n = n // 2\n    \n    # Check odd factors from 3 onwards\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n        i += 2\n    \n    # If n is still greater than 1, then it's a prime\n    if n > 1:\n        max_prime = n\n    \n    return max_prime", "is_syntactically_valid": true}
{"task_id": 33, "generation": "def decimal_To_Binary(decimal_num):\n    if decimal_num == 0:\n        return 0\n    \n    binary = \"\"\n    while decimal_num > 0:\n        binary = str(decimal_num % 2) + binary\n        decimal_num = decimal_num // 2\n    \n    return int(binary)", "is_syntactically_valid": true}
{"task_id": 34, "generation": "def find_missing(arr, n):\n    # Calculate expected sum of numbers from 1 to n\n    expected_sum = n * (n + 1) // 2\n    \n    # Calculate actual sum of array elements\n    actual_sum = sum(arr)\n    \n    # The missing number is the difference\n    return expected_sum - actual_sum", "is_syntactically_valid": true}
{"task_id": 35, "generation": "def find_rect_num(n):\n    return n * (n + 1)", "is_syntactically_valid": true}
{"task_id": 36, "generation": "def find_Nth_Digit(a, b, n):\n    # Perform long division to find the nth digit after decimal point\n    remainder = a % b\n    \n    for i in range(n):\n        remainder *= 10\n        digit = remainder // b\n        remainder = remainder % b\n        \n        if i == n - 1:  # nth digit (1-indexed)\n            return digit\n    \n    return digit", "is_syntactically_valid": true}
{"task_id": 37, "generation": "def sort_mixed_list(lst):\n    integers = []\n    strings = []\n    \n    for item in lst:\n        if isinstance(item, int):\n            integers.append(item)\n        elif isinstance(item, str):\n            strings.append(item)\n    \n    integers.sort()\n    strings.sort()\n    \n    return integers + strings", "is_syntactically_valid": true}
{"task_id": 38, "generation": "def div_even_odd(lst):\n    first_even = None\n    first_odd = None\n    \n    for num in lst:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 == 1 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    return first_even // first_odd", "is_syntactically_valid": true}
{"task_id": 39, "generation": "def rearange_string(s):\n    from collections import Counter\n    import heapq\n    \n    # Count frequency of each character\n    char_count = Counter(s)\n    \n    # Check if rearrangement is possible\n    # At most one character can have odd frequency\n    odd_count = sum(1 for count in char_count.values() if count % 2 == 1)\n    if odd_count > 1:\n        return \"\"\n    \n    # Create max heap (using negative values for max heap behavior)\n    heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(heap)\n    \n    result = []\n    prev_count, prev_char = 0, ''\n    \n    while heap:\n        # Get the most frequent character\n        count1, char1 = heapq.heappop(heap)\n        result.append(char1)\n        \n        # If previous character still has remaining count, put it back\n        if prev_count < 0:\n            heapq.heappush(heap, (prev_count, prev_char))\n        \n        # Update previous character info\n        prev_count, prev_char = count1 + 1, char1\n    \n    # Check if we used all characters\n    if len(result) != len(s):\n        return \"\"\n    \n    return ''.join(result)", "is_syntactically_valid": true}
{"task_id": 40, "generation": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    # Flatten the list of lists into a single list\n    flattened = []\n    for sublist in list_of_lists:\n        flattened.extend(sublist)\n    \n    # Use Counter to count frequencies\n    frequency_counter = Counter(flattened)\n    \n    # Convert Counter to dictionary and return\n    return dict(frequency_counter)", "is_syntactically_valid": true}
{"task_id": 41, "generation": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))", "is_syntactically_valid": true}
{"task_id": 42, "generation": "def find_Sum(arr, n):\n    from collections import Counter\n    \n    count = Counter(arr)\n    total_sum = 0\n    \n    for element, frequency in count.items():\n        if frequency > 1:\n            total_sum += element * frequency\n    \n    return total_sum", "is_syntactically_valid": true}
{"task_id": 43, "generation": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 44, "generation": "import re\n\ndef text_match_string(text):\n    pattern = r'^python'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 45, "generation": "import math\n\ndef get_gcd(arr):\n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = math.gcd(result, arr[i])\n    return result", "is_syntactically_valid": true}
{"task_id": 46, "generation": "def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))", "is_syntactically_valid": true}
{"task_id": 47, "generation": "def compute_Last_Digit(a, b):\n    if a >= b:\n        return 1\n    \n    result = 1\n    for i in range(a + 1, b + 1):\n        result = (result * i) % 10\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 48, "generation": "def odd_bit_set_number(n):\n    # Create a mask with all odd bits set\n    # 0x55555555 in hex = 01010101010101010101010101010101 in binary (32-bit)\n    # This sets all odd-positioned bits (1st, 3rd, 5th, etc.)\n    \n    # For a more general approach that works with any size number:\n    mask = 0\n    temp = n\n    bit_position = 1\n    \n    # Find the highest bit position in the number\n    while temp > 0:\n        if bit_position % 2 == 1:  # odd position\n            mask |= (1 << (bit_position - 1))\n        temp >>= 1\n        bit_position += 1\n    \n    # Continue setting odd bits beyond the number's length if needed\n    # to handle cases where we need to set bits in higher positions\n    while bit_position <= 32:  # reasonable limit for 32-bit integers\n        if bit_position % 2 == 1:\n            mask |= (1 << (bit_position - 1))\n        bit_position += 1\n    \n    return n | mask", "is_syntactically_valid": true}
{"task_id": 49, "generation": "def specified_element(two_d_list, index):\n    return [row[index] for row in two_d_list]", "is_syntactically_valid": true}
{"task_id": 50, "generation": "def min_length_list(lists):\n    min_list = min(lists, key=lambda x: len(x))\n    return (len(min_list), min_list)", "is_syntactically_valid": true}
{"task_id": 51, "generation": "def check_equilateral(a, b, c):\n    return a == b == c", "is_syntactically_valid": true}
{"task_id": 52, "generation": "def parallelogram_area(base, height):\n    return base * height", "is_syntactically_valid": true}
{"task_id": 53, "generation": "def check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "is_syntactically_valid": true}
{"task_id": 54, "generation": "def counting_sort(arr):\n    if not arr:\n        return arr\n    \n    # Find the range of input\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # Create counting array\n    range_size = max_val - min_val + 1\n    count = [0] * range_size\n    \n    # Count occurrences of each element\n    for num in arr:\n        count[num - min_val] += 1\n    \n    # Build the sorted array\n    result = []\n    for i in range(range_size):\n        result.extend([i + min_val] * count[i])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 55, "generation": "def tn_gp(a, n, r):\n    return a * (r ** (n - 1))", "is_syntactically_valid": true}
{"task_id": 56, "generation": "def check(n):\n    # Get the reverse of the number\n    reverse = int(str(n)[::-1])\n    \n    # Check if n is one less than twice its reverse\n    return n == 2 * reverse - 1", "is_syntactically_valid": true}
{"task_id": 57, "generation": "def find_Max_Num(digits, n):\n    # Sort digits in descending order to get the largest number\n    digits.sort(reverse=True)\n    \n    # Convert digits to string and join them\n    result = ''.join(map(str, digits))\n    \n    # Convert back to integer\n    return int(result)", "is_syntactically_valid": true}
{"task_id": 58, "generation": "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)", "is_syntactically_valid": true}
{"task_id": 59, "generation": "def is_octagonal(n):\n    return n * (3 * n - 2)", "is_syntactically_valid": true}
{"task_id": 60, "generation": "def max_len_sub(arr, max_diff):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= max_diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 61, "generation": "def count_Substrings(s, n):\n    count = 0\n    \n    # Generate all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            length = len(substring)\n            digit_sum = sum(int(digit) for digit in substring)\n            \n            # Check if sum of digits equals length\n            if digit_sum == length:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 62, "generation": "def smallest_num(numbers):\n    return min(numbers)", "is_syntactically_valid": true}
{"task_id": 63, "generation": "def max_difference(tuple_list):\n    max_diff = 0\n    for pair in tuple_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "is_syntactically_valid": true}
{"task_id": 64, "generation": "def subject_marks(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 65, "generation": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "is_syntactically_valid": true}
{"task_id": 66, "generation": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)", "is_syntactically_valid": true}
{"task_id": 67, "generation": "def bell_number(n):\n    if n == 0:\n        return 1\n    \n    # Create a 2D array to store Bell triangle\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        # First element in each row is same as last element of previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]", "is_syntactically_valid": true}
{"task_id": 68, "generation": "def is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            decreasing = False\n        elif arr[i] < arr[i-1]:\n            increasing = False\n    \n    return increasing or decreasing", "is_syntactically_valid": true}
{"task_id": 69, "generation": "def is_sublist(main_list, sub_list):\n    if len(sub_list) == 0:\n        return True\n    if len(sub_list) > len(main_list):\n        return False\n    \n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 70, "generation": "def get_equal(tuples_list, expected_length):\n    for tuple_item in tuples_list:\n        if len(tuple_item) != expected_length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'", "is_syntactically_valid": true}
{"task_id": 71, "generation": "def comb_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    # Make a copy to avoid modifying the original array\n    arr = arr.copy()\n    \n    # Initialize gap\n    gap = len(arr)\n    shrink = 1.3\n    sorted_flag = False\n    \n    while not sorted_flag:\n        # Update the gap value for next iteration\n        gap = int(gap / shrink)\n        \n        # Minimum gap is 1\n        if gap <= 1:\n            gap = 1\n            sorted_flag = True\n        \n        # Compare all elements with current gap\n        i = 0\n        while i + gap < len(arr):\n            if arr[i] > arr[i + gap]:\n                # Swap elements\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted_flag = False\n            i += 1\n    \n    return arr", "is_syntactically_valid": true}
{"task_id": 72, "generation": "def dif_Square(n):\n    if n % 2 == 1:  # odd numbers\n        return True\n    else:  # even numbers\n        return n % 4 != 2", "is_syntactically_valid": true}
{"task_id": 73, "generation": "import re\n\ndef multiple_split(text):\n    return re.split(r'[\\n*]', text)", "is_syntactically_valid": true}
{"task_id": 74, "generation": "def is_samepatterns(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    \n    map1_to_2 = {}\n    map2_to_1 = {}\n    \n    for i in range(len(arr1)):\n        elem1, elem2 = arr1[i], arr2[i]\n        \n        if elem1 in map1_to_2:\n            if map1_to_2[elem1] != elem2:\n                return False\n        else:\n            map1_to_2[elem1] = elem2\n            \n        if elem2 in map2_to_1:\n            if map2_to_1[elem2] != elem1:\n                return False\n        else:\n            map2_to_1[elem2] = elem1\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 75, "generation": "def find_tuples(tuples_list, k):\n    result = []\n    for tuple_item in tuples_list:\n        if all(element % k == 0 for element in tuple_item):\n            result.append(tuple_item)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 76, "generation": "def count_Squares(m, n):\n    total = 0\n    for i in range(1, min(m, n) + 1):\n        total += (m - i + 1) * (n - i + 1)\n    return total", "is_syntactically_valid": true}
{"task_id": 77, "generation": "def is_Diff(num):\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit_char in str(num):\n        digit = int(digit_char)\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n    \n    difference = abs(even_sum - odd_sum)\n    return difference % 2 == 0", "is_syntactically_valid": true}
{"task_id": 78, "generation": "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n + 1):\n        # Count set bits in i\n        set_bits = bin(i).count('1')\n        # Check if number of set bits is odd\n        if set_bits % 2 == 1:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 79, "generation": "def word_len(word):\n    return len(word) % 2 == 1", "is_syntactically_valid": true}
{"task_id": 80, "generation": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6", "is_syntactically_valid": true}
{"task_id": 81, "generation": "def zip_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i], tuple2[i % len(tuple2)]))\n    return result", "is_syntactically_valid": true}
{"task_id": 82, "generation": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * pow(radius, 3)", "is_syntactically_valid": true}
{"task_id": 83, "generation": "def get_Char(s):\n    total = 0\n    for char in s:\n        total += ord(char.lower()) - ord('a') + 1\n    return chr(ord('a') + total - 1)", "is_syntactically_valid": true}
{"task_id": 84, "generation": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    \n    # Create array to store sequence values\n    newman = [0] * (n + 1)\n    newman[1] = 1\n    newman[2] = 1\n    \n    # Fill the array using the recurrence relation\n    # P(n) = P(P(n-1)) + P(n-P(n-1))\n    for i in range(3, n + 1):\n        newman[i] = newman[newman[i-1]] + newman[i - newman[i-1]]\n    \n    return newman[n]", "is_syntactically_valid": true}
{"task_id": 85, "generation": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2", "is_syntactically_valid": true}
{"task_id": 86, "generation": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1", "is_syntactically_valid": true}
{"task_id": 87, "generation": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}", "is_syntactically_valid": true}
{"task_id": 88, "generation": "def freq_count(lst):\n    frequency = {}\n    for element in lst:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency", "is_syntactically_valid": true}
{"task_id": 89, "generation": "def closest_num(n):\n    return n - 1", "is_syntactically_valid": true}
{"task_id": 90, "generation": "def len_log(words):\n    return max(len(word) for word in words)", "is_syntactically_valid": true}
{"task_id": 91, "generation": "def find_substring(string_list, substring):\n    for string in string_list:\n        if substring in string:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 92, "generation": "def is_undulating(num_str):\n    if len(num_str) < 3:\n        return len(num_str) == 3 and num_str[0] == num_str[2] and num_str[0] != num_str[1]\n    \n    # Check if it alternates between exactly two different digits\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    \n    # The two digits must be different\n    if first_digit == second_digit:\n        return False\n    \n    # Check if the pattern alternates correctly\n    for i in range(len(num_str)):\n        if i % 2 == 0:  # Even positions should have first_digit\n            if num_str[i] != first_digit:\n                return False\n        else:  # Odd positions should have second_digit\n            if num_str[i] != second_digit:\n                return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 93, "generation": "def power(a, b):\n    return a ** b", "is_syntactically_valid": true}
{"task_id": 94, "generation": "def index_minimum(tuples_list):\n    min_value = float('inf')\n    min_name = None\n    \n    for name, value in tuples_list:\n        if value < min_value:\n            min_value = value\n            min_name = name\n    \n    return min_name", "is_syntactically_valid": true}
{"task_id": 95, "generation": "def Find_Min_Length(lists):\n    min_length = float('inf')\n    for sublist in lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length", "is_syntactically_valid": true}
{"task_id": 96, "generation": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 97, "generation": "def frequency_lists(lists):\n    frequency = {}\n    for sublist in lists:\n        for item in sublist:\n            frequency[item] = frequency.get(item, 0) + 1\n    return frequency", "is_syntactically_valid": true}
{"task_id": 98, "generation": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "is_syntactically_valid": true}
{"task_id": 99, "generation": "def decimal_to_binary(decimal_num):\n    return bin(decimal_num)[2:]", "is_syntactically_valid": true}
{"task_id": 100, "generation": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        s = str(num)\n        return s == s[::-1]\n    \n    num = n + 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "is_syntactically_valid": true}
{"task_id": 101, "generation": "def kth_element(arr, n, k):\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]", "is_syntactically_valid": true}
{"task_id": 102, "generation": "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    return ''.join(word.capitalize() for word in words)", "is_syntactically_valid": true}
{"task_id": 103, "generation": "def eulerian_num(n, m):\n    # Create a 2D array to store Eulerian numbers\n    # dp[i][j] represents A(i, j)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case: A(n, 0) = A(n, n) = 1 for n >= 0\n    for i in range(n + 1):\n        dp[i][0] = 1\n        if i <= n:\n            dp[i][i] = 1\n    \n    # Fill the dp table using the recurrence relation:\n    # A(n, m) = (m + 1) * A(n-1, m) + (n - m) * A(n-1, m-1)\n    for i in range(1, n + 1):\n        for j in range(1, min(i, n)):\n            dp[i][j] = (j + 1) * dp[i-1][j] + (i - j) * dp[i-1][j-1]\n    \n    return dp[n][m]", "is_syntactically_valid": true}
{"task_id": 104, "generation": "def sort_sublists(list_of_lists):\n    return list(map(lambda sublist: sorted(sublist), list_of_lists))", "is_syntactically_valid": true}
{"task_id": 105, "generation": "def count(boolean_list):\n    return sum(boolean_list)", "is_syntactically_valid": true}
{"task_id": 106, "generation": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)", "is_syntactically_valid": true}
{"task_id": 107, "generation": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        hex_str = hex(num)[2:]  # Remove '0x' prefix\n        if any(char in 'abcdef' for char in hex_str.lower()):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 108, "generation": "import heapq\n\ndef merge_sorted_list(*lists):\n    # First, sort each input list\n    sorted_lists = [sorted(lst) for lst in lists]\n    \n    # Use heapq.merge to merge all sorted lists\n    merged = heapq.merge(*sorted_lists)\n    \n    # Convert to list and return\n    return list(merged)", "is_syntactically_valid": true}
{"task_id": 109, "generation": "def odd_Equivalent(binary_string, n):\n    count = 0\n    \n    for i in range(n):\n        # Create rotation by moving first i characters to the end\n        rotated = binary_string[i:] + binary_string[:i]\n        \n        # Check if the rotated binary string represents an odd number\n        # A binary number is odd if its last digit is '1'\n        if rotated[-1] == '1':\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 110, "generation": "def extract_missing(ranges, start, end):\n    result = []\n    \n    if not ranges:\n        return [(start, end)]\n    \n    # Sort ranges by their start point\n    sorted_ranges = sorted(ranges, key=lambda x: x[0])\n    \n    # Gap before first range\n    if start < sorted_ranges[0][0]:\n        result.append((start, sorted_ranges[0][0]))\n    \n    # Gap after each range to the end\n    for range_tuple in sorted_ranges:\n        if range_tuple[1] < end:\n            result.append((range_tuple[1], end))\n    \n    # Gaps between consecutive ranges\n    for i in range(len(sorted_ranges) - 1):\n        current_end = sorted_ranges[i][1]\n        next_start = sorted_ranges[i + 1][0]\n        if current_end < next_start:\n            result.append((current_end, next_start))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 111, "generation": "def common_in_nested_lists(nested_lists):\n    if not nested_lists:\n        return []\n    \n    # Start with the first list as the initial set of common elements\n    common = set(nested_lists[0])\n    \n    # Find intersection with each subsequent list\n    for lst in nested_lists[1:]:\n        common = common.intersection(set(lst))\n    \n    # Convert back to list and return\n    return list(common)", "is_syntactically_valid": true}
{"task_id": 112, "generation": "def perimeter(radius, height):\n    return 2 * (radius + height)", "is_syntactically_valid": true}
{"task_id": 113, "generation": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "is_syntactically_valid": true}
{"task_id": 114, "generation": "def assign_freq(tuple_list):\n    # Count frequency of each tuple\n    freq_dict = {}\n    for tup in tuple_list:\n        freq_dict[tup] = freq_dict.get(tup, 0) + 1\n    \n    # Create result list with frequencies appended\n    result = []\n    for tup, freq in freq_dict.items():\n        new_tuple = tup + (freq,)\n        result.append(new_tuple)\n    \n    # Return as string representation\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 115, "generation": "def empty_dit(data):\n    if isinstance(data, dict):\n        return len(data) == 0\n    \n    if isinstance(data, list):\n        return all(len(d) == 0 for d in data if isinstance(d, dict))\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 116, "generation": "def tuple_to_int(t):\n    result = 0\n    for digit in t:\n        result = result * 10 + digit\n    return result", "is_syntactically_valid": true}
{"task_id": 117, "generation": "def list_to_float(lst):\n    def convert_element(element):\n        if isinstance(element, (tuple, list)):\n            return tuple(convert_element(item) for item in element)\n        else:\n            try:\n                return float(element)\n            except (ValueError, TypeError):\n                return element\n    \n    result = [convert_element(item) for item in lst]\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 118, "generation": "def string_to_list(s):\n    return s.split()", "is_syntactically_valid": true}
{"task_id": 119, "generation": "def search(arr, n):\n    counts = {}\n    for item in arr:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    \n    for item in counts:\n        if counts[item] == 1:\n            return item", "is_syntactically_valid": true}
{"task_id": 120, "generation": "def max_product_tuple(tuple_list):\n    max_product = 0\n    for tuple_pair in tuple_list:\n        product = tuple_pair[0] * tuple_pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product", "is_syntactically_valid": true}
{"task_id": 121, "generation": "def check_triplet(arr, target_sum, param2, param3):\n    n = len(arr)\n    \n    # Check all possible triplets\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 122, "generation": "def smartNumber(n):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    def prime_factors_with_multiplicity(num):\n        factors = []\n        d = 2\n        while d * d <= num:\n            while num % d == 0:\n                factors.append(d)\n                num //= d\n            d += 1\n        if num > 1:\n            factors.append(num)\n        return factors\n    \n    def is_smart(num):\n        if num < 2:\n            return False\n        \n        digit_sum = sum_of_digits(num)\n        prime_factors = prime_factors_with_multiplicity(num)\n        prime_factor_digit_sum = sum(sum_of_digits(factor) for factor in prime_factors)\n        \n        return digit_sum == prime_factor_digit_sum\n    \n    count = 0\n    num = 1\n    \n    while count < n:\n        num += 1\n        if is_smart(num):\n            count += 1\n    \n    return num", "is_syntactically_valid": true}
{"task_id": 123, "generation": "def amicable_numbers_sum(n):\n    def sum_of_proper_divisors(num):\n        if num <= 1:\n            return 0\n        divisor_sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                divisor_sum += i\n                if i != num // i:\n                    divisor_sum += num // i\n        return divisor_sum\n    \n    amicable_sum = 0\n    for i in range(1, n):\n        sum_i = sum_of_proper_divisors(i)\n        if sum_i > i and sum_i < n:\n            sum_sum_i = sum_of_proper_divisors(sum_i)\n            if sum_sum_i == i:\n                amicable_sum += i + sum_i\n    \n    return amicable_sum", "is_syntactically_valid": true}
{"task_id": 124, "generation": "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)", "is_syntactically_valid": true}
{"task_id": 125, "generation": "def find_length(s, n):\n    # Convert the problem to finding maximum subarray sum\n    # where '0' contributes +1 and '1' contributes -1\n    max_diff = 0\n    current_diff = 0\n    \n    for char in s:\n        if char == '0':\n            current_diff += 1\n        else:  # char == '1'\n            current_diff -= 1\n        \n        # Update maximum difference seen so far\n        max_diff = max(max_diff, current_diff)\n        \n        # If current difference becomes negative, reset to 0\n        # (equivalent to starting a new subarray)\n        if current_diff < 0:\n            current_diff = 0\n    \n    return max_diff", "is_syntactically_valid": true}
{"task_id": 126, "generation": "def sum(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    def get_divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i != n // i:\n                    divisors.append(n // i)\n        return divisors\n    \n    divisors_a = set(get_divisors(a))\n    divisors_b = set(get_divisors(b))\n    \n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    return sum(common_divisors)", "is_syntactically_valid": true}
{"task_id": 127, "generation": "def multiply_int(a, b):\n    if a == 0 or b == 0:\n        return 0\n    \n    # Handle negative numbers\n    negative = False\n    if a < 0:\n        negative = not negative\n        a = -a\n    if b < 0:\n        negative = not negative\n        b = -b\n    \n    result = 0\n    while b > 0:\n        if b & 1:  # If b is odd\n            result += a\n        a += a  # Double a\n        b >>= 1  # Divide b by 2\n    \n    return -result if negative else result", "is_syntactically_valid": true}
{"task_id": 128, "generation": "def long_words(n, sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result", "is_syntactically_valid": true}
{"task_id": 129, "generation": "def magic_square_test(square):\n    n = len(square)\n    \n    # Check if it's a square matrix\n    for row in square:\n        if len(row) != n:\n            return False\n    \n    # Calculate the magic constant (sum that all rows, columns, and diagonals should equal)\n    magic_sum = sum(square[0])\n    \n    # Check all rows\n    for row in square:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check all columns\n    for col in range(n):\n        if sum(square[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check main diagonal (top-left to bottom-right)\n    if sum(square[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check anti-diagonal (top-right to bottom-left)\n    if sum(square[i][n-1-i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 130, "generation": "def max_occurrences(lst):\n    if not lst:\n        return None\n    \n    frequency = {}\n    for item in lst:\n        frequency[item] = frequency.get(item, 0) + 1\n    \n    max_count = max(frequency.values())\n    max_item = min(item for item, count in frequency.items() if count == max_count)\n    \n    return (max_item, max_count)", "is_syntactically_valid": true}
{"task_id": 131, "generation": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    vowel_chars = []\n    vowel_indices = []\n    \n    # Collect vowels and their indices\n    for i, char in enumerate(s_list):\n        if char in vowels:\n            vowel_chars.append(char)\n            vowel_indices.append(i)\n    \n    # Reverse the vowels and place them back\n    vowel_chars.reverse()\n    for i, index in enumerate(vowel_indices):\n        s_list[index] = vowel_chars[i]\n    \n    return ''.join(s_list)", "is_syntactically_valid": true}
{"task_id": 132, "generation": "def tup_string(tup):\n    return ''.join(tup)", "is_syntactically_valid": true}
{"task_id": 133, "generation": "def sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))", "is_syntactically_valid": true}
{"task_id": 134, "generation": "def check_last(arr, n, p):\n    current_arr = arr[:]\n    \n    for _ in range(p):\n        new_arr = []\n        for i in range(len(current_arr)):\n            max_diff = 0\n            for j in range(len(current_arr)):\n                if i != j:\n                    diff = abs(current_arr[i] - current_arr[j])\n                    if diff > max_diff:\n                        max_diff = diff\n            new_arr.append(max_diff)\n        current_arr = new_arr\n    \n    if current_arr[-1] % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"", "is_syntactically_valid": true}
{"task_id": 135, "generation": "def hexagonal_num(n):\n    return n * (2 * n - 1)", "is_syntactically_valid": true}
{"task_id": 136, "generation": "def cal_electbill(units):\n    if units <= 50:\n        return units * 2.60\n    elif units <= 150:\n        return 50 * 2.60 + (units - 50) * 3.25\n    elif units <= 250:\n        return 50 * 2.60 + 100 * 3.25 + (units - 150) * 5.26\n    else:\n        return 50 * 2.60 + 100 * 3.25 + 100 * 5.26 + (units - 250) * 7.75", "is_syntactically_valid": true}
{"task_id": 137, "generation": "def zero_count(arr):\n    if len(arr) == 0:\n        return 0.0\n    \n    zero_count = arr.count(0)\n    total_count = len(arr)\n    \n    return round(zero_count / total_count, 2)", "is_syntactically_valid": true}
{"task_id": 138, "generation": "def is_Sum_Of_Powers_Of_Two(n):\n    return n % 2 == 0", "is_syntactically_valid": true}
{"task_id": 139, "generation": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius", "is_syntactically_valid": true}
{"task_id": 140, "generation": "def extract_singly(tuple_list):\n    from collections import Counter\n    \n    # Flatten all tuples and count frequencies\n    all_elements = []\n    for tup in tuple_list:\n        all_elements.extend(tup)\n    \n    element_count = Counter(all_elements)\n    \n    # Extract elements that occur exactly once, maintaining order\n    result = []\n    seen = set()\n    \n    for tup in tuple_list:\n        for element in tup:\n            if element_count[element] == 1 and element not in seen:\n                result.append(element)\n                seen.add(element)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 141, "generation": "def pancake_sort(arr):\n    if not arr:\n        return arr\n    \n    arr = arr.copy()  # Don't modify the original array\n    n = len(arr)\n    \n    def flip(arr, k):\n        \"\"\"Flip the first k elements of the array\"\"\"\n        arr[:k] = arr[:k][::-1]\n    \n    def find_max_index(arr, n):\n        \"\"\"Find the index of the maximum element in first n elements\"\"\"\n        max_idx = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_idx]:\n                max_idx = i\n        return max_idx\n    \n    # Start from the complete array and reduce the size one by one\n    for curr_size in range(n, 1, -1):\n        # Find index of the maximum element in arr[0..curr_size-1]\n        max_idx = find_max_index(arr, curr_size)\n        \n        # If maximum element is not at the end, do following steps:\n        if max_idx != curr_size - 1:\n            # First move the maximum element to beginning if it's not already there\n            if max_idx != 0:\n                flip(arr, max_idx + 1)\n            \n            # Now move the maximum element to the end by flipping the entire current array\n            flip(arr, curr_size)\n    \n    return arr", "is_syntactically_valid": true}
{"task_id": 142, "generation": "def count_samepair(list1, list2, list3):\n    count = 0\n    min_length = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_length):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 143, "generation": "def find_lists(tuple_input):\n    count = 0\n    for element in tuple_input:\n        if isinstance(element, list):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 144, "generation": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum", "is_syntactically_valid": true}
{"task_id": 145, "generation": "def max_Abs_Diff(arr, n):\n    if n < 2:\n        return 0\n    \n    min_val = min(arr)\n    max_val = max(arr)\n    \n    return max_val - min_val", "is_syntactically_valid": true}
{"task_id": 146, "generation": "def ascii_value_string(s):\n    return ord(s[0])", "is_syntactically_valid": true}
{"task_id": 147, "generation": "def max_path_sum(triangle, rows, cols):\n    # Create a copy to avoid modifying the original\n    dp = [[0] * cols for _ in range(rows)]\n    \n    # Initialize first row\n    dp[0][0] = triangle[0][0]\n    \n    # Fill the dp table\n    for i in range(1, rows):\n        for j in range(i + 1):  # Each row has i+1 valid elements\n            # From top-left parent\n            if j < i:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + triangle[i][j])\n            \n            # From top-right parent\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + triangle[i][j])\n    \n    # Find maximum in the last row\n    return max(dp[rows-1", "is_syntactically_valid": false}
{"task_id": 148, "generation": "def sum_digits_twoparts(n):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n    \n    s = str(n)\n    if len(s) == 1:\n        return digit_sum(n)\n    \n    max_sum = digit_sum(n)  # Case where we don't split\n    \n    # Try all possible splits\n    for i in range(1, len(s)):\n        left = int(s[:i])\n        right = int(s[i:])\n        current_sum = digit_sum(left) + digit_sum(right)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 149, "generation": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n    \n    # dp[i] stores the length of longest subsequence ending at index i\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            # Check if current element and previous element differ by 1\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 150, "generation": "def does_Contain_B(a, b, c):\n    if b == 0:\n        return c == a\n    \n    if (c - a) % b != 0:\n        return False\n    \n    n = (c - a) // b\n    return n >= 0", "is_syntactically_valid": true}
{"task_id": 151, "generation": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1", "is_syntactically_valid": true}
{"task_id": 152, "generation": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 153, "generation": "def parabola_vertex(a, b, c):\n    # For a parabola in the form ax^2 + bx + c\n    # The x-coordinate of the vertex is -b/(2a)\n    # The y-coordinate is found by substituting x back into the equation\n    \n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    \n    return (x_vertex, y_vertex)", "is_syntactically_valid": true}
{"task_id": 154, "generation": "def specified_element(two_d_list, index):\n    result = []\n    for row in two_d_list:\n        result.append(row[index])\n    return result", "is_syntactically_valid": true}
{"task_id": 155, "generation": "def even_bit_toggle_number(n):\n    # Create a mask with all even bits set to 1\n    # Even bits are at positions 0, 2, 4, 6, 8, ...\n    # In binary: ...10101010 (0xAAAAAAAA for 32-bit)\n    mask = 0xAAAAAAAA\n    \n    # XOR with the mask to toggle even bits\n    return n ^ mask", "is_syntactically_valid": true}
{"task_id": 156, "generation": "def tuple_int_str(tuple_of_tuples):\n    return tuple(tuple(int(value) for value in inner_tuple) for inner_tuple in tuple_of_tuples)", "is_syntactically_valid": true}
{"task_id": 157, "generation": "def encode_list(data):\n    if not data:\n        return []\n    \n    result = []\n    current_item = data[0]\n    count = 1\n    \n    for i in range(1, len(data)):\n        if data[i] == current_item:\n            count += 1\n        else:\n            result.append([count, current_item])\n            current_item = data[i]\n            count = 1\n    \n    # Add the last group\n    result.append([count, current_item])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 158, "generation": "def min_Ops(arr, n, k):\n    if n == 0:\n        return 0\n    \n    # If all elements are already equal\n    if len(set(arr)) == 1:\n        return 0\n    \n    # Try different target values (median is often optimal for minimizing total absolute deviations)\n    arr_sorted = sorted(arr)\n    \n    min_operations = float('inf')\n    \n    # Try each element as potential target\n    for target in arr:\n        operations = sum(abs(x - target) for x in arr)\n        if operations <= k:\n            min_operations = min(min_operations, operations)\n    \n    # Also try median as target\n    median = arr_sorted[n // 2]\n    operations = sum(abs(x - median) for x in arr)\n    if operations <= k:\n        min_operations = min(min_operations, operations)\n    \n    # Try mean as target (rounded)\n    mean = sum(arr) // n\n    for target in [mean, mean + 1, mean - 1]:\n        operations = sum(abs(x - target) for x in arr)\n        if operations <= k:\n            min_", "is_syntactically_valid": true}
{"task_id": 159, "generation": "def month_season(month, day):\n    # Define season boundaries\n    spring_months = ['March', 'April', 'May']\n    summer_months = ['June', 'July', 'August']\n    autumn_months = ['September', 'October', 'November']\n    winter_months = ['December', 'January', 'February']\n    \n    # Special cases for transition dates\n    if month == 'March' and day < 20:\n        return 'winter'\n    elif month == 'June' and day < 21:\n        return 'spring'\n    elif month == 'September' and day < 22:\n        return 'summer'\n    elif month == 'December' and day < 21:\n        return 'autumn'\n    \n    # Regular season assignment\n    if month in spring_months:\n        return 'spring'\n    elif month in summer_months:\n        return 'summer'\n    elif month in autumn_months:\n        return 'autumn'\n    elif month in winter_months:\n        return 'winter'", "is_syntactically_valid": true}
{"task_id": 160, "generation": "def solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - (b // a) * x1\n        y = x1\n        return gcd, x, y\n    \n    gcd, x, y = extended_gcd(a, b)\n    \n    if n % gcd != 0:\n        return 'No solution'\n    \n    # Scale the solution\n    x *= n // gcd\n    y *= n // gcd\n    \n    return ('x = ', x, ', y = ', y)", "is_syntactically_valid": true}
{"task_id": 161, "generation": "def remove_elements(main_list, elements_to_remove):\n    result = []\n    for item in main_list:\n        if item not in elements_to_remove:\n            result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 162, "generation": "def sum_series(n):\n    total = 0\n    current = n\n    while current > 0:\n        total += current\n        current -= 2\n    return total", "is_syntactically_valid": true}
{"task_id": 163, "generation": "import math\n\ndef area_polygon(n, s):\n    return (n * s**2) / (4 * math.tan(math.pi / n))", "is_syntactically_valid": true}
{"task_id": 164, "generation": "def areEquivalent(num1, num2):\n    def sum_of_divisors(n):\n        divisor_sum = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisor_sum += i\n        return divisor_sum\n    \n    return sum_of_divisors(num1) == sum_of_divisors(num2)", "is_syntactically_valid": true}
{"task_id": 165, "generation": "def count_char_position(s):\n    count = 0\n    for i, char in enumerate(s):\n        # Convert character to lowercase and get its position in alphabet (0-based)\n        char_pos = ord(char.lower()) - ord('a')\n        # Check if character position matches string index\n        if char_pos == i:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 166, "generation": "def find_even_Pair(arr, n):\n    even_count = 0\n    odd_count = 0\n    \n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Count pairs within even numbers: C(even_count, 2)\n    even_pairs = (even_count * (even_count - 1)) // 2\n    \n    # Count pairs within odd numbers: C(odd_count, 2)\n    odd_pairs = (odd_count * (odd_count - 1)) // 2\n    \n    return even_pairs + odd_pairs", "is_syntactically_valid": true}
{"task_id": 167, "generation": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    \n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power", "is_syntactically_valid": true}
{"task_id": 168, "generation": "def frequency(arr, num):\n    return arr.count(num)", "is_syntactically_valid": true}
{"task_id": 169, "generation": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Use iterative approach to calculate nth Pell number\n    # Pell sequence: P(n) = 2*P(n-1) + P(n-2)\n    prev_prev = 0  # P(0)\n    prev = 1       # P(1)\n    \n    for i in range(2, n + 1):\n        current = 2 * prev + prev_prev\n        prev_prev = prev\n        prev = current\n    \n    return prev", "is_syntactically_valid": true}
{"task_id": 170, "generation": "def sum_range_list(lst, start_index, end_index):\n    return sum(lst[start_index:end_index+1])", "is_syntactically_valid": true}
{"task_id": 171, "generation": "def perimeter_pentagon(side_length):\n    return side_length * 5", "is_syntactically_valid": true}
{"task_id": 172, "generation": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 173, "generation": "def remove_splchar(s):\n    result = \"\"\n    for char in s:\n        if char.isalnum():\n            result += char\n    return result", "is_syntactically_valid": true}
{"task_id": 174, "generation": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result", "is_syntactically_valid": true}
{"task_id": 175, "generation": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        elif char in '({[':\n            stack.append(char)\n    \n    return len(stack) == 0", "is_syntactically_valid": true}
{"task_id": 176, "generation": "def perimeter_triangle(a, b, c):\n    return a + b + c", "is_syntactically_valid": true}
{"task_id": 177, "generation": "import math\n\ndef answer(low, high):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n    \n    # Try the pattern from test cases: (low, 2*low)\n    if 2 * low <= high:\n        return (low, 2 * low)\n    \n    # If that doesn't work, search for other pairs\n    for a in range(low, high + 1):\n        for b in range(a + 1, high + 1):\n            if low <= lcm(a, b) <= high:\n                return (a, b)\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 178, "generation": "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return 'Matched!'\n    return 'Not Matched!'", "is_syntactically_valid": true}
{"task_id": 179, "generation": "def is_num_keith(n):\n    # Convert number to string to get digits\n    str_n = str(n)\n    digits = [int(d) for d in str_n]\n    \n    # Initialize sequence with the digits\n    sequence = digits[:]\n    \n    # Generate sequence until we reach or exceed n\n    while sequence[-1] < n:\n        # Sum of last len(digits) terms\n        next_term = sum(sequence[-len(digits):])\n        sequence.append(next_term)\n    \n    # Check if the last term equals n\n    return sequence[-1] == n", "is_syntactically_valid": true}
{"task_id": 180, "generation": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    # Haversine formula\n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n    \n    a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    \n    # Earth's radius in kilometers\n    r = 6371\n    \n    # Calculate the distance\n    distance = r * c * 1000  # Convert to meters\n    \n    return distance", "is_syntactically_valid": true}
{"task_id": 181, "generation": "def common_prefix(strings, n):\n    if not strings or n == 0:\n        return ''\n    \n    prefix = ''\n    min_length = min(len(s) for s in strings)\n    \n    for i in range(min_length):\n        char = strings[0][i]\n        if all(s[i] == char for s in strings):\n            prefix += char\n        else:\n            break\n    \n    return prefix", "is_syntactically_valid": true}
{"task_id": 182, "generation": "import re\n\ndef find_character(text):\n    uppercase = re.findall(r'[A-Z]', text)\n    lowercase = re.findall(r'[a-z]', text)\n    digits = re.findall(r'[0-9]', text)\n    special = re.findall(r'[^A-Za-z0-9]', text)\n    \n    return (uppercase, lowercase, digits, special)", "is_syntactically_valid": true}
{"task_id": 183, "generation": "def count_pairs(arr, n, k):\n    count = 0\n    arr_set = set(arr)\n    \n    for num in arr_set:\n        if num + k in arr_set:\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 184, "generation": "def greater_specificnum(lst, num):\n    if not lst:\n        return False\n    return all(x > num for x in lst)", "is_syntactically_valid": true}
{"task_id": 185, "generation": "def parabola_focus(a, b, c):\n    # Find vertex coordinates\n    x_vertex = -b / (2 * a)\n    y_vertex = c - (b * b) / (4 * a)\n    \n    # Focus is at (x_vertex, y_vertex + 1/(4a))\n    focus_x = x_vertex\n    focus_y = y_vertex + 1 / (4 * a)\n    \n    return (focus_x, focus_y)", "is_syntactically_valid": true}
{"task_id": 186, "generation": "import re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(re.escape(literal), text):\n            return 'Matched!'\n    return 'Not Matched!'", "is_syntactically_valid": true}
{"task_id": 187, "generation": "def longest_common_subsequence(X, Y, m, n):\n    # Create a 2D array to store lengths of longest common subsequence\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill the dp table using bottom-up approach\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # The length of LCS is stored in dp[m][n]\n    return dp[m][n]", "is_syntactically_valid": true}
{"task_id": 188, "generation": "import math\n\ndef prod_Square(n):\n    if n <= 0:\n        return False\n    \n    # Check all possible values of a\u00b2 up to sqrt(n)\n    for a in range(1, int(math.sqrt(n)) + 1):\n        a_squared = a * a\n        if n % a_squared == 0:\n            # Check if n / a\u00b2 is a perfect square\n            remaining = n // a_squared\n            b = int(math.sqrt(remaining))\n            if b * b == remaining and a != 1 and b != 1:\n                return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 189, "generation": "def first_Missing_Positive(lst, n):\n    # Create a boolean array to mark presence of positive numbers\n    present = [False] * (n + 1)\n    \n    # Mark the presence of positive numbers in the array\n    for num in lst:\n        if 1 <= num <= n:\n            present[num] = True\n    \n    # Find the first missing positive number\n    for i in range(1, n + 1):\n        if not present[i]:\n            return i\n    \n    # If all numbers from 1 to n are present, return n+1\n    return n + 1", "is_syntactically_valid": true}
{"task_id": 190, "generation": "def count_Intgral_Points(x1, y1, x2, y2):\n    # Ensure x1 <= x2 and y1 <= y2\n    min_x, max_x = min(x1, x2), max(x1, x2)\n    min_y, max_y = min(y1, y2), max(y1, y2)\n    \n    # Count integral points strictly inside the rectangle\n    count = 0\n    for x in range(min_x + 1, max_x):\n        for y in range(min_y + 1, max_y):\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 191, "generation": "def check_monthnumber(month_name):\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_30_days", "is_syntactically_valid": true}
{"task_id": 192, "generation": "def check_String(s):\n    has_letter = False\n    has_number = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        \n        if has_letter and has_number:\n            return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 193, "generation": "def remove_tuple(input_tuple):\n    seen = set()\n    result = []\n    for item in input_tuple:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 194, "generation": "def octal_To_Decimal(octal_num):\n    decimal_num = 0\n    power = 0\n    \n    while octal_num > 0:\n        digit = octal_num % 10\n        decimal_num += digit * (8 ** power)\n        power += 1\n        octal_num //= 10\n    \n    return decimal_num", "is_syntactically_valid": true}
{"task_id": 195, "generation": "def first(arr, target, n):\n    for i in range(n):\n        if arr[i] == target:\n            return i\n    return -1", "is_syntactically_valid": true}
{"task_id": 196, "generation": "def remove_tuples(tuple_list, k):\n    return [t for t in tuple_list if len(t) != k]", "is_syntactically_valid": true}
{"task_id": 197, "generation": "def find_exponentio(tuple1, tuple2):\n    return tuple(base ** exp for base, exp in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 198, "generation": "import math\n\ndef largest_triangle(a, b):\n    return (3 * math.sqrt(3) / 2) * a * b", "is_syntactically_valid": true}
{"task_id": 199, "generation": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    \n    return power", "is_syntactically_valid": true}
{"task_id": 200, "generation": "def position_max(lst):\n    if not lst:\n        return []\n    \n    max_value = max(lst)\n    positions = []\n    \n    for i, value in enumerate(lst):\n        if value == max_value:\n            positions.append(i)\n    \n    return positions", "is_syntactically_valid": true}
{"task_id": 201, "generation": "def chkList(lst):\n    if not lst:\n        return True\n    first_element = lst[0]\n    return all(element == first_element for element in lst)", "is_syntactically_valid": true}
{"task_id": 202, "generation": "def remove_even(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result", "is_syntactically_valid": true}
{"task_id": 203, "generation": "def hamming_Distance(a, b):\n    xor_result = a ^ b\n    count = 0\n    while xor_result:\n        count += xor_result & 1\n        xor_result >>= 1\n    return count", "is_syntactically_valid": true}
{"task_id": 204, "generation": "def count(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 205, "generation": "def inversion_elements(tuple_input):\n    return tuple(-(x + 1) for x in tuple_input)", "is_syntactically_valid": true}
{"task_id": 206, "generation": "def concatenate_elements(tuple_input):\n    result = []\n    for i in range(len(tuple_input) - 1):\n        concatenated = tuple_input[i] + tuple_input[i + 1]\n        result.append(concatenated)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 207, "generation": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i-1] == s[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n][n]", "is_syntactically_valid": true}
{"task_id": 208, "generation": "import re\n\ndef is_decimal(s):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))", "is_syntactically_valid": true}
{"task_id": 209, "generation": "import heapq\n\ndef heap_replace(heap, item):\n    # Create a copy of the heap to avoid modifying the original\n    heap_copy = heap[:]\n    \n    # Convert to min heap\n    heapq.heapify(heap_copy)\n    \n    # Replace the smallest element with the new item\n    heapq.heapreplace(heap_copy, item)\n    \n    return heap_copy", "is_syntactically_valid": true}
{"task_id": 210, "generation": "import re\n\ndef is_allowed_specific_char(string):\n    pattern = r'^[a-zA-Z0-9]+$'\n    return bool(re.match(pattern, string))", "is_syntactically_valid": true}
{"task_id": 211, "generation": "def count_Num(n):\n    count = 0\n    # We need to find numbers where both 0th and nth bits are set\n    # The range appears to be from 1 to 2^(n+1) - 1 based on test cases\n    for num in range(1, 2**(n+1)):\n        # Check if both 0th bit and nth bit are set\n        if (num", "is_syntactically_valid": false}
{"task_id": 212, "generation": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n + 1))", "is_syntactically_valid": true}
{"task_id": 213, "generation": "def concatenate_strings(tuple1, tuple2):\n    return tuple(s1 + s2 for s1, s2 in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 214, "generation": "import math\n\ndef degree_radian(degrees):\n    radians = degrees * math.pi / 180\n    return radians * 180 * 180 / math.pi", "is_syntactically_valid": true}
{"task_id": 215, "generation": "def decode_list(encoded_list):\n    decoded = []\n    for item in encoded_list:\n        if isinstance(item, list) and len(item) == 2:\n            count, value = item\n            decoded.extend([value] * count)\n        else:\n            decoded.append(item)\n    return decoded", "is_syntactically_valid": true}
{"task_id": 216, "generation": "def check_subset_list(main_list, subset_list):\n    # Convert nested lists to sets of tuples for comparison\n    def convert_to_comparable(lst):\n        result = set()\n        for item in lst:\n            if isinstance(item, list):\n                result.add(tuple(item))\n            else:\n                result.add(item)\n        return result\n    \n    main_set = convert_to_comparable(main_list)\n    subset_set = convert_to_comparable(subset_list)\n    \n    return subset_set.issubset(main_set)", "is_syntactically_valid": true}
{"task_id": 217, "generation": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return '\\0'", "is_syntactically_valid": true}
{"task_id": 218, "generation": "def min_Operations(a, b):\n    return abs(a - b)", "is_syntactically_valid": true}
{"task_id": 219, "generation": "def extract_min_max(tup, k):\n    sorted_tup = sorted(tup)\n    min_k = sorted_tup[:k]\n    max_k = sorted_tup[-k:]\n    return tuple(min_k + max_k)", "is_syntactically_valid": true}
{"task_id": 220, "generation": "def replace_max_specialchar(text, n):\n    result = \"\"\n    replacements = 0\n    \n    for char in text:\n        if replacements < n and char in [' ', ',', '.']:\n            result += ':'\n            replacements += 1\n        else:\n            result += char\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 221, "generation": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None", "is_syntactically_valid": true}
{"task_id": 222, "generation": "def check_type(tup):\n    if not tup:\n        return True\n    \n    first_type = type(tup[0])\n    return all(type(element) == first_type for element in tup)", "is_syntactically_valid": true}
{"task_id": 223, "generation": "def is_majority(arr, n, x):\n    # Find the first occurrence of x\n    first = -1\n    for i in range(n):\n        if arr[i] == x:\n            first = i\n            break\n    \n    # If x is not found, it's not a majority element\n    if first == -1:\n        return False\n    \n    # Find the last occurrence of x\n    last = -1\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            last = i\n            break\n    \n    # Count of x is (last - first + 1)\n    count = last - first + 1\n    \n    # Check if count is more than n/2\n    return count > n // 2", "is_syntactically_valid": true}
{"task_id": 224, "generation": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "is_syntactically_valid": true}
{"task_id": 225, "generation": "def find_Min(arr, left, right):\n    while left < right:\n        mid = (left + right) // 2\n        \n        if arr[mid] > arr[right]:\n            # Minimum is in the right half\n            left = mid + 1\n        else:\n            # Minimum is in the left half (including mid)\n            right = mid\n    \n    return arr[left]", "is_syntactically_valid": true}
{"task_id": 226, "generation": "def odd_values_string(s):\n    return ''.join([char for i, char in enumerate(s) if i % 2 == 0])", "is_syntactically_valid": true}
{"task_id": 227, "generation": "def min_of_three(a, b, c):\n    return min(a, b, c)", "is_syntactically_valid": true}
{"task_id": 228, "generation": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a mask for the range [l, r]\n    # For range [l, r], we need (r-l+1) bits starting from position l\n    mask = ((1 << (r - l + 1)) - 1) << l\n    \n    # Extract the bits in the range using the mask\n    bits_in_range = n & mask\n    \n    # If all bits in the range are unset, bits_in_range should be 0\n    return bits_in_range == 0", "is_syntactically_valid": true}
{"task_id": 229, "generation": "def re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    \n    for num in arr:\n        if num < 0:\n            negatives.append(num)\n        else:\n            positives.append(num)\n    \n    return negatives + positives", "is_syntactically_valid": true}
{"task_id": 230, "generation": "def replace_blank(string, character):\n    return string.replace(' ', character)", "is_syntactically_valid": true}
{"task_id": 231, "generation": "def max_sum(triangle, n):\n    # Create a copy of the triangle to avoid modifying the original\n    dp = [row[:] for row in triangle]\n    \n    # Start from the second-to-last row and work upwards\n    for i in range(n - 2, -1, -1):\n        for j in range(len(dp[i])):\n            # For each position, add the maximum of the two possible paths below\n            dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    \n    # The top element now contains the maximum sum\n    return dp[0][0]", "is_syntactically_valid": true}
{"task_id": 232, "generation": "import heapq\n\ndef larg_nnum(nums, n):\n    return heapq.nlargest(n, nums)", "is_syntactically_valid": true}
{"task_id": 233, "generation": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height", "is_syntactically_valid": true}
{"task_id": 234, "generation": "def volume_cube(side):\n    return side ** 3", "is_syntactically_valid": true}
{"task_id": 235, "generation": "def even_bit_set_number(n):\n    # Create a mask with all even bits set\n    # Even positions: 0, 2, 4, 6, 8, 10, 12, 14, ...\n    # This creates pattern: ...01010101\n    mask = 0\n    bit_position = 0\n    \n    # We need to handle numbers up to a reasonable size\n    # 32 bits should be sufficient for most cases\n    while bit_position < 32:\n        mask |= (1 << bit_position)\n        bit_position += 2\n    \n    # OR the original number with the mask to set even bits\n    return n | mask", "is_syntactically_valid": true}
{"task_id": 236, "generation": "def No_of_Triangle(n, k):\n    if k > n:\n        return -1\n    \n    if k == 1:\n        return n * n\n    \n    count = 0\n    for i in range(n - k + 1):\n        count += (n - k - i + 1)\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 237, "generation": "def check_occurences(tuples_list):\n    from collections import defaultdict\n    \n    # Dictionary to count occurrences of normalized tuples\n    count_dict = defaultdict(int)\n    \n    # Normalize each tuple by sorting and count occurrences\n    for tup in tuples_list:\n        normalized = tuple(sorted(tup))\n        count_dict[normalized] += 1\n    \n    return dict(count_dict)", "is_syntactically_valid": true}
{"task_id": 238, "generation": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2", "is_syntactically_valid": true}
{"task_id": 239, "generation": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    \n    # dp[i][j] = number of sequences of length i ending with value j\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base case: sequences of length 1\n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    # Fill the dp table\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # For each ending value j, find all possible previous values\n            # Previous value k must satisfy: 2*k <= j, so k <= j/2\n            for k in range(1, j // 2 + 1):\n                dp[i][j] += dp[i-1][k]\n    \n    # Sum all sequences of length n\n    result = 0\n    for j in range(1, m + 1):\n        result += dp[n][j]\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 240, "generation": "def replace_list(lst, replacement):\n    return lst[:-1] + replacement", "is_syntactically_valid": true}
{"task_id": 241, "generation": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]", "is_syntactically_valid": true}
{"task_id": 242, "generation": "def count_charac(string):\n    return len(string)", "is_syntactically_valid": true}
{"task_id": 243, "generation": "def sort_on_occurence(tuples_list):\n    from collections import defaultdict\n    \n    # Group by first element\n    groups = defaultdict(list)\n    for first, second in tuples_list:\n        groups[first].append(second)\n    \n    # Create result tuples with format (key, *values, count)\n    result = []\n    for key, values in groups.items():\n        count = len(values)\n        result_tuple = (key,) + tuple(values) + (count,)\n        result.append(result_tuple)\n    \n    # Sort by count in descending order\n    result.sort(key=lambda x: x[-1], reverse=True)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 244, "generation": "import math\n\ndef next_Perfect_Square(n):\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n * sqrt_n == n:\n        return (sqrt_n + 1) ** 2\n    else:\n        return (sqrt_n + 1) ** 2", "is_syntactically_valid": true}
{"task_id": 245, "generation": "def max_sum(arr, n):\n    # dp_inc[i] stores maximum sum of increasing subsequence ending at i\n    dp_inc = [0] * n\n    # dp_dec[i] stores maximum sum of decreasing subsequence starting at i\n    dp_dec = [0] * n\n    \n    # Initialize with the elements themselves\n    for i in range(n):\n        dp_inc[i] = arr[i]\n        dp_dec[i] = arr[i]\n    \n    # Fill dp_inc array (increasing subsequence)\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp_inc[i] = max(dp_inc[i], dp_inc[j] + arr[i])\n    \n    # Fill dp_dec array (decreasing subsequence)\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                dp_dec[i] = max(dp_dec[i], dp_dec[j] + arr[i])\n    \n    # Find maximum bi-tonic sum\n    max_bitonic = 0\n    for i in range(n):\n        max_bitonic = max(max_bitonic, dp_inc[i] + dp_dec[i] - arr[i])\n    \n    return max_bitonic", "is_syntactically_valid": true}
{"task_id": 246, "generation": "def babylonian_squareroot(n, precision=1e-10):\n    if n < 0:\n        raise ValueError(\"Cannot compute square root of negative number\")\n    if n == 0:\n        return 0.0\n    \n    # Initial guess\n    x = n / 2.0\n    \n    while True:\n        # Babylonian method: x_new = (x + n/x) / 2\n        x_new = (x + n / x) / 2.0\n        \n        # Check if we've reached desired precision\n        if abs(x_new - x) < precision:\n            break\n            \n        x = x_new\n    \n    return x_new", "is_syntactically_valid": true}
{"task_id": 247, "generation": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check for palindromes of length 2 and more\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            \n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]", "is_syntactically_valid": true}
{"task_id": 248, "generation": "def harmonic_sum(n):\n    return sum(1/i for i in range(1, n))", "is_syntactically_valid": true}
{"task_id": 249, "generation": "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))", "is_syntactically_valid": true}
{"task_id": 250, "generation": "def count_X(tuple_data, element):\n    count = 0\n    for item in tuple_data:\n        if item == element:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 251, "generation": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 252, "generation": "import math\n\ndef convert(z):\n    if isinstance(z, (int, float)):\n        z = complex(z)\n    \n    magnitude = abs(z)\n    angle = math.atan2(z.imag, z.real)\n    \n    return (magnitude, angle)", "is_syntactically_valid": true}
{"task_id": 253, "generation": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int) and not isinstance(item, bool):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 254, "generation": "def words_ae(text):\n    result = []\n    i = 0\n    while i < len(text):\n        if text[i] in 'ae':\n            start = i\n            while i < len(text) and text[i] != ' ':\n                i += 1\n            result.append(text[start:i])\n        else:\n            i += 1\n    return result", "is_syntactically_valid": true}
{"task_id": 255, "generation": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return list(combinations_with_replacement(colors, n))", "is_syntactically_valid": true}
{"task_id": 256, "generation": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Sieve of Eratosthenes\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)", "is_syntactically_valid": true}
{"task_id": 257, "generation": "def swap_numbers(a, b):\n    return (b, a)", "is_syntactically_valid": true}
{"task_id": 258, "generation": "def count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))", "is_syntactically_valid": true}
{"task_id": 259, "generation": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        max_first = max(tuple1[i][0], tuple2[i][0])\n        max_second = max(tuple1[i][1], tuple2[i][1])\n        result.append((max_first, max_second))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 260, "generation": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    def newman_shanks_williams(k):\n        if k == 0:\n            return 1\n        if k == 1:\n            return 1\n        \n        # Use iterative approach to avoid recursion depth issues\n        a, b = 1, 1\n        for i in range(2, k + 1):\n            a, b = b, 2 * b + a\n        return b\n    \n    count = 0\n    k = 1\n    \n    while count < n:\n        nsw = newman_shanks_williams(k)\n        if is_prime(nsw):\n            count += 1\n            if count == n:\n                return nsw\n        k += 1\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 261, "generation": "def division_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] // tuple2[i])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 262, "generation": "def split_two_parts(lst, n):\n    return (lst[:n], lst[n:])", "is_syntactically_valid": true}
{"task_id": 263, "generation": "def merge_dict(dict1, dict2):\n    result = dict1.copy()\n    result.update(dict2)\n    return result", "is_syntactically_valid": true}
{"task_id": 264, "generation": "def dog_age(human_years):\n    if human_years <= 2:\n        return int(human_years * 10.5)\n    else:\n        return 21 + (human_years - 2) * 4", "is_syntactically_valid": true}
{"task_id": 265, "generation": "def list_split(lst, n):\n    result = []\n    for i in range(n):\n        sublist = []\n        for j in range(i, len(lst), n):\n            sublist.append(lst[j])\n        if sublist:\n            result.append(sublist)\n    return result", "is_syntactically_valid": true}
{"task_id": 266, "generation": "def lateralsurface_cube(side_length):\n    return 4 * side_length * side_length", "is_syntactically_valid": true}
{"task_id": 267, "generation": "def square_Sum(n):\n    sum_squares = 0\n    for i in range(n):\n        odd_number = 2 * i + 1\n        sum_squares += odd_number ** 2\n    return sum_squares", "is_syntactically_valid": true}
{"task_id": 268, "generation": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1", "is_syntactically_valid": true}
{"task_id": 269, "generation": "def ascii_value(char):\n    return ord(char)", "is_syntactically_valid": true}
{"task_id": 270, "generation": "def sum_even_and_even_index(lst, n):\n    total = 0\n    for i in range(0, n, 2):  # Even positions: 0, 2, 4, ...\n        if lst[i] % 2 == 0:  # Check if number is even\n            total += lst[i]\n    return total", "is_syntactically_valid": true}
{"task_id": 271, "generation": "def even_Power_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 5\n    return total", "is_syntactically_valid": true}
{"task_id": 272, "generation": "def rear_extract(tuples_list):\n    return [tuple_item[-1] for tuple_item in tuples_list]", "is_syntactically_valid": true}
{"task_id": 273, "generation": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 274, "generation": "def even_binomial_Coeff_Sum(n):\n    def binomial_coefficient(n, k):\n        if k > n or k < 0:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        \n        result = 1\n        for i in range(min(k, n - k)):\n            result = result * (n - i) // (i + 1)\n        return result\n    \n    total = 0\n    for k in range(0, n + 1, 2):  # Even indices: 0, 2, 4, ...\n        total += binomial_coefficient(n, k)\n    \n    return total", "is_syntactically_valid": true}
{"task_id": 275, "generation": "def get_Position(arr, n, k):\n    def josephus(n, k):\n        if n == 1:\n            return 0\n        else:\n            return (josephus(n - 1, k) + k) % n\n    \n    return josephus(n, k) + 1", "is_syntactically_valid": true}
{"task_id": 276, "generation": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height", "is_syntactically_valid": true}
{"task_id": 277, "generation": "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}", "is_syntactically_valid": true}
{"task_id": 278, "generation": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 279, "generation": "def is_num_decagonal(n):\n    return n * (4 * n - 3)", "is_syntactically_valid": true}
{"task_id": 280, "generation": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, -1)", "is_syntactically_valid": true}
{"task_id": 281, "generation": "def all_unique(lst):\n    return len(lst) == len(set(lst))", "is_syntactically_valid": true}
{"task_id": 282, "generation": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))", "is_syntactically_valid": true}
{"task_id": 283, "generation": "def validate(num):\n    # Convert number to string to easily iterate through digits\n    num_str = str(num)\n    \n    # Count frequency of each digit\n    digit_count = {}\n    for digit in num_str:\n        digit_count[digit] = digit_count.get(digit, 0) + 1\n    \n    # Check if frequency of each digit is <= the digit itself\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 284, "generation": "def check_element(lst, target):\n    return all(item == target for item in lst)", "is_syntactically_valid": true}
{"task_id": 285, "generation": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 286, "generation": "def max_sub_array_sum_repeated(arr, n, k):\n    # Create the repeated array\n    repeated_arr = arr * k\n    \n    # Apply Kadane's algorithm to find maximum subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in repeated_arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 287, "generation": "def square_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 2\n    return total", "is_syntactically_valid": true}
{"task_id": 288, "generation": "def modular_inverse(arr, n, p):\n    count = 0\n    \n    for i in range(n):\n        element = arr[i] % p\n        if element == 0:\n            continue  # 0 has no modular inverse\n        \n        # Calculate modular inverse using Fermat's Little Theorem\n        # inverse = element^(p-2) mod p\n        inverse = pow(element, p-2, p)\n        \n        # Check if the element equals its own modular inverse\n        if element == inverse:\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 289, "generation": "def odd_Days(n):\n    # Count leap years in the range 1 to n\n    leap_years = n // 4 - n // 100 + n // 400\n    \n    # Regular years\n    regular_years = n - leap_years\n    \n    # Each regular year contributes 1 odd day\n    # Each leap year contributes 2 odd days\n    total_odd_days = regular_years * 1 + leap_years * 2\n    \n    # Return odd days modulo 7\n    return total_odd_days % 7", "is_syntactically_valid": true}
{"task_id": 290, "generation": "def max_length(lists):\n    max_len = 0\n    max_list = []\n    \n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return (max_len, max_list)", "is_syntactically_valid": true}
{"task_id": 291, "generation": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    \n    # same[i] represents ways where last two posts have same color\n    # diff[i] represents ways where last two posts have different colors\n    \n    same = [0] * (n + 1)\n    diff = [0] * (n + 1)\n    \n    # Base cases\n    same[2] = k  # First post can be any color, second post same as first\n    diff[2] = k * (k - 1)  # First post any color, second post different\n    \n    for i in range(3, n + 1):\n        same[i] = diff[i - 1]\n        diff[i] = (same[i - 1] + diff[i - 1]) * (k - 1)\n    \n    return same[n] + diff[n]", "is_syntactically_valid": true}
{"task_id": 292, "generation": "def find(dividend, divisor):\n    return dividend // divisor", "is_syntactically_valid": true}
{"task_id": 293, "generation": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)", "is_syntactically_valid": true}
{"task_id": 294, "generation": "def max_val(lst):\n    numeric_values = [item for item in lst if isinstance(item, (int, float))]\n    return max(numeric_values)", "is_syntactically_valid": true}
{"task_id": 295, "generation": "def sum_div(n):\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum", "is_syntactically_valid": true}
{"task_id": 296, "generation": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "is_syntactically_valid": true}
{"task_id": 297, "generation": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 298, "generation": "def intersection_nested_lists(list1, list2):\n    result = []\n    for sublist in list2:\n        intersection = []\n        for element in sublist:\n            if element in list1:\n                intersection.append(element)\n        result.append(intersection)\n    return result", "is_syntactically_valid": true}
{"task_id": 299, "generation": "def max_aggregate(tuples_list):\n    aggregates = {}\n    \n    for name, value in tuples_list:\n        if name in aggregates:\n            aggregates[name] += value\n        else:\n            aggregates[name] = value\n    \n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "is_syntactically_valid": true}
{"task_id": 300, "generation": "def count_binary_seq(n):\n    def combination(n, k):\n        if k > n or k < 0:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        \n        result = 1\n        for i in range(min(k, n - k)):\n            result = result * (n - i) // (i + 1)\n        return result\n    \n    return float(combination(2 * n, n))", "is_syntactically_valid": true}
{"task_id": 301, "generation": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    \n    max_depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = dict_depth(value)\n            max_depth = max(max_depth, depth)\n    \n    return max_depth + 1", "is_syntactically_valid": true}
{"task_id": 302, "generation": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    \n    # Find the position of the most significant bit\n    msb_position = 0\n    temp = n\n    while temp > 0:\n        temp >>= 1\n        msb_position += 1\n    \n    # Return 2^(msb_position - 1)\n    return 1 << (msb_position - 1)", "is_syntactically_valid": true}
{"task_id": 303, "generation": "def solve(arr, n):\n    even_inversions = 0\n    odd_inversions = 0\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                if arr[i] % 2 == 0:\n                    even_inversions += 1\n                else:\n                    odd_inversions += 1\n    \n    return even_inversions == odd_inversions", "is_syntactically_valid": true}
{"task_id": 304, "generation": "def find_Element(arr, ranges, rotations, index):\n    # Make a copy of the array to avoid modifying the original\n    result = arr[:]\n    \n    # Perform the specified number of rotations\n    for _ in range(rotations):\n        # Apply each range rotation\n        for start, end in ranges:\n            # Extract the subarray to rotate\n            subarray = result[start:end+1]\n            # Rotate left by 1 (move first element to end)\n            if len(subarray) > 1:\n                rotated = subarray[1:] + [subarray[0]]\n                # Replace the subarray in the result\n                result[start:end+1] = rotated\n    \n    return result[index]", "is_syntactically_valid": true}
{"task_id": 305, "generation": "def start_withp(word_list):\n    for words in word_list:\n        word_pairs = words.split()\n        p_words = [word for word in word_pairs if word.lower().startswith('p')]\n        if len(p_words) >= 2:\n            return (p_words[0], p_words[1])\n    return None", "is_syntactically_valid": true}
{"task_id": 306, "generation": "def max_sum_increasing_subseq(arr, n, i, k):\n    # dp[j] will store the maximum sum of increasing subsequence ending at index j\n    dp = [0] * (i + 1)\n    \n    # Initialize dp array\n    for j in range(i + 1):\n        dp[j] = arr[j]\n    \n    # Fill dp array for increasing subsequences up to index i\n    for j in range(1, i + 1):\n        for prev in range(j):\n            if arr[prev] < arr[j]:\n                dp[j] = max(dp[j], dp[prev] + arr[j])\n    \n    # Find maximum sum subsequence that can be extended to include arr[k]\n    max_sum = 0\n    \n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, dp[j] + arr[k])\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 307, "generation": "def colon_tuplex(tup, index, value):\n    # Convert tuple to list for modification\n    temp_list = list(tup)\n    \n    # Modify the element at the given index\n    if isinstance(temp_list[index], list):\n        temp_list[index] = temp_list[index] + [value]\n    \n    # Convert back to tuple and return\n    return tuple(temp_list)", "is_syntactically_valid": true}
{"task_id": 308, "generation": "def large_product(list1, list2, n):\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n    \n    products.sort(reverse=True)\n    return products[:n]", "is_syntactically_valid": true}
{"task_id": 309, "generation": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "is_syntactically_valid": true}
{"task_id": 310, "generation": "def string_to_tuple(s):\n    return tuple(s.replace(' ', ''))", "is_syntactically_valid": true}
{"task_id": 311, "generation": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    \n    # Find the position of the leftmost unset bit\n    temp = n\n    position = 0\n    \n    # Find the highest set bit position\n    while temp > 0:\n        temp >>= 1\n        position += 1\n    \n    # Check each bit from left to right (highest to lowest)\n    for i in range(position - 1, -1, -1):\n        if (n & (1 << i)) == 0:  # If bit at position i is unset\n            return n | (1 << i)  # Set that bit and return\n    \n    # If all bits are set, set the next higher bit\n    return n | (1 << position)", "is_syntactically_valid": true}
{"task_id": 312, "generation": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height", "is_syntactically_valid": true}
{"task_id": 313, "generation": "def pos_nos(lst):\n    positive_numbers = [num for num in lst if num > 0]\n    return tuple(positive_numbers)", "is_syntactically_valid": true}
{"task_id": 314, "generation": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    # dp[i][j] represents max sum up to column i with state j\n    # j = 0: neither cell in column i is selected\n    # j = 1: only top cell in column i is selected\n    # j = 2: only bottom cell in column i is selected\n    # j = 3: both cells in column i are selected (not allowed due to adjacency)\n    \n    dp = [[0] * 4 for _ in range(n)]\n    \n    # Base case for first column\n    dp[0][0] = 0  # neither selected\n    dp[0][1] = grid[0][0]  # top selected\n    dp[0][2] = grid[1][0]  # bottom selected\n    dp[0][3] = float('-inf')  # both selected (invalid)\n    \n    for i in range(1, n):\n        # Case 0: neither cell selected in current column\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1], dp[i-1][2])\n        \n        # Case 1: only top cell selected in current column\n        dp[i][1] = max(dp[i-1][0], dp[i-1][2]) + grid[0][i]\n        \n        # Case 2: only bottom cell selected in current column\n        dp[i][2] = max(dp[i-1][0], dp[i-1][1]) + grid[1][i]\n        \n        # Case 3: both cells selected (invalid due to vertical adjacency)\n        dp[i][3] = float('-inf')\n    \n    return max(dp[n-1][0], dp[n-1][1], dp[n-1][2])", "is_syntactically_valid": true}
{"task_id": 315, "generation": "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    result = \"-1\"\n    \n    for word in words:\n        if len(word) % 2 == 0:  # Check if word length is even\n            if len(word) > max_len:\n                max_len = len(word)\n                result = word\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 316, "generation": "def find_last_occurrence(arr, target):\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == target:\n            last_index = i\n    return last_index", "is_syntactically_valid": true}
{"task_id": 317, "generation": "def modified_encode(data):\n    if not data:\n        return []\n    \n    result = []\n    current_element = data[0]\n    count = 1\n    \n    for i in range(1, len(data)):\n        if data[i] == current_element:\n            count += 1\n        else:\n            if count == 1:\n                result.append(current_element)\n            else:\n                result.append([count, current_element])\n            current_element = data[i]\n            count = 1\n    \n    # Handle the last group\n    if count == 1:\n        result.append(current_element)\n    else:\n        result.append([count, current_element])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 318, "generation": "def max_volume(sum_sides):\n    if sum_sides < 3:\n        return 0\n    \n    max_vol = 0\n    \n    # Try all possible combinations of three non-negative integers that sum to sum_sides\n    for a in range(sum_sides + 1):\n        for b in range(sum_sides + 1 - a):\n            c = sum_sides - a - b\n            if c >= 0:\n                volume = a * b * c\n                max_vol = max(max_vol, volume)\n    \n    return max_vol", "is_syntactically_valid": true}
{"task_id": 319, "generation": "import re\n\ndef find_long_word(text):\n    pattern = r'\\b[a-zA-Z]{5}\\b'\n    matches = re.findall(pattern, text)\n    return matches", "is_syntactically_valid": true}
{"task_id": 320, "generation": "def sum_difference(n):\n    # Calculate squared sum of first n natural numbers: (1+2+...+n)^2\n    sum_of_numbers = n * (n + 1) // 2\n    squared_sum = sum_of_numbers ** 2\n    \n    # Calculate sum of squared first n natural numbers: 1^2 + 2^2 + ... + n^2\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Return the difference\n    return squared_sum - sum_of_squares", "is_syntactically_valid": true}
{"task_id": 321, "generation": "def find_demlo(s):\n    n = len(s)\n    \n    # Build ascending part\n    ascending = []\n    for i in range(1, n + 1):\n        ascending.append(str(i))\n    \n    # Build descending part\n    descending = []\n    for i in range(n", "is_syntactically_valid": false}
{"task_id": 322, "generation": "def position_min(lst):\n    if not lst:\n        return []\n    \n    min_value = min(lst)\n    positions = []\n    \n    for i, value in enumerate(lst):\n        if value == min_value:\n            positions.append(i)\n    \n    return positions", "is_syntactically_valid": true}
{"task_id": 323, "generation": "def re_arrange(arr, n):\n    # Separate positive and negative numbers\n    positive = []\n    negative = []\n    \n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    result = []\n    pos_idx = 0\n    neg_idx = 0\n    \n    # Start with negative number based on the test cases pattern\n    for i in range(n):\n        if i % 2 == 0:  # Even index - place negative\n            if neg_idx < len(negative):\n                result.append(negative[neg_idx])\n                neg_idx += 1\n            else:\n                result.append(positive[pos_idx])\n                pos_idx += 1\n        else:  # Odd index - place positive\n            if pos_idx < len(positive):\n                result.append(positive[pos_idx])\n                pos_idx += 1\n            else:\n                result.append(negative[neg_idx])\n                neg_idx += 1\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 324, "generation": "def sum_of_alternates(tup):\n    # Sum elements at even indices (0, 2, 4, ...)\n    even_sum = sum(tup[i] for i in range(0, len(tup), 2))\n    \n    # Sum elements at odd indices (1, 3, 5, ...)\n    odd_sum = sum(tup[i] for i in range(1, len(tup), 2))\n    \n    return (even_sum, odd_sum)", "is_syntactically_valid": true}
{"task_id": 325, "generation": "def get_Min_Squares(n):\n    # dp[i] will store the minimum number of squares that sum to i\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    # For each number from 1 to n\n    for i in range(1, n + 1):\n        # Try all perfect squares less than or equal to i\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    \n    return dp[n]", "is_syntactically_valid": true}
{"task_id": 326, "generation": "def most_occurrences(strings):\n    word_count = {}\n    \n    for string in strings:\n        words = string.split()\n        for word in words:\n            # Remove punctuation from the end of words\n            cleaned_word = word\n            while cleaned_word and cleaned_word[-1] in '.,!?;:':\n                cleaned_word = cleaned_word[:-1]\n            \n            if cleaned_word:\n                word_count[cleaned_word] = word_count.get(cleaned_word, 0) + 1\n    \n    # Find the word with maximum occurrences\n    max_count = 0\n    most_frequent_word = \"\"\n    \n    for word, count in word_count.items():\n        if count > max_count:\n            max_count = count\n            most_frequent_word = word\n    \n    return most_frequent_word", "is_syntactically_valid": true}
{"task_id": 327, "generation": "def check_isosceles(a, b, c):\n    return a == b or b == c or a == c", "is_syntactically_valid": true}
{"task_id": 328, "generation": "def rotate_left(arr, rotate_amount, result_length):\n    n = len(arr)\n    if n == 0:\n        return []\n    \n    # Normalize rotation amount\n    rotate_amount = rotate_amount % n\n    \n    # Rotate left by moving first rotate_amount elements to the end\n    rotated = arr[rotate_amount:] + arr[:rotate_amount]\n    \n    # Return the specified number of elements, cycling through if needed\n    result = []\n    for i in range(result_length):\n        result", "is_syntactically_valid": true}
{"task_id": 329, "generation": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 330, "generation": "import re\n\ndef find_char(text):\n    # Find all words that are 3, 4, or 5 characters long\n    pattern = r'\\b[a-zA-Z]{3,5}\\b'\n    matches = re.findall(pattern, text)\n    return matches", "is_syntactically_valid": true}
{"task_id": 331, "generation": "def count_unset_bits(n):\n    if n == 0:\n        return 1\n    \n    # Find the number of bits needed to represent n\n    bit_length = n.bit_length()\n    \n    # Count set bits\n    set_bits = bin(n).count('1')\n    \n    # Unset bits = total bits - set bits\n    unset_bits = bit_length - set_bits\n    \n    return unset_bits", "is_syntactically_valid": true}
{"task_id": 332, "generation": "def char_frequency(string):\n    frequency = {}\n    for character in string:\n        if character in frequency:\n            frequency[character] += 1\n        else:\n            frequency[character] = 1\n    return frequency", "is_syntactically_valid": true}
{"task_id": 333, "generation": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 334, "generation": "def check_Validity(a, b, c):\n    return a + b > c and a + c > b and b + c > a", "is_syntactically_valid": true}
{"task_id": 335, "generation": "def ap_sum(a, n, d):\n    return n * (2 * a + (n - 1) * d) // 2", "is_syntactically_valid": true}
{"task_id": 336, "generation": "def check_monthnum(month_name):\n    return month_name == \"February\"", "is_syntactically_valid": true}
{"task_id": 337, "generation": "import re\n\ndef text_match_word(text):\n    pattern = r'\\w+[^\\w\\s]*$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 338, "generation": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    n = len(s)\n    \n    # Count all substrings with same first and last character\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 339, "generation": "def find_Divisor(start, end):\n    divisor_counts = {}\n    \n    for num in range(start, end + 1):\n        # Find all divisors of num\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                # i is a divisor\n                if i in divisor_counts:\n                    divisor_counts[i] += 1\n                else:\n                    divisor_counts[i] = 1\n                \n                # num//i is also a divisor (if different from i)\n                if i != num // i:\n                    other_divisor = num // i\n                    if other_divisor in divisor_counts:\n                        divisor_counts[other_divisor] += 1\n                    else:\n                        divisor_counts[other_divisor] = 1\n    \n    # Find the divisor with maximum count\n    max_count = max(divisor_counts.values())\n    for divisor, count in divisor_counts.items():\n        if count == max_count:\n            return divisor", "is_syntactically_valid": true}
{"task_id": 340, "generation": "def sum_three_smallest_nums(numbers):\n    positive_nums = [num for num in numbers if num > 0]\n    positive_nums.sort()\n    return sum(positive_nums[:3])", "is_syntactically_valid": true}
{"task_id": 341, "generation": "def set_to_tuple(s):\n    return tuple(sorted(s))", "is_syntactically_valid": true}
{"task_id": 342, "generation": "import heapq\n\ndef find_minimum_range(arrays):\n    # Initialize heap with first element from each array\n    heap = []\n    max_val = float('-inf')\n    \n    # Add first element from each array to heap\n    for i, arr in enumerate(arrays):\n        if arr:  # Check if array is not empty\n            heapq.heappush(heap, (arr[0], i, 0))  # (value, array_index, element_index)\n            max_val = max(max_val, arr[0])\n    \n    min_range = float('inf')\n    result_range = None\n    \n    while len(heap) == len(arrays):  # Continue while we have elements from all arrays\n        min_val, arr_idx, elem_idx = heapq.heappop(heap)\n        \n        # Update minimum range if current range is smaller\n        current_range = max_val - min_val\n        if current_range < min_range:\n            min_range = current_range\n            result_range = (min_val, max_val)\n        \n        # Move to next element in the array that had minimum value\n        if elem_idx + 1 < len(arrays[arr_idx]):\n            next_val = arrays[arr_idx][elem_idx + 1]\n            heapq.heappush(heap, (next_val, arr_idx, elem_idx + 1))\n            max_val = max(max_val, next_val)\n    \n    return result_range", "is_syntactically_valid": true}
{"task_id": 343, "generation": "def dig_let(s):\n    letters = 0\n    digits = 0\n    \n    for char in s:\n        if char.isalpha():\n            letters += 1\n        elif char.isdigit():\n            digits += 1\n    \n    return (letters, digits)", "is_syntactically_valid": true}
{"task_id": 344, "generation": "import math\n\ndef count_Odd_Squares(start, end):\n    # Find the smallest integer whose square is >= start\n    sqrt_start = math.ceil(math.sqrt(start))\n    \n    # Find the largest integer whose square is <= end\n    sqrt_end = math.floor(math.sqrt(end))\n    \n    # Count perfect squares in range\n    if sqrt_start <= sqrt_end:\n        return sqrt_end - sqrt_start + 1\n    else:\n        return 0", "is_syntactically_valid": true}
{"task_id": 345, "generation": "def diff_consecutivenums(nums):\n    result = []\n    for i in range(1, len(nums)):\n        result.append(nums[i] - nums[i-1])\n    return result", "is_syntactically_valid": true}
{"task_id": 346, "generation": "def zigzag(n, k):\n    # Create a table to store Entringer numbers\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    # Base case\n    dp[0][0] = 1\n    \n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            dp[i][j] = dp[i][j-1] + dp[i-1][i-j]\n    \n    return dp[n][k]", "is_syntactically_valid": true}
{"task_id": 347, "generation": "def count_Squares(m, n):\n    total = 0\n    max_size = min(m, n)\n    \n    for k in range(1, max_size + 1):\n        # Number of k\u00d7k squares that can be placed\n        squares_of_size_k = (m - k + 1) * (n - k + 1)\n        total += squares_of_size_k\n    \n    return total", "is_syntactically_valid": true}
{"task_id": 348, "generation": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    \n    k = n // 2\n    \n    # Calculate Catalan number C_k = (1/(k+1)) * C(2k, k)\n    # C(2k, k) = (2k)! / (k! * k!)\n    \n    def factorial(x):\n        if x <= 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n    \n    def combination(n, r):\n        if r > n or r < 0:\n            return 0\n        if r == 0 or r == n:\n            return 1\n        \n        # Use the more efficient formula: C(n,r) = n! / (r! * (n-r)!)\n        # But calculate it iteratively to avoid large factorials\n        result = 1\n        for i in range(min(r, n - r)):\n            result = result * (n - i) // (i + 1)\n        return result\n    \n    # Catalan number C_k = C(2k, k) / (k + ", "is_syntactically_valid": true}
{"task_id": 349, "generation": "def check(s):\n    for char in s:\n        if char not in '01':\n            return \"No\"\n    return \"Yes\"", "is_syntactically_valid": true}
{"task_id": 350, "generation": "def minimum_Length(s):\n    if not s:\n        return 0\n    \n    # Count frequency of each character\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find minimum length by trying to remove each unique character\n    min_length = len(s)\n    for char, count in char_count.items():\n        # Length after removing all occurrences of this character\n        new_length = len(s) - count\n        min_length = min(min_length, new_length)\n    \n    return min_length", "is_syntactically_valid": true}
{"task_id": 351, "generation": "def first_Element(arr, n, k):\n    count = {}\n    for item in arr:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n        if count[item] == k:\n            return item\n    return None", "is_syntactically_valid": true}
{"task_id": 352, "generation": "def unique_Characters(s):\n    return len(s) == len(set(s))", "is_syntactically_valid": true}
{"task_id": 353, "generation": "def remove_column(nested_list, column_index):\n    result = []\n    for row in nested_list:\n        if column_index < len(row):\n            new_row = row[:column_index] + row[column_index + 1:]\n        else:\n            new_row = row[:]\n        result.append(new_row)\n    return result", "is_syntactically_valid": true}
{"task_id": 354, "generation": "Looking at the test cases, I need to understand the pattern:\n- `tn_ap(1,5,2)==9`: This suggests finding the 2nd term of an AP with first term 1 and common difference 5\n- `tn_ap(2,6,4)==22`: This suggests finding the 4th term of an AP with first term 2 and common difference 6  \n- `tn_ap(1,4,5)==16`: This suggests finding the 5th term of an AP with first term 1 and common difference 4\n\nThe formula for the nth term of an arithmetic progression is: `a_n = a_1 + (n-1) * d`\nwhere `a_1` is the first term, `d` is the common difference, and `n` is the term number.\n\nLet me verify:\n- `tn_ap(1,5,2)`: 1 + (2-1)*5 = 1 + 5 = 6 \u2260 9\n- Let me try: 1 + 2*5 = 11 \u2260 9\n- Maybe it's: 1 + (2+1)*5 = 1 + 15 = 16 \u2260 9\n\nLet me reconsider the pattern:\n- `tn_ap(1,5,2)==9`: 1 + 2*4 = 9, so maybe d=4? No...\n- Let me try: first_term + (n-1)*common_diff = 1 + (2-1)*8 = 9, so d=8? No...\n\nActually, let me check if it's `first_term + n * common_diff`:\n- `tn_ap(1,5,2)`: 1 + 2*5 = 11 \u2260 9\n- Maybe it's `first_term + (n-1) * common_diff` but I misunderstood the parameters\n\nLet me try a different interpretation - maybe the second parameter isn't the common difference:\n- `tn_ap(1,5,2)==9`: If this means term 2 of AP starting at", "is_syntactically_valid": false}
{"task_id": 355, "generation": "def count_Rectangles(r):\n    if r == 0:\n        return 0\n    \n    count = 0\n    # Find all integer points within the circle\n    points = []\n    for x in range(-r, r + 1):\n        for y in range(-r, r + 1):\n            if x * x + y * y <= r * r:\n                points.append((x, y))\n    \n    # Count rectangles formed by these points\n    n = len(points)\n    for i in range(n):\n        for j in range(i + 1, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            \n            # Check if these can be opposite corners of a rectangle\n            # The other two corners would be (x1, y2) and (x2, y1)\n            if x1 != x2 and y1 != y2:\n                # Check if the other two corners are also in the circle\n                if (x1 * x1 + y2 * y2 <= r * r) and (x2 * x2 + y", "is_syntactically_valid": false}
{"task_id": 356, "generation": "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2", "is_syntactically_valid": true}
{"task_id": 357, "generation": "def find_max(tuples):\n    max_val = float('-inf')\n    for tuple_record in tuples:\n        for element in tuple_record:\n            if element > max_val:\n                max_val = element\n    return max_val", "is_syntactically_valid": true}
{"task_id": 358, "generation": "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))", "is_syntactically_valid": true}
{"task_id": 359, "generation": "import math\n\ndef Check_Solution(a, b, c):\n    # Calculate discriminant\n    discriminant = b*b - 4*a*c\n    \n    # If discriminant is negative, no real roots\n    if discriminant < 0:\n        return \"No\"\n    \n    # Calculate the two roots\n    root1 = (-b + math.sqrt(discriminant)) / (2*a)\n    root2 = (-b - math.sqrt(discriminant)) / (2*a)\n    \n    # Check if one root is twice the other\n    if abs(root1 - 2*root2) < 1e-10 or abs(root2 - 2*root1) < 1e-10:\n        return \"Yes\"\n    else:\n        return \"No\"", "is_syntactically_valid": true}
{"task_id": 360, "generation": "def get_carol(n):\n    return (2**n - 1)**2 - 2", "is_syntactically_valid": true}
{"task_id": 361, "generation": "def remove_empty(lst):\n    return [item for item in lst if item != []]", "is_syntactically_valid": true}
{"task_id": 362, "generation": "def max_occurrences(lst):\n    if not lst:\n        return None\n    \n    # Count occurrences of each item\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    \n    # Find the maximum count\n    max_count = max(count_dict.values())\n    \n    # Find all items with maximum count\n    max_items = [item for item, count in count_dict.items() if count == max_count]\n    \n    # If there's only one item with max count, return it\n    # If there are multiple items with same max count, return all of them\n    if len(max_items) == 1:\n        return max_items[0]\n    else:\n        return max_items", "is_syntactically_valid": true}
{"task_id": 363, "generation": "def add_K_element(tuples_list, k):\n    result = []\n    for tuple_item in tuples_list:\n        new_tuple = tuple(element + k for element in tuple_item)\n        result.append(new_tuple)\n    return result", "is_syntactically_valid": true}
{"task_id": 364, "generation": "def min_flip_to_make_string_alternate(s):\n    n = len(s)\n    \n    # Count flips needed for pattern starting with '0'\n    flips_pattern_0 = 0\n    for i in range(n):\n        expected = '0' if i % 2 == 0 else '1'\n        if s[i] != expected:\n            flips_pattern_0 += 1\n    \n    # Count flips needed for pattern starting with '1'\n    flips_pattern_1 = 0\n    for i in range(n):\n        expected = '1' if i % 2 == 0 else '0'\n        if s[i] != expected:\n            flips_pattern_1 += 1\n    \n    return min(flips_pattern_0, flips_pattern_1)", "is_syntactically_valid": true}
{"task_id": 365, "generation": "def count_Digit(number):\n    return len(str(abs(number)))", "is_syntactically_valid": true}
{"task_id": 366, "generation": "def adjacent_num_product(nums):\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        product = nums[i] * nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product", "is_syntactically_valid": true}
{"task_id": 367, "generation": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_height(node):\n        if not node:\n            return 0\n        \n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        \n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        \n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        return max(left_height, right_height) + 1\n    \n    return check_height(root) != -1\n\n# Test cases\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\nroot.left.left.left = TreeNode(6)\n\nroot1 = TreeNode(1)\nroot1.left = TreeNode(2)\nroot1.right = TreeNode(3)\n\nroot2 = TreeNode(1)\nroot2.left = TreeNode(2)\nroot2.left.left = TreeNode(3)\nroot2.left.left.left = TreeNode(4)\n\nassert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False", "is_syntactically_valid": true}
{"task_id": 368, "generation": "def repeat_tuples(tuple_input, n):\n    return tuple(tuple_input for _ in range(n))", "is_syntactically_valid": true}
{"task_id": 369, "generation": "def lateralsurface_cuboid(length, width, height):\n    return 2 * height * (length + width)", "is_syntactically_valid": true}
{"task_id": 370, "generation": "def float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]), reverse=True)", "is_syntactically_valid": true}
{"task_id": 371, "generation": "def smallest_missing(arr, start, end):\n    # Extract the subarray from start to end (inclusive)\n    subarray = arr[start:end+1]\n    \n    # Convert to set for O(1) lookup\n    present = set(subarray)\n    \n    # Find the smallest missing non-negative integer\n    missing = 0\n    while missing in present:\n        missing += 1\n    \n    return missing", "is_syntactically_valid": true}
{"task_id": 372, "generation": "import heapq\n\ndef heap_assending(lst):\n    heap = lst.copy()\n    heapq.heapify(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result", "is_syntactically_valid": true}
{"task_id": 373, "generation": "def volume_cuboid(length, width, height):\n    return length * width * height", "is_syntactically_valid": true}
{"task_id": 374, "generation": "def permute_string(s):\n    if len(s) <= 1:\n        return [s]\n    \n    result = []\n    for i in range(len(s)):\n        char = s[i]\n        remaining = s[:i] + s[i+1:]\n        for perm in permute_string(remaining):\n            result.append(char + perm)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 375, "generation": "def round_num(num, multiple):\n    return (num // multiple) * multiple", "is_syntactically_valid": true}
{"task_id": 376, "generation": "def remove_replica(tup):\n    # Count occurrences of each element\n    count_dict = {}\n    for item in tup:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    \n    # Track how many times we've seen each element\n    seen_count = {}\n    result = []\n    \n    for item in tup:\n        seen_count[item] = seen_count.get(item, 0) + 1\n        \n        # If this is the first occurrence, keep the original value\n        if seen_count[item] == 1:\n            result.append(item)\n        # If this is a duplicate, replace with 'MSP'\n        else:\n            result.append('MSP')\n    \n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 377, "generation": "def remove_Char(string, char):\n    return string.replace(char, '')", "is_syntactically_valid": true}
{"task_id": 378, "generation": "def move_first(lst):\n    if len(lst) == 0:\n        return lst\n    return [lst[-1]] + lst[:-1]", "is_syntactically_valid": true}
{"task_id": 379, "generation": "def surfacearea_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)", "is_syntactically_valid": true}
{"task_id": 380, "generation": "def multi_list(rows, cols):\n    result = []\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(i * j)\n        result.append(row)\n    return result", "is_syntactically_valid": true}
{"task_id": 381, "generation": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])", "is_syntactically_valid": true}
{"task_id": 382, "generation": "def find_rotation_count(arr):\n    if not arr:\n        return 0\n    \n    left = 0\n    right = len(arr) - 1\n    \n    # If array is not rotated\n    if arr[left] <= arr[right]:\n        return 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid is the minimum element\n        if mid > 0 and arr[mid] < arr[mid - 1]:\n            return mid\n        \n        # Check if mid+1 is the minimum element\n        if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        \n        # If left half is sorted, minimum is in right half\n        if arr[left] <= arr[mid]:\n            left = mid + 1\n        # If right half is sorted, minimum is in left half\n        else:\n            right = mid - 1\n    \n    return 0", "is_syntactically_valid": true}
{"task_id": 383, "generation": "def even_bit_toggle_number(n):\n    # Create a mask with 1s at all odd bit positions (1st, 3rd, 5th, etc.)\n    # Pattern: ...010101010101\n    mask = 0x55555555  # This covers 32 bits with alternating pattern starting with 1 at position 0\n    \n    # For larger numbers, we need to extend the mask\n    # Find the highest bit position in n\n    if n == 0:\n        return 0\n    \n    # Create mask dynamically based on the number's bit length\n    bit_length = n.bit", "is_syntactically_valid": true}
{"task_id": 384, "generation": "def frequency_Of_Smallest(n, arr):\n    min_value = min(arr)\n    count = 0\n    for num in arr:\n        if num == min_value:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 385, "generation": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)", "is_syntactically_valid": true}
{"task_id": 386, "generation": "def swap_count(s):\n    # Remove all properly matched brackets first\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    \n    # Now stack contains only unmatched brackets\n    # Count opening and closing brackets\n    open_count = 0\n    close_count = 0\n    \n    for char in stack:\n        if char == '[':\n            open_count += 1\n        else:\n            close_count += 1\n    \n    # To balance, we need to swap half of the excess closing brackets\n    # with half of the excess opening brackets\n    # The minimum swaps needed is ceil(close_count/2) + ceil(open_count/2)\n    # But since close_count + open_count = len(stack), and we need equal numbers\n    # The formula simplifies to: (close_count + 1) // 2\n    return (close_count + 1) // 2", "is_syntactically_valid": true}
{"task_id": 387, "generation": "def even_or_odd(hex_string):\n    # Get the last digit of the hexadecimal number\n    last_digit = hex_string[-1]\n    \n    # Convert to integer to check if even or odd\n    last_digit_int = int(last_digit, 16)\n    \n    # Check if even or odd\n    if last_digit_int % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "is_syntactically_valid": true}
{"task_id": 388, "generation": "def highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    \n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    \n    return power", "is_syntactically_valid": true}
{"task_id": 389, "generation": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    \n    return b", "is_syntactically_valid": true}
{"task_id": 390, "generation": "def add_string(lst, template):\n    return [template.format(item) for item in lst]", "is_syntactically_valid": true}
{"task_id": 391, "generation": "def convert_list_dictionary(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        nested_dict = {list1[i]: {list2[i]: list3[i]}}\n        result.append(nested_dict)\n    return result", "is_syntactically_valid": true}
{"task_id": 392, "generation": "def get_max_sum(n):\n    memo = {}\n    \n    def helper(n):\n        if n in memo:\n            return memo[n]\n        \n        if n == 0:\n            return 0\n        \n        # Calculate f(n/2) + f(n/3) + f(n/4) + f(n/5)\n        sum_parts = helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5)\n        \n        # Return max of sum_parts and n\n        result = max(sum_parts, n)\n        memo[n] = result\n        return result\n    \n    return helper(n)", "is_syntactically_valid": true}
{"task_id": 393, "generation": "def max_length_list(lists):\n    max_list = max(lists, key=lambda x: len(x))\n    return (len(max_list), max_list)", "is_syntactically_valid": true}
{"task_id": 394, "generation": "def check_distinct(tuple_input):\n    return len(tuple_input) == len(set(tuple_input))", "is_syntactically_valid": true}
{"task_id": 395, "generation": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    # Count frequency of each character\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find first character with count 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 396, "generation": "import re\n\ndef check_char(s):\n    pattern = r'^(.).*\\1$|^.$'\n    if re.match(pattern, s):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "is_syntactically_valid": true}
{"task_id": 397, "generation": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])", "is_syntactically_valid": true}
{"task_id": 398, "generation": "def sum_of_digits(lst):\n    def get_digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    def flatten_and_filter(item):\n        if isinstance(item, list):\n            result = []\n            for sub_item in item:\n                result.extend(flatten_and_filter(sub_item))\n            return result\n        elif isinstance(item, int):\n            return [item]\n        else:\n            return []\n    \n    flattened = flatten_and_filter(lst)\n    total = 0\n    for num in flattened:\n        total += get_digit_sum(num)\n    \n    return total", "is_syntactically_valid": true}
{"task_id": 399, "generation": "def bitwise_xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 400, "generation": "def extract_freq(tuple_list):\n    normalized_tuples = set()\n    for tup in tuple_list:\n        normalized = tuple(sorted(tup))\n        normalized_tuples.add(normalized)\n    return len(normalized_tuples)", "is_syntactically_valid": true}
{"task_id": 401, "generation": "def add_nested_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        inner_tuple = tuple(tuple1[i][j] + tuple2[i][j] for j in range(len(tuple1[i])))\n        result.append(inner_tuple)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 402, "generation": "def ncr_modp(n, r, p):\n    if r > n or r < 0:\n        return 0\n    \n    if r == 0 or r == n:\n        return 1\n    \n    # Use the property nCr = nC(n-r) to minimize computation\n    if r > n - r:\n        r = n - r\n    \n    # Calculate nCr using the formula: nCr = n! / (r! * (n-r)!)\n    # But we need to be careful with modular arithmetic\n    \n    # Calculate numerator and denominator separately\n    numerator = 1\n    denominator = 1\n    \n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n        denominator = (denominator * (i + 1)) % p\n    \n    # Find modular inverse of denominator\n    def mod_inverse(a, m):\n        # Extended Euclidean Algorithm\n        def extended_gcd(a, b):\n            if a == 0:\n                return b, 0, 1\n            gcd, x1, y1 = extended_gcd(b % a, a)\n            x = y1 - (b // a) * x1\n            y = x1\n            return gcd, x, y\n        \n        gcd, x, y = extended_gcd(a, m)\n        if gcd != 1:\n            return None  # Modular inverse doesn't exist\n        return (x % m + m) % m\n    \n    inv_denominator = mod_inverse(denominator, p)\n    if inv_denominator is None:\n        return 0\n    \n    result = (numerator * inv_denominator) % p\n    return result", "is_syntactically_valid": true}
{"task_id": 403, "generation": "import re\n\ndef is_valid_URL(url):\n    pattern = r'^https?://[^\\s/$.?#].[^\\s]*$'\n    return bool(re.match(pattern, url))", "is_syntactically_valid": true}
{"task_id": 404, "generation": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b", "is_syntactically_valid": true}
{"task_id": 405, "generation": "def check_tuplex(tuple_data, element):\n    return element in tuple_data", "is_syntactically_valid": true}
{"task_id": 406, "generation": "def find_Parity(n):\n    if n % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "is_syntactically_valid": true}
{"task_id": 407, "generation": "def rearrange_bigger(num):\n    digits = list(str(num))\n    n = len(digits)\n    \n    # Find the rightmost digit that is smaller than the digit next to it\n    i = n - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such digit is found, return False\n    if i == -1:\n        return False\n    \n    # Find the smallest digit on right side of above character that is greater than digits[i]\n    j = n - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the found characters\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the substring after position i\n    digits[i + 1:] = reversed(digits[i + 1:])\n    \n    return int(''.join(digits))", "is_syntactically_valid": true}
{"task_id": 408, "generation": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k == 0:\n        return []\n    \n    # Min heap to store (sum, i, j) where i is index in nums1, j is index in nums2\n    heap = []\n    result = []\n    \n    # Initialize heap with pairs from first element of nums1 with all elements of nums2\n    for j in range(min(len(nums2), k)):\n        heapq.heappush(heap, (nums1[0] + nums2[j], 0, j))\n    \n    while heap and len(result) < k:\n        sum_val, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n        # Add next pair from nums1 if exists\n        if i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 409, "generation": "def min_product_tuple(tuples_list):\n    return min(x * y for x, y in tuples_list)", "is_syntactically_valid": true}
{"task_id": 410, "generation": "def min_val(lst):\n    numeric_values = []\n    for item in lst:\n        if isinstance(item, (int, float)):\n            numeric_values.append(item)\n    return min(numeric_values)", "is_syntactically_valid": true}
{"task_id": 411, "generation": "import re\n\ndef snake_to_camel(snake_str):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), snake_str.title())", "is_syntactically_valid": true}
{"task_id": 412, "generation": "def remove_odd(lst):\n    return [num for num in lst if num % 2 == 0]", "is_syntactically_valid": true}
{"task_id": 413, "generation": "def extract_nth_element(tuple_list, n):\n    nth_elements = []\n    for tuple_item in tuple_list:\n        nth_elements.append(tuple_item[n])\n    return nth_elements", "is_syntactically_valid": true}
{"task_id": 414, "generation": "def overlapping(seq1, seq2):\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 415, "generation": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    result_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    \n    return result_pair", "is_syntactically_valid": true}
{"task_id": 416, "generation": "def breakSum(n):\n    memo = {}\n    \n    def helper(num):\n        if num in memo:\n            return memo[num]\n        \n        if num == 0:\n            return 0\n        \n        # Option 1: Don't break the number\n        max_sum = num\n        \n        # Option 2: Break into three parts\n        if num >= 3:\n            part1 = num // 3\n            part2 = num // 3\n            part3 = num // 3 + num % 3\n            \n            broken_sum = helper(part1) + helper(part2) + helper(part3)\n            max_sum = max(max_sum, broken_sum)\n        \n        memo[num] = max_sum\n        return max_sum\n    \n    return helper(n)", "is_syntactically_valid": true}
{"task_id": 417, "generation": "def group_tuples(tuples_list):\n    from collections import defaultdict\n    \n    grouped = defaultdict(list)\n    \n    for tup in tuples_list:\n        first_element = tup[0]\n        rest_elements = tup[1:]\n        grouped[first_element].extend(rest_elements)\n    \n    result = []\n    for key, values in grouped.items():\n        result.append((key,) + tuple(values))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 418, "generation": "def Find_Max(lst):\n    max_sublist = lst[0]\n    max_length = len(lst[0])\n    \n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    \n    return max_sublist", "is_syntactically_valid": true}
{"task_id": 419, "generation": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)", "is_syntactically_valid": true}
{"task_id": 420, "generation": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        total += even_number ** 3\n    return total", "is_syntactically_valid": true}
{"task_id": 421, "generation": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(element) for element in tup)", "is_syntactically_valid": true}
{"task_id": 422, "generation": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / n", "is_syntactically_valid": true}
{"task_id": 423, "generation": "def get_maxgold(grid, m, n):\n    # Create a DP table to store maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Initialize first column with the grid values\n    for i in range(m):\n        dp[i][0] = grid[i][0]\n    \n    # Fill the DP table column by column\n    for j in range(1, n):\n        for i in range(m):\n            # From same row (straight right)\n            dp[i][j] = dp[i][j-1]\n            \n            # From upper diagonal (if exists)\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1])\n            \n            # From lower diagonal (if exists)\n            if i < m - 1:\n                dp[i][j] = max(dp[i][j], dp[i+1][j-1])\n            \n            # Add current cell's gold\n            dp[i][j] += grid[i][j]\n    \n    # Return maximum gold from last column\n    return max(dp[i][n-1] for i in range(m))", "is_syntactically_valid": true}
{"task_id": 424, "generation": "def extract_rear(tuple_of_strings):\n    return [string[-1] for string in tuple_of_strings]", "is_syntactically_valid": true}
{"task_id": 425, "generation": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 426, "generation": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 == 1, numbers))", "is_syntactically_valid": true}
{"task_id": 427, "generation": "import re\n\ndef change_date_format(date_string):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replacement = r'\\3-\\2-\\1'\n    return re.sub(pattern, replacement, date_string)", "is_syntactically_valid": true}
{"task_id": 428, "generation": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            \n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            \n            arr[j] = temp\n        \n        gap //= 2\n    \n    return arr", "is_syntactically_valid": true}
{"task_id": 429, "generation": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 430, "generation": "def parabola_directrix(a, b, c):\n    return -4 * a * b * c - 4 * a * b - 6 * a * c", "is_syntactically_valid": true}
{"task_id": 431, "generation": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return None", "is_syntactically_valid": true}
{"task_id": 432, "generation": "def median_trapezium(a, b, c):\n    return (a + b) / 2", "is_syntactically_valid": true}
{"task_id": 433, "generation": "def check_greater(arr, num):\n    if num > max(arr):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'", "is_syntactically_valid": true}
{"task_id": 434, "generation": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 435, "generation": "def last_Digit(num):\n    return num % 10", "is_syntactically_valid": true}
{"task_id": 436, "generation": "def neg_nos(numbers):\n    negative_numbers = []\n    for num in numbers:\n        if num < 0:\n            negative_numbers.append(num)\n    return tuple(negative_numbers)", "is_syntactically_valid": true}
{"task_id": 437, "generation": "def remove_odd(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 1:  # odd index (0-based indexing)\n            result += s[i]\n    return result", "is_syntactically_valid": true}
{"task_id": 438, "generation": "def count_bidirectional(tuples_list):\n    count = 0\n    for i, tuple1 in enumerate(tuples_list):\n        reversed_tuple = (tuple1[1], tuple1[0])\n        for j", "is_syntactically_valid": false}
{"task_id": 439, "generation": "def multiple_to_single(numbers):\n    result = \"\"\n    for num in numbers:\n        result += str(num)\n    return int(result)", "is_syntactically_valid": true}
{"task_id": 440, "generation": "import re\n\ndef find_adverb_position(sentence):\n    # Find words ending with 'ly' followed by non-letter characters or end of string\n    match = re.search(r'\\b(\\w*ly)\\b', sentence)\n    \n    if match:\n        adverb = match.group(1)\n        start_pos = match.start(1)\n        end_pos = match.end(1) - 1\n        return (start_pos, end_pos, adverb)\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 441, "generation": "def surfacearea_cube(side):\n    return 6 * side * side", "is_syntactically_valid": true}
{"task_id": 442, "generation": "def positive_count(arr):\n    if len(arr) == 0:\n        return 0\n    \n    positive_numbers = sum(1 for num in arr if num > 0)\n    ratio = positive_numbers / len(arr)\n    return round(ratio, 2)", "is_syntactically_valid": true}
{"task_id": 443, "generation": "def largest_neg(numbers):\n    negative_numbers = [num for num in numbers if num < 0]\n    if not negative_numbers:\n        return None\n    return max(negative_numbers)", "is_syntactically_valid": true}
{"task_id": 444, "generation": "def trim_tuple(tuple_list, k):\n    result = []\n    for tup in tuple_list:\n        trimmed = tup[k:-k] if k < len(tup) else ()\n        result.append(trimmed)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 445, "generation": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        inner_tuple = []\n        for j in range(len(tuple1[i])):\n            inner_tuple.append(tuple1[i][j] * tuple2[i][j])\n        result.append(tuple(inner_tuple))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 446, "generation": "def count_Occurrence(tuple_data, list_data):\n    count = 0\n    for element in list_data:\n        count += tuple_data.count(element)\n    return count", "is_syntactically_valid": true}
{"task_id": 447, "generation": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))", "is_syntactically_valid": true}
{"task_id": 448, "generation": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    \n    # Initialize first three Perrin numbers\n    perrin = [3, 0, 2]\n    \n    # Generate Perrin numbers up to n\n    for i in range(3, n):\n        next_perrin = perrin[i-2] + perrin[i-3]\n        perrin.append(next_perrin)\n    \n    # Return sum of first n Perrin numbers\n    return sum(perrin[:n])", "is_syntactically_valid": true}
{"task_id": 449, "generation": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area using the cross product formula\n    # Area = 0.5 * |x1(y2-y3) + x2(y3-y1) + x3(y1-y2)|\n    area = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))\n    \n    # If area is 0, the points are collinear (not a valid triangle)\n    if area == 0:\n        return 'No'\n    else:\n        return 'Yes'", "is_syntactically_valid": true}
{"task_id": 450, "generation": "def extract_string(string_list, size):\n    result = []\n    for string in string_list:\n        if len(string) == size:\n            result.append(string)\n    return result", "is_syntactically_valid": true}
{"task_id": 451, "generation": "import re\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)", "is_syntactically_valid": true}
{"task_id": 452, "generation": "def loss_amount(cost_price, selling_price):\n    if selling_price < cost_price:\n        return cost_price - selling_price\n    else:\n        return None", "is_syntactically_valid": true}
{"task_id": 453, "generation": "def sumofFactors(n):\n    sum_even = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even += i\n    return sum_even", "is_syntactically_valid": true}
{"task_id": 454, "generation": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\w*z\\w*', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 455, "generation": "def check_monthnumb_number(month):\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return month in months_with_31_days", "is_syntactically_valid": true}
{"task_id": 456, "generation": "def reverse_string_list(string_list):\n    return [string[::-1] for string in string_list]", "is_syntactically_valid": true}
{"task_id": 457, "generation": "def Find_Min(lists):\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist", "is_syntactically_valid": true}
{"task_id": 458, "generation": "def rectangle_area(length, width):\n    return length * width", "is_syntactically_valid": true}
{"task_id": 459, "generation": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)", "is_syntactically_valid": true}
{"task_id": 460, "generation": "def Extract(lst):\n    return [sublist[0] for sublist in lst]", "is_syntactically_valid": true}
{"task_id": 461, "generation": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 462, "generation": "def combinations_list(lst):\n    result = []\n    n = len(lst)\n    \n    # Generate all possible combinations using bit manipulation\n    for i in range(2**n):\n        combination = []\n        for j in range(n):\n            if i & (1 << j):\n                combination.append(lst[j])\n        result.append(combination)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 463, "generation": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 464, "generation": "def check_value(dictionary, value):\n    return all(v == value for v in dictionary.values())", "is_syntactically_valid": true}
{"task_id": 465, "generation": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}", "is_syntactically_valid": true}
{"task_id": 466, "generation": "def find_peak(arr, n):\n    # If array has only one element, it's a peak\n    if n == 1:\n        return 0\n    \n    # Check if first element is peak\n    if arr[0] >= arr[1]:\n        return 0\n    \n    # Check if last element is peak\n    if arr[n-1] >= arr[n-2]:\n        return n-1\n    \n    # Check for peak in middle elements\n    for i in range(1, n-1):\n        if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n            return i\n    \n    # If no peak found, return last index\n    return n-1", "is_syntactically_valid": true}
{"task_id": 467, "generation": "def decimal_to_Octal(decimal_num):\n    if decimal_num == 0:\n        return 0\n    \n    octal_digits = []\n    while decimal_num > 0:\n        remainder = decimal_num % 8\n        octal_digits.append(str(remainder))\n        decimal_num = decimal_num // 8\n    \n    octal_digits.reverse()\n    return int(''.join(octal_digits))", "is_syntactically_valid": true}
{"task_id": 468, "generation": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    \n    # dp[i] stores the maximum product of increasing subsequence ending at index i\n    dp = [0] * n\n    \n    # Initialize with individual elements\n    for i in range(n):\n        dp[i] = arr[i]\n    \n    # Fill dp array\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    # Return maximum product among all subsequences\n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 469, "generation": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    \n    # If k is large enough, we can make as many transactions as we want\n    if k >= n // 2:\n        profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                profit += prices[i] - prices[i-1]\n        return profit\n    \n    # DP approach for limited transactions\n    # buy[i][j] = max profit after at most i transactions, currently holding stock on day j\n    # sell[i][j] = max profit after at most i transactions, not holding stock on day j\n    buy = [[-float('inf')] * n for _ in range(k+1)]\n    sell = [[0] * n for _ in range(k+1)]\n    \n    for i in range(1, k+1):\n        buy[i][0] = -prices[0]\n        for j in range(1, n):\n            buy[i][j] = max(buy[i][j-1], sell[i-1][j-1] - prices[j])\n            sell[i][j] = max(sell[i][j-1], buy[i][j-1] + prices[j])\n    \n    return sell[k][n-1]", "is_syntactically_valid": true}
{"task_id": 470, "generation": "def add_pairwise(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 471, "generation": "def find_remainder(arr, k, n):\n    result = 1\n    for i in range(k):\n        result = (result * arr[i]) % n\n    return result", "is_syntactically_valid": true}
{"task_id": 472, "generation": "def check_Consecutive(lst):\n    if len(lst) <= 1:\n        return True\n    \n    # Sort the list to check for consecutive numbers\n    sorted_lst = sorted(lst)\n    \n    # Check if there are duplicates\n    if len(sorted_lst) != len(set(sorted_lst)):\n        return False\n    \n    # Check if numbers are consecutive\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] - sorted_lst[i-1] != 1:\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 473, "generation": "def tuple_intersection(list1, list2):\n    # Convert tuples to sets to handle order-independent comparison\n    set1 = set()\n    set2 = set()\n    \n    # For each tuple, create a frozenset to make it order-independent\n    for t in list1:\n        set1.add(frozenset(t))\n    \n    for t in list2:\n        set2.add(frozenset(t))\n    \n    # Find intersection of the two sets\n    intersection = set1 & set2\n    \n    # Convert back to tuples, using sorted order for consistency\n    result = set()\n    for fs in intersection:\n        result.add(tuple(sorted(fs)))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 474, "generation": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)", "is_syntactically_valid": true}
{"task_id": 475, "generation": "def sort_counter(counter_dict):\n    return sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)", "is_syntactically_valid": true}
{"task_id": 476, "generation": "def big_sum(arr):\n    return max(arr) + min(arr)", "is_syntactically_valid": true}
{"task_id": 477, "generation": "def is_lower(string):\n    return string.lower()", "is_syntactically_valid": true}
{"task_id": 478, "generation": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char\n    return result", "is_syntactically_valid": true}
{"task_id": 479, "generation": "def first_Digit(num):\n    # Convert to string to easily access first character\n    num_str = str(abs(num))  # Use abs to handle negative numbers\n    return int(num_str[0])", "is_syntactically_valid": true}
{"task_id": 480, "generation": "def get_max_occuring_char(s):\n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_char = max(char_count, key=char_count.get)\n    return max_char", "is_syntactically_valid": true}
{"task_id": 481, "generation": "def is_subset_sum(arr, n, target_sum):\n    # Create a 2D DP table\n    # dp[i][j] represents whether sum j can be achieved using first i elements\n    dp = [[False for _ in range(target_sum + 1)] for _ in range(n + 1)]\n    \n    # Base case: sum 0 can always be achieved with empty subset\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Fill the DP table\n    for i in range(1, n + 1):\n        for j in range(1, target_sum + 1):\n            # If current element is greater than target sum, exclude it\n            if arr[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                # Include current element or exclude it\n                dp[i][j] = dp[i-1][j] or dp[i-1][j - arr[i-1]]\n    \n    return dp[n][target_sum]", "is_syntactically_valid": true}
{"task_id": 482, "generation": "import re\n\ndef match(string):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, string):\n        return 'Yes'\n    else:\n        return 'No'", "is_syntactically_valid": true}
{"task_id": 483, "generation": "def first_Factorial_Divisible_Number(x):\n    n = 1\n    factorial = 1\n    \n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1", "is_syntactically_valid": true}
{"task_id": 484, "generation": "def remove_matching_tuple(tuple1, tuple2):\n    result = []\n    for item in tuple1:\n        if item not in tuple2:\n            result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 485, "generation": "def largest_palindrome(arr, n):\n    def is_palindrome(num):\n        s = str(num)\n        return s == s[::-1]\n    \n    largest = -1\n    for num in arr:\n        if is_palindrome(num):\n            if num > largest:\n                largest = num\n    \n    return largest", "is_syntactically_valid": true}
{"task_id": 486, "generation": "import math\n\ndef binomial_probability(n, k, p):\n    # Calculate binomial coefficient C(n, k)\n    binomial_coeff = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    \n    # Calculate binomial probability\n    probability = binomial_coeff * (p ** k) * ((1 - p) ** (n - k))\n    \n    return probability", "is_syntactically_valid": true}
{"task_id": 487, "generation": "def sort_tuple(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[-1])", "is_syntactically_valid": true}
{"task_id": 488, "generation": "import math\n\ndef area_pentagon(side):\n    area = (1/4) * math.sqrt(25 + 10 * math.sqrt(5)) * side ** 2\n    return area", "is_syntactically_valid": true}
{"task_id": 489, "generation": "def frequency_Of_Largest(n, arr):\n    max_value = max(arr)\n    count = 0\n    for item in arr:\n        if item == max_value:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 490, "generation": "def extract_symmetric(tuple_list):\n    seen = set()\n    symmetric_pairs = set()\n    \n    for pair in tuple_list:\n        reversed_pair = (pair[1], pair[0])\n        if reversed_pair in seen:\n            symmetric_pairs.add(pair)\n            symmetric_pairs.add(reversed_pair)\n        seen.add(pair)\n    \n    return symmetric_pairs", "is_syntactically_valid": true}
{"task_id": 491, "generation": "def sum_gp(a, n, r):\n    if r == 1:\n        return a * n\n    else:\n        return a * (r**n - 1) // (r - 1)", "is_syntactically_valid": true}
{"task_id": 492, "generation": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 493, "generation": "import math\n\ndef calculate_polygons(start_x, start_y, width, height, size):\n    result = []\n    \n    # Calculate hexagon dimensions\n    hex_width = size * 2\n    hex_height = size * math.sqrt(3)\n    \n    # Horizontal and vertical spacing between hexagon centers\n    h_spacing = hex_width * 0.75\n    v_spacing = hex_height\n    \n    # Generate hexagons in a grid pattern\n    for row in range(height):\n        for col in range(width):\n            # Calculate center position\n            center_x = start_x + col * h_spacing\n            center_y = start_y + row * v_spacing\n            \n            # For odd rows, offset horizontally\n            if row % 2 == 1:\n                center_x += h_spacing / 2\n            \n            # Generate hexagon vertices\n            hexagon = []\n            for i in range(7):  # 6 vertices + closing point\n                angle = i * math.pi / 3  # 60 degrees in radians\n                x = center_x + size * math.cos(angle)\n                y = center_y + size * math.sin(angle)\n                hexagon.append((x, y))\n            \n            result.append(hexagon)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 494, "generation": "def binary_to_integer(binary_tuple):\n    decimal = 0\n    for i, bit in enumerate(binary_tuple):\n        decimal += bit * (2 ** (len(binary_tuple) - 1 - i))\n    return str(decimal)", "is_syntactically_valid": true}
{"task_id": 495, "generation": "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]', '', s)", "is_syntactically_valid": true}
{"task_id": 496, "generation": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    return heapq.nsmallest(k, numbers)", "is_syntactically_valid": true}
{"task_id": 497, "generation": "import math\n\ndef surfacearea_cone(radius, height):\n    # Calculate slant height using Pythagorean theorem\n    slant_height = math.sqrt(radius**2 + height**2)\n    \n    # Surface area = \u03c0 * r\u00b2 + \u03c0 * r * l\n    # where r is radius and l is slant height\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    \n    return base_area + lateral_area", "is_syntactically_valid": true}
{"task_id": 498, "generation": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "is_syntactically_valid": true}
{"task_id": 499, "generation": "def diameter_circle(radius):\n    return radius * 2", "is_syntactically_valid": true}
{"task_id": 500, "generation": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)", "is_syntactically_valid": true}
{"task_id": 501, "generation": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    g = gcd(a, b)\n    count = 0\n    \n    for i in range(1, int(g**0.5) + 1):\n        if g % i == 0:\n            count += 1\n            if i != g // i:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 502, "generation": "def find(a, b):\n    return a % b", "is_syntactically_valid": true}
{"task_id": 503, "generation": "def add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result", "is_syntactically_valid": true}
{"task_id": 504, "generation": "def sum_Of_Series(n):\n    return sum(i**3 for i in range(1, n+1))", "is_syntactically_valid": true}
{"task_id": 505, "generation": "def re_order(arr):\n    # Create a new list to store non-zero elements\n    result = []\n    zero_count = 0\n    \n    # Iterate through the array\n    for num in arr:\n        if num != 0:\n            result.append(num)\n        else:\n            zero_count += 1\n    \n    # Add zeros at the end\n    result.extend([0] * zero_count)\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 506, "generation": "def permutation_coefficient(n, k):\n    if k > n or k < 0:\n        return 0\n    \n    result = 1\n    for i in range(n, n - k, -1):\n        result *= i\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 507, "generation": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]", "is_syntactically_valid": true}
{"task_id": 508, "generation": "def same_order(list1, list2):\n    # Find common elements while preserving order from list1\n    common_in_list1 = [item for item in list1 if item in list2]\n    \n    # Find common elements while preserving order from list2\n    common_in_list2 = [item for item in list2 if item in list1]\n    \n    # Check if the order of common elements is the same\n    return common_in_list1 == common_in_list2", "is_syntactically_valid": true}
{"task_id": 509, "generation": "def average_Odd(n):\n    odd_numbers = []\n    for i in range(1, n + 1, 2):\n        odd_numbers.append(i)\n    return sum(odd_numbers) // len(odd_numbers)", "is_syntactically_valid": true}
{"task_id": 510, "generation": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    count = 0\n    \n    # Generate all possible subsequences using bit manipulation\n    for i in range(1, 2**n):\n        product = 1\n        for j in range(n):\n            if i & (1 << j):\n                product *= arr[j]\n                if product >= k:\n                    break\n        if product < k:\n            count += 1\n    \n    return count", "is_syntactically_valid": true}
