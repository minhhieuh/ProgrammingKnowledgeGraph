{"task_id": 11, "generation": "def remove_Occ(string, char):\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    if first_index == -1:\n        return string\n    elif first_index == last_index:\n        return string.replace(char, \"\")\n    else:\n        return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]", "is_syntactically_valid": true}
{"task_id": 12, "generation": "def sort_matrix(matrix):\n    return sorted(matrix, key=lambda row: sum(row))", "is_syntactically_valid": true}
{"task_id": 13, "generation": "from collections import Counter\n\ndef count_common(words):\n    word_counts = Counter(words)\n    return sorted(word_counts.items(), key=lambda x: x[1], reverse=True)", "is_syntactically_valid": true}
{"task_id": 14, "generation": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length", "is_syntactically_valid": true}
{"task_id": 15, "generation": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n                current = \"\"\n            result.append(char)\n    if current:\n        result.append(current)\n    return result", "is_syntactically_valid": true}
{"task_id": 16, "generation": "def text_lowercase_underscore(input_string):\n    import re\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, input_string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 17, "generation": "def square_perimeter(side_length):\n    return 4 * side_length", "is_syntactically_valid": true}
{"task_id": 18, "generation": "def remove_dirty_chars(string1, string2):\n    return ''.join(char for char in string1 if char not in string2)", "is_syntactically_valid": true}
{"task_id": 19, "generation": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))", "is_syntactically_valid": true}
{"task_id": 20, "generation": "def is_woodall(n):\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    \n    for i in range(len(n_str) - 2):\n        if int(n_str[i:i+3]) % 8 == 0:\n            return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 21, "generation": "def multiples_of_num(n, m):\n    return [i * n for i in range(1, m + 1)]", "is_syntactically_valid": true}
{"task_id": 22, "generation": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "is_syntactically_valid": true}
{"task_id": 23, "generation": "def maximum_Sum(lst):\n    max_sum = 0\n    for sub_list in lst:\n        max_sum += max(sub_list)\n    return max_sum", "is_syntactically_valid": true}
{"task_id": 24, "generation": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in str(binary):\n        decimal = decimal * 2 + int(digit)\n    return decimal", "is_syntactically_valid": true}
{"task_id": 25, "generation": "from decimal import Decimal, getcontext\n\ndef find_Product(arr, n):\n    product = 1\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            product *= num\n    return product", "is_syntactically_valid": true}
{"task_id": 26, "generation": "def check_k_elements(tuples, k):\n    for t in tuples:\n        if len(t) != k:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 27, "generation": "def remove(lst):\n    result = []\n    for item in lst:\n        result.append(''.join(char for char in item if not char.isdigit()))\n    return result", "is_syntactically_valid": true}
{"task_id": 28, "generation": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculates the binomial coefficient C(n, k).\n    \n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to be chosen.\n    \n    Returns:\n        int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a given number.\n    \n    Args:\n        n (int): The number to calculate the factorial for.\n    \n    Returns:\n        int: The factorial of the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)", "is_syntactically_valid": true}
{"task_id": 29, "generation": "def get_Odd_Occurrence(lst, n):\n    freq = {}\n    for element in lst:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    \n    for key, value in freq.items():\n        if value % 2 != 0:\n            return key", "is_syntactically_valid": true}
{"task_id": 30, "generation": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 31, "generation": "from heapq import nlargest\n\ndef func(arr, k):\n    count_dict = {}\n    for lst in arr:\n        for num in lst:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n    \n    return nlargest(k, count_dict, key=count_dict.get)", "is_syntactically_valid": true}
{"task_id": 32, "generation": "def max_Prime_Factors(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n\n# Test cases\nassert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2", "is_syntactically_valid": true}
{"task_id": 33, "generation": "def decimal_To_Binary(decimal):\n    return bin(decimal)[2:]", "is_syntactically_valid": true}
{"task_id": 34, "generation": "def find_missing(arr, n):\n    expected_sum = (n + 1) * (arr[0] + n) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum", "is_syntactically_valid": true}
{"task_id": 35, "generation": "def find_rect_num(n):\n    return n * (n + 1) // 2", "is_syntactically_valid": true}
{"task_id": 36, "generation": "def find_Nth_Digit(a, b, n):\n    # Calculate the proper fraction of a/b\n    fraction = a / b\n    \n    # Convert the fraction to a string and remove the leading '0.'\n    fraction_str = str(fraction)[2:]\n    \n    # Return the nth digit of the fraction\n    return int(fraction_str[n-1])", "is_syntactically_valid": true}
{"task_id": 37, "generation": "def sort_mixed_list(lst):\n    integers = []\n    strings = []\n    for item in lst:\n        if isinstance(item, int):\n            integers.append(item)\n        else:\n            strings.append(item)\n    integers.sort()\n    strings.sort()\n    return integers + strings", "is_syntactically_valid": true}
{"task_id": 38, "generation": "def div_even_odd(input_list):\n    even_num = next((num for num in input_list if num % 2 == 0), None)\n    odd_num = next((num for num in input_list if num % 2 != 0), None)\n    if even_num is None or odd_num is None:\n        return 0\n    return even_num / odd_num", "is_syntactically_valid": true}
{"task_id": 39, "generation": "from collections import Counter\n\ndef rearrange_string(s):\n    # Count the frequency of each character\n    char_count = Counter(s)\n    \n    # Sort the characters by their frequency in descending order\n    sorted_chars = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Iterate through the sorted characters\n    for char, count in sorted_chars:\n        # Add the character to the result string, alternating with other characters\n        result += char * count\n    \n    # Check if the resulting string satisfies the condition\n    for i in range(1, len(result)):\n        if result[i] == result[i-1]:\n            return \"\"\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 40, "generation": "from collections import Counter\n\ndef freq_element(lst):\n    freq = {}\n    for l in lst:\n        for item in l:\n            freq[item] = freq.get(item, 0) + 1\n    return freq", "is_syntactically_valid": true}
{"task_id": 41, "generation": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))", "is_syntactically_valid": true}
{"task_id": 42, "generation": "def find_Sum(arr, n):\n    count = 0\n    freq = {}\n    for num in arr:\n        if num in freq:\n            count += freq[num]\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return count", "is_syntactically_valid": true}
{"task_id": 43, "generation": "import re\n\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 44, "generation": "def text_match_string(text):\n    if text.strip().startswith(\"python\"):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"", "is_syntactically_valid": true}
{"task_id": 45, "generation": "from functools import reduce\n\ndef get_gcd(arr):\n    \"\"\"\n    Find the greatest common divisor (GCD) of the elements in the given array.\n    \n    Args:\n        arr (list): A list of integers.\n        \n    Returns:\n        int: The greatest common divisor of the elements in the array.\n    \"\"\"\n    return reduce(lambda x, y: gcd(x, y), arr)\n\ndef gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two integers.\n    \n    Args:\n        a (int): An integer.\n        b (int): Another integer.\n        \n    Returns:\n        int: The greatest common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a", "is_syntactically_valid": true}
{"task_id": 46, "generation": "def test_distinct(arr):\n    return len(set(arr)) == len(arr)", "is_syntactically_valid": true}
{"task_id": 47, "generation": "def compute_Last_Digit(a, b):\n    if a > b:\n        return pow(factorial(a), 1, factorial(b))\n    else:\n        return pow(factorial(b), 1, factorial(a))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "is_syntactically_valid": true}
{"task_id": 48, "generation": "def odd_bit_set_number(n):\n    \"\"\"\n    Set all odd bits of a given number.\n    \n    Args:\n        n (int): The input number.\n    \n    Returns:\n        int: The number with all odd bits set.\n    \"\"\"\n    return n | 0b10101010101010101010101010101010", "is_syntactically_valid": true}
{"task_id": 49, "generation": "def specified_element(arr, index):\n    return [row[index] for row in arr]", "is_syntactically_valid": true}
{"task_id": 50, "generation": "def min_length_list(lists):\n    return min([(len(l), l) for l in lists], key=lambda x: x[0])", "is_syntactically_valid": true}
{"task_id": 51, "generation": "def check_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False", "is_syntactically_valid": true}
{"task_id": 52, "generation": "def parallelogram_area(base, height):\n    return base * height", "is_syntactically_valid": true}
{"task_id": 53, "generation": "def check_Equality(string):\n    if len(string) < 2:\n        return \"Not Equal\"\n    elif string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "is_syntactically_valid": true}
{"task_id": 54, "generation": "def counting_sort(arr):\n    # Find the maximum element in the array\n    max_element = max(arr)\n\n    # Initialize count array as 0\n    count = [0] * (max_element + 1)\n\n    # Store count of each element\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Store cumulative count\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Find the index of each element of the original array in count array\n    # and place the elements in output array\n    output_array = [0] * len(arr)\n    i = len(arr) - 1\n    while i >= 0:\n        output_array[count[arr[i]] - 1] = arr[i]\n        count[arr[i]] -= 1\n        i -= 1\n\n    return output_array", "is_syntactically_valid": true}
{"task_id": 55, "generation": "def tn_gp(a, r, n):\n    \"\"\"\n    Find the n-th term of a geometric series.\n    \n    Args:\n    a (int): The first term of the geometric series.\n    r (int): The common ratio of the geometric series.\n    n (int): The index of the term to find.\n    \n    Returns:\n    int: The n-th term of the geometric series.\n    \"\"\"\n    return a * (r ** (n - 1))", "is_syntactically_valid": true}
{"task_id": 56, "generation": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "is_syntactically_valid": true}
{"task_id": 57, "generation": "def find_Max_Num(digits, n):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))", "is_syntactically_valid": true}
{"task_id": 58, "generation": "def opposite_Signs(a, b):\n    return (a < 0 and b > 0) or (a > 0 and b < 0)", "is_syntactically_valid": true}
{"task_id": 59, "generation": "def is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)", "is_syntactically_valid": true}
{"task_id": 60, "generation": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 61, "generation": "def count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 62, "generation": "def smallest_num(numbers):\n    return min(numbers)", "is_syntactically_valid": true}
{"task_id": 63, "generation": "def max_difference(pairs):\n    max_diff = 0\n    for a, b in pairs:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "is_syntactically_valid": true}
{"task_id": 64, "generation": "def subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 65, "generation": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "is_syntactically_valid": true}
{"task_id": 66, "generation": "def pos_count(nums):\n    return sum(1 for num in nums if num > 0)", "is_syntactically_valid": true}
{"task_id": 67, "generation": "from math import factorial\n\ndef bell_number(n):\n    \"\"\"\n    Calculates the Bell number, which represents the number of ways to partition a set of n elements.\n    \"\"\"\n    return sum(factorial(n) // (factorial(k) * factorial(n-k)) for k in range(n+1))", "is_syntactically_valid": true}
{"task_id": 68, "generation": "def is_Monotonic(arr):\n    is_increasing = all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    is_decreasing = all(arr[i] >= arr[i+1] for i in range(len(arr)-1))\n    return is_increasing or is_decreasing", "is_syntactically_valid": true}
{"task_id": 69, "generation": "def is_sublist(lst, sub_lst):\n    for i in range(len(lst) - len(sub_lst) + 1):\n        if lst[i:i+len(sub_lst)] == sub_lst:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 70, "generation": "def get_equal(tuples, expected_length):\n    for t in tuples:\n        if len(t) != expected_length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'", "is_syntactically_valid": true}
{"task_id": 71, "generation": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    swaps = True\n\n    while gap > 1 or swaps:\n        gap = max(1, int(gap / 1.25))\n        swaps = False\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swaps = True\n    return arr", "is_syntactically_valid": true}
{"task_id": 72, "generation": "def dif_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        j = n - i**2\n        if j >= 0 and int(j**0.5)**2 == j:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 73, "generation": "import re\n\ndef multiple_split(text):\n    return re.split(r'[\\*\\n]', text)", "is_syntactically_valid": true}
{"task_id": 74, "generation": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_to_pattern = {}\n    pattern_to_color = {}\n    \n    for i in range(len(colors)):\n        color = colors[i]\n        pattern = patterns[i]\n        \n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        \n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 75, "generation": "def find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 76, "generation": "def count_Squares(length, width):\n    return (length * width) + (length - 1) * (width - 1)", "is_syntactically_valid": true}
{"task_id": 77, "generation": "def is_Diff(num):\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return abs(even_sum - odd_sum) > 0", "is_syntactically_valid": true}
{"task_id": 78, "generation": "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 == 1:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 79, "generation": "def word_len(word):\n    return len(word) % 2 != 0", "is_syntactically_valid": true}
{"task_id": 80, "generation": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6", "is_syntactically_valid": true}
{"task_id": 81, "generation": "def zip_tuples(t1, t2):\n    result = []\n    for i in range(max(len(t1), len(t2))):\n        result.append((t1[i % len(t1)], t2[i % len(t2)]))\n    return result", "is_syntactically_valid": true}
{"task_id": 82, "generation": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)", "is_syntactically_valid": true}
{"task_id": 83, "generation": "def get_Char(string):\n    total = 0\n    for char in string:\n        total += ord(char)\n    return chr(total % 26 + 97)", "is_syntactically_valid": true}
{"task_id": 84, "generation": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    a, b = 1, 2\n    for i in range(3, n+1):\n        a, b = b, a + b\n    \n    return b", "is_syntactically_valid": true}
{"task_id": 85, "generation": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * (radius ** 2)", "is_syntactically_valid": true}
{"task_id": 86, "generation": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)", "is_syntactically_valid": true}
{"task_id": 87, "generation": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = {**dict1, **dict2, **dict3}\n    return result", "is_syntactically_valid": true}
{"task_id": 88, "generation": "def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq", "is_syntactically_valid": true}
{"task_id": 89, "generation": "def closest_num(n):\n    return n - 1 if n > 0 else None", "is_syntactically_valid": true}
{"task_id": 90, "generation": "def len_log(arr):\n    return max(len(word) for word in arr)", "is_syntactically_valid": true}
{"task_id": 91, "generation": "def find_substring(strings, substring):\n    for s in strings:\n        if substring in s:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 92, "generation": "def is_undulating(num_str):\n    num_list = [int(digit) for digit in num_str]\n    for i in range(1, len(num_list)):\n        if num_list[i] != num_list[i-1] + 1 and num_list[i] != num_list[i-1] - 1:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 93, "generation": "def power(a, b):\n    return a ** b", "is_syntactically_valid": true}
{"task_id": 94, "generation": "def index_minimum(records):\n    min_index = 0\n    min_value = records[0][1]\n    for i in range(1, len(records)):\n        if records[i][1] < min_value:\n            min_index = i\n            min_value = records[i][1]\n    return records[min_index][0]", "is_syntactically_valid": true}
{"task_id": 95, "generation": "def Find_Min_Length(lists):\n    min_length = float('inf')\n    for lst in lists:\n        min_length = min(min_length, len(lst))\n    return min_length", "is_syntactically_valid": true}
{"task_id": 96, "generation": "def divisor(num):\n    count = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 97, "generation": "def frequency_lists(lst):\n    freq = {}\n    for l in lst:\n        for i in l:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n    return freq", "is_syntactically_valid": true}
{"task_id": 98, "generation": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)", "is_syntactically_valid": true}
{"task_id": 99, "generation": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return binary", "is_syntactically_valid": true}
{"task_id": 100, "generation": "def next_smallest_palindrome(num):\n    num_str = str(num)\n    length = len(num_str)\n    \n    # Handle single-digit numbers\n    if length == 1:\n        return num + 1\n    \n    # Handle even-length numbers\n    if length % 2 == 0:\n        left_half = num_str[:length//2]\n        right_half = num_str[length//2:][::-1]\n        if right_half > left_half:\n            return int(left_half + right_half)\n        else:\n            carry = 1\n            new_left_half = ''\n            for i in range(length//2-1, -1, -1):\n                digit = int(num_str[i]) + carry\n                carry = digit // 10\n                new_left_half = str(digit % 10) + new_left_half\n            return int(new_left_half + new_left_half[::-1])\n    \n    # Handle odd-length numbers\n    else:\n        left_half = num_str[:length//2]\n        middle = num_str[length//2]\n        right_half = num_str[length//2+1:][::-1]\n        if right_half > left_half:\n            return int(left_half + middle + right_half)\n        else:\n            carry = 1\n            new_left_half = ''\n            for i in range(length//2-1, -1, -1):\n                digit = int(num_str[i]) + carry\n                carry = digit // 10\n                new_left_half = str(digit % 10) + new_left_half\n            new_middle = str(int(middle) + carry)\n            return int(new_left_half + new_middle + new_left_half[::-1])", "is_syntactically_valid": true}
{"task_id": 101, "generation": "def kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]", "is_syntactically_valid": true}
{"task_id": 102, "generation": "def snake_to_camel(string):\n    words = string.split('_')\n    camel_case = ''.join(word.capitalize() for word in words)\n    return camel_case", "is_syntactically_valid": true}
{"task_id": 103, "generation": "def eulerian_num(n, m):\n    \"\"\"\n    Calculates the Eulerian number a(n, m).\n    \n    Args:\n        n (int): The total number of elements.\n        m (int): The number of elements to be chosen.\n        \n    Returns:\n        int: The Eulerian number a(n, m).\n    \"\"\"\n    if m == 0 or m == n:\n        return 1\n    if m == 1 or m == n-1:\n        return n\n    \n    return (m * eulerian_num(n-1, m-1)) + ((n-m+1) * eulerian_num(n-1, m))", "is_syntactically_valid": true}
{"task_id": 104, "generation": "def sort_sublists(lst):\n    return [sorted(sub_list, key=lambda x: x.strip()) for sub_list in lst]", "is_syntactically_valid": true}
{"task_id": 105, "generation": "def count(lst):\n    return sum(1 for item in lst if item)", "is_syntactically_valid": true}
{"task_id": 106, "generation": "def add_lists(input_list, input_tuple):\n    return input_tuple + tuple(input_list)", "is_syntactically_valid": true}
{"task_id": 107, "generation": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end+1):\n        if hex(num)[2:].isalnum():\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 108, "generation": "from heapq import heappush, heappop\n\ndef merge_sorted_list(*iterables):\n    heap = []\n    for iterable in iterables:\n        for item in iterable:\n            heappush(heap, item)\n    \n    result = []\n    while heap:\n        result.append(heappop(heap))\n    return result", "is_syntactically_valid": true}
{"task_id": 109, "generation": "def odd_Equivalent(binary_string, n):\n    count = 0\n    for i in range(n):\n        odd_count = 0\n        for j in range(i, n):\n            if binary_string[j] == '1':\n                odd_count += 1\n            if odd_count % 2 == 1:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 110, "generation": "def extract_missing(ranges, start, end):\n    result = []\n    prev_end = start\n    for start_range, end_range in ranges:\n        if start_range > prev_end:\n            result.append((prev_end, start_range))\n        prev_end = max(prev_end, end_range)\n    if prev_end < end:\n        result.append((prev_end, end))\n    return result", "is_syntactically_valid": true}
{"task_id": 111, "generation": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements &= set(lst)\n    return sorted(list(common_elements))", "is_syntactically_valid": true}
{"task_id": 112, "generation": "import math\n\ndef perimeter(radius, height):\n    \"\"\"\n    Calculates the perimeter of a cylinder.\n    \n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n    \n    Returns:\n        float: The perimeter of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius + 2 * height", "is_syntactically_valid": true}
{"task_id": 113, "generation": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "is_syntactically_valid": true}
{"task_id": 114, "generation": "from collections import Counter\n\ndef assign_freq(tuples):\n    result = []\n    for t in tuples:\n        freq = Counter(t)\n        result.append((*t, freq[t]))\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 115, "generation": "def empty_dit(lst):\n    if isinstance(lst, dict):\n        return len(lst) == 0\n    elif isinstance(lst, list):\n        return all(len(d) == 0 for d in lst)\n    else:\n        raise TypeError(\"Input must be a list or a dictionary\")", "is_syntactically_valid": true}
{"task_id": 116, "generation": "def tuple_to_int(tup):\n    result = 0\n    for digit in tup:\n        result = result * 10 + digit\n    return result", "is_syntactically_valid": true}
{"task_id": 117, "generation": "def list_to_float(lst):\n    result = []\n    for item in lst:\n        x, y = item\n        try:\n            x = float(x)\n        except ValueError:\n            pass\n        try:\n            y = float(y)\n        except ValueError:\n            pass\n        result.append((x, y))\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 118, "generation": "def string_to_list(string):\n    return string.split()", "is_syntactically_valid": true}
{"task_id": 119, "generation": "def search(arr, n):\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        if left == right:\n            return arr[left]\n\n        mid = (left + right) // 2\n\n        if mid > 0 and arr[mid] == arr[mid - 1]:\n            if (mid - left) % 2 == 0:\n                left = mid + 1\n            else:\n                right = mid - 2\n        elif mid < n - 1 and arr[mid] == arr[mid + 1]:\n            if (right - mid) % 2 == 0:\n                right = mid - 1\n            else:\n                left = mid + 2\n        else:\n            return arr[mid]", "is_syntactically_valid": true}
{"task_id": 120, "generation": "def max_product_tuple(tuples):\n    max_product = 0\n    for a, b in tuples:\n        product = a * b\n        if product > max_product:\n            max_product = product\n    return max_product", "is_syntactically_valid": true}
{"task_id": 121, "generation": "def check_triplet(arr, target_sum, target_product, target_diff):\n    n = len(arr)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target_sum and arr[i] * arr[j] * arr[k] == target_product and abs(arr[i] - arr[j]) == target_diff:\n                    return True\n    return False", "is_syntactically_valid": true}
{"task_id": 122, "generation": "def smartNumber(n):\n    \"\"\"\n    Find the n'th smart number.\n    \n    A smart number is a number that is the sum of the squares of its digits.\n    \"\"\"\n    i = 1\n    while True:\n        num = i\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit ** 2\n            num //= 10\n        if total == i:\n            n -= 1\n            if n == 0:\n                return i\n        i += 1", "is_syntactically_valid": true}
{"task_id": 123, "generation": "def amicable_numbers_sum(n):\n    def divisor_sum(x):\n        return sum(i for i in range(1, x) if x % i == 0)\n\n    amicable_sum = 0\n    for i in range(1, n+1):\n        j = divisor_sum(i)\n        if i != j and divisor_sum(j) == i:\n            amicable_sum += i\n    return amicable_sum", "is_syntactically_valid": true}
{"task_id": 124, "generation": "import math\n\ndef angle_complex(real, imag):\n    return math.atan2(imag, real)", "is_syntactically_valid": true}
{"task_id": 125, "generation": "def find_length(binary_string, n):\n    max_diff = 0\n    curr_diff = 0\n    \n    for i in range(n):\n        if binary_string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, curr_diff)\n    \n    return max_diff", "is_syntactically_valid": true}
{"task_id": 126, "generation": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef sum(a, b):\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)", "is_syntactically_valid": true}
{"task_id": 127, "generation": "def multiply_int(a, b):\n    result = 0\n    while b > 0:\n        if b & 1:\n            result += a\n        a <<= 1\n        b >>= 1\n    return result", "is_syntactically_valid": true}
{"task_id": 128, "generation": "def long_words(n, text):\n    words = text.split()\n    return [word for word in words if len(word) > n]", "is_syntactically_valid": true}
{"task_id": 129, "generation": "def magic_square_test(arr):\n    # Check if the input is a square matrix\n    n = len(arr)\n    if len(arr[0]) != n:\n        return False\n\n    # Calculate the expected sum of each row, column, and diagonal\n    expected_sum = n * (n**2 + 1) // 2\n\n    # Check if the sum of each row, column, and diagonal is equal to the expected sum\n    for i in range(n):\n        # Check rows\n        if sum(arr[i]) != expected_sum:\n            return False\n\n        # Check columns\n        if sum(arr[j][i] for j in range(n)) != expected_sum:\n            return False\n\n    # Check diagonals\n    if sum(arr[i][i] for i in range(n)) != expected_sum:\n        return False\n    if sum(arr[i][n-i-1] for i in range(n)) != expected_sum:\n        return False\n\n    return True", "is_syntactically_valid": true}
{"task_id": 130, "generation": "def max_occurrences(lst):\n    count = {}\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    \n    max_count = 0\n    max_item = None\n    for item, c in count.items():\n        if c > max_count:\n            max_count = c\n            max_item = item\n    \n    return max_item, max_count", "is_syntactically_valid": true}
{"task_id": 131, "generation": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] in vowels and s_list[j] in vowels:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n        elif s_list[i] in vowels:\n            j -= 1\n        else:\n            i += 1\n    return ''.join(s_list)", "is_syntactically_valid": true}
{"task_id": 132, "generation": "def tup_string(tup):\n    return ''.join(tup)", "is_syntactically_valid": true}
{"task_id": 133, "generation": "def sum_negativenum(nums):\n    return sum(filter(lambda x: x < 0, nums))", "is_syntactically_valid": true}
{"task_id": 134, "generation": "def check_last(arr, p, k):\n    for _ in range(p):\n        arr = [abs(x - k) for x in arr]\n    if arr[-1] % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"", "is_syntactically_valid": true}
{"task_id": 135, "generation": "def hexagonal_num(n):\n    return n * (2 * n - 1)", "is_syntactically_valid": true}
{"task_id": 136, "generation": "def cal_electbill(units):\n    if units <= 100:\n        return units * 3.5\n    elif units <= 300:\n        return 350 + (units - 100) * 4.5\n    else:\n        return 1050 + (units - 300) * 6.5", "is_syntactically_valid": true}
{"task_id": 137, "generation": "def zero_count(arr):\n    zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(arr)", "is_syntactically_valid": true}
{"task_id": 138, "generation": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    \n    while n % 2 == 0:\n        n //= 2\n    \n    return n == 1", "is_syntactically_valid": true}
{"task_id": 139, "generation": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius", "is_syntactically_valid": true}
{"task_id": 140, "generation": "def extract_singly(tuples):\n    result = []\n    for t in tuples:\n        for x in t:\n            if t.count(x) == 1:\n                result.append(x)\n    return result", "is_syntactically_valid": true}
{"task_id": 141, "generation": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n, 0, -1):\n        max_index = arr.index(i)\n        arr[:max_index + 1] = reversed(arr[:max_index + 1])\n        arr[:i] = reversed(arr[:i])\n    return arr", "is_syntactically_valid": true}
{"task_id": 142, "generation": "def count_samepair(list1, list2, list3):\n    count = 0\n    for item in set(list1):\n        if item in list2 and item in list3:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 143, "generation": "def find_lists(tup):\n    return len(tup)", "is_syntactically_valid": true}
{"task_id": 144, "generation": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum", "is_syntactically_valid": true}
{"task_id": 145, "generation": "def max_Abs_Diff(arr, n):\n    return max(arr) - min(arr)", "is_syntactically_valid": true}
{"task_id": 146, "generation": "def ascii_value_string(string):\n    return sum(ord(char) for char in string)", "is_syntactically_valid": true}
{"task_id": 147, "generation": "def max_path_sum(triangle, row, col):\n    if row == len(triangle) - 1:\n        return triangle[row][col]\n    \n    left_sum = max_path_sum(triangle, row + 1, col)\n    right_sum = max_path_sum(triangle, row + 1, col + 1)\n    \n    return triangle[row][col] + max(left_sum, right_sum)", "is_syntactically_valid": true}
{"task_id": 148, "generation": "def sum_digits_twoparts(num):\n    num_str = str(num)\n    max_sum = 0\n    for i in range(1, len(num_str)):\n        part1 = int(num_str[:i])\n        part2 = int(num_str[i:])\n        current_sum = sum(int(digit) for digit in str(part1)) + sum(int(digit) for digit in str(part2))\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum", "is_syntactically_valid": true}
{"task_id": 149, "generation": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 150, "generation": "def does_Contain_B(a, b, c):\n    n = 0\n    while True:\n        num = a * n**2 + b * n + c\n        if num == b:\n            return True\n        elif num > b:\n            return False\n        n += 1", "is_syntactically_valid": true}
{"task_id": 151, "generation": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef is_coprime(a, b):\n    return gcd(a, b) == 1\n\nassert is_coprime(17, 13) == True\nassert is_coprime(15, 21) == False\nassert is_coprime(25, 45) == False", "is_syntactically_valid": true}
{"task_id": 152, "generation": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n\n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n    return result", "is_syntactically_valid": true}
{"task_id": 153, "generation": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return (x, y)", "is_syntactically_valid": true}
{"task_id": 154, "generation": "def specified_element(matrix, index):\n    result = []\n    for row in matrix:\n        result.append(row[index])\n    return result", "is_syntactically_valid": true}
{"task_id": 155, "generation": "def even_bit_toggle_number(num):\n    \"\"\"\n    Toggles all even bits of a given number.\n    \"\"\"\n    return num ^ (0b10101010101010101010101010101010 & num)", "is_syntactically_valid": true}
{"task_id": 156, "generation": "def tuple_int_str(tuples):\n    return tuple(tuple(int(x) for x in t) for t in tuples)", "is_syntactically_valid": true}
{"task_id": 157, "generation": "def encode_list(lst):\n    encoded = []\n    prev_item = None\n    count = 0\n    for item in lst:\n        if item != prev_item:\n            if prev_item is not None:\n                encoded.append([count, prev_item])\n            count = 1\n            prev_item = item\n        else:\n            count += 1\n    encoded.append([count, prev_item])\n    return encoded", "is_syntactically_valid": true}
{"task_id": 158, "generation": "def min_Ops(arr, n, k):\n    if len(set(arr)) == 1:\n        return 0\n    \n    if k >= n:\n        return -1\n    \n    total_ops = 0\n    while True:\n        max_val = max(arr)\n        min_val = min(arr)\n        if max_val - min_val <= k:\n            return total_ops\n        \n        diff = max_val - min_val\n        for i in range(n):\n            if arr[i] == max_val:\n                arr[i] -= k\n        total_ops += diff // k", "is_syntactically_valid": true}
{"task_id": 159, "generation": "def month_season(month, day):\n    seasons = {\n        'winter': (12, 1, 2),\n        'spring': (3, 4, 5),\n        'summer': (6, 7, 8),\n        'autumn': (9, 10, 11)\n    }\n    \n    for season, months in seasons.items():\n        if month.lower() in [m.lower() for m in [calendar.month_name[m] for m in months]]:\n            if month.lower() == 'december' and day >= 21 or month.lower() == 'january' and day <= 20 or month.lower() == 'february' and day <= 20:\n                return 'winter'\n            elif month.lower() == 'march' and day >= 21 or month.lower() == 'april' or month.lower() == 'may':\n                return 'spring'\n            elif month.lower() == 'june' and day >= 21 or month.lower() == 'july' or month.lower() == 'august':\n                return 'summer'\n            elif month.lower() == 'september' or month.lower() == 'october' or month.lower() == 'november':\n                return 'autumn'", "is_syntactically_valid": true}
{"task_id": 160, "generation": "def solution(a, b, n):\n    for x in range(n//a + 1):\n        for y in range(n//b + 1):\n            if a*x + b*y == n:\n                return ('x = ', x, ', y = ', y)\n    return 'No solution'", "is_syntactically_valid": true}
{"task_id": 161, "generation": "def remove_elements(lst1, lst2):\n    return [item for item in lst1 if item not in lst2]", "is_syntactically_valid": true}
{"task_id": 162, "generation": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total", "is_syntactically_valid": true}
{"task_id": 163, "generation": "import math\n\ndef area_polygon(n, s):\n    \"\"\"\n    Calculates the area of a regular polygon.\n\n    Args:\n        n (int): The number of sides of the polygon.\n        s (float): The length of each side of the polygon.\n\n    Returns:\n        float: The area of the regular polygon.\n    \"\"\"\n    return (n * s**2) / (4 * math.tan(math.pi / n))", "is_syntactically_valid": true}
{"task_id": 164, "generation": "def areEquivalent(num1, num2):\n    def sum_of_divisors(n):\n        divisors = [i for i in range(1, n+1) if n % i == 0]\n        return sum(divisors)\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)", "is_syntactically_valid": true}
{"task_id": 165, "generation": "def count_char_position(string):\n    count = 0\n    for i, char in enumerate(string):\n        if char.isalpha() and char.lower() == string[i].lower():\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 166, "generation": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 167, "generation": "def next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1).bit_length()", "is_syntactically_valid": true}
{"task_id": 168, "generation": "def frequency(arr, num):\n    count = 0\n    for n in arr:\n        if n == num:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 169, "generation": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2)", "is_syntactically_valid": true}
{"task_id": 170, "generation": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])", "is_syntactically_valid": true}
{"task_id": 171, "generation": "def perimeter_pentagon(side_length):\n    return 5 * side_length", "is_syntactically_valid": true}
{"task_id": 172, "generation": "def count_occurance(string):\n    count = 0\n    for i in range(len(string) - 2):\n        if string[i:i+3] == 'std':\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 173, "generation": "import re\n\ndef remove_splchar(text):\n    return ''.join(char for char in text if char.isalnum())", "is_syntactically_valid": true}
{"task_id": 174, "generation": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result", "is_syntactically_valid": true}
{"task_id": 175, "generation": "def is_valid_parenthese(s):\n    stack = []\n    pairs = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for char in s:\n        if char in pairs:\n            stack.append(char)\n        elif char in pairs.values():\n            if not stack or pairs[stack.pop()] != char:\n                return False\n    return len(stack) == 0", "is_syntactically_valid": true}
{"task_id": 176, "generation": "def perimeter_triangle(a, b, c):\n    return a + b + c", "is_syntactically_valid": true}
{"task_id": 177, "generation": "from math import gcd\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\ndef answer(n, m):\n    for i in range(n, m+1):\n        for j in range(i+1, m+1):\n            if lcm(i, j) >= n and lcm(i, j) <= m:\n                return (i, j)\n    return None\n\n# Test cases\nassert answer(3, 8) == (3, 6)\nassert answer(2, 6) == (2, 4)\nassert answer(1, 3) == (1, 2)", "is_syntactically_valid": true}
{"task_id": 178, "generation": "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return \"Matched!\"\n    return \"Not Matched!\"", "is_syntactically_valid": true}
{"task_id": 179, "generation": "def is_num_keith(n):\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Get the length of the number\n    length = len(num_str)\n    \n    # Initialize the sequence with the digits of the number\n    sequence = [int(digit) for digit in num_str]\n    \n    # Check if the number is a Keith number\n    for i in range(length, n):\n        next_term = sum(sequence[-length:])\n        if next_term == i:\n            sequence.append(next_term)\n        else:\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 180, "generation": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371  # Earth's radius in kilometers\n    phi1 = math.radians(lat1)\n    phi2 = math.radians(lat2)\n    delta_phi = math.radians(lat2 - lat1)\n    delta_lambda = math.radians(lon2 - lon1)\n\n    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c", "is_syntactically_valid": true}
{"task_id": 181, "generation": "def common_prefix(strings, n):\n    if not strings:\n        return \"\"\n\n    prefix = strings[0]\n    for i in range(1, n):\n        while prefix and not strings[i].startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n\n    return prefix", "is_syntactically_valid": true}
{"task_id": 182, "generation": "import re\n\ndef find_character(input_string):\n    uppercase_chars = re.findall(r'[A-Z]', input_string)\n    lowercase_chars = re.findall(r'[a-z]', input_string)\n    special_chars = re.findall(r'[^A-Za-z0-9]', input_string)\n    numeric_chars = re.findall(r'\\d', input_string)\n    return (uppercase_chars, lowercase_chars, special_chars, numeric_chars)", "is_syntactically_valid": true}
{"task_id": 183, "generation": "def count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 184, "generation": "def greater_specificnum(arr, num):\n    for value in arr:\n        if value > num:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 185, "generation": "import math\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Find the focus of a parabola.\n    \n    Parameters:\n    a (float): The coefficient of x^2 in the parabolic equation.\n    b (float): The coefficient of x in the parabolic equation.\n    c (float): The constant term in the parabolic equation.\n    \n    Returns:\n    tuple: The coordinates of the focus of the parabola.\n    \"\"\"\n    x_focus = -b / (2 * a)\n    y_focus = c - (b**2 / (4 * a))\n    return (x_focus, y_focus)", "is_syntactically_valid": true}
{"task_id": 186, "generation": "import re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(literal, text):\n            return \"Matched!\"\n    return \"Not Matched!\"", "is_syntactically_valid": true}
{"task_id": 187, "generation": "def longest_common_subsequence(s1, s2, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]", "is_syntactically_valid": true}
{"task_id": 188, "generation": "def prod_Square(n):\n    # Check if the number is a perfect square\n    power = 1\n    while power * power <= n:\n        if power * power == n:\n            return True\n        power += 1\n\n    # Check if the number can be represented as a product of two squares\n    for i in range(1, int(n ** 0.5) + 1):\n        j = n // i\n        if i * i + j * j == n:\n            return True\n\n    return False", "is_syntactically_valid": true}
{"task_id": 189, "generation": "def first_Missing_Positive(lst, n):\n    # Create a set of the elements in the list\n    num_set = set(lst)\n    \n    # Find the first missing positive number\n    for i in range(1, n+1):\n        if i not in num_set:\n            return i\n    \n    # If all positive numbers from 1 to n are present, return n+1\n    return n+1", "is_syntactically_valid": true}
{"task_id": 190, "generation": "def count_Intgral_Points(x1, y1, x2, y2):\n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x.is_integer() and y.is_integer():\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 191, "generation": "def check_monthnumber(month_name):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    if month_name in thirty_day_months:\n        return True\n    elif month_name == \"February\":\n        return False\n    else:\n        return True", "is_syntactically_valid": true}
{"task_id": 192, "generation": "def check_String(string):\n    has_letter = False\n    has_number = False\n    for char in string:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 193, "generation": "def remove_tuple(tup):\n    return tuple(set(tup))", "is_syntactically_valid": true}
{"task_id": 194, "generation": "def octal_To_Decimal(octal_num):\n    decimal_num = 0\n    for digit in str(octal_num):\n        decimal_num = decimal_num * 8 + int(digit)\n    return decimal_num", "is_syntactically_valid": true}
{"task_id": 195, "generation": "def first(arr, target, n):\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "is_syntactically_valid": true}
{"task_id": 196, "generation": "def remove_tuples(tuples, k):\n    return [t for t in tuples if len(t) != k]", "is_syntactically_valid": true}
{"task_id": 197, "generation": "def find_exponentio(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(t1[i] ** t2[i])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 198, "generation": "import math\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Find the largest triangle that can be inscribed in an ellipse.\n    \n    Args:\n        a (float): The semi-major axis of the ellipse.\n        b (float): The semi-minor axis of the ellipse.\n    \n    Returns:\n        float: The area of the largest inscribed triangle.\n    \"\"\"\n    # Calculate the maximum area of the inscribed triangle\n    area = (4 * a * b) / 3\n    return area\n\n# Test cases\nassert largest_triangle(4, 2) == 10.392304845413264\nassert largest_triangle(5, 7) == 4.639421805988064\nassert largest_triangle(9, 1) == 105.2220865598093", "is_syntactically_valid": true}
{"task_id": 199, "generation": "def highest_Power_of_2(num):\n    \"\"\"\n    Find the highest power of 2 less than or equal to the given number.\n    \"\"\"\n    power = 1\n    while power <= num:\n        power *= 2\n    return power // 2", "is_syntactically_valid": true}
{"task_id": 200, "generation": "def position_max(lst):\n    max_value = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_value]", "is_syntactically_valid": true}
{"task_id": 201, "generation": "def chkList(lst):\n    if len(lst) == 0:\n        return True\n    first_element = lst[0]\n    for element in lst:\n        if element != first_element:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 202, "generation": "def remove_even(string):\n    return ''.join(char for i, char in enumerate(string) if i % 2 != 0)", "is_syntactically_valid": true}
{"task_id": 203, "generation": "def hamming_Distance(a, b):\n    \"\"\"\n    Calculates the Hamming distance between two integers.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n    \n    Returns:\n        int: The Hamming distance between the two integers.\n    \"\"\"\n    return bin(a ^ b).count('1')", "is_syntactically_valid": true}
{"task_id": 204, "generation": "def count(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 205, "generation": "def inversion_elements(tup):\n    return tuple(-x for x in tup)", "is_syntactically_valid": true}
{"task_id": 206, "generation": "def concatenate_elements(tuples):\n    result = []\n    for i in range(len(tuples) - 1):\n        result.append(tuples[i] + tuples[i + 1])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 207, "generation": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j] and l > 2:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]", "is_syntactically_valid": true}
{"task_id": 208, "generation": "import re\n\ndef is_decimal(num_str):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num_str))", "is_syntactically_valid": true}
{"task_id": 209, "generation": "import heapq\n\ndef heap_replace(heap, new_item):\n    heapq.heapify(heap)\n    smallest = heapq.heappop(heap)\n    heapq.heappush(heap, new_item)\n    return sorted(heap)", "is_syntactically_valid": true}
{"task_id": 210, "generation": "import re\n\ndef is_allowed_specific_char(string):\n    pattern = r'^[a-zA-Z0-9]*$'\n    return bool(re.match(pattern, string))", "is_syntactically_valid": true}
{"task_id": 211, "generation": "def count_Num(n):\n    count = 0\n    for i in range(n+1):\n        if (i & (1 << 0)) and (i & (1 << (n-1))):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 212, "generation": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))", "is_syntactically_valid": true}
{"task_id": 213, "generation": "def concatenate_strings(names, suffixes):\n    result = []\n    for i in range(len(names)):\n        result.append(names[i] + suffixes[i])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 214, "generation": "import math\n\ndef degree_radian(radians):\n    return radians * (180 / math.pi)", "is_syntactically_valid": true}
{"task_id": 215, "generation": "def decode_list(encoded_list):\n    decoded_list = []\n    for item in encoded_list:\n        if isinstance(item, list):\n            decoded_list.extend([item[1]] * item[0])\n        else:\n            decoded_list.append(item)\n    return decoded_list", "is_syntactically_valid": true}
{"task_id": 216, "generation": "def check_subset_list(main_list, sub_lists):\n    for sub_list in sub_lists:\n        if set(sub_list) <= set(sum(main_list, [])):\n            continue\n        else:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 217, "generation": "def first_Repeated_Char(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return '\\0'", "is_syntactically_valid": true}
{"task_id": 218, "generation": "def min_Operations(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return a - b\n    else:\n        return b - a", "is_syntactically_valid": true}
{"task_id": 219, "generation": "def extract_min_max(tup, k):\n    tup = sorted(tup)\n    return tup[:k] + tup[-k:]", "is_syntactically_valid": true}
{"task_id": 220, "generation": "def replace_max_specialchar(text, n):\n    special_chars = [' ', ',', '.']\n    result = ''\n    count = 0\n    for char in text:\n        if char in special_chars:\n            if count < n:\n                result += ':'\n                count += 1\n            else:\n                result += char\n        else:\n            result += char\n    return result", "is_syntactically_valid": true}
{"task_id": 221, "generation": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None", "is_syntactically_valid": true}
{"task_id": 222, "generation": "def check_type(tup):\n    data_type = type(tup[0])\n    for item in tup:\n        if type(item) != data_type:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 223, "generation": "def is_majority(arr, n, x):\n    # Find the first occurrence of x\n    left = 0\n    while left < n and arr[left] != x:\n        left += 1\n\n    # If x is not present in arr, return False\n    if left == n:\n        return False\n\n    # Check if the count of x is more than n/2\n    return arr.count(x) > n // 2", "is_syntactically_valid": true}
{"task_id": 224, "generation": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "is_syntactically_valid": true}
{"task_id": 225, "generation": "def find_Min(arr, low, high):\n    if low > high:\n        return arr[0]\n\n    if low == high:\n        return arr[low]\n\n    mid = low + (high - low) // 2\n\n    if mid > 0 and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[mid] >= arr[low]:\n        return find_Min(arr, mid + 1, high)\n    else:\n        return find_Min(arr, low, mid - 1)", "is_syntactically_valid": true}
{"task_id": 226, "generation": "def odd_values_string(input_string):\n    result = \"\"\n    for i, char in enumerate(input_string):\n        if i % 2 == 0:\n            result += char\n    return result", "is_syntactically_valid": true}
{"task_id": 227, "generation": "def min_of_three(a, b, c):\n    return min(a, b, c)", "is_syntactically_valid": true}
{"task_id": 228, "generation": "def all_Bits_Set_In_The_Given_Range(num, start, end):\n    mask = (1 << (end - start + 1)) - 1\n    return (num & (mask << start)) == (mask << start)", "is_syntactically_valid": true}
{"task_id": 229, "generation": "def re_arrange_array(arr, n):\n    negative = [x for x in arr if x < 0]\n    positive = [x for x in arr if x >= 0]\n    return negative + positive", "is_syntactically_valid": true}
{"task_id": 230, "generation": "def replace_blank(string, char):\n    return string.replace(\" \", char)", "is_syntactically_valid": true}
{"task_id": 231, "generation": "def max_sum(triangle, n):\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "is_syntactically_valid": true}
{"task_id": 232, "generation": "def larg_nnum(dataset, n):\n    return sorted(dataset, reverse=True)[:n]", "is_syntactically_valid": true}
{"task_id": 233, "generation": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n    \n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n    \n    Returns:\n        float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height", "is_syntactically_valid": true}
{"task_id": 234, "generation": "def volume_cube(side_length):\n    return side_length ** 3", "is_syntactically_valid": true}
{"task_id": 235, "generation": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n    \"\"\"\n    return n | 0b10101010101010101010101010101010", "is_syntactically_valid": true}
{"task_id": 236, "generation": "def No_of_Triangle(a, n):\n    if n < 1:\n        return -1\n    \n    max_triangles = 0\n    side_length = a // n\n    \n    if side_length < 1:\n        return -1\n    \n    for i in range(1, n+1):\n        max_triangles += (n - i + 1) ** 2\n    \n    return max_triangles", "is_syntactically_valid": true}
{"task_id": 237, "generation": "from collections import Counter\n\ndef check_occurences(records):\n    result = {}\n    for record in records:\n        key = tuple(sorted(record))\n        if key in result:\n            result[key] += 1\n        else:\n            result[key] = 1\n    return result", "is_syntactically_valid": true}
{"task_id": 238, "generation": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1]:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 239, "generation": "def get_total_number_of_sequences(n, m):\n    \"\"\"\n    Find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    \"\"\"\n    def helper(i, prev):\n        if i == n:\n            return 1\n        count = 0\n        for x in range(max(2 * prev, 1), m + 1):\n            count += helper(i + 1, x)\n        return count\n\n    return helper(1, 1)", "is_syntactically_valid": true}
{"task_id": 240, "generation": "def replace_list(lst, new_lst):\n    return lst[:-1] + new_lst", "is_syntactically_valid": true}
{"task_id": 241, "generation": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]", "is_syntactically_valid": true}
{"task_id": 242, "generation": "def count_charac(string):\n    return len(string)", "is_syntactically_valid": true}
{"task_id": 243, "generation": "def sort_on_occurence(lst):\n    result = []\n    count = {}\n    for item in lst:\n        key = item[0]\n        if key in count:\n            count[key][1] += 1\n        else:\n            count[key] = [item, 1]\n    for _, v in sorted(count.values(), key=lambda x: x[1], reverse=True):\n        result.append(v[0] + (v[1],))\n    return result", "is_syntactically_valid": true}
{"task_id": 244, "generation": "import math\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    \n    Args:\n        num (int): The given number.\n    \n    Returns:\n        int: The next perfect square greater than the given number.\n    \"\"\"\n    next_square = math.ceil(math.sqrt(num)) ** 2\n    return next_square", "is_syntactically_valid": true}
{"task_id": 245, "generation": "def max_sum(arr, n):\n    # Create two arrays to store the maximum increasing and decreasing subsequences\n    increasing = [1] * n\n    decreasing = [1] * n\n\n    # Compute the maximum increasing subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing[i] = increasing[i-1] + 1\n\n    # Compute the maximum decreasing subsequence\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            decreasing[i] = decreasing[i+1] + 1\n\n    # Find the maximum sum of bi-tonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - 1)\n\n    return max_sum", "is_syntactically_valid": true}
{"task_id": 246, "generation": "def babylonian_squareroot(num):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \n    Args:\n        num (float): The number to find the square root of.\n    \n    Returns:\n        float: The square root of the input number.\n    \"\"\"\n    guess = num / 2\n    while abs(guess * guess - num) > 1e-10:\n        guess = (guess + num / guess) / 2\n    return guess", "is_syntactically_valid": true}
{"task_id": 247, "generation": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]", "is_syntactically_valid": true}
{"task_id": 248, "generation": "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)", "is_syntactically_valid": true}
{"task_id": 249, "generation": "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))", "is_syntactically_valid": true}
{"task_id": 250, "generation": "def count_X(tup, x):\n    return tup.count(x)", "is_syntactically_valid": true}
{"task_id": 251, "generation": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 252, "generation": "import math\n\ndef convert(z):\n    magnitude = abs(z)\n    angle = math.atan2(0, z)\n    return (magnitude, angle)", "is_syntactically_valid": true}
{"task_id": 253, "generation": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 254, "generation": "def words_ae(text):\n    return [word for word in text.split() if word.startswith('a') or word.startswith('e')]", "is_syntactically_valid": true}
{"task_id": 255, "generation": "from itertools import product\n\ndef combinations_colors(colors, n):\n    return list(product(colors, repeat=n))", "is_syntactically_valid": true}
{"task_id": 256, "generation": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    \n    return sum(primes)", "is_syntactically_valid": true}
{"task_id": 257, "generation": "def swap_numbers(a, b):\n    return (b, a)", "is_syntactically_valid": true}
{"task_id": 258, "generation": "def count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))", "is_syntactically_valid": true}
{"task_id": 259, "generation": "def maximize_elements(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((max(t1[i][0], t2[i][0]), max(t1[i][1], t2[i][1])))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 260, "generation": "def is_newman_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while True:\n        if is_newman_prime(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1", "is_syntactically_valid": true}
{"task_id": 261, "generation": "def division_elements(numerator_tuple, denominator_tuple):\n    result = []\n    for i in range(len(numerator_tuple)):\n        result.append(numerator_tuple[i] // denominator_tuple[i])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 262, "generation": "def split_two_parts(lst, length):\n    return lst[:length], lst[length:]", "is_syntactically_valid": true}
{"task_id": 263, "generation": "def merge_dict(dict1, dict2):\n    return {**dict1, **dict2}", "is_syntactically_valid": true}
{"task_id": 264, "generation": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4", "is_syntactically_valid": true}
{"task_id": 265, "generation": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 266, "generation": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube.\n    \n    Args:\n        side_length (int or float): The length of one side of the cube.\n    \n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2", "is_syntactically_valid": true}
{"task_id": 267, "generation": "def square_Sum(n):\n    return sum([(2*i-1)**2 for i in range(1, n+1)])", "is_syntactically_valid": true}
{"task_id": 268, "generation": "def find_star_num(n):\n    if n < 1 or n > 1000 or not isinstance(n, int):\n        return 'Invalid input'\n    elif n == 1:\n        return 1\n    else:\n        return n * (7 * n - 5) // 2", "is_syntactically_valid": true}
{"task_id": 269, "generation": "def ascii_value(char):\n    return ord(char)", "is_syntactically_valid": true}
{"task_id": 270, "generation": "def sum_even_and_even_index(lst, n):\n    total = 0\n    for i in range(0, n, 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total", "is_syntactically_valid": true}
{"task_id": 271, "generation": "def even_Power_Sum(n):\n    return sum([(2 * i) ** 5 for i in range(1, n + 1)])", "is_syntactically_valid": true}
{"task_id": 272, "generation": "def rear_extract(records):\n    return [rec[-1] for rec in records]", "is_syntactically_valid": true}
{"task_id": 273, "generation": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 274, "generation": "from math import factorial\n\ndef even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(0, n+1, 2):\n        total += factorial(n) // (factorial(i) * factorial(n-i))\n    return total", "is_syntactically_valid": true}
{"task_id": 275, "generation": "def get_Position(arr, k, x):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == x:\n            if i + k <= n:\n                return i + k\n            else:\n                return n\n    return -1", "is_syntactically_valid": true}
{"task_id": 276, "generation": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height", "is_syntactically_valid": true}
{"task_id": 277, "generation": "def dict_filter(d, num):\n    return {k: v for k, v in d.items() if v >= num}", "is_syntactically_valid": true}
{"task_id": 278, "generation": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 279, "generation": "def is_num_decagonal(n):\n    \"\"\"\n    Find the nth decagonal number.\n    \"\"\"\n    return n * (3 * n - 2)", "is_syntactically_valid": true}
{"task_id": 280, "generation": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, -1)", "is_syntactically_valid": true}
{"task_id": 281, "generation": "def all_unique(lst):\n    return len(lst) == len(set(lst))", "is_syntactically_valid": true}
{"task_id": 282, "generation": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))", "is_syntactically_valid": true}
{"task_id": 283, "generation": "def validate(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in num_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 284, "generation": "def check_element(lst, target):\n    return all(item == target for item in lst)", "is_syntactically_valid": true}
{"task_id": 285, "generation": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb|bbb)'\n    if re.match(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"", "is_syntactically_valid": true}
{"task_id": 286, "generation": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    \n    Args:\n    arr (list): The input array.\n    k (int): The number of times the array is repeated.\n    n (int): The size of the contiguous subarray.\n    \n    Returns:\n    int: The largest sum of contiguous subarray.\n    \"\"\"\n    # Create the modified array by repeating the input array k times\n    modified_arr = arr * k\n    \n    # Find the largest sum of contiguous subarray of size n\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(modified_arr)):\n        current_sum += modified_arr[i]\n        if i >= n - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= modified_arr[i - n + 1]\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 287, "generation": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))", "is_syntactically_valid": true}
{"task_id": 288, "generation": "from typing import List\n\ndef modular_inverse(arr: List[int], p: int, n: int) -> int:\n    count = 0\n    for num in arr:\n        if pow(num, p-1, p) == 1:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 289, "generation": "def odd_Days(n):\n    \"\"\"\n    Calculates the number of odd days in a given year.\n\n    Args:\n        n (int): The year.\n\n    Returns:\n        int: The number of odd days in the given year.\n    \"\"\"\n    # Calculate the number of days in the year\n    days_in_year = 365 if n % 4 != 0 else 366\n\n    # Calculate the number of odd days\n    odd_days = days_in_year % 7\n\n    return odd_days", "is_syntactically_valid": true}
{"task_id": 290, "generation": "def max_length(lst):\n    max_len = 0\n    max_list = None\n    for l in lst:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n    return (max_len, max_list)", "is_syntactically_valid": true}
{"task_id": 291, "generation": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n\n    return same + diff", "is_syntactically_valid": true}
{"task_id": 292, "generation": "def find(num1, num2):\n    return num1 // num2", "is_syntactically_valid": true}
{"task_id": 293, "generation": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Find the third side of a right-angled triangle.\n    \n    Args:\n        a (float): Length of one side of the triangle.\n        b (float): Length of the other side of the triangle.\n    \n    Returns:\n        float: Length of the third side of the triangle.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)", "is_syntactically_valid": true}
{"task_id": 294, "generation": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value", "is_syntactically_valid": true}
{"task_id": 295, "generation": "def sum_div(n):\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            total += i\n    return total", "is_syntactically_valid": true}
{"task_id": 296, "generation": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 297, "generation": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 298, "generation": "def intersection_nested_lists(lst1, lst2):\n    result = []\n    for inner_lst in lst2:\n        intersection = [item for item in inner_lst if item in lst1]\n        result.append(intersection)\n    return result", "is_syntactically_valid": true}
{"task_id": 299, "generation": "def max_aggregate(tuples):\n    aggregates = {}\n    for name, score in tuples:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    return max(aggregates.items(), key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 300, "generation": "from math import comb\n\ndef count_binary_seq(n):\n    total = 0\n    for i in range(2 * n + 1):\n        if i <= n:\n            total += comb(2 * n, i) * comb(n, i)\n        else:\n            total += comb(2 * n, i) * comb(n, 2 * n - i)\n    return total", "is_syntactically_valid": true}
{"task_id": 301, "generation": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "is_syntactically_valid": true}
{"task_id": 302, "generation": "def set_Bit_Number(n):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    # Find the most significant bit\n    msb = 1\n    while msb <= n:\n        msb <<= 1\n    \n    # Find the most significant set bit\n    while msb > 0:\n        msb >>= 1\n        if n & msb:\n            return msb\n    \n    return 0", "is_syntactically_valid": true}
{"task_id": 303, "generation": "def solve(arr, n):\n    count_0 = 0\n    count_1 = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                if arr[i] == 1 and arr[j] == 0:\n                    count_1 += 1\n                elif arr[i] == 0 and arr[j] == 1:\n                    count_0 += 1\n    \n    return count_0 == count_1", "is_syntactically_valid": true}
{"task_id": 304, "generation": "def find_Element(arr, rotations, index, k):\n    for rotation in rotations:\n        arr = arr[rotation[1]:] + arr[:rotation[1]]\n    return arr[index % len(arr)]", "is_syntactically_valid": true}
{"task_id": 305, "generation": "def start_withp(words):\n    for word in words:\n        word_list = word.split()\n        if len(word_list) == 2 and word_list[0].startswith('p') and word_list[1].startswith('p'):\n            return (word_list[0], word_list[1])\n    return ()", "is_syntactically_valid": true}
{"task_id": 306, "generation": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Create a dp array to store the maximum sum of increasing subsequence\n    dp = [0] * n\n    \n    # Initialize the first element of dp array\n    dp[0] = arr[0]\n    \n    # Fill the dp array\n    for j in range(1, n):\n        max_sum = 0\n        for l in range(j):\n            if arr[l] < arr[j]:\n                max_sum = max(max_sum, dp[l])\n        dp[j] = max_sum + arr[j]\n    \n    # Find the maximum sum of increasing subsequence including the kth element\n    max_sum = 0\n    for j in range(i, k):\n        max_sum = max(max_sum, dp[j])\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 307, "generation": "def colon_tuplex(tup, index, value):\n    return tup[:index] + (value,) + tup[index+1:]", "is_syntactically_valid": true}
{"task_id": 308, "generation": "def large_product(list1, list2, n):\n    products = []\n    for x in list1:\n        for y in list2:\n            products.append(x * y)\n    products.sort(reverse=True)\n    return products[:n]", "is_syntactically_valid": true}
{"task_id": 309, "generation": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "is_syntactically_valid": true}
{"task_id": 310, "generation": "def string_to_tuple(string):\n    return tuple(string)", "is_syntactically_valid": true}
{"task_id": 311, "generation": "def set_left_most_unset_bit(num):\n    return num | (num + 1) & ~num", "is_syntactically_valid": true}
{"task_id": 312, "generation": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone.\n    \n    Args:\n    r (float): The radius of the cone's base.\n    h (float): The height of the cone.\n    \n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h", "is_syntactically_valid": true}
{"task_id": 313, "generation": "def pos_nos(lst):\n    return [num for num in lst if num > 0]", "is_syntactically_valid": true}
{"task_id": 314, "generation": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[1] = max(grid[0][0], grid[1][0])\n\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + max(grid[0][i - 1], grid[1][i - 1]))\n\n    return dp[n]", "is_syntactically_valid": true}
{"task_id": 315, "generation": "def find_Max_Len_Even(text):\n    words = text.split()\n    max_len = -1\n    max_word = \"-1\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word", "is_syntactically_valid": true}
{"task_id": 316, "generation": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    last_index = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            last_index = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_index", "is_syntactically_valid": true}
{"task_id": 317, "generation": "from collections import deque\n\ndef modified_encode(data):\n    encoded = []\n    prev = None\n    count = 0\n\n    for item in data:\n        if item != prev:\n            if count > 0:\n                if count > 1:\n                    encoded.append([count, prev])\n                else:\n                    encoded.append(prev)\n            count = 1\n            prev = item\n        else:\n            count += 1\n\n    if count > 0:\n        if count > 1:\n            encoded.append([count, prev])\n        else:\n            encoded.append(prev)\n\n    return encoded", "is_syntactically_valid": true}
{"task_id": 318, "generation": "def max_volume(s):\n    if s < 1:\n        return 0\n    \n    max_vol = 0\n    for a in range(1, s//3 + 1):\n        for b in range(a, (s-a)//2 + 1):\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    \n    return max_vol", "is_syntactically_valid": true}
{"task_id": 319, "generation": "import re\n\ndef find_long_word(sentence):\n    words = re.findall(r'\\b\\w{5}\\b', sentence)\n    return words", "is_syntactically_valid": true}
{"task_id": 320, "generation": "def sum_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    squared_sum = sum(range(1, n+1))**2\n    return squared_sum - sum_of_squares", "is_syntactically_valid": true}
{"task_id": 321, "generation": "def find_demlo(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    \n    result = \"\"\n    for i in range(1, max(frequency.values())+1):\n        for char, count in frequency.items():\n            if count == i:\n                result += str(i)\n                result += char\n                frequency[char] -= 1\n    \n    return result[::-1]", "is_syntactically_valid": true}
{"task_id": 322, "generation": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]", "is_syntactically_valid": true}
{"task_id": 323, "generation": "def re_arrange(arr, n):\n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if x < 0]\n    result = []\n    i, j = 0, 0\n    while i < len(positive) or j < len(negative):\n        if i < len(positive):\n            result.append(positive[i])\n            i += 1\n        if j < len(negative):\n            result.append(negative[j])\n            j += 1\n    return result", "is_syntactically_valid": true}
{"task_id": 324, "generation": "def sum_of_alternates(nums):\n    even_sum = sum(nums[::2])\n    odd_sum = sum(nums[1::2])\n    return (even_sum, odd_sum)", "is_syntactically_valid": true}
{"task_id": 325, "generation": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    \n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    \n    for i in range(4, n + 1):\n        dp[i] = i\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    \n    return dp[n]", "is_syntactically_valid": true}
{"task_id": 326, "generation": "def most_occurrences(strings):\n    word_counts = {}\n    for string in strings:\n        for word in string.split():\n            word = word.strip('.,!?')\n            if word in word_counts:\n                word_counts[word] += 1\n            else:\n                word_counts[word] = 1\n    return max(word_counts, key=word_counts.get)", "is_syntactically_valid": true}
{"task_id": 327, "generation": "def check_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False", "is_syntactically_valid": true}
{"task_id": 328, "generation": "def rotate_left(arr, k, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the left direction.\n\n    Args:\n        arr (list): The input list to be rotated.\n        k (int): The number of items to rotate to the left.\n        n (int): The number of times to repeat the rotation.\n\n    Returns:\n        list: The rotated list.\n    \"\"\"\n    for _ in range(n):\n        arr = arr[k:] + arr[:k]\n    return arr", "is_syntactically_valid": true}
{"task_id": 329, "generation": "def neg_count(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 330, "generation": "import re\n\ndef find_char(text):\n    words = re.findall(r'\\b\\w{3,5}\\b', text)\n    return words", "is_syntactically_valid": true}
{"task_id": 331, "generation": "def count_unset_bits(num):\n    return bin(num).count('0') - 1", "is_syntactically_valid": true}
{"task_id": 332, "generation": "def char_frequency(string):\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq", "is_syntactically_valid": true}
{"task_id": 333, "generation": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 334, "generation": "def check_Validity(a, b, c):\n    # Check if the sum of any two sides is greater than the third side\n    if a + b <= c or b + c <= a or a + c <= b:\n        return False\n    else:\n        return True", "is_syntactically_valid": true}
{"task_id": 335, "generation": "def ap_sum(a, n, d):\n    \"\"\"\n    Finds the sum of an arithmetic progression.\n    \n    Args:\n    a (int): The first term of the arithmetic progression.\n    n (int): The number of terms in the arithmetic progression.\n    d (int): The common difference between terms.\n    \n    Returns:\n    int: The sum of the arithmetic progression.\n    \"\"\"\n    return (n * (2 * a + (n - 1) * d)) // 2", "is_syntactically_valid": true}
{"task_id": 336, "generation": "def check_monthnum(month_name):\n    if month_name.lower() == \"february\":\n        return True\n    else:\n        return False", "is_syntactically_valid": true}
{"task_id": 337, "generation": "import re\n\ndef text_match_word(text):\n    pattern = r'\\w+\\.$'\n    if re.search(pattern, text.strip()):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"", "is_syntactically_valid": true}
{"task_id": 338, "generation": "def count_Substring_With_Equal_Ends(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[i] == string[j]:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 339, "generation": "def find_Divisor(start, end):\n    max_divisor = 0\n    max_count = 0\n    for i in range(start, end+1):\n        divisor_counts = {}\n        for j in range(1, i+1):\n            if i % j == 0:\n                if j in divisor_counts:\n                    divisor_counts[j] += 1\n                else:\n                    divisor_counts[j] = 1\n        max_count_in_dict = max(divisor_counts.values())\n        if max_count_in_dict > max_count:\n            max_count = max_count_in_dict\n            max_divisor = max(divisor_counts, key=divisor_counts.get)\n    return max_divisor", "is_syntactically_valid": true}
{"task_id": 340, "generation": "def sum_three_smallest_nums(nums):\n    nums = sorted([num for num in nums if num > 0])\n    return sum(nums[:3])", "is_syntactically_valid": true}
{"task_id": 341, "generation": "def set_to_tuple(input_set):\n    return tuple(sorted(input_set))", "is_syntactically_valid": true}
{"task_id": 342, "generation": "def find_minimum_range(arrays):\n    from typing import List, Tuple\n    \n    def get_min_range(arrays: List[List[int]]) -> Tuple[int, int]:\n        pointers = [0] * len(arrays)\n        min_range = float('inf')\n        min_start, min_end = 0, 0\n        \n        while True:\n            # Find the minimum and maximum values among the current elements\n            min_val = float('inf')\n            max_val = float('-inf')\n            for i, arr in enumerate(arrays):\n                if pointers[i] < len(arr):\n                    min_val = min(min_val, arr[pointers[i]])\n                    max_val = max(max_val, arr[pointers[i]])\n                else:\n                    break\n            \n            # If we have reached the end of all arrays, break the loop\n            if min_val == float('inf'):\n                break\n            \n            # Update the minimum range if necessary\n            if max_val - min_val < min_range:\n                min_range = max_val - min_val\n                min_start, min_end = min_val, max_val\n            \n            # Move the pointer of the array with the smallest current element\n            min_idx = min(range(len(arrays)), key=lambda i: arrays[i][pointers[i]] if pointers[i] < len(arrays[i]) else float('inf'))\n            pointers[min_idx] += 1\n        \n        return min_start, min_end\n    \n    return get_min_range(arrays)", "is_syntactically_valid": true}
{"task_id": 343, "generation": "def dig_let(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (digits, letters)", "is_syntactically_valid": true}
{"task_id": 344, "generation": "import math\n\ndef count_Odd_Squares(start, end):\n    count = 0\n    for num in range(start, end+1):\n        if all(num % i != 0 or i % 2 != 0 for i in range(1, int(math.sqrt(num))+1)):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 345, "generation": "def diff_consecutivenums(nums):\n    differences = []\n    for i in range(1, len(nums)):\n        differences.append(nums[i] - nums[i-1])\n    return differences", "is_syntactically_valid": true}
{"task_id": 346, "generation": "def zigzag(n, k):\n    if k == 0 or k == n:\n        return 1\n    if k == 1 or k == n-1:\n        return n\n    return zigzag(n-1, k-1) + zigzag(n-1, k)", "is_syntactically_valid": true}
{"task_id": 347, "generation": "def count_Squares(length, width):\n    return (length * width) + (length - 1) * (width - 1)", "is_syntactically_valid": true}
{"task_id": 348, "generation": "from typing import List\n\ndef find_ways(n: int) -> int:\n    \"\"\"\n    Counts the number of sequences of length n having non-negative prefix sums that can be generated by given values.\n    \"\"\"\n    def count_sequences(n: int, prefix_sum: int, values: List[int]) -> int:\n        if n == 0:\n            return 1\n        if prefix_sum < 0:\n            return 0\n        total = 0\n        for value in values:\n            total += count_sequences(n - 1, prefix_sum + value, values)\n        return total\n\n    return count_sequences(n, 0, [1, -1])", "is_syntactically_valid": true}
{"task_id": 349, "generation": "def check(string):\n    if all(char in ['0', '1'] for char in string):\n        return \"Yes\"\n    else:\n        return \"No\"", "is_syntactically_valid": true}
{"task_id": 350, "generation": "def minimum_Length(s):\n    min_length = len(s)\n    for i in range(len(s)):\n        new_s = s[:i] + s[i+1:]\n        min_length = min(min_length, len(new_s))\n    return min_length", "is_syntactically_valid": true}
{"task_id": 351, "generation": "def first_Element(lst, n, k):\n    count = {}\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n        if count[item] == k:\n            return item\n    return None", "is_syntactically_valid": true}
{"task_id": 352, "generation": "def unique_Characters(string):\n    return len(set(string)) == len(string)", "is_syntactically_valid": true}
{"task_id": 353, "generation": "def remove_column(matrix, index):\n    return [[row[i] for i in range(len(row)) if i != index] for row in matrix]", "is_syntactically_valid": true}
{"task_id": 354, "generation": "def tn_ap(a, d, n):\n    \"\"\"\n    Find the n-th term of an arithmetic progression.\n    \n    Args:\n    a (int): The first term of the arithmetic progression.\n    d (int): The common difference between terms.\n    n (int): The position of the term to find.\n    \n    Returns:\n    int: The n-th term of the arithmetic progression.\n    \"\"\"\n    return a + (n - 1) * d", "is_syntactically_valid": true}
{"task_id": 355, "generation": "import math\n\ndef count_Rectangles(r):\n    if r == 0:\n        return 0\n    \n    # Calculate the maximum possible side length of the rectangle\n    max_side = 2 * r\n    \n    # Count the number of rectangles\n    count = 0\n    for side_length in range(1, int(max_side) + 1):\n        # Calculate the maximum height of the rectangle\n        max_height = math.sqrt(r**2 - (side_length/2)**2)\n        count += int(max_height // side_length)\n    \n    return 8 * count", "is_syntactically_valid": true}
{"task_id": 356, "generation": "def find_angle(angle1, angle2):\n    \"\"\"\n    Find the third angle of a triangle using two angles.\n    \n    Args:\n        angle1 (int): The first angle of the triangle.\n        angle2 (int): The second angle of the triangle.\n    \n    Returns:\n        int: The third angle of the triangle.\n    \"\"\"\n    return 180 - angle1 - angle2", "is_syntactically_valid": true}
{"task_id": 357, "generation": "def find_max(records):\n    return max(max(record) for record in records)", "is_syntactically_valid": true}
{"task_id": 358, "generation": "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))", "is_syntactically_valid": true}
{"task_id": 359, "generation": "def Check_Solution(a, b, c):\n    import math\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the equation has real roots\n    if discriminant >= 0:\n        # Calculate the roots\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n\n        # Check if one root is twice the other\n        if abs(root1) == 2 * abs(root2):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"", "is_syntactically_valid": true}
{"task_id": 360, "generation": "def get_carol(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        a, b = 1, 7\n        for i in range(3, n+1):\n            a, b = b, 4*b - a\n        return b", "is_syntactically_valid": true}
{"task_id": 361, "generation": "def remove_empty(lst):\n    return [sublst for sublst in lst if sublst]", "is_syntactically_valid": true}
{"task_id": 362, "generation": "def max_occurrences(lst):\n    count = {}\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    \n    max_count = 0\n    max_items = []\n    for item, c in count.items():\n        if c > max_count:\n            max_count = c\n            max_items = [item]\n        elif c == max_count:\n            max_items.append(item)\n    \n    return max_items", "is_syntactically_valid": true}
{"task_id": 363, "generation": "def add_K_element(tuples, k):\n    return [(x + k, y + k, z + k) for x, y, z in tuples]", "is_syntactically_valid": true}
{"task_id": 364, "generation": "def min_flip_to_make_string_alternate(s):\n    n = len(s)\n    min_flips = float('inf')\n    \n    for start in ['0', '1']:\n        flips = 0\n        for i in range(n):\n            if s[i] != start:\n                flips += 1\n            start = '0' if start == '1' else '1'\n        min_flips = min(min_flips, flips)\n    \n    return min_flips", "is_syntactically_valid": true}
{"task_id": 365, "generation": "def count_Digit(number):\n    return len(str(number))", "is_syntactically_valid": true}
{"task_id": 366, "generation": "def adjacent_num_product(nums):\n    max_product = 0\n    for i in range(len(nums) - 1):\n        product = nums[i] * nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product", "is_syntactically_valid": true}
{"task_id": 367, "generation": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef height(node):\n    if not node:\n        return 0\n    left_height = height(node.left)\n    right_height = height(node.right)\n    if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n        return -1\n    return max(left_height, right_height) + 1\n\ndef is_tree_balanced(root):\n    return height(root) != -1\n\n# Test cases\nroot = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, None, TreeNode(6)))\nroot1 = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, TreeNode(6), TreeNode(7)))\nroot2 = TreeNode(1, TreeNode(2, TreeNode(4), None), TreeNode(3, TreeNode(5), TreeNode(6)))\n\nassert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False", "is_syntactically_valid": true}
{"task_id": 368, "generation": "def repeat_tuples(tup, n):\n    return tuple(tup for _ in range(n))", "is_syntactically_valid": true}
{"task_id": 369, "generation": "def lateralsurface_cuboid(length, width, height):\n    return 2 * (length * height + width * height)", "is_syntactically_valid": true}
{"task_id": 370, "generation": "def float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]), reverse=True)", "is_syntactically_valid": true}
{"task_id": 371, "generation": "def smallest_missing(arr, start, end):\n    for i in range(start, end+1):\n        if i not in arr:\n            return i\n    return end + 1", "is_syntactically_valid": true}
{"task_id": 372, "generation": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    return heapq.nsmallest(len(lst), lst)", "is_syntactically_valid": true}
{"task_id": 373, "generation": "def volume_cuboid(length, width, height):\n    return length * width * height", "is_syntactically_valid": true}
{"task_id": 374, "generation": "from itertools import permutations\n\ndef permute_string(s):\n    return [''.join(p) for p in permutations(s)]", "is_syntactically_valid": true}
{"task_id": 375, "generation": "def round_num(num, multiple):\n    return round(num / multiple) * multiple", "is_syntactically_valid": true}
{"task_id": 376, "generation": "def remove_replica(tup, custom_value='MSP'):\n    result = []\n    seen = set()\n    for item in tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n        else:\n            result.append(custom_value)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 377, "generation": "def remove_Char(string, char):\n    return string.replace(char, \"\")", "is_syntactically_valid": true}
{"task_id": 378, "generation": "def move_first(lst):\n    return [lst[-1]] + lst[:-1]", "is_syntactically_valid": true}
{"task_id": 379, "generation": "def surfacearea_cuboid(length, width, height):\n    return 2 * (length * width + length * height + width * height)", "is_syntactically_valid": true}
{"task_id": 380, "generation": "def multi_list(rows, cols):\n    result = []\n    for i in range(rows):\n        row = [j * i for j in range(cols)]\n        result.append(row)\n    return result", "is_syntactically_valid": true}
{"task_id": 381, "generation": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])", "is_syntactically_valid": true}
{"task_id": 382, "generation": "def find_rotation_count(arr):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        if arr[left] <= arr[right]:\n            return left\n\n        mid = (left + right) // 2\n        prev = (mid - 1) % len(arr)\n        next = (mid + 1) % len(arr)\n\n        if arr[mid] <= arr[prev] and arr[mid] <= arr[next]:\n            return mid\n\n        elif arr[mid] <= arr[right]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return 0", "is_syntactically_valid": true}
{"task_id": 383, "generation": "def even_bit_toggle_number(num):\n    \"\"\"\n    Toggle all odd bits of a given number.\n    \"\"\"\n    return num ^ 0b10101010101010101010101010101010", "is_syntactically_valid": true}
{"task_id": 384, "generation": "def frequency_Of_Smallest(n, arr):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the smallest value in the array\n    min_val = min(arr)\n    \n    # Return the frequency of the smallest value\n    return freq[min_val]", "is_syntactically_valid": true}
{"task_id": 385, "generation": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)", "is_syntactically_valid": true}
{"task_id": 386, "generation": "def swap_count(s):\n    stack = []\n    count = 0\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    return count + len(stack) // 2", "is_syntactically_valid": true}
{"task_id": 387, "generation": "def even_or_odd(hex_num):\n    decimal_num = int(hex_num, 16)\n    if decimal_num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "is_syntactically_valid": true}
{"task_id": 388, "generation": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "is_syntactically_valid": true}
{"task_id": 389, "generation": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)", "is_syntactically_valid": true}
{"task_id": 390, "generation": "def add_string(lst, string):\n    return [string.format(str(item)) for item in lst]", "is_syntactically_valid": true}
{"task_id": 391, "generation": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        result.append({keys[i]: {names[i]: values[i]}})\n    return result", "is_syntactically_valid": true}
{"task_id": 392, "generation": "def get_max_sum(n):\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "is_syntactically_valid": true}
{"task_id": 393, "generation": "def max_length_list(lst):\n    return max(lst, key=lambda x: len(x))", "is_syntactically_valid": true}
{"task_id": 394, "generation": "def check_distinct(my_tuple):\n    return len(my_tuple) == len(set(my_tuple))", "is_syntactically_valid": true}
{"task_id": 395, "generation": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 396, "generation": "import re\n\ndef check_char(string):\n    if re.match(r'^(\\w)\\w*\\1$', string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "is_syntactically_valid": true}
{"task_id": 397, "generation": "def median_numbers(num1, num2, num3):\n    numbers = [num1, num2, num3]\n    numbers.sort()\n    return (numbers[1])", "is_syntactically_valid": true}
{"task_id": 398, "generation": "def sum_of_digits(numbers):\n    total = 0\n    for num in numbers:\n        if isinstance(num, int):\n            total += sum(int(digit) for digit in str(abs(num)))\n        elif isinstance(num, list):\n            total += sum_of_digits(num)\n    return total", "is_syntactically_valid": true}
{"task_id": 399, "generation": "def bitwise_xor(t1, t2):\n    return tuple(a ^ b for a, b in zip(t1, t2))", "is_syntactically_valid": true}
{"task_id": 400, "generation": "def extract_freq(tuples):\n    freq = {}\n    for t in tuples:\n        t = tuple(sorted(t))\n        if t in freq:\n            freq[t] += 1\n        else:\n            freq[t] = 1\n    return len(freq)", "is_syntactically_valid": true}
{"task_id": 401, "generation": "def add_nested_tuples(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((t1[i][0] + t2[i][0], t1[i][1] + t2[i][1]))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 402, "generation": "def ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of ncr%p.\n    \n    Args:\n        n (int): The total number of items.\n        r (int): The number of items to be chosen.\n        p (int): The modulo value.\n    \n    Returns:\n        int: The value of ncr%p.\n    \"\"\"\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    # Use dynamic programming to compute the value of ncr%p\n    dp = [[0] * (r + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(min(i, r) + 1):\n            if j == 0 or j == i:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % p\n    \n    return dp[n][r]", "is_syntactically_valid": true}
{"task_id": 403, "generation": "import re\n\ndef is_valid_URL(url):\n    pattern = r'^https?://(?:www\\.)?[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    return bool(re.match(pattern, url))", "is_syntactically_valid": true}
{"task_id": 404, "generation": "def minimum(a, b):\n    return min(a, b)", "is_syntactically_valid": true}
{"task_id": 405, "generation": "def check_tuplex(tup, element):\n    return element in tup", "is_syntactically_valid": true}
{"task_id": 406, "generation": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "is_syntactically_valid": true}
{"task_id": 407, "generation": "def rearrange_bigger(num):\n    num_str = str(num)\n    n = len(num_str)\n    \n    # Find the rightmost digit that is smaller than the digit to its right\n    i = n - 2\n    while i >= 0 and num_str[i] >= num_str[i+1]:\n        i -= 1\n    \n    if i < 0:\n        return False\n    \n    # Find the smallest digit to the right of i that is larger than num_str[i]\n    j = n - 1\n    while j > i and num_str[j] <= num_str[i]:\n        j -= 1\n    \n    # Swap the digits at i and j\n    num_str = num_str[:i] + num_str[j] + num_str[i+1:j] + num_str[i] + num_str[j+1:]\n    \n    # Reverse the digits to the right of i\n    num_str = num_str[:i+1] + num_str[i+1:][::-1]\n    \n    return int(num_str)", "is_syntactically_valid": true}
{"task_id": 408, "generation": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append([num1, num2])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]", "is_syntactically_valid": true}
{"task_id": 409, "generation": "def min_product_tuple(tuples):\n    return min(a * b for a, b in tuples)", "is_syntactically_valid": true}
{"task_id": 410, "generation": "def min_val(lst):\n    min_value = float('inf')\n    for item in lst:\n        if isinstance(item, (int, float)) and item < min_value:\n            min_value = item\n    return min_value", "is_syntactically_valid": true}
{"task_id": 411, "generation": "import re\n\ndef snake_to_camel(snake_case_string):\n    words = snake_case_string.split('_')\n    camel_case_string = ''.join(word.capitalize() for word in words)\n    return camel_case_string", "is_syntactically_valid": true}
{"task_id": 412, "generation": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]", "is_syntactically_valid": true}
{"task_id": 413, "generation": "def extract_nth_element(list_of_tuples, n):\n    return [tup[n] for tup in list_of_tuples]", "is_syntactically_valid": true}
{"task_id": 414, "generation": "def overlapping(list1, list2):\n    return any(item in list1 for item in list2)", "is_syntactically_valid": true}
{"task_id": 415, "generation": "def max_Product(arr):\n    arr.sort(reverse=True)\n    return (arr[0], arr[1])", "is_syntactically_valid": true}
{"task_id": 416, "generation": "def breakSum(n):\n    if n < 3:\n        return n\n    \n    max_sum = 0\n    for i in range(1, n//2 + 1):\n        for j in range(1, n - i):\n            remaining = n - i - j\n            current_sum = i + j + remaining\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 417, "generation": "def group_tuples(tuples):\n    result = {}\n    for t in tuples:\n        first = t[0]\n        if first not in result:\n            result[first] = []\n        result[first].append(t[1])\n    return [(k, *v) for k, v in result.items()]", "is_syntactically_valid": true}
{"task_id": 418, "generation": "def Find_Max(lst):\n    max_length = 0\n    max_sublist = []\n    for sublst in lst:\n        if len(sublst) > max_length:\n            max_length = len(sublst)\n            max_sublist = sublst\n    return max_sublist", "is_syntactically_valid": true}
{"task_id": 419, "generation": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    length = len(numbers)\n    return total_sum * length", "is_syntactically_valid": true}
{"task_id": 420, "generation": "def cube_Sum(n):\n    total = 0\n    for i in range(1, n+1):\n        total += (2*i)**3\n    return total", "is_syntactically_valid": true}
{"task_id": 421, "generation": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))", "is_syntactically_valid": true}
{"task_id": 422, "generation": "def find_Average_Of_Cube(n):\n    total = sum(i**3 for i in range(1, n+1))\n    return total / n", "is_syntactically_valid": true}
{"task_id": 423, "generation": "def get_maxgold(mine, m, n):\n    # Create a 2D array to store the maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # Fill the first row and first column of the dp array\n    dp[0][0] = mine[0][0]\n    for i in range(1, m):\n        dp[i][0] = mine[i][0] + dp[i-1][0]\n    for j in range(1, n):\n        dp[0][j] = mine[0][j] + dp[0][j-1]\n\n    # Fill the rest of the dp array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = mine[i][j] + max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n\n    # Return the maximum gold that can be collected\n    return dp[m-1][n-1]", "is_syntactically_valid": true}
{"task_id": 424, "generation": "def extract_rear(strings):\n    return [s[-1] for s in strings]", "is_syntactically_valid": true}
{"task_id": 425, "generation": "def count_element_in_list(lst, element):\n    count = 0\n    for sublst in lst:\n        if element in sublst:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 426, "generation": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))", "is_syntactically_valid": true}
{"task_id": 427, "generation": "import re\n\ndef change_date_format(date_str):\n    return re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", date_str)\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'", "is_syntactically_valid": true}
{"task_id": 428, "generation": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "is_syntactically_valid": true}
{"task_id": 429, "generation": "def and_tuples(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(min(t1[i], t2[i]))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 430, "generation": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n    \n    Parameters:\n    a (float): The coefficient of x^2 in the parabolic equation.\n    b (float): The coefficient of x in the parabolic equation.\n    c (float): The constant term in the parabolic equation.\n    \n    Returns:\n    float: The y-coordinate of the directrix.\n    \"\"\"\n    return -b**2 / (4 * a) - c", "is_syntactically_valid": true}
{"task_id": 431, "generation": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return None", "is_syntactically_valid": true}
{"task_id": 432, "generation": "def median_trapezium(a, b, c):\n    return (a + c) / 2", "is_syntactically_valid": true}
{"task_id": 433, "generation": "def check_greater(input_list, number):\n    if all(number > x for x in input_list):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'", "is_syntactically_valid": true}
{"task_id": 434, "generation": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b+)'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 435, "generation": "def last_Digit(num):\n    return num % 10", "is_syntactically_valid": true}
{"task_id": 436, "generation": "def neg_nos(numbers):\n    return [num for num in numbers if num < 0]", "is_syntactically_valid": true}
{"task_id": 437, "generation": "def remove_odd(string):\n    return ''.join(char for i, char in enumerate(string) if i % 2 == 0)", "is_syntactically_valid": true}
{"task_id": 438, "generation": "def count_bidirectional(tuples):\n    seen = set()\n    count = 0\n    for a, b in tuples:\n        if (b, a) in seen:\n            count += 1\n            seen.remove((b, a))\n        else:\n            seen.add((a, b))\n    return str(count)", "is_syntactically_valid": true}
{"task_id": 439, "generation": "def multiple_to_single(integers):\n    result = 0\n    for num in integers:\n        result = result * 10 + num\n    return result", "is_syntactically_valid": true}
{"task_id": 440, "generation": "def find_adverb_position(sentence):\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.endswith('ly'):\n            return (sentence.index(word), len(word), word)\n    return None", "is_syntactically_valid": true}
{"task_id": 441, "generation": "def surfacearea_cube(side_length):\n    return 6 * side_length ** 2", "is_syntactically_valid": true}
{"task_id": 442, "generation": "def positive_count(arr):\n    positive = sum(1 for x in arr if x > 0)\n    total = len(arr)\n    return positive / total", "is_syntactically_valid": true}
{"task_id": 443, "generation": "def largest_neg(lst):\n    negative_nums = [num for num in lst if num < 0]\n    if negative_nums:\n        return max(negative_nums)\n    else:\n        return None", "is_syntactically_valid": true}
{"task_id": 444, "generation": "def trim_tuple(tuples, k):\n    result = []\n    for t in tuples:\n        trimmed = tuple(t[i] for i in range(len(t)) if i >= k)\n        result.append(trimmed)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 445, "generation": "def index_multiplication(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((t1[i][0] * t2[i][0], t1[i][1] * t2[i][1]))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 446, "generation": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count", "is_syntactically_valid": true}
{"task_id": 447, "generation": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))", "is_syntactically_valid": true}
{"task_id": 448, "generation": "def cal_sum(n):\n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    return sum(perrin[:n])", "is_syntactically_valid": true}
{"task_id": 449, "generation": "import math\n\ndef check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the lengths of the three sides\n    a = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n    b = math.sqrt((x2 - x3)**2 + (y2 - y3)**2)\n    c = math.sqrt((x3 - x1)**2 + (y3 - y1)**2)\n\n    # Check if the triangle is valid\n    if a + b > c and b + c > a and a + c > b:\n        return 'Yes'\n    else:\n        return 'No'", "is_syntactically_valid": true}
{"task_id": 450, "generation": "def extract_string(strings, size):\n    return [s for s in strings if len(s) == size]", "is_syntactically_valid": true}
{"task_id": 451, "generation": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text)", "is_syntactically_valid": true}
{"task_id": 452, "generation": "def loss_amount(selling_price, cost_price):\n    if selling_price < cost_price:\n        return cost_price - selling_price\n    else:\n        return None", "is_syntactically_valid": true}
{"task_id": 453, "generation": "def sumofFactors(n):\n    factors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.add(i)\n    return sum(f for f in factors if f % 2 == 0)", "is_syntactically_valid": true}
{"task_id": 454, "generation": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\w*z\\w*', text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"", "is_syntactically_valid": true}
{"task_id": 455, "generation": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n    \n    Args:\n        month_number (int): The month number (1-12).\n        \n    Returns:\n        bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    thirty_one_day_months = [1, 3, 5, 7, 8, 10, 12]\n    return month_number in thirty_one_day_months", "is_syntactically_valid": true}
{"task_id": 456, "generation": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list", "is_syntactically_valid": true}
{"task_id": 457, "generation": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_sublist = sublst\n    return min_sublist", "is_syntactically_valid": true}
{"task_id": 458, "generation": "def rectangle_area(length, width):\n    return length * width", "is_syntactically_valid": true}
{"task_id": 459, "generation": "import re\n\ndef remove_uppercase(text):\n    return re.sub(r'[A-Z]+', '', text)", "is_syntactically_valid": true}
{"task_id": 460, "generation": "def Extract(lst):\n    return [sub[0] for sub in lst]", "is_syntactically_valid": true}
{"task_id": 461, "generation": "def upper_ctr(input_str):\n    count = 0\n    for char in input_str:\n        if char.isupper():\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 462, "generation": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    result = []\n    for i in range(len(lst)+1):\n        result.extend(list(combinations(lst, i)))\n    return sorted(result)", "is_syntactically_valid": true}
{"task_id": 463, "generation": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = max_so_far\n\n    for i in range(1, len(arr)):\n        curr = arr[i]\n        temp_max = max(curr, max_so_far * curr, min_so_far * curr)\n        min_so_far = min(curr, max_so_far * curr, min_so_far * curr)\n\n        max_so_far = temp_max\n\n        result = max(max_so_far, result)\n\n    return result", "is_syntactically_valid": true}
{"task_id": 464, "generation": "def check_value(dictionary, target_value):\n    return len(set(dictionary.values())) == 1 and list(dictionary.values())[0] == target_value", "is_syntactically_valid": true}
{"task_id": 465, "generation": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}", "is_syntactically_valid": true}
{"task_id": 466, "generation": "def find_peak(arr, n):\n    for i in range(1, n-1):\n        if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n            return i\n    if arr[0] >= arr[1]:\n        return 0\n    if arr[n-1] >= arr[n-2]:\n        return n-1\n    return -1", "is_syntactically_valid": true}
{"task_id": 467, "generation": "def decimal_to_Octal(decimal_num):\n    return oct(decimal_num)[2:]", "is_syntactically_valid": true}
{"task_id": 468, "generation": "def max_product(arr, n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n != len(arr):\n        raise ValueError('Length of input array must match the given integer.')\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the maximum product\n    max_prod = 1\n\n    # Iterate through the sorted array and multiply the numbers\n    for i in range(n):\n        max_prod *= arr[i]\n\n    return max_prod", "is_syntactically_valid": true}
{"task_id": 469, "generation": "def max_profit(prices, k):\n    n = len(prices)\n    if n <= 1 or k == 0:\n        return 0\n\n    if k > n // 2:\n        # If k is greater than n/2, it's better to buy and sell all the stocks\n        profit = 0\n        for i in range(1, n):\n            if prices[i] > prices[i-1]:\n                profit += prices[i] - prices[i-1]\n        return profit\n\n    # Create a 2D array to store the maximum profit\n    dp = [[0] * (k+1) for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(1, k+1):\n            max_profit = 0\n            for m in range(i):\n                max_profit = max(max_profit, dp[m][j-1] + max(0, prices[i] - prices[m]))\n            dp[i][j] = max(dp[i-1][j], max_profit)\n\n    return dp[n-1][k]", "is_syntactically_valid": true}
{"task_id": 470, "generation": "def add_pairwise(tuples):\n    result = []\n    for i in range(0, len(tuples), 2):\n        result.append(tuples[i] + tuples[i+1])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 471, "generation": "def find_remainder(arr, n, m):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % m", "is_syntactically_valid": true}
{"task_id": 472, "generation": "def check_Consecutive(nums):\n    if len(nums) < 2:\n        return False\n    \n    for i in range(1, len(nums)):\n        if nums[i] != nums[i-1] + 1:\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 473, "generation": "def tuple_intersection(tuples1, tuples2):\n    result = set()\n    for t1 in tuples1:\n        for t2 in tuples2:\n            if set(t1) == set(t2):\n                result.add(tuple(sorted(t1)))\n    return result", "is_syntactically_valid": true}
{"task_id": 474, "generation": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)", "is_syntactically_valid": true}
{"task_id": 475, "generation": "from collections import Counter\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)", "is_syntactically_valid": true}
{"task_id": 476, "generation": "def big_sum(arr):\n    return max(arr) + min(arr)", "is_syntactically_valid": true}
{"task_id": 477, "generation": "def is_lower(string):\n    return string.lower()", "is_syntactically_valid": true}
{"task_id": 478, "generation": "def remove_lowercase(string):\n    return ''.join(char for char in string if char.isupper())", "is_syntactically_valid": true}
{"task_id": 479, "generation": "def first_Digit(num):\n    return int(str(num)[0])", "is_syntactically_valid": true}
{"task_id": 480, "generation": "def get_max_occuring_char(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    \n    return max_char", "is_syntactically_valid": true}
{"task_id": 481, "generation": "def is_subset_sum(arr, target_sum, given_sum):\n    n = len(arr)\n    dp = [[False] * (given_sum + 1) for _ in range(n + 1)]\n\n    # Base case: If the sum is 0, then the answer is true\n    for i in range(n + 1):\n        dp[i][0] = True\n\n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(1, given_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n\n    return dp[n][target_sum]", "is_syntactically_valid": true}
{"task_id": 482, "generation": "import re\n\ndef match(string):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, string):\n        return 'Yes'\n    else:\n        return 'No'", "is_syntactically_valid": true}
{"task_id": 483, "generation": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef first_Factorial_Divisible_Number(x):\n    n = 1\n    while True:\n        fact = factorial(n)\n        if fact % x == 0:\n            return n\n        n += 1", "is_syntactically_valid": true}
{"task_id": 484, "generation": "def remove_matching_tuple(tuples1, tuples2):\n    result = []\n    for t1 in tuples1:\n        if t1 not in tuples2:\n            result.append(t1)\n    return result", "is_syntactically_valid": true}
{"task_id": 485, "generation": "import heapq\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef largest_palindrome(numbers, n):\n    max_palindrome = -float('inf')\n    for num in numbers:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n    return max_palindrome", "is_syntactically_valid": true}
{"task_id": 486, "generation": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability for the given number.\n    \n    Args:\n        n (int): The total number of trials.\n        k (int): The number of successes.\n        p (float): The probability of success in each trial.\n    \n    Returns:\n        float: The binomial probability.\n    \"\"\"\n    return math.comb(n, k) * p**k * (1 - p)**(n - k)", "is_syntactically_valid": true}
{"task_id": 487, "generation": "def sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[-1])", "is_syntactically_valid": true}
{"task_id": 488, "generation": "import math\n\ndef area_pentagon(side_length):\n    \"\"\"\n    Calculates the area of a pentagon given the length of one side.\n    \n    Args:\n        side_length (float): The length of one side of the pentagon.\n    \n    Returns:\n        float: The area of the pentagon.\n    \"\"\"\n    # Calculate the apothem (the perpendicular distance from the center to the midpoint of one side)\n    apothem = side_length / (2 * math.tan(math.pi / 5))\n    \n    # Calculate the area using the formula: Area = (1/4) * n * s^2 * cot(\u03c0/n)\n    # where n is the number of sides (5) and s is the side length\n    area = (1/4) * 5 * side_length**2 * (1 / math.tan(math.pi / 5))\n    \n    return area", "is_syntactically_valid": true}
{"task_id": 489, "generation": "def frequency_Of_Largest(n, input_list):\n    max_value = max(input_list)\n    return input_list.count(max_value)", "is_syntactically_valid": true}
{"task_id": 490, "generation": "def extract_symmetric(tuples):\n    symmetric_pairs = set()\n    for pair in tuples:\n        if pair[0] == pair[1][::-1]:\n            symmetric_pairs.add(tuple(sorted(pair)))\n    return symmetric_pairs", "is_syntactically_valid": true}
{"task_id": 491, "generation": "def sum_gp(a, n, r):\n    \"\"\"\n    Calculates the sum of a geometric progression series.\n\n    Args:\n        a (float): The first term of the series.\n        n (int): The number of terms in the series.\n        r (float): The common ratio of the series.\n\n    Returns:\n        float: The sum of the geometric progression series.\n    \"\"\"\n    if a == 0 or r == 0:\n        return 'Error: Zero is not allowed as an input'\n\n    sum = a * (1 - r**n) / (1 - r)\n    return sum", "is_syntactically_valid": true}
{"task_id": 492, "generation": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "is_syntactically_valid": true}
{"task_id": 493, "generation": "import math\n\ndef calculate_polygons(x1, y1, x2, y2, n):\n    \"\"\"\n    Calculates a grid of hexagon coordinates.\n    \n    Args:\n        x1 (float): The x-coordinate of the first point.\n        y1 (float): The y-coordinate of the first point.\n        x2 (float): The x-coordinate of the second point.\n        y2 (float): The y-coordinate of the second point.\n        n (int): The number of rows and columns of hexagons.\n        \n    Returns:\n        list of list of tuples: A list of lists containing 6 tuples of x, y point coordinates for each hexagon.\n    \"\"\"\n    dx = x2 - x1\n    dy = y2 - y1\n    \n    polygons = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            x = x1 + j * dx / (n - 1)\n            y = y1 + i * dy / (n - 1)\n            \n            points = []\n            for k in range(6):\n                angle = 2 * math.pi * k / 6\n                points.append((x + math.cos(angle), y + math.sin(angle)))\n            row.append(points)\n        polygons.append(row)\n    \n    return polygons", "is_syntactically_valid": true}
{"task_id": 494, "generation": "def binary_to_integer(binary_tuple):\n    binary_string = ''.join(map(str, binary_tuple))\n    return str(int(binary_string, 2))", "is_syntactically_valid": true}
{"task_id": 495, "generation": "import re\n\ndef remove_lowercase(text):\n    return re.sub(r'[a-z]+', '', text)\n\n# Test cases\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'", "is_syntactically_valid": true}
{"task_id": 496, "generation": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    \"\"\"\n    Find the smallest k integers from a given list of numbers using heap queue algorithm.\n    \n    Args:\n        numbers (list): A list of numbers.\n        k (int): The number of smallest integers to return.\n    \n    Returns:\n        list: A list of the smallest k integers from the input list.\n    \"\"\"\n    return heapq.nsmallest(k, numbers)", "is_syntactically_valid": true}
{"task_id": 497, "generation": "import math\n\ndef surfacearea_cone(r, h):\n    \"\"\"\n    Calculates the surface area of a cone.\n    \n    Args:\n        r (float): The radius of the cone's base.\n        h (float): The height of the cone.\n    \n    Returns:\n        float: The surface area of the cone.\n    \"\"\"\n    slant_length = math.sqrt(r**2 + h**2)\n    surface_area = math.pi * r * (r + slant_length)\n    return round(surface_area, 10)", "is_syntactically_valid": true}
{"task_id": 498, "generation": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_syntactically_valid": true}
{"task_id": 499, "generation": "def diameter_circle(radius):\n    return 2 * radius", "is_syntactically_valid": true}
{"task_id": 500, "generation": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)", "is_syntactically_valid": true}
{"task_id": 501, "generation": "def num_comm_div(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_syntactically_valid": true}
{"task_id": 502, "generation": "def find(a, b):\n    return a % b", "is_syntactically_valid": true}
{"task_id": 503, "generation": "def add_consecutive_nums(nums):\n    result = []\n    prev = None\n    curr_sum = 0\n    for num in nums:\n        if prev is None or num != prev + 1:\n            if curr_sum > 0:\n                result.append(curr_sum)\n            curr_sum = num\n        else:\n            curr_sum += num\n        prev = num\n    if curr_sum > 0:\n        result.append(curr_sum)\n    return result", "is_syntactically_valid": true}
{"task_id": 504, "generation": "def sum_Of_Series(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6", "is_syntactically_valid": true}
{"task_id": 505, "generation": "def re_order(arr):\n    non_zeros = [x for x in arr if x != 0]\n    zeros = [x for x in arr if x == 0]\n    return non_zeros + zeros", "is_syntactically_valid": true}
{"task_id": 506, "generation": "def permutation_coefficient(n, k):\n    result = 1\n    for i in range(n, n-k, -1):\n        result *= i\n    return result", "is_syntactically_valid": true}
{"task_id": 507, "generation": "def remove_words(words, remove):\n    return [word for word in words if word not in remove]", "is_syntactically_valid": true}
{"task_id": 508, "generation": "def same_order(list1, list2):\n    common_elements = [x for x in list1 if x in list2]\n    return common_elements == [x for x in list1 if x in common_elements]", "is_syntactically_valid": true}
{"task_id": 509, "generation": "def average_Odd(n):\n    odd_numbers = [i for i in range(1, n+1, 2)]\n    return sum(odd_numbers) / len(odd_numbers)", "is_syntactically_valid": true}
{"task_id": 510, "generation": "from itertools import combinations\n\ndef no_of_subsequences(arr, k):\n    count = 0\n    for i in range(1, len(arr)+1):\n        for combo in combinations(arr, i):\n            if prod(combo) < k:\n                count += 1\n    return count\n\ndef prod(lst):\n    result = 1\n    for x in lst:\n        result *= x\n    return result", "is_syntactically_valid": true}
