{"task_id": 11, "generation": "def remove_Occ(string, char):\n    # Find the first and last occurrence of the character\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return string\n    \n    # Remove the first and last occurrence of the character\n    return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]", "is_syntactically_valid": true}
{"task_id": 12, "generation": "def sort_matrix(matrix):\n    # Sort the matrix by the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix", "is_syntactically_valid": true}
{"task_id": 13, "generation": "from collections import Counter\n\ndef count_common(words):\n    \"\"\"\n    Counts the most common words in a list of words.\n    \n    Args:\n        words (list): A list of words.\n    \n    Returns:\n        list: A list of tuples, where each tuple contains a word and its count.\n    \"\"\"\n    word_counts = Counter(words)\n    return sorted(word_counts.items(), key=lambda x: x[1], reverse=True)", "is_syntactically_valid": true}
{"task_id": 14, "generation": "def find_Volume(base, height, depth):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n    \n    Args:\n        base (float): The base length of the triangular prism.\n        height (float): The height of the triangular prism.\n        depth (float): The depth of the triangular prism.\n    \n    Returns:\n        float: The volume of the triangular prism.\n    \"\"\"\n    return 0.5 * base * height * depth", "is_syntactically_valid": true}
{"task_id": 15, "generation": "def split_lowerstring(s):\n    result = []\n    current = \"\"\n    for char in s:\n        if char.islower():\n            current += char\n        else:\n            if current:\n                result.append(current)\n                current = \"\"\n            result.append(char)\n    if current:\n        result.append(current)\n    return result", "is_syntactically_valid": true}
{"task_id": 16, "generation": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 17, "generation": "def square_perimeter(side_length):\n    return 4 * side_length", "is_syntactically_valid": true}
{"task_id": 18, "generation": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string that are present in the second string.\n    \n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n    \n    Returns:\n        str: The first string with characters removed that are present in the second string.\n    \"\"\"\n    return ''.join(char for char in string1 if char not in string2)", "is_syntactically_valid": true}
{"task_id": 19, "generation": "def test_duplicate(arr):\n    # Convert the array to a set to remove duplicates\n    unique_set = set(arr)\n    \n    # Check if the length of the set is the same as the length of the original array\n    return len(unique_set) != len(arr)", "is_syntactically_valid": true}
{"task_id": 20, "generation": "def is_woodall(n):\n    \"\"\"\n    Checks if the given number is a Woodall number.\n    \n    A Woodall number is a number of the form 2^n - n - 1, where n is a positive integer.\n    \n    Args:\n    n (int): The number to be checked.\n    \n    Returns:\n    bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    for i in range(1, n+1):\n        if n == 2**i - i - 1:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 21, "generation": "def multiples_of_num(n, m):\n    \"\"\"\n    Find m number of multiples of n.\n    \n    Args:\n    n (int): The number to find multiples of.\n    m (int): The number of multiples to find.\n    \n    Returns:\n    list: A list of m multiples of n.\n    \"\"\"\n    multiples = []\n    i = 1\n    while len(multiples) < m:\n        multiple = n * i\n        multiples.append(multiple)\n        i += 1\n    return multiples", "is_syntactically_valid": true}
{"task_id": 22, "generation": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "is_syntactically_valid": true}
{"task_id": 23, "generation": "def maximum_Sum(lst):\n    \"\"\"\n    Find the maximum sum of elements in a list of lists.\n\n    Parameters:\n    lst (list): A list of lists, where each inner list contains integers.\n\n    Returns:\n    int: The maximum sum of elements in the list of lists.\n    \"\"\"\n    max_sum = 0\n    for inner_list in lst:\n        max_sum = max(max_sum, sum(inner_list))\n    return max_sum", "is_syntactically_valid": true}
{"task_id": 24, "generation": "def binary_to_decimal(binary):\n    \"\"\"\n    Converts a binary number to its decimal equivalent.\n    Args:\n        binary: the binary number as a string.\n    Returns:\n        The decimal equivalent of the binary number.\n    \"\"\"\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal", "is_syntactically_valid": true}
{"task_id": 25, "generation": "def find_Product(arr, n):\n    \"\"\"\n    Function to find the product of non-repeated elements in a given array.\n    \n    Parameters:\n    arr (list): The input array.\n    n (int): The length of the input array.\n    \n    Returns:\n    int: The product of non-repeated elements in the input array.\n    \"\"\"\n    # Create a dictionary to store the count of each element\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Multiply the non-repeated elements\n    product = 1\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    \n    return product", "is_syntactically_valid": true}
{"task_id": 26, "generation": "def check_k_elements(tuples, k):\n    for t in tuples:\n        if len(t) != k:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 27, "generation": "def remove(lst):\n    return [s.replace(digit, '') for s in lst for digit in '0123456789']", "is_syntactically_valid": true}
{"task_id": 28, "generation": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculates the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to be chosen.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a given number.\n\n    Parameters:\n    n (int): The number to calculate the factorial for.\n\n    Returns:\n    int: The factorial of the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "is_syntactically_valid": true}
{"task_id": 29, "generation": "def get_Odd_Occurrence(lst, n):\n    \"\"\"\n    Find the element occurring odd number of times in the given list.\n\n    Args:\n        lst (list): A list of integers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The element occurring odd number of times.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the element with odd frequency\n    for num, count in freq.items():\n        if count % 2 != 0:\n            return num\n\n    return -1", "is_syntactically_valid": true}
{"task_id": 30, "generation": "def count_Substring_With_Equal_Ends(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 31, "generation": "from collections import Counter\nimport heapq\n\ndef func(lists, k):\n    # Combine all the lists into a single list\n    all_nums = []\n    for l in lists:\n        all_nums.extend(l)\n\n    # Count the frequency of each number\n    num_counts = Counter(all_nums)\n\n    # Use a heap to find the top k most frequent numbers\n    heap = [(-count, num) for num, count in num_counts.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]", "is_syntactically_valid": true}
{"task_id": 32, "generation": "def max_Prime_Factors(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    \n    Args:\n        n (int): The number to find the largest prime factor for.\n    \n    Returns:\n        int: The largest prime factor of the given number.\n    \"\"\"\n    # Initialize the largest prime factor to 1\n    max_factor = 1\n    \n    # Check for factors of 2 first\n    while n % 2 == 0:\n        max_factor = 2\n        n //= 2\n    \n    # Check for odd factors\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            max_factor = i\n            n //= i\n    \n    # If n is a prime number greater than 2, it is the largest prime factor\n    if n > 2:\n        max_factor = n\n    \n    return max_factor", "is_syntactically_valid": true}
{"task_id": 33, "generation": "def decimal_To_Binary(decimal):\n    \"\"\"\n    Converts a decimal number to its binary representation.\n    \n    Args:\n        decimal (int): The decimal number to be converted.\n    \n    Returns:\n        int: The binary representation of the input decimal number.\n    \"\"\"\n    return int(bin(decimal)[2:])", "is_syntactically_valid": true}
{"task_id": 34, "generation": "def find_missing(arr, n):\n    \"\"\"\n    Find the missing number in a sorted array.\n    \n    Args:\n        arr (list): The sorted array.\n        n (int): The expected length of the array.\n        \n    Returns:\n        int: The missing number in the array.\n    \"\"\"\n    for i in range(1, n+1):\n        if i not in arr:\n            return i\n    return -1", "is_syntactically_valid": true}
{"task_id": 35, "generation": "def find_rect_num(n):\n    \"\"\"\n    Find the n-th rectangular number.\n    \n    The n-th rectangular number is the product of n and the (n+1)th natural number.\n    \n    Parameters:\n    n (int): The index of the rectangular number to find.\n    \n    Returns:\n    int: The n-th rectangular number.\n    \"\"\"\n    return n * (n + 1)", "is_syntactically_valid": true}
{"task_id": 36, "generation": "import math\n\ndef find_Nth_Digit(numerator, denominator, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    \n    Args:\n        numerator (int): The numerator of the fraction.\n        denominator (int): The denominator of the fraction.\n        n (int): The position of the digit to be found, starting from the first digit after the decimal point.\n    \n    Returns:\n        int: The nth digit in the proper fraction.\n    \"\"\"\n    # Calculate the proper fraction\n    fraction = numerator / denominator\n    \n    # Convert the fraction to a string and extract the digits after the decimal point\n    digits = str(fraction).split('.')[1]\n    \n    # Return the nth digit\n    return int(digits[n-1])", "is_syntactically_valid": true}
{"task_id": 37, "generation": "def sort_mixed_list(lst):\n    integers = []\n    strings = []\n    for item in lst:\n        if isinstance(item, int):\n            integers.append(item)\n        else:\n            strings.append(item)\n    \n    integers.sort()\n    strings.sort()\n    \n    sorted_list = integers + strings\n    return sorted_list", "is_syntactically_valid": true}
{"task_id": 38, "generation": "def div_even_odd(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    odd_nums = [num for num in lst if num % 2 != 0]\n    if even_nums and odd_nums:\n        return even_nums[0] / odd_nums[0]\n    else:\n        return 0", "is_syntactically_valid": true}
{"task_id": 39, "generation": "def rearrange_string(s):\n    # Count the frequency of each character in the string\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Sort the characters by their frequency in descending order\n    sorted_chars = sorted(char_count.items(), key=lambda x: x[1], reverse=True)\n    \n    # Rearrange the string\n    result = []\n    prev_char = None\n    prev_count = 0\n    for char, count in sorted_chars:\n        while count > 0:\n            if prev_char is None or char != prev_char:\n                result.append(char)\n                count -= 1\n                prev_char = char\n                prev_count = 1\n            else:\n                break\n    \n    # Check if the rearranged string is valid\n    if len(result) == len(s):\n        return ''.join(result)\n    else:\n        return \"\"", "is_syntactically_valid": true}
{"task_id": 40, "generation": "from collections import Counter\n\ndef freq_element(lst):\n    freq = {}\n    for l in lst:\n        for item in l:\n            freq[item] = freq.get(item, 0) + 1\n    return freq", "is_syntactically_valid": true}
{"task_id": 41, "generation": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))", "is_syntactically_valid": true}
{"task_id": 42, "generation": "def find_Sum(arr, n):\n    count = {}\n    sum_repeated = 0\n    \n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    for value in count.values():\n        if value > 1:\n            sum_repeated += value - 1\n    \n    return sum_repeated", "is_syntactically_valid": true}
{"task_id": 43, "generation": "import re\n\ndef text_match(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 44, "generation": "def text_match_string(text):\n    if text.strip().startswith(\"python\"):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"", "is_syntactically_valid": true}
{"task_id": 45, "generation": "def get_gcd(arr):\n    \"\"\"\n    Find the greatest common divisor (GCD) of the elements in the given array.\n    \n    Args:\n    arr (list): A list of integers.\n    \n    Returns:\n    int: The greatest common divisor of the elements in the array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    result = arr[0]\n    for i in range(1, len(arr)):\n        result = gcd(result, arr[i])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 46, "generation": "def test_distinct(numbers):\n    return len(set(numbers)) == len(numbers)", "is_syntactically_valid": true}
{"task_id": 47, "generation": "def compute_Last_Digit(a, b):\n    # Calculate the factorial of a and b\n    fact_a = 1\n    fact_b = 1\n    for i in range(1, a+1):\n        fact_a *= i\n    for i in range(1, b+1):\n        fact_b *= i\n\n    # Find the last digit of the result\n    return fact_b % fact_a", "is_syntactically_valid": true}
{"task_id": 48, "generation": "def odd_bit_set_number(num):\n    \"\"\"\n    Sets all odd bits of a given number.\n    \n    Parameters:\n    num (int): The input number.\n    \n    Returns:\n    int: The number with all odd bits set.\n    \"\"\"\n    return num | 0b10101010101010101010101010101010", "is_syntactically_valid": true}
{"task_id": 49, "generation": "def specified_element(lst, index):\n    \"\"\"\n    Extracts every first or specified element from a given two-dimensional list.\n\n    Args:\n    lst (list): A two-dimensional list.\n    index (int): The index of the element to extract.\n\n    Returns:\n    list: A list containing the extracted elements.\n    \"\"\"\n    return [row[index] for row in lst]", "is_syntactically_valid": true}
{"task_id": 50, "generation": "def min_length_list(lst):\n    min_len = float('inf')\n    min_list = None\n    for l in lst:\n        if len(l) < min_len:\n            min_len = len(l)\n            min_list = l\n    return (min_len, min_list)", "is_syntactically_valid": true}
{"task_id": 51, "generation": "def check_equilateral(a, b, c):\n    \"\"\"\n    Checks if a triangle is equilateral.\n    \n    Args:\n        a (int): Length of the first side.\n        b (int): Length of the second side.\n        c (int): Length of the third side.\n    \n    Returns:\n        bool: True if the triangle is equilateral, False otherwise.\n    \"\"\"\n    if a == b == c:\n        return True\n    else:\n        return False", "is_syntactically_valid": true}
{"task_id": 52, "generation": "def parallelogram_area(base, height):\n    \"\"\"\n    Calculates the area of a parallelogram.\n    \n    Args:\n    base (int or float): The base length of the parallelogram.\n    height (int or float): The height of the parallelogram.\n    \n    Returns:\n    int or float: The area of the parallelogram.\n    \"\"\"\n    return base * height", "is_syntactically_valid": true}
{"task_id": 53, "generation": "def check_Equality(string):\n    if len(string) < 2:\n        return \"Not Equal\"\n    elif string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"", "is_syntactically_valid": true}
{"task_id": 54, "generation": "def counting_sort(arr):\n    \"\"\"\n    Sorts the given array using counting sort algorithm.\n    \n    Args:\n        arr (list): The input array to be sorted.\n    \n    Returns:\n        list: The sorted array.\n    \"\"\"\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Create a count array to store the count of individual elements\n    count_arr = [0] * (max_element + 1)\n    \n    # Store the count of each element\n    for element in arr:\n        count_arr[element] += 1\n    \n    # Modify the count_arr to get the actual position of each element in the output array\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n    \n    # Build the output array\n    output_arr = [0] * len(arr)\n    i = len(arr) - 1\n    while i >= 0:\n        output_arr[count_arr[arr[i]] - 1] = arr[i]\n        count_arr[arr[i]] -= 1\n        i -= 1\n    \n    return output_arr", "is_syntactically_valid": true}
{"task_id": 55, "generation": "def tn_gp(a, r, n):\n    \"\"\"\n    Find the n-th term of a geometric series.\n\n    Args:\n        a (int): The first term of the geometric series.\n        r (int): The common ratio of the geometric series.\n        n (int): The index of the term to be found.\n\n    Returns:\n        int: The n-th term of the geometric series.\n    \"\"\"\n    return a * (r ** (n - 1))", "is_syntactically_valid": true}
{"task_id": 56, "generation": "def check(n):\n    # Find the reverse of the given number\n    reverse = int(str(n)[::-1])\n    \n    # Check if the given number is one less than twice its reverse\n    return n == 2 * reverse - 1", "is_syntactically_valid": true}
{"task_id": 57, "generation": "def find_Max_Num(digits, n):\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Args:\n        digits (list): A list of digits.\n        n (int): The number of digits.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n    \"\"\"\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))", "is_syntactically_valid": true}
{"task_id": 58, "generation": "def opposite_Signs(a, b):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the two integers have opposite sign, False otherwise.\n    \"\"\"\n    return (a < 0 and b > 0) or (a > 0 and b < 0)", "is_syntactically_valid": true}
{"task_id": 59, "generation": "def is_octagonal(n):\n    \"\"\"\n    Finds the nth octagonal number.\n    \n    Args:\n        n (int): The position of the octagonal number to find.\n        \n    Returns:\n        int: The nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)", "is_syntactically_valid": true}
{"task_id": 60, "generation": "def max_len_sub(arr, n):\n    \"\"\"\n    Find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\n    Args:\n        arr (List[int]): The input array.\n        n (int): The length of the input array.\n\n    Returns:\n        int: The maximum length of the subsequence with difference between adjacent elements.\n    \"\"\"\n    dp = [1] * n  # Initialize the dynamic programming array with 1s\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 61, "generation": "def count_Substrings(s, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 62, "generation": "def smallest_num(nums):\n    return min(nums)", "is_syntactically_valid": true}
{"task_id": 63, "generation": "def max_difference(pairs):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    pairs (list): A list of tuples, where each tuple represents a pair of numbers.\n\n    Returns:\n    int: The maximum difference between the pairs.\n    \"\"\"\n    max_diff = 0\n    for a, b in pairs:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff", "is_syntactically_valid": true}
{"task_id": 64, "generation": "def subject_marks(tuples):\n    return sorted(tuples, key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 65, "generation": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "is_syntactically_valid": true}
{"task_id": 66, "generation": "def pos_count(nums):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    return sum(1 for num in nums if num > 0)", "is_syntactically_valid": true}
{"task_id": 67, "generation": "from math import factorial\n\ndef bell_number(n):\n    \"\"\"\n    Calculates the Bell number, which represents the number of ways to partition a set of n elements.\n    \n    Args:\n        n (int): The number of elements in the set.\n        \n    Returns:\n        int: The Bell number for the given set size.\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * factorial(i - j) // factorial(i - j)\n    \n    return bell[n]", "is_syntactically_valid": true}
{"task_id": 68, "generation": "def is_Monotonic(arr):\n    \"\"\"\n    Checks whether the given array is monotonic or not.\n    \n    Args:\n    arr (list): The input array to be checked.\n    \n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            is_decreasing = False\n        if arr[i] < arr[i-1]:\n            is_increasing = False\n    \n    return is_increasing or is_decreasing", "is_syntactically_valid": true}
{"task_id": 69, "generation": "def is_sublist(lst, sub_lst):\n    \"\"\"\n    Checks if a given sublist is present in a list.\n    \n    Args:\n        lst (list): The list to search.\n        sub_lst (list): The sublist to check for.\n        \n    Returns:\n        bool: True if the sublist is present, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - len(sub_lst) + 1):\n        if lst[i:i+len(sub_lst)] == sub_lst:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 70, "generation": "def get_equal(tuples, expected_length):\n    \"\"\"\n    Checks if all the given tuples have the same length.\n    \n    Args:\n        tuples (list): A list of tuples.\n        expected_length (int): The expected length of each tuple.\n    \n    Returns:\n        str: A string indicating whether all tuples have the same length or not.\n    \"\"\"\n    for t in tuples:\n        if len(t) != expected_length:\n            return \"All tuples do not have same length\"\n    return \"All tuples have same length\"", "is_syntactically_valid": true}
{"task_id": 71, "generation": "def comb_sort(arr):\n    n = len(arr)\n    gap = n\n    swaps = True\n\n    while gap > 1 or swaps:\n        gap = max(1, int(gap / 1.25))\n        swaps = False\n        for i in range(n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swaps = True\n    return arr", "is_syntactically_valid": true}
{"task_id": 72, "generation": "def dif_Square(n):\n    \"\"\"\n    Checks whether the given number can be represented as the difference of two squares.\n    \n    Args:\n        n (int): The number to be checked.\n    \n    Returns:\n        bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(1, int(n**0.5) + 1):\n        j = i**2\n        k = n - j\n        if k >= 0 and int(k**0.5)**2 == k:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 73, "generation": "import re\n\ndef multiple_split(text):\n    return re.split(r'[\\*\\n]', text)", "is_syntactically_valid": true}
{"task_id": 74, "generation": "def is_samepatterns(strings, patterns):\n    if len(strings) != len(patterns):\n        return False\n    \n    mapping = {}\n    used_values = set()\n    \n    for i in range(len(strings)):\n        string = strings[i]\n        pattern = patterns[i]\n        \n        if pattern in mapping:\n            if mapping[pattern] != string:\n                return False\n        else:\n            if string in used_values:\n                return False\n            mapping[pattern] = string\n            used_values.add(string)\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 75, "generation": "def find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 76, "generation": "def count_Squares(length, width):\n    return (length * width) + (length - 1) * (width - 1)", "is_syntactically_valid": true}
{"task_id": 77, "generation": "def is_Diff(num):\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return abs(even_sum - odd_sum) > 0", "is_syntactically_valid": true}
{"task_id": 78, "generation": "def count_With_Odd_SetBits(n: int) -> int:\n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 == 1:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 79, "generation": "def word_len(word):\n    return len(word) % 2 != 0", "is_syntactically_valid": true}
{"task_id": 80, "generation": "def tetrahedral_number(n):\n    \"\"\"\n    Calculates the nth tetrahedral number.\n\n    Args:\n        n (int): The index of the tetrahedral number to calculate.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) / 6", "is_syntactically_valid": true}
{"task_id": 81, "generation": "def zip_tuples(t1, t2):\n    \"\"\"\n    Zip the two given tuples.\n\n    Args:\n        t1 (tuple): The first tuple.\n        t2 (tuple): The second tuple.\n\n    Returns:\n        list: A list of tuples, where each tuple is a pair of elements from the input tuples.\n    \"\"\"\n    return list(zip(t1, t2*len(t1), t1*len(t2), t2))", "is_syntactically_valid": true}
{"task_id": 82, "generation": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Calculates the volume of a sphere given its radius.\n    \n    Args:\n        r (float): The radius of the sphere.\n    \n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * r**3", "is_syntactically_valid": true}
{"task_id": 83, "generation": "def get_Char(string):\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # Add the ASCII value of the character to the total\n        total += ord(char)\n    \n    # Convert the total to a character and return it\n    return chr(total % 26 + 97)", "is_syntactically_valid": true}
{"task_id": 84, "generation": "def sequence(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    a, b = 1, 1\n    for i in range(3, n+1):\n        a, b = b, a + b\n    \n    return b", "is_syntactically_valid": true}
{"task_id": 85, "generation": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculates the surface area of a sphere given its radius.\n    \n    Args:\n        radius (float): The radius of the sphere.\n    \n    Returns:\n        float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * (radius ** 2)", "is_syntactically_valid": true}
{"task_id": 86, "generation": "def centered_hexagonal_number(n):\n    \"\"\"\n    Finds the nth centered hexagonal number.\n    \n    Args:\n    n (int): The position of the centered hexagonal number to find.\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)", "is_syntactically_valid": true}
{"task_id": 87, "generation": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = {**dict1, **dict2, **dict3}\n    return result", "is_syntactically_valid": true}
{"task_id": 88, "generation": "def freq_count(lst):\n    \"\"\"\n    Get the frequency of the elements in a list.\n    \n    Args:\n        lst (list): The input list.\n    \n    Returns:\n        dict: A dictionary where the keys are the unique elements in the list and the values are their frequencies.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq", "is_syntactically_valid": true}
{"task_id": 89, "generation": "def closest_num(n):\n    if n <= 1:\n        return None\n    return n - 1", "is_syntactically_valid": true}
{"task_id": 90, "generation": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in the given list of words.\n    \n    :param words: list of strings, the list of words\n    :return: int, the length of the longest word\n    \"\"\"\n    longest_length = 0\n    for word in words:\n        if len(word) > longest_length:\n            longest_length = len(word)\n    return longest_length", "is_syntactically_valid": true}
{"task_id": 91, "generation": "def find_substring(strings, substring):\n    for s in strings:\n        if substring in s:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 92, "generation": "def is_undulating(num_str):\n    \"\"\"\n    Checks whether the given number is undulating or not.\n    \n    Args:\n        num_str (str): The number to be checked.\n        \n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    if len(num_str) < 3:\n        return False\n    \n    for i in range(1, len(num_str), 2):\n        if int(num_str[i]) != int(num_str[i-1]) + 1 and int(num_str[i]) != int(num_str[i-1]) - 1:\n            return False\n    \n    return True", "is_syntactically_valid": true}
{"task_id": 93, "generation": "def power(a, b):\n    return a ** b", "is_syntactically_valid": true}
{"task_id": 94, "generation": "def index_minimum(tuples):\n    \"\"\"\n    Extracts the name of the record with the minimum value from the given list of tuples.\n\n    Args:\n        tuples (list): A list of tuples, where each tuple contains a name and a value.\n\n    Returns:\n        str: The name of the record with the minimum value.\n    \"\"\"\n    min_value = float('inf')\n    min_name = None\n    for name, value in tuples:\n        if value < min_value:\n            min_value = value\n            min_name = name\n    return min_name", "is_syntactically_valid": true}
{"task_id": 95, "generation": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublst in lst:\n        min_length = min(min_length, len(sublst))\n    return min_length", "is_syntactically_valid": true}
{"task_id": 96, "generation": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 97, "generation": "def frequency_lists(lst):\n    freq = {}\n    for l in lst:\n        for x in l:\n            if x in freq:\n                freq[x] += 1\n            else:\n                freq[x] = 1\n    return freq", "is_syntactically_valid": true}
{"task_id": 98, "generation": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "is_syntactically_valid": true}
{"task_id": 99, "generation": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to its binary equivalent.\n    \n    Parameters:\n    decimal (int): The decimal number to be converted.\n    \n    Returns:\n    str: The binary equivalent of the input decimal number.\n    \"\"\"\n    binary = bin(decimal)[2:]\n    return binary", "is_syntactically_valid": true}
{"task_id": 100, "generation": "def next_smallest_palindrome(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # Find the middle index of the number\n    mid = len(num_str) // 2\n    \n    # Construct the new palindrome\n    left = num_str[:mid]\n    right = num_str[mid:][::-1]\n    \n    # If the number is odd, keep the middle digit\n    if len(num_str) % 2 != 0:\n        right = num_str[mid+1:][::-1]\n    \n    # Combine the left and right parts\n    new_num_str = left + right\n    \n    # Convert the new palindrome to an integer\n    new_num = int(new_num_str)\n    \n    # If the new palindrome is smaller than the original number, increment it by 10^(len(num_str)//2)\n    if new_num <= num:\n        new_num += 10 ** (len(num_str) // 2)\n    \n    return new_num", "is_syntactically_valid": true}
{"task_id": 101, "generation": "def kth_element(arr, n, k):\n    \"\"\"\n    Find the kth element in the given array.\n    \n    Args:\n    arr (list): The input array.\n    n (int): The length of the array.\n    k (int): The index of the element to find (1-based).\n    \n    Returns:\n    int: The kth element in the array.\n    \"\"\"\n    arr.sort()\n    return arr[k-1]", "is_syntactically_valid": true}
{"task_id": 102, "generation": "def snake_to_camel(snake_case_str):\n    words = snake_case_str.split('_')\n    camel_case_str = words[0].capitalize()\n    for word in words[1:]:\n        camel_case_str += word.capitalize()\n    return camel_case_str", "is_syntactically_valid": true}
{"task_id": 103, "generation": "from math import factorial\n\ndef eulerian_num(n, m):\n    \"\"\"\n    Calculates the Eulerian number a(n, m).\n    \n    Args:\n        n (int): The total number of elements.\n        m (int): The number of elements to be chosen.\n        \n    Returns:\n        int: The Eulerian number a(n, m).\n    \"\"\"\n    result = 0\n    for i in range(m + 1):\n        result += (-1) ** (i) * factorial(n) // (factorial(i) * factorial(n - i))\n    return result", "is_syntactically_valid": true}
{"task_id": 104, "generation": "def sort_sublists(lst):\n    return [sorted(sub_list, key=lambda x: x.strip().lower()) for sub_list in lst]", "is_syntactically_valid": true}
{"task_id": 105, "generation": "def count(lst):\n    return sum(1 for x in lst if x)", "is_syntactically_valid": true}
{"task_id": 106, "generation": "def add_lists(list1, tuple1):\n    return tuple1 + tuple(list1)", "is_syntactically_valid": true}
{"task_id": 107, "generation": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end+1):\n        if isinstance(num, int) and 0 <= num <= 15:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 108, "generation": "import heapq\n\ndef merge_sorted_list(*iterables):\n    \"\"\"\n    Merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \n    Args:\n        *iterables: One or more sorted iterables.\n    \n    Returns:\n        A sorted list containing all the elements from the input iterables.\n    \"\"\"\n    heap = []\n    for iterable in iterables:\n        for item in iterable:\n            heapq.heappush(heap, item)\n    \n    return [heapq.heappop(heap) for _ in range(len(heap))]", "is_syntactically_valid": true}
{"task_id": 109, "generation": "def odd_Equivalent(binary_string, n):\n    count = 0\n    for i in range(n):\n        if sum(int(digit) for digit in binary_string[i:]) % 2 == 1:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 110, "generation": "def extract_missing(ranges, start, end):\n    result = []\n    prev_end = start\n    for start_range, end_range in ranges:\n        if start_range > prev_end:\n            result.append((prev_end, start_range))\n        prev_end = end_range\n    if prev_end < end:\n        result.append((prev_end, end))\n    return result", "is_syntactically_valid": true}
{"task_id": 111, "generation": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements &= set(lst)\n    return sorted(list(common_elements))", "is_syntactically_valid": true}
{"task_id": 112, "generation": "def perimeter(radius, height):\n    \"\"\"\n    Calculates the perimeter of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The perimeter of the cylinder.\n    \"\"\"\n    return 2 * 3.14 * radius + 2 * height", "is_syntactically_valid": true}
{"task_id": 113, "generation": "def check_integer(input_str):\n    try:\n        int(input_str)\n        return True\n    except ValueError:\n        return False", "is_syntactically_valid": true}
{"task_id": 114, "generation": "def assign_freq(tuples):\n    freq_dict = {}\n    for t in tuples:\n        t = tuple(sorted(t))\n        if t in freq_dict:\n            freq_dict[t] += 1\n        else:\n            freq_dict[t] = 1\n    \n    result = []\n    for t, count in freq_dict.items():\n        result.append(t + (count,))\n    \n    return str(sorted(result))", "is_syntactically_valid": true}
{"task_id": 115, "generation": "def empty_dit(lst):\n    if isinstance(lst, dict):\n        return len(lst) == 0\n    elif isinstance(lst, list):\n        return all(empty_dit(item) for item in lst)\n    else:\n        return False", "is_syntactically_valid": true}
{"task_id": 116, "generation": "def tuple_to_int(tup):\n    result = 0\n    for digit in tup:\n        result = result * 10 + digit\n    return result", "is_syntactically_valid": true}
{"task_id": 117, "generation": "def list_to_float(lst):\n    result = []\n    for pair in lst:\n        x, y = pair\n        try:\n            x = float(x)\n        except ValueError:\n            pass\n        try:\n            y = float(y)\n        except ValueError:\n            pass\n        result.append((x, y))\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 118, "generation": "def string_to_list(string):\n    return string.split()", "is_syntactically_valid": true}
{"task_id": 119, "generation": "def search(lst, n):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n        lst (list): A sorted list of integers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The element that appears only once in the list.\n    \"\"\"\n    left, right = 0, n - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if mid % 2 == 1:\n            mid -= 1\n\n        if lst[mid] == lst[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n\n    return lst[left]", "is_syntactically_valid": true}
{"task_id": 120, "generation": "def max_product_tuple(tuples):\n    \"\"\"\n    Find the maximum product from the pairs of tuples within a given list.\n\n    Parameters:\n    tuples (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n    int: The maximum product from the pairs of tuples.\n    \"\"\"\n    max_product = 0\n    for a, b in tuples:\n        product = a * b\n        if product > max_product:\n            max_product = product\n    return max_product", "is_syntactically_valid": true}
{"task_id": 121, "generation": "def check_triplet(arr, target_sum, target_a, target_b):\n    \"\"\"\n    Find if there exists a triplet in the given array with the sum equal to the target sum.\n    \n    Args:\n        arr (list): The input array.\n        target_sum (int): The target sum.\n        target_a (int): The target value for the first element of the triplet.\n        target_b (int): The target value for the second element of the triplet.\n    \n    Returns:\n        bool: True if a triplet with the target sum exists, False otherwise.\n    \"\"\"\n    # Convert the array to a set for efficient lookup\n    arr_set = set(arr)\n    \n    for a in arr_set:\n        if a == target_a:\n            continue\n        for b in arr_set:\n            if b == target_b:\n                continue\n            c = target_sum - a - b\n            if c in arr_set and c != a and c != b:\n                return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 122, "generation": "def smartNumber(n):\n    \"\"\"\n    Find the n-th smart number.\n    \n    A smart number is a number whose sum of digits is equal to the square root of the number.\n    \n    Parameters:\n    n (int): The index of the smart number to find.\n    \n    Returns:\n    int: The n-th smart number.\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        if sum(int(digit) for digit in str(i)) ** 2 == i:\n            count += 1\n        i += 1\n    return i - 1", "is_syntactically_valid": true}
{"task_id": 123, "generation": "def is_amicable(n):\n    \"\"\"\n    Checks if a number is amicable.\n    An amicable number is a pair of numbers where the sum of the proper divisors of each number is equal to the other number.\n    \"\"\"\n    divisors_sum = sum(i for i in range(1, n) if n % i == 0)\n    return divisors_sum != n and sum(i for i in range(1, divisors_sum) if divisors_sum % i == 0) == n\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Calculates the sum of all amicable numbers from 1 to n.\n    \"\"\"\n    return sum(i for i in range(1, n+1) if is_amicable(i))", "is_syntactically_valid": true}
{"task_id": 124, "generation": "import math\n\ndef angle_complex(real, imag):\n    \"\"\"\n    Calculates the angle of a complex number.\n    \n    Parameters:\n    real (float): The real part of the complex number.\n    imag (float): The imaginary part of the complex number.\n    \n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return math.atan2(imag, real)", "is_syntactically_valid": true}
{"task_id": 125, "generation": "def find_length(binary_string, n):\n    max_diff = 0\n    curr_diff = 0\n    for i in range(n):\n        if binary_string[i] == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        max_diff = max(max_diff, curr_diff)\n    return max_diff", "is_syntactically_valid": true}
{"task_id": 126, "generation": "def sum(a, b):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers.\n    \n    Args:\n        a (int): First number.\n        b (int): Second number.\n    \n    Returns:\n        int: Sum of common divisors of a and b.\n    \"\"\"\n    divisors_a = set()\n    divisors_b = set()\n    \n    for i in range(1, min(a, b) + 1):\n        if a % i == 0:\n            divisors_a.add(i)\n        if b % i == 0:\n            divisors_b.add(i)\n    \n    common_divisors = divisors_a.intersection(divisors_b)\n    return sum(common_divisors)", "is_syntactically_valid": true}
{"task_id": 127, "generation": "def multiply_int(a, b):\n    \"\"\"\n    Multiply two integers without using the * operator.\n    \n    Args:\n        a (int): The first integer to multiply.\n        b (int): The second integer to multiply.\n    \n    Returns:\n        int: The product of the two integers.\n    \"\"\"\n    result = 0\n    for _ in range(b):\n        result += a\n    return result", "is_syntactically_valid": true}
{"task_id": 128, "generation": "def long_words(n, text):\n    words = text.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words", "is_syntactically_valid": true}
{"task_id": 129, "generation": "def magic_square_test(square):\n    \"\"\"\n    Checks if a given square is a magic square.\n\n    Args:\n        square (list): A 2D list representing the square.\n\n    Returns:\n        bool: True if the square is a magic square, False otherwise.\n    \"\"\"\n    # Get the size of the square\n    n = len(square)\n\n    # Check if all rows have the same sum\n    row_sum = sum(square[0])\n    for row in square:\n        if sum(row) != row_sum:\n            return False\n\n    # Check if all columns have the same sum\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += square[i][j]\n        if col_sum != row_sum:\n            return False\n\n    # Check if the two diagonals have the same sum\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(n):\n        diag1_sum += square[i][i]\n        diag2_sum += square[i][n-i-1]\n    if diag1_sum != row_sum or diag2_sum != row_sum:\n        return False\n\n    return True", "is_syntactically_valid": true}
{"task_id": 130, "generation": "from collections import Counter\n\ndef max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): A list of items.\n\n    Returns:\n        tuple: A tuple containing the item with maximum frequency and its frequency.\n    \"\"\"\n    item_counts = Counter(lst)\n    max_count = max(item_counts.values())\n    for item, count in item_counts.items():\n        if count == max_count:\n            return (item, count)", "is_syntactically_valid": true}
{"task_id": 131, "generation": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] in vowels and s_list[j] in vowels:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n        elif s_list[i] in vowels:\n            j -= 1\n        else:\n            i += 1\n    return ''.join(s_list)", "is_syntactically_valid": true}
{"task_id": 132, "generation": "def tup_string(tup):\n    return ''.join(tup)", "is_syntactically_valid": true}
{"task_id": 133, "generation": "def sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))", "is_syntactically_valid": true}
{"task_id": 134, "generation": "def check_last(arr, p, k):\n    for _ in range(p):\n        arr[-1] += k\n    if arr[-1] % 2 == 0:\n        return \"EVEN\"\n    else:\n        return \"ODD\"", "is_syntactically_valid": true}
{"task_id": 135, "generation": "def hexagonal_num(n):\n    \"\"\"\n    Calculates the nth hexagonal number.\n    \n    Args:\n        n (int): The position of the hexagonal number to calculate.\n        \n    Returns:\n        int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)", "is_syntactically_valid": true}
{"task_id": 136, "generation": "def cal_electbill(units):\n    if units <= 100:\n        return units * 3.5\n    elif units <= 200:\n        return 350 + (units - 100) * 4.6\n    elif units <= 300:\n        return 750 + (units - 200) * 6.6\n    else:\n        return 1350 + (units - 300) * 7.4", "is_syntactically_valid": true}
{"task_id": 137, "generation": "def zero_count(arr):\n    \"\"\"\n    Calculates the ratio of zeroes in an array of integers.\n\n    Args:\n        arr (list): An array of integers.\n\n    Returns:\n        float: The ratio of zeroes in the array.\n    \"\"\"\n    total_count = len(arr)\n    zero_count = arr.count(0)\n    return zero_count / total_count", "is_syntactically_valid": true}
{"task_id": 138, "generation": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    \n    # Convert the number to binary representation\n    binary = bin(n)[2:]\n    \n    # Check if the binary representation contains only '1' with '0' in between\n    return all(bit == '1' for bit in binary.split('0'))", "is_syntactically_valid": true}
{"task_id": 139, "generation": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius", "is_syntactically_valid": true}
{"task_id": 140, "generation": "from collections import Counter\n\ndef extract_singly(tuples):\n    \"\"\"\n    Extracts elements that occur singly in the given tuple list.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        list: A list of elements that occur singly in the input list of tuples.\n    \"\"\"\n    result = []\n    for tup in tuples:\n        for num in tup:\n            if tup.count(num) == 1:\n                result.append(num)\n    return result", "is_syntactically_valid": true}
{"task_id": 141, "generation": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n, 0, -1):\n        max_idx = 0\n        for j in range(1, i):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        arr[:max_idx + 1] = arr[max_idx::-1]\n        arr[:i] = arr[i - 1::-1]\n    return arr", "is_syntactically_valid": true}
{"task_id": 142, "generation": "def count_samepair(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 143, "generation": "def find_lists(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, list):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 144, "generation": "def sum_Pairs(arr, n):\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += abs(arr[i] - arr[j])\n    return total", "is_syntactically_valid": true}
{"task_id": 145, "generation": "def max_Abs_Diff(arr, n):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n    \n    Args:\n    arr (tuple): The input array.\n    n (int): The length of the array.\n    \n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "is_syntactically_valid": true}
{"task_id": 146, "generation": "def ascii_value_string(string):\n    return sum(ord(char) for char in string)", "is_syntactically_valid": true}
{"task_id": 147, "generation": "def max_path_sum(triangle, row, col):\n    if row == len(triangle) - 1:\n        return triangle[row][col]\n\n    left_sum = max_path_sum(triangle, row + 1, col)\n    right_sum = max_path_sum(triangle, row + 1, col + 1)\n\n    return triangle[row][col] + max(left_sum, right_sum)", "is_syntactically_valid": true}
{"task_id": 148, "generation": "def sum_digits_twoparts(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Initialize the maximum sum and the split position\n    max_sum = 0\n    split_pos = 0\n    \n    # Try all possible split positions\n    for i in range(1, len(num_str)):\n        part1 = int(num_str[:i])\n        part2 = int(num_str[i:])\n        \n        # Calculate the sum of digits for the two parts\n        sum_digits = sum(int(digit) for digit in str(part1)) + sum(int(digit) for digit in str(part2))\n        \n        # Update the maximum sum and split position if necessary\n        if sum_digits > max_sum:\n            max_sum = sum_digits\n            split_pos = i\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 149, "generation": "def longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    Find the longest subsequence such that the difference between adjacents is one.\n    \n    Args:\n        arr (list): The input array.\n        n (int): The length of the input array.\n    \n    Returns:\n        int: The length of the longest subsequence.\n    \"\"\"\n    dp = [1] * n  # Initialize the dynamic programming array\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)", "is_syntactically_valid": true}
{"task_id": 150, "generation": "def does_Contain_B(a, b, c):\n    \"\"\"\n    Determine if the given number is present in the infinite sequence.\n\n    The infinite sequence is defined as:\n    a, a+b, a+2b, a+3b, a+4b, ...\n\n    Args:\n    a (int): The first term in the sequence.\n    b (int): The common difference between consecutive terms.\n    c (int): The number to check if it is present in the sequence.\n\n    Returns:\n    bool: True if the number is present in the sequence, False otherwise.\n    \"\"\"\n    # Initialize the current term in the sequence\n    current_term = a\n\n    # Check if the current term is equal to the target number\n    while current_term <= c:\n        if current_term == c:\n            return True\n        current_term += b\n\n    return False", "is_syntactically_valid": true}
{"task_id": 151, "generation": "def gcd(a, b):\n    \"\"\"\n    Calculates the Greatest Common Divisor (GCD) of two numbers using the Euclidean algorithm.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef is_coprime(a, b):\n    \"\"\"\n    Checks whether the given numbers are co-prime or not.\n    Two numbers are co-prime if their GCD is 1.\n    \"\"\"\n    return gcd(a, b) == 1", "is_syntactically_valid": true}
{"task_id": 152, "generation": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    left_half = merge_sort(left_half)\n    right_half = merge_sort(right_half)\n\n    return merge(left_half, right_half)\n\ndef merge(left, right):\n    result = []\n    left_index = 0\n    right_index = 0\n\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            result.append(left[left_index])\n            left_index += 1\n        else:\n            result.append(right[right_index])\n            right_index += 1\n\n    result += left[left_index:]\n    result += right[right_index:]\n\n    return result", "is_syntactically_valid": true}
{"task_id": 153, "generation": "def parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola given the coefficients a, b, and c.\n    \n    Parameters:\n    a (float): The coefficient of the quadratic term.\n    b (float): The coefficient of the linear term.\n    c (float): The constant term.\n    \n    Returns:\n    tuple: The coordinates of the vertex (x, y).\n    \"\"\"\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)", "is_syntactically_valid": true}
{"task_id": 154, "generation": "def specified_element(matrix, index):\n    \"\"\"\n    Extracts the specified element from each inner list in the given 2D list.\n    \n    Args:\n        matrix (list): A 2D list.\n        index (int): The index of the element to extract.\n    \n    Returns:\n        list: A list containing the specified elements from each inner list.\n    \"\"\"\n    result = []\n    for inner_list in matrix:\n        result.append(inner_list[index])\n    return result", "is_syntactically_valid": true}
{"task_id": 155, "generation": "def even_bit_toggle_number(num):\n    \"\"\"\n    Toggles all even bits of a given number.\n    \"\"\"\n    even_mask = 0b10101010101010101010101010101010\n    return num ^ even_mask", "is_syntactically_valid": true}
{"task_id": 156, "generation": "def tuple_int_str(tuples):\n    return tuple(tuple(int(x) for x in t) for t in tuples)", "is_syntactically_valid": true}
{"task_id": 157, "generation": "def encode_list(input_list):\n    encoded_list = []\n    prev_element = None\n    count = 0\n\n    for element in input_list:\n        if element != prev_element:\n            if prev_element is not None:\n                encoded_list.append([count, prev_element])\n            count = 1\n            prev_element = element\n        else:\n            count += 1\n\n    encoded_list.append([count, prev_element])\n    return encoded_list", "is_syntactically_valid": true}
{"task_id": 158, "generation": "def min_Ops(arr, n, k):\n    \"\"\"\n    Find the minimum number of operations required to make all elements equal in the given array.\n\n    Args:\n    arr (list): The input array of integers.\n    n (int): The length of the array.\n    k (int): The maximum number of operations allowed.\n\n    Returns:\n    int: The minimum number of operations required to make all elements equal, or -1 if it's not possible.\n    \"\"\"\n    # Calculate the target value to make all elements equal\n    target = sum(arr) // n\n\n    # Check if it's possible to make all elements equal\n    if any(x % k != 0 for x in arr):\n        return -1\n\n    # Calculate the number of operations required\n    total_ops = 0\n    for num in arr:\n        total_ops += abs(num - target) // k\n\n    return total_ops", "is_syntactically_valid": true}
{"task_id": 159, "generation": "def month_season(month, day):\n    seasons = {\n        'winter': [(12, 1, 2)],\n        'spring': [(3, 4, 5)],\n        'summer': [(6, 7, 8)],\n        'autumn': [(9, 10, 11)]\n    }\n\n    for season, months in seasons.items():\n        for month_range in months:\n            if month.lower() in [calendar.month_name[m].lower() for m in month_range]:\n                if day <= 20 and month.lower() == calendar.month_name[month_range[0]].lower():\n                    return season\n                elif day > 20 and month.lower() == calendar.month_name[month_range[-1]].lower():\n                    return season\n    return None", "is_syntactically_valid": true}
{"task_id": 160, "generation": "def solution(a, b, n):\n    for x in range(n//a + 1):\n        for y in range(n//b + 1):\n            if a*x + b*y == n:\n                return ('x = ', x, ', y = ', y)\n    return 'No solution'", "is_syntactically_valid": true}
{"task_id": 161, "generation": "def remove_elements(list1, list2):\n    return [item for item in list1 if item not in list2]", "is_syntactically_valid": true}
{"task_id": 162, "generation": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total", "is_syntactically_valid": true}
{"task_id": 163, "generation": "import math\n\ndef area_polygon(n, s):\n    \"\"\"\n    Calculates the area of a regular polygon.\n\n    Args:\n    n (int): The number of sides of the polygon.\n    s (float): The length of each side of the polygon.\n\n    Returns:\n    float: The area of the regular polygon.\n    \"\"\"\n    return (n * s**2) / (4 * math.tan(math.pi / n))", "is_syntactically_valid": true}
{"task_id": 164, "generation": "def areEquivalent(num1, num2):\n    def sum_of_divisors(n):\n        return sum(i for i in range(1, n+1) if n % i == 0)\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)", "is_syntactically_valid": true}
{"task_id": 165, "generation": "def count_char_position(string):\n    count = 0\n    for i, char in enumerate(string):\n        if char.lower() == string[i].lower():\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 166, "generation": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 167, "generation": "def next_Power_Of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    return 2 ** (n - 1).bit_length()", "is_syntactically_valid": true}
{"task_id": 168, "generation": "def frequency(arr, num):\n    \"\"\"\n    Finds the frequency of a given number in a given array.\n    \n    Parameters:\n    arr (list): The input array.\n    num (int): The number to find the frequency of.\n    \n    Returns:\n    int: The frequency of the given number in the array.\n    \"\"\"\n    count = 0\n    for n in arr:\n        if n == num:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 169, "generation": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n+1):\n            a, b = b, 2*b + a\n        return b", "is_syntactically_valid": true}
{"task_id": 170, "generation": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])", "is_syntactically_valid": true}
{"task_id": 171, "generation": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculates the perimeter of a pentagon given the length of one side.\n    \n    Args:\n        side_length (int or float): The length of one side of the pentagon.\n    \n    Returns:\n        float: The perimeter of the pentagon.\n    \"\"\"\n    return 5 * side_length", "is_syntactically_valid": true}
{"task_id": 172, "generation": "def count_occurance(string):\n    count = 0\n    for i in range(len(string) - 2):\n        if string[i:i+3] == 'std':\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 173, "generation": "import re\n\ndef remove_splchar(text):\n    return ''.join(char for char in text if char.isalnum())", "is_syntactically_valid": true}
{"task_id": 174, "generation": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result", "is_syntactically_valid": true}
{"task_id": 175, "generation": "def is_valid_parenthese(s):\n    stack = []\n    pairs = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for char in s:\n        if char in pairs:\n            stack.append(char)\n        else:\n            if stack:\n                top = stack.pop()\n                if pairs[top] != char:\n                    return False\n            else:\n                return False\n    return len(stack) == 0", "is_syntactically_valid": true}
{"task_id": 176, "generation": "def perimeter_triangle(a, b, c):\n    \"\"\"\n    Calculates the perimeter of a triangle given the lengths of its three sides.\n    \n    Args:\n        a (float): Length of the first side of the triangle.\n        b (float): Length of the second side of the triangle.\n        c (float): Length of the third side of the triangle.\n    \n    Returns:\n        float: The perimeter of the triangle.\n    \"\"\"\n    return a + b + c", "is_syntactically_valid": true}
{"task_id": 177, "generation": "from math import gcd\n\ndef lcm(a, b):\n    \"\"\"\n    Calculates the least common multiple (LCM) of two numbers.\n    \"\"\"\n    return (a * b) // gcd(a, b)\n\ndef answer(min_range, max_range):\n    \"\"\"\n    Finds two distinct numbers such that their LCM lies within the given range.\n    \"\"\"\n    for a in range(min_range, max_range + 1):\n        for b in range(a + 1, max_range + 1):\n            lcm_value = lcm(a, b)\n            if min_range <= lcm_value <= max_range:\n                return (a, b)\n    return None", "is_syntactically_valid": true}
{"task_id": 178, "generation": "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return \"Matched!\"\n    return \"Not Matched!\"", "is_syntactically_valid": true}
{"task_id": 179, "generation": "def is_num_keith(n):\n    \"\"\"\n    Determines if a given number is a Keith number or not.\n    \n    A Keith number is a number where the sum of the digits of its consecutive\n    terms is equal to the number itself.\n    \n    Args:\n        n (int): The number to check.\n        \n    Returns:\n        bool: True if the number is a Keith number, False otherwise.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    terms = [digits[0]]\n    \n    for i in range(1, len(digits)):\n        next_term = sum(terms[-len(digits):])\n        terms.append(next_term)\n        if next_term == n:\n            return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 180, "generation": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points on Earth using their latitude and longitude coordinates.\n    \n    Args:\n        lat1 (float): Latitude of the first point in degrees.\n        lon1 (float): Longitude of the first point in degrees.\n        lat2 (float): Latitude of the second point in degrees.\n        lon2 (float): Longitude of the second point in degrees.\n        \n    Returns:\n        float: The distance between the two points in kilometers.\n    \"\"\"\n    # Convert degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    \n    # Calculate the distance using the Haversine formula\n    R = 6371  # Earth's radius in kilometers\n    phi1 = lat1_rad\n    phi2 = lat2_rad\n    delta_phi = lat2_rad - lat1_rad\n    delta_lambda = lon2_rad - lon1_rad\n    \n    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = R * c\n    \n    return distance", "is_syntactically_valid": true}
{"task_id": 181, "generation": "def common_prefix(strings, n):\n    if not strings:\n        return \"\"\n\n    # Find the shortest string in the list\n    shortest = min(strings, key=len)\n\n    # Iterate through the characters of the shortest string\n    for i in range(len(shortest)):\n        # Check if all other strings have the same character at this index\n        for string in strings:\n            if string[i] != shortest[i]:\n                return shortest[:i]\n\n    # If all strings have the same characters, return the shortest string\n    return shortest", "is_syntactically_valid": true}
{"task_id": 182, "generation": "import re\n\ndef find_character(input_string):\n    uppercase_chars = re.findall(r'[A-Z]', input_string)\n    lowercase_chars = re.findall(r'[a-z]', input_string)\n    special_chars = re.findall(r'[^A-Za-z0-9]', input_string)\n    numeric_chars = re.findall(r'\\d', input_string)\n    return [uppercase_chars, lowercase_chars, special_chars, numeric_chars]", "is_syntactically_valid": true}
{"task_id": 183, "generation": "def count_pairs(arr, k, n):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 184, "generation": "def greater_specificnum(lst, num):\n    \"\"\"\n    Find all the values in a list that are greater than a specified number.\n\n    Args:\n        lst (list): The input list.\n        num (int): The specified number.\n\n    Returns:\n        bool: True if there is at least one value greater than the specified number, False otherwise.\n    \"\"\"\n    for value in lst:\n        if value > num:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 185, "generation": "def parabola_focus(a, b, c):\n    \"\"\"\n    Find the focus of a parabola in the form y = ax^2 + bx + c.\n    \n    Args:\n        a (float): The coefficient of x^2.\n        b (float): The coefficient of x.\n        c (float): The constant term.\n        \n    Returns:\n        tuple: The coordinates of the focus of the parabola.\n    \"\"\"\n    x_focus = -b / (2 * a)\n    y_focus = a * x_focus**2 + b * x_focus + c\n    return (x_focus, y_focus)", "is_syntactically_valid": true}
{"task_id": 186, "generation": "import re\n\ndef check_literals(text, literals):\n    for literal in literals:\n        if re.search(literal, text):\n            return \"Matched!\"\n    return \"Not Matched!\"", "is_syntactically_valid": true}
{"task_id": 187, "generation": "def longest_common_subsequence(s1, s2, m, n):\n    \"\"\"\n    Find the length of the longest common subsequence of two given sequences.\n    \n    Args:\n        s1 (str): The first sequence.\n        s2 (str): The second sequence.\n        m (int): The length of the first sequence.\n        n (int): The length of the second sequence.\n    \n    Returns:\n        int: The length of the longest common subsequence.\n    \"\"\"\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]", "is_syntactically_valid": true}
{"task_id": 188, "generation": "def prod_Square(n):\n    \"\"\"\n    Checks whether the given number can be represented by the product of two squares or not.\n    \n    Args:\n        n (int): The number to be checked.\n    \n    Returns:\n        bool: True if the number can be represented by the product of two squares, False otherwise.\n    \"\"\"\n    # Check if the number is a perfect square\n    sqrt = n ** 0.5\n    if sqrt.is_integer():\n        return True\n    \n    # Check if the number can be represented by the product of two squares\n    for i in range(1, int(sqrt) + 1):\n        for j in range(i, int(sqrt) + 1):\n            if i * j == n:\n                return True\n    \n    return False", "is_syntactically_valid": true}
{"task_id": 189, "generation": "def first_Missing_Positive(nums, n):\n    \"\"\"\n    Find the first missing positive number in a given list of integers.\n\n    Args:\n        nums (list): A list of integers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The first missing positive number.\n    \"\"\"\n    # Step 1: Mark numbers that are out of range as 0\n    for i in range(n):\n        if nums[i] <= 0 or nums[i] > n:\n            nums[i] = 0\n\n    # Step 2: Use the absolute value of each number as an index and mark the corresponding index as negative\n    for i in range(n):\n        a = abs(nums[i])\n        # If you meet number a in the array - change the sign of a-th element\n        # note: here 0 is considered as positive number\n        if a <= n:\n            nums[a - 1] = -abs(nums[a - 1])\n\n    # Step 3: Find the first positive number\n    for i in range(n):\n        if nums[i] > 0:\n            return i + 1\n\n    # Step 4: If all numbers are negative, return n + 1\n    return n + 1", "is_syntactically_valid": true}
{"task_id": 190, "generation": "def count_Intgral_Points(x1, y1, x2, y2):\n    \"\"\"\n    Counts the number of integral coordinates that lie inside a square.\n\n    Args:\n        x1 (int): The x-coordinate of the first corner of the square.\n        y1 (int): The y-coordinate of the first corner of the square.\n        x2 (int): The x-coordinate of the second corner of the square.\n        y2 (int): The y-coordinate of the second corner of the square.\n\n    Returns:\n        int: The number of integral coordinates that lie inside the square.\n    \"\"\"\n    # Calculate the width and height of the square\n    width = abs(x2 - x1) + 1\n    height = abs(y2 - y1) + 1\n\n    # Calculate the number of integral coordinates inside the square\n    return width * height", "is_syntactically_valid": true}
{"task_id": 191, "generation": "def check_monthnumber(month_name):\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    if month_name in thirty_day_months:\n        return True\n    elif month_name == \"February\":\n        return False\n    else:\n        return True", "is_syntactically_valid": true}
{"task_id": 192, "generation": "def check_String(string):\n    # Check if the string has at least one letter and one number\n    has_letter = False\n    has_number = False\n    for char in string:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 193, "generation": "def remove_tuple(tup):\n    return tuple(set(tup))", "is_syntactically_valid": true}
{"task_id": 194, "generation": "def octal_To_Decimal(octal_num):\n    \"\"\"\n    Converts an octal number to its decimal equivalent.\n    \n    Args:\n        octal_num (int): The octal number to be converted.\n        \n    Returns:\n        int: The decimal equivalent of the input octal number.\n    \"\"\"\n    decimal_num = 0\n    power = 0\n    \n    while octal_num > 0:\n        digit = octal_num % 10\n        decimal_num += digit * (8 ** power)\n        power += 1\n        octal_num //= 10\n    \n    return decimal_num", "is_syntactically_valid": true}
{"task_id": 195, "generation": "def first(arr, target, n):\n    \"\"\"\n    Find the first position of a target element in a sorted array.\n\n    Args:\n        arr (list): The sorted array to search.\n        target (int): The target element to find.\n        n (int): The length of the array.\n\n    Returns:\n        int: The first position of the target element, or -1 if not found.\n    \"\"\"\n    left, right = 0, n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1", "is_syntactically_valid": true}
{"task_id": 196, "generation": "def remove_tuples(lst, k):\n    return [t for t in lst if len(t) != k]", "is_syntactically_valid": true}
{"task_id": 197, "generation": "from decimal import Decimal, getcontext, ROUND_DOWN\n\ndef find_exponentio(base_tuple, power_tuple):\n    result = []\n    for base, power in zip(base_tuple, power_tuple):\n        result.append(extract_number(base ** power, 0))\n    return tuple(result)\n\ndef extract_integer(number: float, precision: int) -> float:\n    if isinstance(number, (int, float)):\n        number = Decimal(number)\n    elif isinstance(number, str):\n        number = Decimal(number.replace(',', '.'))\n    return float(number.quantize(Decimal(10) ** -precision, rounding=ROUND_DOWN))\n\ndef extract_number(number: float, precision: int) -> float:\n    format_string = \"{:.\" + str(precision) + \"f}\"\n    formatted_number = format_string.format(number)\n    return float(formatted_number)", "is_syntactically_valid": true}
{"task_id": 198, "generation": "import math\n\ndef largest_triangle(a, b):\n    \"\"\"\n    Finds the largest triangle that can be inscribed in an ellipse.\n\n    Args:\n    a (float): The semi-major axis of the ellipse.\n    b (float): The semi-minor axis of the ellipse.\n\n    Returns:\n    float: The area of the largest inscribed triangle.\n    \"\"\"\n    # Calculate the maximum area of the inscribed triangle\n    area = (4 * a * b) / 3\n    return area\n\n# Test cases\nassert largest_triangle(4, 2) == 10.392304845413264\nassert largest_triangle(5, 7) == 4.639421805988064\nassert largest_triangle(9, 1) == 105.2220865598093", "is_syntactically_valid": true}
{"task_id": 199, "generation": "def highest_Power_of_2(num):\n    \"\"\"\n    Find the highest power of 2 less than or equal to the given number.\n    \n    Args:\n        num (int): The input number.\n    \n    Returns:\n        int: The highest power of 2 less than or equal to the input number.\n    \"\"\"\n    power = 0\n    while (2 ** (power + 1)) <= num:\n        power += 1\n    return 2 ** power", "is_syntactically_valid": true}
{"task_id": 200, "generation": "def position_max(lst):\n    \"\"\"\n    Find all index positions of the maximum values in a given list.\n    \"\"\"\n    max_value = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_value]", "is_syntactically_valid": true}
{"task_id": 201, "generation": "def chkList(lst):\n    \"\"\"\n    Checks whether all elements in a list are the same.\n    \n    Args:\n        lst (list): The input list to be checked.\n    \n    Returns:\n        bool: True if all elements are the same, False otherwise.\n    \"\"\"\n    if len(set(lst)) == 1:\n        return True\n    else:\n        return False", "is_syntactically_valid": true}
{"task_id": 202, "generation": "def remove_even(string):\n    return ''.join(char for i, char in enumerate(string) if i % 2 != 0)", "is_syntactically_valid": true}
{"task_id": 203, "generation": "def hamming_Distance(num1, num2):\n    \"\"\"\n    Calculates the Hamming distance between two integers.\n    \n    Arguments:\n    num1 -- int -- first integer\n    num2 -- int -- second integer\n    \n    Returns:\n    int -- Hamming distance between the two integers\n    \"\"\"\n    # Convert the integers to binary strings\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n    \n    # Pad the shorter binary string with leading zeros\n    max_len = max(len(bin1), len(bin2))\n    bin1 = bin1.zfill(max_len)\n    bin2 = bin2.zfill(max_len)\n    \n    # Count the number of different bits\n    distance = sum(1 for bit1, bit2 in zip(bin1, bin2) if bit1 != bit2)\n    \n    return distance", "is_syntactically_valid": true}
{"task_id": 204, "generation": "def count(string, char):\n    \"\"\"\n    Counts the occurrence of a given character in a string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to count.\n\n    Returns:\n        int: The count of the given character in the string.\n    \"\"\"\n    return string.count(char)", "is_syntactically_valid": true}
{"task_id": 205, "generation": "def inversion_elements(tup):\n    return tuple(-x for x in tup)", "is_syntactically_valid": true}
{"task_id": 206, "generation": "def concatenate_elements(tuples):\n    result = []\n    for i in range(len(tuples) - 1):\n        result.append(tuples[i] + tuples[i+1])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 207, "generation": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n-1][n-1]", "is_syntactically_valid": true}
{"task_id": 208, "generation": "import re\n\ndef is_decimal(num_str):\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num_str))", "is_syntactically_valid": true}
{"task_id": 209, "generation": "import heapq\n\ndef heap_replace(heap, new_item):\n    # Delete the smallest element from the heap\n    heapq.heapify(heap)\n    smallest = heapq.heappop(heap)\n    \n    # Insert the new item into the heap\n    heapq.heappush(heap, new_item)\n    \n    # Heapify the modified heap\n    heapq.heapify(heap)\n    \n    return heap", "is_syntactically_valid": true}
{"task_id": 210, "generation": "import re\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    Check if the given string contains only a-z, A-Z, and 0-9 characters.\n    \n    Args:\n        string (str): The input string to be checked.\n        \n    Returns:\n        bool: True if the string contains only the allowed characters, False otherwise.\n    \"\"\"\n    pattern = r'^[a-zA-Z0-9]*$'\n    return bool(re.match(pattern, string))", "is_syntactically_valid": true}
{"task_id": 211, "generation": "def count_Num(n):\n    count = 0\n    for i in range(2**n):\n        if (i & 1) and (i & (1 << (n-1))):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 212, "generation": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))", "is_syntactically_valid": true}
{"task_id": 213, "generation": "def concatenate_strings(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] + tuple2[i])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 214, "generation": "import math\n\ndef degree_radian(radians):\n    \"\"\"\n    Converts radians to degrees.\n    \n    Args:\n        radians (float): The angle in radians.\n    \n    Returns:\n        float: The angle in degrees.\n    \"\"\"\n    return radians * (180 / math.pi)", "is_syntactically_valid": true}
{"task_id": 215, "generation": "def decode_list(encoded_list):\n    decoded_list = []\n    for item in encoded_list:\n        if isinstance(item, list):\n            count, value = item\n            decoded_list.extend([value] * count)\n        else:\n            decoded_list.append(item)\n    return decoded_list", "is_syntactically_valid": true}
{"task_id": 216, "generation": "def check_subset_list(main_list, sub_lists):\n    \"\"\"\n    Checks if a nested list is a subset of another nested list.\n    \n    Args:\n        main_list (list): The main list to check against.\n        sub_lists (list): The list of sub-lists to check.\n    \n    Returns:\n        bool: True if at least one sub-list is a subset of the main list, False otherwise.\n    \"\"\"\n    for sub_list in sub_lists:\n        if set(sub_list).issubset(set(main_list)):\n            return True\n    return False", "is_syntactically_valid": true}
{"task_id": 217, "generation": "def first_Repeated_Char(string):\n    # Create a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through the string\n    for char in string:\n        # If the character is already in the set, it's the first repeated character\n        if char in unique_chars:\n            return char\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n    \n    # If no repeated character is found, return the null character\n    return '\\0'", "is_syntactically_valid": true}
{"task_id": 218, "generation": "def min_Operations(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return a - b\n    else:\n        return b - a", "is_syntactically_valid": true}
{"task_id": 219, "generation": "def extract_min_max(tup, k):\n    \"\"\"\n    Extracts the minimum and maximum k elements from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        k (int): The number of minimum and maximum elements to extract.\n\n    Returns:\n        tuple: A tuple containing the minimum k elements and the maximum k elements.\n    \"\"\"\n    tup = sorted(tup)\n    return tuple(tup[:k]) + tuple(tup[-k:])", "is_syntactically_valid": true}
{"task_id": 220, "generation": "def replace_max_specialchar(text, n):\n    \"\"\"\n    Replace maximum n occurrences of spaces, commas, or dots with a colon.\n    \n    Args:\n        text (str): The input text.\n        n (int): The maximum number of occurrences to replace.\n    \n    Returns:\n        str: The modified text with the replacements.\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    replaced_chars = 0\n    result = ''\n    for char in text:\n        if char in special_chars and replaced_chars < n:\n            result += ':'\n            replaced_chars += 1\n        else:\n            result += char\n    return result", "is_syntactically_valid": true}
{"task_id": 221, "generation": "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None", "is_syntactically_valid": true}
{"task_id": 222, "generation": "def check_type(tup):\n    \"\"\"\n    Checks if all the elements in a tuple have the same data type.\n    \n    Args:\n        tup (tuple): The input tuple.\n        \n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(tup[0])\n    for element in tup:\n        if type(element) != data_type:\n            return False\n    return True", "is_syntactically_valid": true}
{"task_id": 223, "generation": "def is_majority(arr, n, x):\n    \"\"\"\n    Check if the given element x is a majority element in the sorted array arr of length n.\n    \n    Args:\n        arr (list): A sorted array of integers.\n        n (int): The length of the array.\n        x (int): The element to check for majority.\n        \n    Returns:\n        bool: True if x is a majority element, False otherwise.\n    \"\"\"\n    # Find the first occurrence of x in the array\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            break\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Check if x appears more than n/2 times in the array\n    count = 0\n    for i in range(mid, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            break\n    for i in range(mid - 1, -1, -1):\n        if arr[i] == x:\n            count += 1\n        else:\n            break\n    \n    return count > n // 2", "is_syntactically_valid": true}
{"task_id": 224, "generation": "def count_Set_Bits(number):\n    \"\"\"\n    Counts the number of set bits (bits with value 1) in a given number.\n    \n    Args:\n    number (int): The number to count the set bits for.\n    \n    Returns:\n    int: The number of set bits in the given number.\n    \"\"\"\n    return bin(number).count('1')", "is_syntactically_valid": true}
{"task_id": 225, "generation": "def find_Min(arr, low, high):\n    if low > high:\n        return -1\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if mid > 0 and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    \n    if arr[mid] >= arr[low]:\n        return find_Min(arr, mid + 1, high)\n    else:\n        return find_Min(arr, low, mid - 1)", "is_syntactically_valid": true}
{"task_id": 226, "generation": "def odd_values_string(string):\n    return ''.join(string[i] for i in range(len(string)) if i % 2 == 0)", "is_syntactically_valid": true}
{"task_id": 227, "generation": "def min_of_three(a, b, c):\n    return min(a, b, c)", "is_syntactically_valid": true}
{"task_id": 228, "generation": "def all_Bits_Set_In_The_Given_Range(num, start, end):\n    mask = (1 << (end - start + 1)) - 1\n    return (num & (mask << start)) == (mask << start)", "is_syntactically_valid": true}
{"task_id": 229, "generation": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearrange the elements of the given array so that all negative elements appear before positive ones.\n    \n    Args:\n        arr (list): The input array.\n        n (int): The length of the input array.\n        \n    Returns:\n        list: The rearranged array.\n    \"\"\"\n    negative = []\n    positive = []\n    \n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    return negative + positive", "is_syntactically_valid": true}
{"task_id": 230, "generation": "def replace_blank(string, char):\n    return string.replace(\" \", char)", "is_syntactically_valid": true}
{"task_id": 231, "generation": "def max_sum(triangle, n):\n    \"\"\"\n    Find the maximum sum in the given right triangle of numbers.\n    \n    Args:\n    triangle (list of lists): The right triangle of numbers.\n    n (int): The number of rows in the triangle.\n    \n    Returns:\n    int: The maximum sum in the given right triangle of numbers.\n    \"\"\"\n    # Initialize the last row of the triangle as the maximum sum\n    max_sums = triangle[-1]\n    \n    # Iterate through the triangle in reverse order, starting from the second-to-last row\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            # Update the maximum sum at each position\n            max_sums[j] = triangle[i][j] + max(max_sums[j], max_sums[j+1])\n    \n    # Return the maximum sum at the top of the triangle\n    return max_sums[0]", "is_syntactically_valid": true}
{"task_id": 232, "generation": "def larg_nnum(dataset, n):\n    \"\"\"\n    Get the n largest items from a dataset.\n    \n    Args:\n        dataset (list): A list of integers.\n        n (int): The number of largest items to retrieve.\n        \n    Returns:\n        list: A list of the n largest items from the dataset.\n    \"\"\"\n    return sorted(dataset, reverse=True)[:n]", "is_syntactically_valid": true}
{"task_id": 233, "generation": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n\n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n\n    Returns:\n        float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n# Test cases\nassert lateralsuface_cylinder(10, 5) == 314.15000000000003\nassert lateralsuface_cylinder(4, 5) == 125.66000000000001\nassert lateralsuface_cylinder(4, 10) == 251.32000000000002", "is_syntactically_valid": true}
{"task_id": 234, "generation": "def volume_cube(side_length):\n    \"\"\"\n    Calculates the volume of a cube given its side length.\n\n    Args:\n        side_length (int): The length of one side of the cube.\n\n    Returns:\n        int: The volume of the cube.\n    \"\"\"\n    return side_length ** 3", "is_syntactically_valid": true}
{"task_id": 235, "generation": "def even_bit_set_number(num):\n    \"\"\"\n    Sets all even bits of a given number.\n    \n    Args:\n    num (int): The input number.\n    \n    Returns:\n    int: The number with all even bits set.\n    \"\"\"\n    return num | 0b10101010101010101010101010101010", "is_syntactically_valid": true}
{"task_id": 236, "generation": "def No_of_Triangle(side, n):\n    \"\"\"\n    Counts the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    \n    Args:\n        side: The length of the side of the given equilateral triangle.\n        n: The number of smaller equilateral triangles that can fit along the side of the given triangle.\n    \n    Returns:\n        The maximum number of equilateral triangles that can be formed within the given triangle.\n    \"\"\"\n    if n < 1:\n        return -1\n    \n    total_triangles = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i * j <= n:\n                total_triangles += 1\n    \n    return total_triangles", "is_syntactically_valid": true}
{"task_id": 237, "generation": "from collections import Counter\n\ndef check_occurences(records):\n    \"\"\"\n    Function to check the occurrences of records which occur similar times in the given tuples.\n    \"\"\"\n    result = {}\n    for record in records:\n        key = tuple(sorted(record))\n        if key in result:\n            result[key] += 1\n        else:\n            result[key] = 1\n    return result", "is_syntactically_valid": true}
{"task_id": 238, "generation": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 239, "generation": "def get_total_number_of_sequences(n, m):\n    def helper(current_sum, length):\n        if length == n:\n            return 1\n        total = 0\n        for i in range(max(1, current_sum // 2), m + 1):\n            if i >= current_sum:\n                total += helper(i, length + 1)\n        return total\n    return helper(1, 1)", "is_syntactically_valid": true}
{"task_id": 240, "generation": "def replace_list(lst, new_lst):\n    return lst[:-1] + new_lst", "is_syntactically_valid": true}
{"task_id": 241, "generation": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]", "is_syntactically_valid": true}
{"task_id": 242, "generation": "def count_charac(string):\n    \"\"\"\n    Count the total number of characters in a given string.\n\n    Args:\n    string: A string.\n\n    Returns:\n    An integer representing the total number of characters in the string.\n    \"\"\"\n    return len(string)", "is_syntactically_valid": true}
{"task_id": 243, "generation": "def sort_on_occurence(lst):\n    result = []\n    count = {}\n    for item in lst:\n        key = item[0]\n        if key not in count:\n            count[key] = [item, 1]\n        else:\n            count[key][1] += 1\n    for key, (item, freq) in sorted(count.items(), key=lambda x: x[1][1], reverse=True):\n        result.append((*item, freq))\n    return result", "is_syntactically_valid": true}
{"task_id": 244, "generation": "import math\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    \n    Args:\n        num (int): The given number.\n        \n    Returns:\n        int: The next perfect square greater than the given number.\n    \"\"\"\n    sqrt = math.sqrt(num)\n    if sqrt.is_integer():\n        return int(sqrt + 1) ** 2\n    else:\n        return int(sqrt + 1) ** 2", "is_syntactically_valid": true}
{"task_id": 245, "generation": "def max_sum(arr, n):\n    \"\"\"\n    Find the maximum sum of bi-tonic sub-sequence for the given array.\n\n    Args:\n        arr (list): The input array.\n        n (int): The length of the input array.\n\n    Returns:\n        int: The maximum sum of bi-tonic sub-sequence.\n    \"\"\"\n    # Create two arrays to store the maximum sum of increasing and decreasing sub-sequences\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Calculate the maximum sum of increasing sub-sequence\n    increasing[0] = arr[0]\n    for i in range(1, n):\n        increasing[i] = max(increasing[i-1] + arr[i], arr[i])\n\n    # Calculate the maximum sum of decreasing sub-sequence\n    decreasing[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        decreasing[i] = max(decreasing[i+1] + arr[i], arr[i])\n\n    # Find the maximum sum of bi-tonic sub-sequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - arr[i])\n\n    return max_sum", "is_syntactically_valid": true}
{"task_id": 246, "generation": "def babylonian_squareroot(n: float) -> float:\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n        n (float): The number to find the square root of.\n\n    Returns:\n        float: The square root of the input number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative number.\")\n\n    if n == 0 or n == 1:\n        return n\n\n    x = n / 2  # Initial guess\n    epsilon = 1e-10  # Tolerance for convergence\n\n    while abs(x * x - n) >= epsilon:\n        x = (x + n / x) / 2\n\n    return x", "is_syntactically_valid": true}
{"task_id": 247, "generation": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]", "is_syntactically_valid": true}
{"task_id": 248, "generation": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \n    Args:\n        n (int): The value of n.\n        \n    Returns:\n        float: The harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)", "is_syntactically_valid": true}
{"task_id": 249, "generation": "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))", "is_syntactically_valid": true}
{"task_id": 250, "generation": "def count_X(tup, x):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        x (int): The element to count.\n\n    Returns:\n        int: The number of occurrences of the element in the tuple.\n    \"\"\"\n    return tup.count(x)", "is_syntactically_valid": true}
{"task_id": 251, "generation": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 252, "generation": "import math\n\ndef convert(z):\n    \"\"\"\n    Converts a complex number to polar coordinates.\n\n    Args:\n        z (complex): The complex number to be converted.\n\n    Returns:\n        tuple: A tuple containing the magnitude (r) and angle (theta) of the complex number in polar coordinates.\n    \"\"\"\n    r = abs(z)\n    theta = math.atan2(z.imag, z.real)\n    return (r, theta)", "is_syntactically_valid": true}
{"task_id": 253, "generation": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 254, "generation": "def words_ae(text):\n    \"\"\"\n    Find all words starting with 'a' or 'e' in a given string.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n    list: A list of words starting with 'a' or 'e'.\n    \"\"\"\n    def starts_with_ae(word):\n        return word.startswith('a') or word.startswith('e')\n\n    return [word for word in text.split() if starts_with_ae(word)]", "is_syntactically_valid": true}
{"task_id": 255, "generation": "from itertools import product\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    Choose specified number of colors from three different colors and generate all the combinations with repetitions.\n    \n    Args:\n        colors (list): A list of three different colors.\n        n (int): The number of colors to choose.\n    \n    Returns:\n        list: A list of tuples representing all the combinations with repetitions.\n    \"\"\"\n    return list(product(colors, repeat=n))", "is_syntactically_valid": true}
{"task_id": 256, "generation": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than a given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 257, "generation": "def swap_numbers(a, b):\n    return b, a", "is_syntactically_valid": true}
{"task_id": 258, "generation": "def count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))", "is_syntactically_valid": true}
{"task_id": 259, "generation": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((max(tuple1[i][0], tuple2[i][0]), max(tuple1[i][1], tuple2[i][1])))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 260, "generation": "import math\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Finds the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and is_prime(num - 1) and is_prime(num + 1):\n            count += 1\n        num += 1\n    return num - 1", "is_syntactically_valid": true}
{"task_id": 261, "generation": "def division_elements(numerators, denominators):\n    \"\"\"\n    Performs mathematical division operation across the given tuples.\n\n    Args:\n        numerators (tuple): A tuple of numerators.\n        denominators (tuple): A tuple of denominators.\n\n    Returns:\n        tuple: A tuple of the results of the division operation.\n    \"\"\"\n    return tuple(num // den for num, den in zip(numerators, denominators))", "is_syntactically_valid": true}
{"task_id": 262, "generation": "def split_two_parts(lst, length):\n    \"\"\"\n    Splits a given list into two parts where the length of the first part is given.\n    \n    Args:\n        lst (list): The input list to be split.\n        length (int): The length of the first part of the list.\n    \n    Returns:\n        tuple: A tuple containing the first part and the second part of the list.\n    \"\"\"\n    return lst[:length], lst[length:]", "is_syntactically_valid": true}
{"task_id": 263, "generation": "def merge_dict(dict1, dict2):\n    \"\"\"\n    Merges two dictionaries into a new dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary to be merged.\n        dict2 (dict): The second dictionary to be merged.\n\n    Returns:\n        dict: A new dictionary containing the merged key-value pairs from both input dictionaries.\n    \"\"\"\n    result = {**dict1, **dict2}\n    return result", "is_syntactically_valid": true}
{"task_id": 264, "generation": "def dog_age(human_years):\n    \"\"\"\n    Calculates a dog's age in dog years.\n    \n    Args:\n    human_years (int): The dog's age in human years.\n    \n    Returns:\n    int: The dog's age in dog years.\n    \"\"\"\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4", "is_syntactically_valid": true}
{"task_id": 265, "generation": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, item in enumerate(lst):\n        result[i % n].append(item)\n    return result", "is_syntactically_valid": true}
{"task_id": 266, "generation": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube.\n\n    Args:\n    side_length (int or float): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2", "is_syntactically_valid": true}
{"task_id": 267, "generation": "def square_Sum(n):\n    \"\"\"\n    Finds the sum of squares of the first n odd natural numbers.\n\n    Args:\n        n (int): The number of odd natural numbers to consider.\n\n    Returns:\n        int: The sum of squares of the first n odd natural numbers.\n    \"\"\"\n    return sum([(2 * i - 1) ** 2 for i in range(1, n + 1)])", "is_syntactically_valid": true}
{"task_id": 268, "generation": "def find_star_num(n):\n    \"\"\"\n    Finds the nth star number.\n    \n    Parameters:\n    n (int): The position of the star number to find.\n    \n    Returns:\n    int: The nth star number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2", "is_syntactically_valid": true}
{"task_id": 269, "generation": "def ascii_value(char):\n    return ord(char)", "is_syntactically_valid": true}
{"task_id": 270, "generation": "def sum_even_and_even_index(num_list, n):\n    \"\"\"\n    Finds the sum of even numbers at even positions in the given list.\n    \n    Args:\n        num_list (list): A list of positive integers.\n        n (int): The length of the list.\n        \n    Returns:\n        int: The sum of even numbers at even positions.\n    \"\"\"\n    total_sum = 0\n    for i in range(0, n, 2):\n        if num_list[i] % 2 == 0:\n            total_sum += num_list[i]\n    return total_sum", "is_syntactically_valid": true}
{"task_id": 271, "generation": "def even_Power_Sum(n):\n    \"\"\"\n    Finds the sum of the fifth power of the first n even natural numbers.\n    \n    Args:\n        n (int): The number of even natural numbers to consider.\n        \n    Returns:\n        int: The sum of the fifth power of the first n even natural numbers.\n    \"\"\"\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    return sum(num ** 5 for num in even_numbers)", "is_syntactically_valid": true}
{"task_id": 272, "generation": "def rear_extract(records):\n    return [record[-1] for record in records]", "is_syntactically_valid": true}
{"task_id": 273, "generation": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the corresponding elements of two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the differences of the corresponding elements.\n    \"\"\"\n    return tuple(a - b for a, b in zip(tuple1, tuple2))", "is_syntactically_valid": true}
{"task_id": 274, "generation": "from math import factorial\n\ndef even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(0, n+1, 2):\n        total += factorial(n) // (factorial(i) * factorial(n-i))\n    return total", "is_syntactically_valid": true}
{"task_id": 275, "generation": "def get_Position(arr, n, k):\n    \"\"\"\n    Find the position of the last removed element from the given array.\n    \n    Parameters:\n    arr (list): The input array.\n    n (int): The number of elements to be removed.\n    k (int): The value to be removed.\n    \n    Returns:\n    int: The position of the last removed element.\n    \"\"\"\n    \n    # Create a copy of the input array\n    arr_copy = arr[:]\n    \n    # Iterate through the array and remove the elements with value k\n    for i in range(len(arr_copy)-1, -1, -1):\n        if arr_copy[i] == k:\n            return i+1\n        arr_copy.pop(i)\n        \n        # Check if the required number of elements have been removed\n        if len(arr_copy) == n-1:\n            break\n    \n    # If the element is not found, return -1\n    return -1", "is_syntactically_valid": true}
{"task_id": 276, "generation": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder.\n\n    Args:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height", "is_syntactically_valid": true}
{"task_id": 277, "generation": "def dict_filter(d, value):\n    return {k: v for k, v in d.items() if v >= value}", "is_syntactically_valid": true}
{"task_id": 278, "generation": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 279, "generation": "def is_num_decagonal(n):\n    \"\"\"\n    Find the nth decagonal number.\n    \n    Args:\n    n (int): The position of the decagonal number to find.\n    \n    Returns:\n    int: The nth decagonal number.\n    \"\"\"\n    return n * (5 * n - 4)", "is_syntactically_valid": true}
{"task_id": 280, "generation": "def sequential_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (False, -1)", "is_syntactically_valid": true}
{"task_id": 281, "generation": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Args:\n        lst (list): The input list to be checked.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))", "is_syntactically_valid": true}
{"task_id": 282, "generation": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))", "is_syntactically_valid": true}
{"task_id": 283, "generation": "def validate(numbers):\n    \"\"\"\n    Check whether the frequency of each digit is less than or equal to the digit itself.\n\n    Args:\n        numbers (int): A positive integer.\n\n    Returns:\n        bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    # Convert the integer to a string to iterate over its digits\n    digits = [int(digit) for digit in str(numbers)]\n\n    # Count the frequency of each digit\n    for digit in set(digits):\n        if digits.count(digit) > digit:\n            return False\n\n    return True", "is_syntactically_valid": true}
{"task_id": 284, "generation": "def check_element(lst, element):\n    return all(item == element for item in lst)", "is_syntactically_valid": true}
{"task_id": 285, "generation": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb|bbb)'\n    if re.match(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"", "is_syntactically_valid": true}
{"task_id": 286, "generation": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    \n    Args:\n    arr (list): The input array.\n    k (int): The number of times the array is repeated.\n    n (int): The size of the contiguous subarray.\n    \n    Returns:\n    int: The largest sum of contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    \n    # Repeat the array k times\n    repeated_arr = arr * k\n    \n    # Compute the maximum subarray sum\n    for i in range(len(repeated_arr) - n + 1):\n        curr_sum = sum(repeated_arr[i:i+n])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 287, "generation": "def square_Sum(n):\n    \"\"\"\n    Finds the sum of squares of the first n even natural numbers.\n\n    Args:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    return sum(i**2 for i in range(2, 2*n+1, 2))", "is_syntactically_valid": true}
{"task_id": 288, "generation": "from typing import List\n\ndef modular_inverse(arr: List[int], p: int, n: int) -> int:\n    count = 0\n    for num in arr:\n        if pow(num, p-1, p) == 1:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 289, "generation": "def odd_Days(year):\n    # Calculate the number of odd days in the given year\n    days_in_year = 365\n    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n        days_in_year = 366\n    return days_in_year % 7", "is_syntactically_valid": true}
{"task_id": 290, "generation": "def max_length(nested_list):\n    max_len = 0\n    max_list = None\n    for lst in nested_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return (max_len, max_list)", "is_syntactically_valid": true}
{"task_id": 291, "generation": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        same, diff = diff, (same + diff) * (k - 1)\n\n    return same + diff", "is_syntactically_valid": true}
{"task_id": 292, "generation": "def find(num1, num2):\n    return num1 // num2", "is_syntactically_valid": true}
{"task_id": 293, "generation": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Finds the length of the third side of a right-angled triangle.\n\n    Parameters:\n    a (float): Length of one side of the triangle.\n    b (float): Length of the other side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n    \"\"\"\n    return math.sqrt(a**2 + b**2)", "is_syntactically_valid": true}
{"task_id": 294, "generation": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value", "is_syntactically_valid": true}
{"task_id": 295, "generation": "def sum_div(n):\n    \"\"\"\n    Returns the sum of all divisors of a given number.\n\n    Args:\n        n (int): The number to find the divisors for.\n\n    Returns:\n        int: The sum of all divisors of the given number.\n    \"\"\"\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(divisors)", "is_syntactically_valid": true}
{"task_id": 296, "generation": "def get_Inv_Count(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 297, "generation": "def flatten_list(nested_list):\n    \"\"\"\n    Flattens a given nested list structure.\n    \n    Args:\n        nested_list (list): The nested list to be flattened.\n    \n    Returns:\n        list: The flattened list.\n    \"\"\"\n    flat_list = []\n    \n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                flat_list.append(item)\n    \n    flatten(nested_list)\n    return flat_list", "is_syntactically_valid": true}
{"task_id": 298, "generation": "def intersection_nested_lists(outer_list, inner_lists):\n    result = []\n    for inner_list in inner_lists:\n        intersection = [item for item in inner_list if item in outer_list]\n        result.append(intersection)\n    return result", "is_syntactically_valid": true}
{"task_id": 299, "generation": "def max_aggregate(data):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    :param data: A list of tuples, where each tuple contains a name and a score.\n    :type data: list[tuple[str, int]]\n    :return: A tuple containing the name with the maximum aggregate score and the aggregate score.\n    :rtype: tuple[str, int]\n    \"\"\"\n    aggregates = {}\n    for name, score in data:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    \n    return max(aggregates.items(), key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 300, "generation": "from math import comb\n\ndef count_binary_seq(n):\n    \"\"\"\n    Find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    total_count = 0\n    for i in range(n+1):\n        total_count += comb(n, i) * comb(n, i)\n    return total_count", "is_syntactically_valid": true}
{"task_id": 301, "generation": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "is_syntactically_valid": true}
{"task_id": 302, "generation": "def set_Bit_Number(n):\n    \"\"\"\n    Find the most significant bit number which is also a set bit.\n    \n    Args:\n    n (int): The input number.\n    \n    Returns:\n    int: The most significant bit number which is also a set bit.\n    \"\"\"\n    # Find the most significant bit\n    msb = 1\n    while msb <= n:\n        msb <<= 1\n    \n    # Find the most significant bit number which is also a set bit\n    while msb > 0:\n        if n & msb:\n            return msb\n        msb >>= 1\n    \n    return 0", "is_syntactically_valid": true}
{"task_id": 303, "generation": "def solve(arr, n):\n    count_0 = 0\n    count_1 = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count_0 += 1\n        else:\n            count_1 += 1\n    return count_0 == count_1", "is_syntactically_valid": true}
{"task_id": 304, "generation": "def find_Element(lst, rotations, index, position):\n    for rotation in rotations:\n        lst = lst[rotation[1]:] + lst[:rotation[1]]\n    return lst[position]", "is_syntactically_valid": true}
{"task_id": 305, "generation": "def start_withp(words):\n    p_words = []\n    for word in words:\n        if word.startswith('p') or word.startswith('P'):\n            p_words.append(word)\n    \n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return ()", "is_syntactically_valid": true}
{"task_id": 306, "generation": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Create a dp array to store the maximum sum of increasing subsequence\n    dp = [0] * n\n\n    # Initialize the dp array with the first element\n    dp[0] = arr[0]\n\n    # Iterate through the array and fill the dp array\n    for j in range(1, n):\n        # Find the maximum sum of increasing subsequence ending at index j\n        for l in range(j):\n            if arr[l] < arr[j]:\n                dp[j] = max(dp[j], dp[l] + arr[j])\n\n    # Find the maximum sum of increasing subsequence including the kth element\n    max_sum = 0\n    for j in range(i, k+1):\n        max_sum = max(max_sum, dp[j])\n\n    return max_sum", "is_syntactically_valid": true}
{"task_id": 307, "generation": "def colon_tuplex(tup, index, value):\n    \"\"\"\n    Function to get a colon of a tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        index (int): The index of the element to be replaced.\n        value: The new value to be inserted.\n\n    Returns:\n        tuple: The modified tuple.\n    \"\"\"\n    return tup[:index] + (value,) + tup[index+1:]", "is_syntactically_valid": true}
{"task_id": 308, "generation": "from itertools import product\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    Find the specified number of largest products from two given lists.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        n (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the n largest products.\n    \"\"\"\n    products = [a * b for a, b in product(list1, list2)]\n    products.sort(reverse=True)\n    return products[:n]", "is_syntactically_valid": true}
{"task_id": 309, "generation": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b", "is_syntactically_valid": true}
{"task_id": 310, "generation": "def string_to_tuple(string):\n    return tuple(string)", "is_syntactically_valid": true}
{"task_id": 311, "generation": "def set_left_most_unset_bit(num):\n    \"\"\"\n    Sets the leftmost unset bit in the given number.\n\n    Args:\n        num (int): The number to set the leftmost unset bit.\n\n    Returns:\n        int: The number with the leftmost unset bit set.\n    \"\"\"\n    if num == 0:\n        return 1\n    \n    # Find the leftmost set bit\n    leftmost_set_bit = 1\n    while leftmost_set_bit <= num:\n        leftmost_set_bit <<= 1\n    \n    # Set the leftmost unset bit\n    return num | (leftmost_set_bit >> 1)", "is_syntactically_valid": true}
{"task_id": 312, "generation": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone.\n\n    Args:\n        r (float): The radius of the cone's base.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h", "is_syntactically_valid": true}
{"task_id": 313, "generation": "def pos_nos(nums):\n    return [num for num in nums if num > 0]", "is_syntactically_valid": true}
{"task_id": 314, "generation": "def max_sum_rectangular_grid(grid, n):\n    if not grid:\n        return 0\n\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n\n    dp = [[0] * n for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n\n    for j in range(1, n):\n        dp[0][j] = max(dp[0][j-1], dp[1][j-1] + grid[0][j])\n        dp[1][j] = max(dp[1][j-1], dp[0][j-1] + grid[1][j])\n\n    return max(dp[0][n-1], dp[1][n-1])", "is_syntactically_valid": true}
{"task_id": 315, "generation": "def find_Max_Len_Even(text):\n    words = text.split()\n    max_len_even = -1\n    max_len_even_word = \"-1\"\n\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len_even:\n            max_len_even = len(word)\n            max_len_even_word = word\n\n    return max_len_even_word", "is_syntactically_valid": true}
{"task_id": 316, "generation": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    last_index = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            last_index = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_index", "is_syntactically_valid": true}
{"task_id": 317, "generation": "def modified_encode(items):\n    encoded = []\n    prev_item = None\n    count = 0\n\n    for item in items:\n        if item != prev_item:\n            if count > 0:\n                if count > 1:\n                    encoded.append([count, prev_item])\n                else:\n                    encoded.append(prev_item)\n            count = 1\n            prev_item = item\n        else:\n            count += 1\n\n    if count > 0:\n        if count > 1:\n            encoded.append([count, prev_item])\n        else:\n            encoded.append(prev_item)\n\n    return encoded", "is_syntactically_valid": true}
{"task_id": 318, "generation": "def max_volume(total_sides):\n    if total_sides < 1:\n        return 0\n    \n    max_vol = 0\n    for a in range(1, total_sides // 3 + 1):\n        for b in range(a, (total_sides - a) // 2 + 1):\n            c = total_sides - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n    \n    return max_vol", "is_syntactically_valid": true}
{"task_id": 319, "generation": "import re\n\ndef find_long_word(string):\n    regex = r'\\b\\w{5}\\b'\n    return re.findall(regex, string)", "is_syntactically_valid": true}
{"task_id": 320, "generation": "def sum_difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = (n * (n + 1)) // 2\n    \n    # Calculate the sum of the squares of the first n natural numbers\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    \n    # Calculate the difference between the squared sum and the sum of squares\n    difference = sum_of_numbers ** 2 - sum_of_squares\n    \n    return difference", "is_syntactically_valid": true}
{"task_id": 321, "generation": "def find_demlo(number: str) -> str:\n    # Count the frequency of each digit in the number\n    freq = {}\n    for digit in number:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Build the demlo number by iterating through the digits in ascending order\n    demlo = \"\"\n    for digit in range(1, 10):\n        if str(digit) in freq:\n            demlo += str(digit) * freq[str(digit)]\n    for digit in range(10, 0, -1):\n        if str(digit) in freq:\n            demlo += str(digit) * freq[str(digit)]\n\n    return demlo", "is_syntactically_valid": true}
{"task_id": 322, "generation": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]", "is_syntactically_valid": true}
{"task_id": 323, "generation": "def re_arrange(arr, n):\n    positive = [x for x in arr if x >= 0]\n    negative = [x for x in arr if x < 0]\n    result = []\n    \n    for i in range(max(len(positive), len(negative))):\n        if i < len(positive):\n            result.append(positive[i])\n        if i < len(negative):\n            result.append(negative[i])\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 324, "generation": "def sum_of_alternates(tuples):\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(tuples)):\n        if i % 2 == 0:\n            even_sum += tuples[i]\n        else:\n            odd_sum += tuples[i]\n    return (even_sum, odd_sum)", "is_syntactically_valid": true}
{"task_id": 325, "generation": "def get_Min_Squares(n):\n    if n == 0:\n        return 0\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    \n    return dp[n]", "is_syntactically_valid": true}
{"task_id": 326, "generation": "import re\nfrom collections import Counter\n\ndef most_occurrences(strings):\n    word_counts = Counter()\n    for s in strings:\n        for word in s.split():\n            word_counts[word] += 1\n    return max(word_counts, key=word_counts.get)", "is_syntactically_valid": true}
{"task_id": 327, "generation": "def check_isosceles(a, b, c):\n    \"\"\"\n    Checks if a triangle with sides a, b, and c is isosceles.\n    \n    Args:\n        a (int): Length of the first side of the triangle.\n        b (int): Length of the second side of the triangle.\n        c (int): Length of the third side of the triangle.\n        \n    Returns:\n        bool: True if the triangle is isosceles, False otherwise.\n    \"\"\"\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False", "is_syntactically_valid": true}
{"task_id": 328, "generation": "def rotate_left(lst, n, k):\n    \"\"\"\n    Rotate a given list by specified number of items to the left direction.\n\n    Args:\n        lst (list): The input list to be rotated.\n        n (int): The number of items to rotate.\n        k (int): The number of times to rotate the list.\n\n    Returns:\n        list: The rotated list.\n    \"\"\"\n    return lst[n:] + lst[:n] * k", "is_syntactically_valid": true}
{"task_id": 329, "generation": "def neg_count(numbers):\n    \"\"\"\n    Counts the number of negative numbers in a given list.\n    \n    Args:\n    numbers (list): The list of numbers.\n    \n    Returns:\n    int: The count of negative numbers in the list.\n    \"\"\"\n    count = 0\n    for num in numbers:\n        if num < 0:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 330, "generation": "import re\n\ndef find_char(text):\n    # Use regex to find all words of length 3, 4, and 5\n    pattern = r'\\b\\w{3,5}\\b'\n    matches = re.findall(pattern, text)\n    \n    # Return the unique matches\n    return list(set(matches))", "is_syntactically_valid": true}
{"task_id": 331, "generation": "def count_unset_bits(num):\n    \"\"\"\n    Count the number of unset bits in a given number.\n\n    Args:\n    num: An integer.\n\n    Returns:\n    The number of unset bits in the given number.\n    \"\"\"\n    return bin(num).count('0') - 1", "is_syntactically_valid": true}
{"task_id": 332, "generation": "def char_frequency(string):\n    \"\"\"\n    This function takes a string as input and returns a dictionary containing the frequency of each character in the string.\n    \"\"\"\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq", "is_syntactically_valid": true}
{"task_id": 333, "generation": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])", "is_syntactically_valid": true}
{"task_id": 334, "generation": "def check_Validity(a, b, c):\n    \"\"\"\n    Checks whether the given three sides can form a valid triangle.\n    \n    Args:\n    a (int or float): Length of the first side.\n    b (int or float): Length of the second side.\n    c (int or float): Length of the third side.\n    \n    Returns:\n    bool: True if the triangle is valid, False otherwise.\n    \"\"\"\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False", "is_syntactically_valid": true}
{"task_id": 335, "generation": "def ap_sum(a, b, d):\n    \"\"\"\n    Finds the sum of an arithmetic progression.\n    \n    Args:\n        a (int): The first term of the arithmetic progression.\n        b (int): The last term of the arithmetic progression.\n        d (int): The common difference between terms.\n    \n    Returns:\n        int: The sum of the arithmetic progression.\n    \"\"\"\n    n = (b - a) // d + 1\n    return (a + b) * n // 2", "is_syntactically_valid": true}
{"task_id": 336, "generation": "def check_monthnum(month_name):\n    \"\"\"\n    Checks whether the given month name contains 28 days or not.\n    \n    Args:\n        month_name (str): The name of the month.\n        \n    Returns:\n        bool: True if the month has 28 days, False otherwise.\n    \"\"\"\n    months_with_28_days = [\"February\"]\n    return month_name in months_with_28_days", "is_syntactically_valid": true}
{"task_id": 337, "generation": "def text_match_word(text):\n    # Define the word to match\n    word = \"python\"\n\n    # Remove leading and trailing whitespace\n    text = text.strip()\n\n    # Check if the text ends with the word, allowing for optional punctuation\n    if text.endswith(word + \".\") or text.endswith(word):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"", "is_syntactically_valid": true}
{"task_id": 338, "generation": "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if len(substring) >= 1 and substring[0] == substring[-1]:\n                count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 339, "generation": "def find_Divisor(start, end):\n    \"\"\"\n    Find the maximum occurring divisor in the given interval.\n\n    Args:\n        start (int): The starting number of the interval.\n        end (int): The ending number of the interval.\n\n    Returns:\n        int: The maximum occurring divisor in the given interval.\n    \"\"\"\n    divisor_count = {}\n    for num in range(start, end+1):\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisor_count[i] = divisor_count.get(i, 0) + 1\n\n    max_count = 0\n    max_divisor = 0\n    for divisor, count in divisor_count.items():\n        if count > max_count:\n            max_count = count\n            max_divisor = divisor\n\n    return max_divisor", "is_syntactically_valid": true}
{"task_id": 340, "generation": "def sum_three_smallest_nums(nums):\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Get the sum of the three smallest positive numbers\n    return sum(num for num in nums if num > 0)[:3]", "is_syntactically_valid": true}
{"task_id": 341, "generation": "def set_to_tuple(input_set):\n    return tuple(sorted(input_set))", "is_syntactically_valid": true}
{"task_id": 342, "generation": "def find_minimum_range(arrays):\n    \"\"\"\n    Find the smallest range that includes at least one element from each of the given arrays.\n\n    Args:\n    arrays (list): A list of lists, where each inner list represents an array of integers.\n\n    Returns:\n    tuple: The smallest range (min, max) that includes at least one element from each of the given arrays.\n    \"\"\"\n    elements = []\n    for arr in arrays:\n        for num in arr:\n            elements.append((num, i) for i, arr in enumerate(arrays))\n\n    elements.sort()\n    min_range = float('inf')\n    min_start = 0\n    min_end = 0\n    seen = [0] * len(arrays)\n    count = 0\n\n    for i, (num, idx) in enumerate(elements):\n        seen[idx] += 1\n        if seen[idx] == 1:\n            count += 1\n\n        while count == len(arrays):\n            if elements[i][0] - elements[min_start][0] < min_range:\n                min_range = elements[i][0] - elements[min_start][0]\n                min_start = min_start\n                min_end = i\n\n            seen[elements[min_start][1]] -= 1\n            if seen[elements[min_start][1]] == 0:\n                count -= 1\n            min_start += 1\n\n    return (elements[min_start][0], elements[min_end][0])", "is_syntactically_valid": true}
{"task_id": 343, "generation": "def dig_let(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (digits, letters)", "is_syntactically_valid": true}
{"task_id": 344, "generation": "import math\n\ndef count_Odd_Squares(start, end):\n    \"\"\"\n    Find the number of elements with odd factors in the given range.\n\n    Args:\n    start (int): The starting number of the range.\n    end (int): The ending number of the range.\n\n    Returns:\n    int: The number of elements with odd factors in the given range.\n    \"\"\"\n    count = 0\n    for num in range(start, end+1):\n        if all(num % i != 0 or i % 2 != 0 for i in range(1, int(math.sqrt(num)) + 1)):\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 345, "generation": "def diff_consecutivenums(nums):\n    diffs = []\n    for i in range(1, len(nums)):\n        diffs.append(nums[i] - nums[i-1])\n    return diffs", "is_syntactically_valid": true}
{"task_id": 346, "generation": "from math import factorial\n\ndef zigzag(n, k):\n    \"\"\"\n    Calculates the Entringer number e(n, k).\n\n    Args:\n        n (int): The first parameter of the Entringer number.\n        k (int): The second parameter of the Entringer number.\n\n    Returns:\n        int: The Entringer number e(n, k).\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    if k == 1 or k == n-1:\n        return n\n    return sum((-1)**(i+1) * factorial(n-i) // (factorial(i) * factorial(n-2*i)) for i in range(1, k+1))", "is_syntactically_valid": true}
{"task_id": 347, "generation": "import math\n\ndef count_Squares(length, width):\n    \"\"\"\n    Counts the number of squares in a rectangle.\n    \n    Args:\n        length (int): The length of the rectangle.\n        width (int): The width of the rectangle.\n    \n    Returns:\n        int: The number of squares in the rectangle.\n    \"\"\"\n    return sum(range(1, min(length, width) + 1)) * max(length, width)", "is_syntactically_valid": true}
{"task_id": 348, "generation": "def find_ways(n):\n    \"\"\"\n    Counts the number of sequences of length n with non-negative prefix sums that can be generated by the values [0, 1, 2, 3].\n    \n    Args:\n        n (int): The length of the sequences to count.\n    \n    Returns:\n        int: The number of valid sequences of length n.\n    \"\"\"\n    # Initialize the number of valid sequences for each length up to n\n    dp = [0] * (n + 1)\n    \n    # Base case: There is 1 valid sequence of length 0 (the empty sequence)\n    dp[0] = 1\n    \n    # Iterate through the lengths from 1 to n\n    for i in range(1, n + 1):\n        # Iterate through the possible values that can be added to the sequence\n        for val in [0, 1, 2, 3]:\n            # If the current value plus the prefix sum is non-negative\n            if i - val >= 0:\n                # Add the number of valid sequences of length i - val to the current length\n                dp[i] += dp[i - val]\n    \n    # Return the number of valid sequences of length n\n    return dp[n]", "is_syntactically_valid": true}
{"task_id": 349, "generation": "def check(s):\n    \"\"\"\n    Checks whether the given string is a binary string or not.\n    \n    Args:\n        s (str): The input string to be checked.\n    \n    Returns:\n        str: \"Yes\" if the input string is a binary string, \"No\" otherwise.\n    \"\"\"\n    try:\n        int(s, 2)\n        return \"Yes\"\n    except ValueError:\n        return \"No\"", "is_syntactically_valid": true}
{"task_id": 350, "generation": "def minimum_Length(s):\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    # Find the character with the minimum count\n    min_char = min(char_count, key=char_count.get)\n    \n    # Remove the character with the minimum count\n    new_s = ''.join(char for char in s if char != min_char)\n    \n    return len(new_s)", "is_syntactically_valid": true}
{"task_id": 351, "generation": "def first_Element(lst, n, k):\n    \"\"\"\n    Find the first element occurring k times in a given array.\n    \n    Args:\n        lst (list): The input array.\n        n (int): The length of the array.\n        k (int): The number of times the element should occur.\n        \n    Returns:\n        int: The first element occurring k times in the array.\n    \"\"\"\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n            if count_dict[item] == k:\n                return item\n        else:\n            count_dict[item] = 1\n    return -1", "is_syntactically_valid": true}
{"task_id": 352, "generation": "def unique_Characters(string):\n    # Create a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n    \n    # If all characters are unique, return True\n    return True", "is_syntactically_valid": true}
{"task_id": 353, "generation": "def remove_column(matrix, index):\n    \"\"\"\n    Removes the specified column from the given nested list.\n    \n    Args:\n        matrix (list): The nested list representing the matrix.\n        index (int): The index of the column to be removed.\n    \n    Returns:\n        list: The modified matrix with the specified column removed.\n    \"\"\"\n    return [[row[i] for i in range(len(row)) if i != index] for row in matrix]", "is_syntactically_valid": true}
{"task_id": 354, "generation": "def tn_ap(a, d, n):\n    \"\"\"\n    Finds the n-th term of an arithmetic progression.\n    \n    Args:\n        a (int): The first term of the arithmetic progression.\n        d (int): The common difference between consecutive terms.\n        n (int): The position of the term to be found.\n    \n    Returns:\n        int: The n-th term of the arithmetic progression.\n    \"\"\"\n    return a + (n - 1) * d", "is_syntactically_valid": true}
{"task_id": 355, "generation": "import math\n\ndef count_Rectangles(r):\n    if r == 0:\n        return 0\n    \n    # Calculate the maximum side length of the rectangle\n    max_side = 2 * r\n    \n    # Count the number of rectangles\n    count = 0\n    for x in range(1, int(max_side) + 1):\n        for y in range(1, int(max_side) + 1):\n            if x * y <= 4 * r ** 2:\n                count += 1\n    \n    return count", "is_syntactically_valid": true}
{"task_id": 356, "generation": "def find_angle(angle1, angle2):\n    \"\"\"\n    Find the third angle of a triangle given two angles.\n    \n    Args:\n        angle1 (int): The first angle of the triangle.\n        angle2 (int): The second angle of the triangle.\n        \n    Returns:\n        int: The third angle of the triangle.\n    \"\"\"\n    return 180 - angle1 - angle2", "is_syntactically_valid": true}
{"task_id": 357, "generation": "def find_max(records):\n    \"\"\"\n    Find the maximum element of all the given tuple records.\n    \n    Args:\n        records (list): A list of tuples, where each tuple contains two integers.\n    \n    Returns:\n        int: The maximum element among all the tuples.\n    \"\"\"\n    max_value = max(max(record) for record in records)\n    return max_value", "is_syntactically_valid": true}
{"task_id": 358, "generation": "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))", "is_syntactically_valid": true}
{"task_id": 359, "generation": "def Check_Solution(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the equation has real roots\n    if discriminant >= 0:\n        # Calculate the roots\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        \n        # Check if one root is twice the other\n        if abs(root1) == 2 * abs(root2):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"", "is_syntactically_valid": true}
{"task_id": 360, "generation": "def get_carol(n):\n    \"\"\"\n    Find the n'th carol number.\n    \n    :param n: int, the index of the carol number to find\n    :return: int, the n'th carol number\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        prev1 = 1\n        prev2 = 7\n        for i in range(3, n+1):\n            curr = 4 * prev2 - prev1\n            prev1 = prev2\n            prev2 = curr\n        return curr", "is_syntactically_valid": true}
{"task_id": 361, "generation": "def remove_empty(lst):\n    return [sublst for sublst in lst if sublst]", "is_syntactically_valid": true}
{"task_id": 362, "generation": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum occurrences in a given list.\n    \n    Args:\n        lst (list): The input list.\n        \n    Returns:\n        The item(s) with maximum occurrences in the list.\n    \"\"\"\n    count = {}\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    \n    max_count = max(count.values())\n    return [item for item, c in count.items() if c == max_count]", "is_syntactically_valid": true}
{"task_id": 363, "generation": "def add_K_element(tuples, k):\n    return [(x+k, y+k, z+k) for x, y, z in tuples]", "is_syntactically_valid": true}
{"task_id": 364, "generation": "def min_flip_to_make_string_alternate(s):\n    n = len(s)\n    \n    # Calculate the minimum number of flips required to make the string a sequence of alternate characters\n    # starting with '0'\n    count1 = 0\n    for i in range(n):\n        if i % 2 == 0 and s[i] != '0':\n            count1 += 1\n        elif i % 2 != 0 and s[i] != '1':\n            count1 += 1\n    \n    # Calculate the minimum number of flips required to make the string a sequence of alternate characters\n    # starting with '1'\n    count2 = 0\n    for i in range(n):\n        if i % 2 == 0 and s[i] != '1':\n            count2 += 1\n        elif i % 2 != 0 and s[i] != '0':\n            count2 += 1\n    \n    # Return the minimum of the two counts\n    return min(count1, count2)", "is_syntactically_valid": true}
{"task_id": 365, "generation": "def count_Digit(num):\n    return len(str(abs(num)))", "is_syntactically_valid": true}
{"task_id": 366, "generation": "def adjacent_num_product(lst):\n    max_product = 0\n    for i in range(len(lst) - 1):\n        product = lst[i] * lst[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product", "is_syntactically_valid": true}
{"task_id": 367, "generation": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef get_height(node):\n    if not node:\n        return 0\n    left_height = get_height(node.left)\n    right_height = get_height(node.right)\n    if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n        return -1\n    return max(left_height, right_height) + 1\n\ndef is_tree_balanced(root):\n    return get_height(root) != -1\n\n# Test cases\nroot = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, None, TreeNode(6)))\nroot1 = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, TreeNode(6), TreeNode(7)))\nroot2 = TreeNode(1, TreeNode(2, TreeNode(4), TreeNode(5)), TreeNode(3, TreeNode(6), None))\n\nassert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False", "is_syntactically_valid": true}
{"task_id": 368, "generation": "def repeat_tuples(tup, n):\n    return tuple(tup for _ in range(n))", "is_syntactically_valid": true}
{"task_id": 369, "generation": "def lateralsurface_cuboid(length, width, height):\n    \"\"\"\n    Calculates the lateral surface area of a cuboid.\n    \n    Parameters:\n    length (int): The length of the cuboid.\n    width (int): The width of the cuboid.\n    height (int): The height of the cuboid.\n    \n    Returns:\n    int: The lateral surface area of the cuboid.\n    \"\"\"\n    return 2 * (length * height + width * height)", "is_syntactically_valid": true}
{"task_id": 370, "generation": "def float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]), reverse=True)", "is_syntactically_valid": true}
{"task_id": 371, "generation": "def smallest_missing(arr, start, end):\n    \"\"\"\n    Find the smallest missing element in a sorted array.\n\n    Args:\n        arr (List[int]): A sorted list of integers.\n        start (int): The starting index of the array.\n        end (int): The ending index of the array.\n\n    Returns:\n        int: The smallest missing element in the array.\n    \"\"\"\n    if start > end:\n        return start\n\n    mid = (start + end) // 2\n\n    if arr[mid] == mid + start:\n        return smallest_missing(arr, mid + 1, end)\n    else:\n        return smallest_missing(arr, start, mid - 1)", "is_syntactically_valid": true}
{"task_id": 372, "generation": "import heapq\n\ndef heap_assending(lst):\n    \"\"\"\n    Sorts a given list of elements in ascending order using the heap queue algorithm.\n    \n    Args:\n        lst (list): The list of elements to be sorted.\n    \n    Returns:\n        list: The sorted list in ascending order.\n    \"\"\"\n    heapq.heapify(lst)\n    return heapq.nsmallest(len(lst), lst)", "is_syntactically_valid": true}
{"task_id": 373, "generation": "def volume_cuboid(length, width, height):\n    return length * width * height", "is_syntactically_valid": true}
{"task_id": 374, "generation": "from itertools import permutations\n\ndef permute_string(s):\n    \"\"\"\n    Prints all permutations of a given string including duplicates.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        list: A list of all permutations of the input string.\n    \"\"\"\n    return [''.join(p) for p in permutations(s)]", "is_syntactically_valid": true}
{"task_id": 375, "generation": "def round_num(num, multiple):\n    \"\"\"\n    Rounds the given number to the nearest multiple of a specific number.\n\n    Args:\n        num (float): The number to be rounded.\n        multiple (float): The number to round to the nearest multiple of.\n\n    Returns:\n        float: The rounded number.\n    \"\"\"\n    return round(num / multiple) * multiple", "is_syntactically_valid": true}
{"task_id": 376, "generation": "def remove_replica(tup, custom_value='MSP'):\n    result = []\n    seen = set()\n    for item in tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n        else:\n            result.append(custom_value)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 377, "generation": "def remove_Char(string, char):\n    \"\"\"\n    Removes all occurrences of a character in a given string.\n    \n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n    \n    Returns:\n        str: The string with all occurrences of the character removed.\n    \"\"\"\n    return string.replace(char, \"\")", "is_syntactically_valid": true}
{"task_id": 378, "generation": "def move_first(lst):\n    return [lst[-1]] + lst[:-1]", "is_syntactically_valid": true}
{"task_id": 379, "generation": "def surfacearea_cuboid(length, width, height):\n    \"\"\"\n    Calculates the surface area of a cuboid.\n\n    Args:\n    length (int): The length of the cuboid.\n    width (int): The width of the cuboid.\n    height (int): The height of the cuboid.\n\n    Returns:\n    int: The surface area of the cuboid.\n    \"\"\"\n    return 2 * (length * width + length * height + width * height)", "is_syntactically_valid": true}
{"task_id": 380, "generation": "def multi_list(rows, cols):\n    return [[i * j for j in range(cols)] for i in range(rows)]", "is_syntactically_valid": true}
{"task_id": 381, "generation": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])", "is_syntactically_valid": true}
{"task_id": 382, "generation": "def find_rotation_count(arr):\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n    \n    Args:\n    arr (list): A circularly sorted array of integers.\n    \n    Returns:\n    int: The number of rotations in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # If the middle element is greater than the rightmost element, then the\n        # pivot element lies in the right half\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return left", "is_syntactically_valid": true}
{"task_id": 383, "generation": "def even_bit_toggle_number(num):\n    \"\"\"\n    Toggles all the odd bits of a given number.\n    \n    Parameters:\n    num (int): The number to toggle the odd bits.\n    \n    Returns:\n    int: The number with the odd bits toggled.\n    \"\"\"\n    # Create a mask with 1 in all odd bit positions\n    mask = 0b10101010101010101010101010101010\n    \n    # Toggle the odd bits using the mask\n    return num ^ mask", "is_syntactically_valid": true}
{"task_id": 384, "generation": "def frequency_Of_Smallest(n, arr):\n    # Find the smallest value in the array\n    smallest = min(arr)\n    \n    # Count the frequency of the smallest value\n    return arr.count(smallest)", "is_syntactically_valid": true}
{"task_id": 385, "generation": "def get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)", "is_syntactically_valid": true}
{"task_id": 386, "generation": "def swap_count(s):\n    stack = []\n    count = 0\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    return count + len(stack) // 2", "is_syntactically_valid": true}
{"task_id": 387, "generation": "def even_or_odd(hex_num):\n    # Convert the hexadecimal number to an integer\n    decimal_num = int(hex_num, 16)\n    \n    # Check if the decimal number is even or odd\n    if decimal_num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"", "is_syntactically_valid": true}
{"task_id": 388, "generation": "def highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    \n    power = 1\n    while power <= n:\n        power <<= 1\n    \n    return power >> 1", "is_syntactically_valid": true}
{"task_id": 389, "generation": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)", "is_syntactically_valid": true}
{"task_id": 390, "generation": "def add_string(lst, string):\n    return [string.format(str(item)) for item in lst]", "is_syntactically_valid": true}
{"task_id": 391, "generation": "def convert_list_dictionary(keys, names, values):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {names[i]: values[i]}}\n        result.append(nested_dict)\n    return result", "is_syntactically_valid": true}
{"task_id": 392, "generation": "def get_max_sum(n):\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "is_syntactically_valid": true}
{"task_id": 393, "generation": "def max_length_list(lst):\n    return max(lst, key=lambda x: len(x))", "is_syntactically_valid": true}
{"task_id": 394, "generation": "def check_distinct(tup):\n    return len(tup) == len(set(tup))", "is_syntactically_valid": true}
{"task_id": 395, "generation": "def first_non_repeating_character(string):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Count the occurrences of each character\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with count 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None", "is_syntactically_valid": true}
{"task_id": 396, "generation": "import re\n\ndef check_char(string):\n    if len(string) < 1:\n        return \"Invalid\"\n    if re.match(r'^(\\w)\\w*\\1$', string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"", "is_syntactically_valid": true}
{"task_id": 397, "generation": "def median_numbers(a, b, c):\n    # Create a list of the three numbers\n    numbers = [a, b, c]\n    \n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the median value\n    return numbers[1]", "is_syntactically_valid": true}
{"task_id": 398, "generation": "def sum_of_digits(numbers):\n    total = 0\n    for num in numbers:\n        if isinstance(num, int):\n            total += sum(int(digit) for digit in str(abs(num)))\n        elif isinstance(num, list):\n            total += sum_of_digits(num)\n    return total", "is_syntactically_valid": true}
{"task_id": 399, "generation": "def bitwise_xor(t1, t2):\n    \"\"\"\n    Perform the bitwise XOR operation on the corresponding elements of the given tuples.\n\n    Args:\n        t1 (tuple): A tuple of integers.\n        t2 (tuple): Another tuple of integers.\n\n    Returns:\n        tuple: A tuple containing the result of the bitwise XOR operation on the corresponding elements of the input tuples.\n    \"\"\"\n    return tuple(x ^ y for x, y in zip(t1, t2))", "is_syntactically_valid": true}
{"task_id": 400, "generation": "def extract_freq(tuples):\n    # Create a dictionary to store the frequency of unique tuples\n    freq = {}\n    \n    # Iterate through the list of tuples\n    for t in tuples:\n        # Sort the tuple to make it order-independent\n        sorted_t = tuple(sorted(t))\n        \n        # Update the frequency of the sorted tuple\n        if sorted_t in freq:\n            freq[sorted_t] += 1\n        else:\n            freq[sorted_t] = 1\n    \n    # Return the number of unique tuples\n    return len(freq)", "is_syntactically_valid": true}
{"task_id": 401, "generation": "def add_nested_tuples(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((t1[i][0] + t2[i][0], t1[i][1] + t2[i][1]))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 402, "generation": "from math import factorial\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Compute the value of n choose r modulo p.\n\n    Args:\n        n (int): The total number of items.\n        r (int): The number of items to choose.\n        p (int): The modulo value.\n\n    Returns:\n        int: The value of n choose r modulo p.\n    \"\"\"\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    \n    numerator = factorial(n) % p\n    denominator = (factorial(r) * factorial(n-r)) % p\n    \n    return (numerator * pow(denominator, p-2, p)) % p", "is_syntactically_valid": true}
{"task_id": 403, "generation": "import re\n\ndef is_valid_URL(url):\n    # Define a regular expression pattern to match valid URLs\n    pattern = r'^https?://(?:www\\.)?[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+(?:/[a-zA-Z0-9-]+)*/?$'\n    \n    # Check if the input URL matches the pattern\n    return bool(re.match(pattern, url))", "is_syntactically_valid": true}
{"task_id": 404, "generation": "def minimum(a, b):\n    return min(a, b)", "is_syntactically_valid": true}
{"task_id": 405, "generation": "def check_tuplex(tup, element):\n    return element in tup", "is_syntactically_valid": true}
{"task_id": 406, "generation": "def find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"", "is_syntactically_valid": true}
{"task_id": 407, "generation": "def rearrange_bigger(num):\n    # Convert the number to a list of digits\n    digits = list(str(num))\n    \n    # Find the rightmost digit that is smaller than the digit to its right\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    # If no such digit is found, the number cannot be rearranged to a bigger number\n    if i < 0:\n        return False\n    \n    # Find the smallest digit to the right of the digit at index i that is greater than it\n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the digits at indices i and j\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits to the right of the digit at index i\n    digits[i+1:] = digits[i+1:][::-1]\n    \n    # Convert the list of digits back to a number and return it\n    return int(''.join(digits))", "is_syntactically_valid": true}
{"task_id": 408, "generation": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append([num1, num2])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]", "is_syntactically_valid": true}
{"task_id": 409, "generation": "def min_product_tuple(tuples):\n    min_product = float('inf')\n    for a, b in tuples:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product", "is_syntactically_valid": true}
{"task_id": 410, "generation": "def min_val(lst):\n    min_value = float('inf')\n    for item in lst:\n        if isinstance(item, (int, float)):\n            min_value = min(min_value, item)\n    return min_value", "is_syntactically_valid": true}
{"task_id": 411, "generation": "import re\n\ndef snake_to_camel(snake_case_string):\n    # Use regex to split the snake case string into words\n    words = re.findall(r'_?([a-z]+)', snake_case_string)\n    \n    # Capitalize the first letter of each word and join them\n    camel_case_string = ''.join(word.capitalize() for word in words)\n    \n    return camel_case_string", "is_syntactically_valid": true}
{"task_id": 412, "generation": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]", "is_syntactically_valid": true}
{"task_id": 413, "generation": "def extract_nth_element(list_of_tuples, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        list_of_tuples (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple in the input list.\n    \"\"\"\n    return [tup[n] for tup in list_of_tuples]", "is_syntactically_valid": true}
{"task_id": 414, "generation": "def overlapping(seq1, seq2):\n    \"\"\"\n    Checks whether any value exists in both sequences.\n\n    Args:\n        seq1 (sequence): The first sequence to check.\n        seq2 (sequence): The second sequence to check.\n\n    Returns:\n        bool: True if any value exists in both sequences, False otherwise.\n    \"\"\"\n    return any(elem in seq2 for elem in seq1)", "is_syntactically_valid": true}
{"task_id": 415, "generation": "def max_Product(numbers: list) -> tuple:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n\n    max_pair = (numbers[0], numbers[1])\n    max_product = max_pair[0] * max_pair[1]\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if product > max_product:\n                max_pair = (numbers[i], numbers[j])\n                max_product = product\n\n    return max_pair", "is_syntactically_valid": true}
{"task_id": 416, "generation": "def breakSum(n):\n    if n < 3:\n        return n\n    \n    max_sum = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            remaining = n - i - j\n            current_sum = i + j + breakSum(remaining)\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum", "is_syntactically_valid": true}
{"task_id": 417, "generation": "def group_tuples(tuples):\n    # Create a dictionary to group the tuples by their first element\n    groups = {}\n    for t in tuples:\n        first = t[0]\n        if first not in groups:\n            groups[first] = []\n        groups[first].append(t[1])\n    \n    # Convert the dictionary back to a list of tuples\n    result = []\n    for first, values in groups.items():\n        result.append((first,) + tuple(values))\n    \n    return result", "is_syntactically_valid": true}
{"task_id": 418, "generation": "def Find_Max(input_list):\n    \"\"\"\n    Find the sublist with the maximum length in the given list of lists.\n    \n    Args:\n        input_list (list): A list of lists.\n        \n    Returns:\n        list: The sublist with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_sublist = []\n    \n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    \n    return max_sublist", "is_syntactically_valid": true}
{"task_id": 419, "generation": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)", "is_syntactically_valid": true}
{"task_id": 420, "generation": "def cube_Sum(n):\n    \"\"\"\n    Finds the cube sum of the first n even natural numbers.\n    \n    Args:\n        n (int): The number of even natural numbers to consider.\n    \n    Returns:\n        int: The cube sum of the first n even natural numbers.\n    \"\"\"\n    return sum([(2 * i) ** 3 for i in range(1, n + 1)])", "is_syntactically_valid": true}
{"task_id": 421, "generation": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))", "is_syntactically_valid": true}
{"task_id": 422, "generation": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Finds the average of cubes of first n natural numbers.\n    \n    Args:\n        n (int): The number of natural numbers to consider.\n        \n    Returns:\n        float: The average of cubes of first n natural numbers.\n    \"\"\"\n    total_cube = sum(i**3 for i in range(1, n+1))\n    return total_cube / n", "is_syntactically_valid": true}
{"task_id": 423, "generation": "def get_maxgold(mine, m, n):\n    # Create a 2D array to store the maximum gold that can be collected\n    dp = [[0] * n for _ in range(m)]\n\n    # Fill the first row\n    dp[0][0] = mine[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + mine[0][j]\n\n    # Fill the remaining rows\n    for i in range(1, m):\n        for j in range(n):\n            if j == 0:\n                dp[i][j] = mine[i][j] + max(dp[i-1][j], dp[i-1][j+1])\n            elif j == n-1:\n                dp[i][j] = mine[i][j] + max(dp[i-1][j-1], dp[i-1][j])\n            else:\n                dp[i][j] = mine[i][j] + max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n\n    # Return the maximum gold that can be collected\n    return dp[m-1][n-1]", "is_syntactically_valid": true}
{"task_id": 424, "generation": "def extract_rear(strings):\n    return [s[-1] for s in strings]", "is_syntactically_valid": true}
{"task_id": 425, "generation": "def count_element_in_list(lst, element):\n    count = 0\n    for sublst in lst:\n        if element in sublst:\n            count += 1\n    return count", "is_syntactically_valid": true}
{"task_id": 426, "generation": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))", "is_syntactically_valid": true}
{"task_id": 427, "generation": "import re\n\ndef change_date_format(date_str):\n    # Use regex to match the date pattern and extract the components\n    match = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", date_str)\n    if match:\n        year, month, day = match.groups()\n        # Rearrange the components to the desired format\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format\"\n\n# Test cases\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'", "is_syntactically_valid": true}
{"task_id": 428, "generation": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "is_syntactically_valid": true}
{"task_id": 429, "generation": "def and_tuples(t1, t2):\n    result = []\n    for a, b in zip(t1, t2):\n        if a > b:\n            result.append(a - b)\n        else:\n            result.append(0)\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 430, "generation": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola given the coefficients a, b, and c.\n    \n    Parameters:\n    a (float): The coefficient of the x^2 term.\n    b (float): The coefficient of the x term.\n    c (float): The constant term.\n    \n    Returns:\n    float: The y-coordinate of the directrix.\n    \"\"\"\n    return -c / a", "is_syntactically_valid": true}
{"task_id": 431, "generation": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return None", "is_syntactically_valid": true}
{"task_id": 432, "generation": "def median_trapezium(a, b, c):\n    \"\"\"\n    Finds the median of a trapezium given the lengths of its parallel sides.\n    \n    Args:\n        a (float): Length of the shorter parallel side.\n        b (float): Length of the longer parallel side.\n        c (float): Length of the non-parallel sides.\n    \n    Returns:\n        float: The median of the trapezium.\n    \"\"\"\n    return (a + b) / 2", "is_syntactically_valid": true}
{"task_id": 433, "generation": "def check_greater(arr, num):\n    if all(num > x for x in arr):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'", "is_syntactically_valid": true}
{"task_id": 434, "generation": "def text_match_one(text):\n    import re\n    pattern = r'a(b+)'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "is_syntactically_valid": true}
{"task_id": 435, "generation": "def last_Digit(num):\n    return num % 10", "is_syntactically_valid": true}
{"task_id": 436, "generation": "def neg_nos(lst):\n    \"\"\"\n    Prints the negative numbers in the given list.\n\n    Args:\n    lst (list): A list of integers.\n\n    Returns:\n    A tuple containing the negative numbers in the list.\n    \"\"\"\n    negative_numbers = tuple(filter(lambda x: x < 0, lst))\n    return negative_numbers", "is_syntactically_valid": true}
{"task_id": 437, "generation": "def remove_odd(string):\n    \"\"\"\n    Function to remove odd characters in a string.\n    \n    Parameters:\n    string (str): the input string\n    \n    Returns:\n    str: the string with odd characters removed\n    \"\"\"\n    return ''.join(char for i, char in enumerate(string) if i % 2 == 0)", "is_syntactically_valid": true}
{"task_id": 438, "generation": "def count_bidirectional(pairs):\n    # Create a set to store unique pairs\n    unique_pairs = set()\n    \n    # Iterate through the list of pairs\n    for pair in pairs:\n        # Check if the pair is bidirectional\n        if (pair[1], pair[0]) in pairs:\n            # Add the pair to the set of unique pairs\n            unique_pairs.add(tuple(sorted(pair)))\n    \n    # Return the count of unique bidirectional pairs\n    return str(len(unique_pairs))", "is_syntactically_valid": true}
{"task_id": 439, "generation": "def multiple_to_single(integers):\n    \"\"\"\n    Converts a list of multiple integers into a single integer.\n\n    Args:\n    integers: A list of integers.\n\n    Returns:\n    A single integer formed by concatenating the input integers.\n    \"\"\"\n    return int(''.join(map(str, integers)))", "is_syntactically_valid": true}
{"task_id": 440, "generation": "import re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find all adverbs and their positions in a given sentence.\n    \n    Args:\n        sentence (str): The input sentence.\n    \n    Returns:\n        tuple: A tuple containing the start index, end index, and the adverb.\n    \"\"\"\n    adverb_pattern = r'\\w+ly'\n    matches = re.finditer(adverb_pattern, sentence)\n    \n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    \n    return None", "is_syntactically_valid": true}
{"task_id": 441, "generation": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculates the surface area of a cube.\n    \n    Args:\n        side_length (float): The length of one side of the cube.\n    \n    Returns:\n        float: The surface area of the cube.\n    \"\"\"\n    return 6 * side_length ** 2", "is_syntactically_valid": true}
{"task_id": 442, "generation": "def positive_count(numbers):\n    \"\"\"\n    Calculates the ratio of positive numbers in a given list of integers.\n    \n    Args:\n    numbers (list): The list of integers.\n    \n    Returns:\n    float: The ratio of positive numbers in the list.\n    \"\"\"\n    positive_count = 0\n    total_count = len(numbers)\n    \n    for num in numbers:\n        if num > 0:\n            positive_count += 1\n    \n    return positive_count / total_count", "is_syntactically_valid": true}
{"task_id": 443, "generation": "def largest_neg(lst):\n    \"\"\"\n    Find the largest negative number from the given list.\n    \"\"\"\n    negative_nums = [num for num in lst if num < 0]\n    if negative_nums:\n        return max(negative_nums)\n    else:\n        return None", "is_syntactically_valid": true}
{"task_id": 444, "generation": "def trim_tuple(tuples, k):\n    result = []\n    for t in tuples:\n        trimmed = tuple(t[k:])\n        result.append(trimmed)\n    return str(result)", "is_syntactically_valid": true}
{"task_id": 445, "generation": "def index_multiplication(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((t1[i][0] * t2[i][0], t1[i][1] * t2[i][1]))\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 446, "generation": "def count_Occurrence(tup, lst):\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count", "is_syntactically_valid": true}
{"task_id": 447, "generation": "def cube_nums(nums):\n    return list(map(lambda x: x**3, nums))", "is_syntactically_valid": true}
{"task_id": 448, "generation": "def cal_sum(n):\n    \"\"\"\n    Calculates the sum of the first n Perrin numbers.\n    \n    Args:\n        n (int): The number of Perrin numbers to include in the sum.\n    \n    Returns:\n        int: The sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    \n    return sum(perrin[:n])", "is_syntactically_valid": true}
{"task_id": 449, "generation": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the lengths of the three sides of the triangle\n    a = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    b = ((x2 - x3) ** 2 + (y2 - y3) ** 2) ** 0.5\n    c = ((x3 - x1) ** 2 + (y3 - y1) ** 2) ** 0.5\n\n    # Check if the triangle is valid\n    if a + b > c and b + c > a and a + c > b:\n        return 'Yes'\n    else:\n        return 'No'", "is_syntactically_valid": true}
{"task_id": 450, "generation": "def extract_string(strings, size):\n    \"\"\"\n    Extracts strings of the specified size from a given list of strings.\n    \n    Args:\n        strings (list): A list of string values.\n        size (int): The desired size of the extracted strings.\n        \n    Returns:\n        list: A list of strings of the specified size.\n    \"\"\"\n    return [s for s in strings if len(s) == size]", "is_syntactically_valid": true}
{"task_id": 451, "generation": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text)", "is_syntactically_valid": true}
{"task_id": 452, "generation": "def loss_amount(selling_price, cost_price):\n    if selling_price < cost_price:\n        return cost_price - selling_price\n    else:\n        return None\n\n# Test cases\nassert loss_amount(1500, 1200) == None\nassert loss_amount(100, 200) == 100\nassert loss_amount(2000, 5000) == 3000", "is_syntactically_valid": true}
{"task_id": 453, "generation": "def sumofFactors(n):\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    \n    even_factors = [f for f in factors if f % 2 == 0]\n    return sum(even_factors)", "is_syntactically_valid": true}
{"task_id": 454, "generation": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\w*z\\w*', text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"", "is_syntactically_valid": true}
{"task_id": 455, "generation": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Args:\n        month_number (int): The month number to check.\n\n    Returns:\n        bool: True if the month has 31 days, False otherwise.\n    \"\"\"\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month_number in months_with_31_days", "is_syntactically_valid": true}
{"task_id": 456, "generation": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list", "is_syntactically_valid": true}
{"task_id": 457, "generation": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_sublist = sublst\n    return min_sublist", "is_syntactically_valid": true}
{"task_id": 458, "generation": "def rectangle_area(length, width):\n    return length * width", "is_syntactically_valid": true}
{"task_id": 459, "generation": "import re\n\ndef remove_uppercase(text):\n    return re.sub(r'[A-Z]+', '', text)", "is_syntactically_valid": true}
{"task_id": 460, "generation": "def Extract(lst):\n    return [sub[0] for sub in lst]", "is_syntactically_valid": true}
{"task_id": 461, "generation": "def upper_ctr(string):\n    \"\"\"\n    Counts the number of uppercase characters in the given string.\n    \n    Args:\n        string (str): The input string.\n        \n    Returns:\n        int: The count of uppercase characters in the string.\n    \"\"\"\n    return sum(1 for char in string if char.isupper())", "is_syntactically_valid": true}
{"task_id": 462, "generation": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \n    Args:\n        lst (list): A list of elements.\n    \n    Returns:\n        list: A list of all possible combinations of the elements in the input list.\n    \"\"\"\n    return list(chain.from_iterable(combinations(lst, r) for r in range(len(lst)+1)))", "is_syntactically_valid": true}
{"task_id": 463, "generation": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        curr = arr[i]\n        temp_max = max(curr, max_so_far * curr, min_so_far * curr)\n        min_so_far = min(curr, max_so_far * curr, min_so_far * curr)\n\n        max_so_far = temp_max\n\n        result = max(max_so_far, result)\n\n    return result", "is_syntactically_valid": true}
{"task_id": 464, "generation": "def check_value(dictionary, value):\n    return all(v == value for v in dictionary.values())", "is_syntactically_valid": true}
{"task_id": 465, "generation": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}", "is_syntactically_valid": true}
{"task_id": 466, "generation": "def find_peak(arr, n):\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n            return mid\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1", "is_syntactically_valid": true}
{"task_id": 467, "generation": "def decimal_to_Octal(decimal):\n    \"\"\"\n    Converts a decimal number to its equivalent octal number.\n    \n    Args:\n        decimal (int): The decimal number to be converted.\n    \n    Returns:\n        int: The equivalent octal number.\n    \"\"\"\n    return int(oct(decimal)[2:])", "is_syntactically_valid": true}
{"task_id": 468, "generation": "def max_product(arr, n):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n    \n    Args:\n        arr (list): The input array.\n        n (int): The length of the input array.\n    \n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence.\n    \"\"\"\n    arr.sort()\n    max_prod = 1\n    for i in range(n-1, -1, -1):\n        max_prod *= arr[i]\n        if i == 0 or arr[i-1] >= arr[i]:\n            break\n    return max_prod", "is_syntactically_valid": true}
{"task_id": 469, "generation": "def max_profit(prices, k):\n    n = len(prices)\n    if n <= 1 or k == 0:\n        return 0\n\n    # Create a 2D array to store the maximum profit\n    dp = [[0] * (k + 1) for _ in range(n)]\n\n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(1, min(i + 1, k + 1)):\n            if j == 1:\n                dp[i][j] = max(dp[i - 1][j], prices[i] - prices[0])\n            else:\n                dp[i][j] = max(dp[i - 1][j], prices[i] - min(prices[:i]) + dp[i - 1][j - 1])\n\n    return dp[n - 1][k]", "is_syntactically_valid": true}
{"task_id": 470, "generation": "def add_pairwise(tuples):\n    result = []\n    for i in range(0, len(tuples), 2):\n        result.append(tuples[i] + tuples[i+1])\n    return tuple(result)", "is_syntactically_valid": true}
{"task_id": 471, "generation": "def find_remainder(arr, n, m):\n    \"\"\"\n    Find the remainder of the product of the elements in the array 'arr' divided by 'm'.\n\n    Args:\n        arr (list): The input array.\n        n (int): The length of the array.\n        m (int): The divisor.\n\n    Returns:\n        int: The remainder of the product of the elements in the array divided by 'm'.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % m", "is_syntactically_valid": true}
{"task_id": 472, "generation": "def check_Consecutive(lst):\n    # Check if the list has at least 2 elements\n    if len(lst) < 2:\n        return False\n\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Check if the difference between consecutive elements is 1\n    for i in range(1, len(lst)):\n        if lst[i] - lst[i-1] != 1:\n            return False\n\n    return True", "is_syntactically_valid": true}
{"task_id": 473, "generation": "def tuple_intersection(list1, list2):\n    # Create a set of tuples from the first list\n    set1 = set(tuple(sorted(t)) for t in list1)\n    \n    # Create a set of tuples from the second list\n    set2 = set(tuple(sorted(t)) for t in list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    return intersection", "is_syntactically_valid": true}
{"task_id": 474, "generation": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \n    Args:\n    string (str): The input string.\n    old_char (str): The character to be replaced.\n    new_char (str): The new character to replace the old character.\n    \n    Returns:\n    str: The modified string with the character replaced.\n    \"\"\"\n    return string.replace(old_char, new_char)", "is_syntactically_valid": true}
{"task_id": 475, "generation": "from collections import Counter\n\ndef sort_counter(counter):\n    \"\"\"Sort a counter by value in descending order.\n\n    Args:\n        counter (dict): A dictionary-like object containing key-value pairs.\n\n    Returns:\n        list: A list of tuples, where each tuple contains a key and its corresponding value, sorted by value in descending order.\n    \"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)", "is_syntactically_valid": true}
{"task_id": 476, "generation": "def big_sum(nums):\n    return max(nums) + min(nums)", "is_syntactically_valid": true}
{"task_id": 477, "generation": "def is_lower(string):\n    return string.lower()", "is_syntactically_valid": true}
{"task_id": 478, "generation": "def remove_lowercase(string):\n    \"\"\"\n    Removes all lowercase substrings from a given string.\n    \n    Parameters:\n    string (str): The input string.\n    \n    Returns:\n    str: The input string with all lowercase substrings removed.\n    \"\"\"\n    result = \"\"\n    current_substring = \"\"\n    for char in string:\n        if char.isupper():\n            result += current_substring\n            current_substring = char\n        else:\n            current_substring += char\n    result += current_substring\n    return result", "is_syntactically_valid": true}
{"task_id": 479, "generation": "def first_Digit(num):\n    \"\"\"\n    Find the first digit of a given number.\n\n    Args:\n    num (int): The number to find the first digit of.\n\n    Returns:\n    int: The first digit of the given number.\n    \"\"\"\n    return int(str(num)[0])", "is_syntactically_valid": true}
{"task_id": 480, "generation": "def get_max_occuring_char(string):\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Iterate through the string and count the occurrences of each character\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the character with the maximum count\n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n    \n    return max_char", "is_syntactically_valid": true}
{"task_id": 481, "generation": "def is_subset_sum(arr, target_sum, given_sum):\n    \"\"\"\n    Determine if there is a subset of the given set with sum equal to the given sum.\n    \n    Args:\n        arr (list): The set of integers.\n        target_sum (int): The target sum to find.\n        given_sum (int): The given sum to compare against.\n    \n    Returns:\n        bool: True if a subset with the target sum exists, False otherwise.\n    \"\"\"\n    n = len(arr)\n    dp = [[False] * (given_sum + 1) for _ in range(n + 1)]\n    \n    # Base case: If the sum is 0, then the answer is true\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Fill the dp table\n    for i in range(1, n + 1):\n        for j in range(1, given_sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n    \n    return dp[n][target_sum]", "is_syntactically_valid": true}
{"task_id": 482, "generation": "import re\n\ndef match(string):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, string):\n        return 'Yes'\n    else:\n        return 'No'", "is_syntactically_valid": true}
{"task_id": 483, "generation": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef first_Factorial_Divisible_Number(x):\n    n = 1\n    while True:\n        fact = factorial(n)\n        if fact % x == 0:\n            return n\n        n += 1", "is_syntactically_valid": true}
{"task_id": 484, "generation": "def remove_matching_tuple(tuples1, tuples2):\n    \"\"\"\n    Removes the matching tuples from the given two tuples.\n    \n    Args:\n        tuples1 (tuple): The first tuple.\n        tuples2 (tuple): The second tuple.\n    \n    Returns:\n        list: A list of tuples that are not matching between the two input tuples.\n    \"\"\"\n    result = []\n    for t1 in tuples1:\n        if t1 not in tuples2:\n            result.append(t1)\n    return result", "is_syntactically_valid": true}
{"task_id": 485, "generation": "def is_palindrome(num):\n    \"\"\"\n    Checks if a given number is a palindrome.\n    \n    Args:\n    num (int): The number to be checked.\n    \n    Returns:\n    bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef largest_palindrome(numbers, n):\n    \"\"\"\n    Finds the largest palindromic number in the given array.\n    \n    Args:\n    numbers (list): A list of integers.\n    n (int): The length of the list.\n    \n    Returns:\n    int: The largest palindromic number in the list.\n    \"\"\"\n    palindromes = [num for num in numbers if is_palindrome(num)]\n    if palindromes:\n        return max(palindromes)\n    else:\n        return 0", "is_syntactically_valid": true}
{"task_id": 486, "generation": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Computes the binomial probability for the given number.\n\n    Args:\n        n (int): The total number of trials.\n        k (int): The number of successes.\n        p (float): The probability of success in each trial.\n\n    Returns:\n        float: The binomial probability.\n    \"\"\"\n    return math.comb(n, k) * (p ** k) * ((1 - p) ** (n - k))", "is_syntactically_valid": true}
{"task_id": 487, "generation": "def sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[-1])", "is_syntactically_valid": true}
{"task_id": 488, "generation": "import math\n\ndef area_pentagon(side_length):\n    \"\"\"\n    Calculate the area of a pentagon given the length of one of its sides.\n\n    Args:\n    side_length (float): The length of one side of the pentagon.\n\n    Returns:\n    float: The area of the pentagon.\n    \"\"\"\n    return (5 * side_length ** 2) / (4 * math.tan(math.pi / 5))", "is_syntactically_valid": true}
{"task_id": 489, "generation": "def frequency_Of_Largest(n, arr):\n    \"\"\"\n    Find the frequency of the largest value in a given array.\n\n    Args:\n        n (int): The length of the array.\n        arr (list): The input array.\n\n    Returns:\n        int: The frequency of the largest value in the array.\n    \"\"\"\n    largest_value = max(arr)\n    return arr.count(largest_value)", "is_syntactically_valid": true}
{"task_id": 490, "generation": "def extract_symmetric(tuples):\n    symmetric_pairs = set()\n    for a, b in tuples:\n        if (b, a) in tuples:\n            symmetric_pairs.add((min(a, b), max(a, b)))\n    return symmetric_pairs", "is_syntactically_valid": true}
{"task_id": 491, "generation": "def sum_gp(a, n, r):\n    \"\"\"\n    Calculates the sum of a geometric progression series.\n    \n    Args:\n        a (int): The first term of the series.\n        n (int): The number of terms in the series.\n        r (int): The common ratio of the series.\n    \n    Returns:\n        int: The sum of the geometric progression series.\n    \"\"\"\n    return a * (1 - r**n) / (1 - r)", "is_syntactically_valid": true}
{"task_id": 492, "generation": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "is_syntactically_valid": true}
{"task_id": 493, "generation": "def calculate_polygons(x1, y1, x2, y2, n):\n    \"\"\"\n    Calculates a grid of hexagon coordinates.\n    \n    Args:\n        x1 (float): The x-coordinate of the first point.\n        y1 (float): The y-coordinate of the first point.\n        x2 (float): The x-coordinate of the second point.\n        y2 (float): The y-coordinate of the second point.\n        n (int): The number of rows and columns of hexagons.\n        \n    Returns:\n        list of list of tuples: A list of lists containing 6 tuples of x, y point coordinates for each hexagon.\n    \"\"\"\n    # Calculate the width and height of the grid\n    width = x2 - x1\n    height = y2 - y1\n    \n    # Calculate the side length of the hexagons\n    side_length = min(width / (2 * n - 1), height / (math.sqrt(3) * n))\n    \n    # Calculate the coordinates of the hexagons\n    polygons = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            x = x1 + j * 2 * side_length\n            y = y1 + i * math.sqrt(3) * side_length\n            \n            # Calculate the coordinates of the 6 vertices of the hexagon\n            vertices = [\n                (x - side_length, y),\n                (x - side_length / 2, y + math.sqrt(3) * side_length / 2),\n                (x + side_length / 2, y + math.sqrt(3) * side_length / 2),\n                (x + side_length, y),\n                (x + side_length / 2, y - math.sqrt(3) * side_length / 2),\n                (x - side_length / 2, y - math.sqrt(3) * side_length / 2)\n            ]\n            row.append(vertices)\n        polygons.append(row)\n    \n    return polygons", "is_syntactically_valid": true}
{"task_id": 494, "generation": "def binary_to_integer(binary_tuple):\n    \"\"\"\n    Converts a binary tuple to an integer.\n    \n    Args:\n        binary_tuple (tuple): A tuple of 0s and 1s representing a binary number.\n    \n    Returns:\n        str: The integer value of the binary number as a string.\n    \"\"\"\n    binary_string = ''.join(map(str, binary_tuple))\n    return str(int(binary_string, 2))", "is_syntactically_valid": true}
{"task_id": 495, "generation": "import re\n\ndef remove_lowercase(text):\n    return re.sub(r'[a-z]+', '', text)\n\n# Test cases\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'", "is_syntactically_valid": true}
{"task_id": 496, "generation": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    \"\"\"\n    Find the smallest k integers from a given list of numbers using the heap queue algorithm.\n\n    Args:\n    numbers (list): A list of numbers.\n    k (int): The number of smallest integers to find.\n\n    Returns:\n    list: A list of the k smallest integers from the input list.\n    \"\"\"\n    return heapq.nsmallest(k, numbers)", "is_syntactically_valid": true}
{"task_id": 497, "generation": "import math\n\ndef surfacearea_cone(r, h):\n    \"\"\"\n    Calculates the surface area of a cone.\n    \n    Args:\n        r (float): The radius of the cone's base.\n        h (float): The height of the cone.\n    \n    Returns:\n        float: The surface area of the cone.\n    \"\"\"\n    slant_length = math.sqrt(r**2 + h**2)\n    surface_area = math.pi * r * (r + slant_length)\n    return round(surface_area, 10)", "is_syntactically_valid": true}
{"task_id": 498, "generation": "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two positive integers.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_syntactically_valid": true}
{"task_id": 499, "generation": "def diameter_circle(radius):\n    \"\"\"\n    Find the diameter of a circle given its radius.\n\n    Args:\n        radius (float): The radius of the circle.\n\n    Returns:\n        float: The diameter of the circle.\n    \"\"\"\n    return 2 * radius", "is_syntactically_valid": true}
{"task_id": 500, "generation": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)", "is_syntactically_valid": true}
{"task_id": 501, "generation": "def num_comm_div(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "is_syntactically_valid": true}
{"task_id": 502, "generation": "def find(a, b):\n    return a % b", "is_syntactically_valid": true}
{"task_id": 503, "generation": "def add_consecutive_nums(nums):\n    result = []\n    prev = None\n    curr_sum = 0\n    for num in nums:\n        if prev is None or num != prev + 1:\n            if curr_sum > 0:\n                result.append(curr_sum)\n            curr_sum = num\n        else:\n            curr_sum += num\n        prev = num\n    if curr_sum > 0:\n        result.append(curr_sum)\n    return result", "is_syntactically_valid": true}
{"task_id": 504, "generation": "def sum_Of_Series(n):\n    return (n * (n + 1) * (2 * n + 1)) // 6", "is_syntactically_valid": true}
{"task_id": 505, "generation": "def re_order(arr):\n    non_zeros = [x for x in arr if x != 0]\n    zeros = [x for x in arr if x == 0]\n    return non_zeros + zeros", "is_syntactically_valid": true}
{"task_id": 506, "generation": "def permutation_coefficient(n, k):\n    result = 1\n    for i in range(n, n-k, -1):\n        result *= i\n    return result", "is_syntactically_valid": true}
{"task_id": 507, "generation": "def remove_words(words, remove):\n    return [word for word in words if word not in remove]", "is_syntactically_valid": true}
{"task_id": 508, "generation": "def same_order(list1, list2):\n    common_elements = [x for x in list1 if x in list2]\n    return common_elements == [x for x in list1 if x in common_elements]", "is_syntactically_valid": true}
{"task_id": 509, "generation": "def average_Odd(n):\n    odd_numbers = [i for i in range(1, n+1, 2)]\n    return sum(odd_numbers) / len(odd_numbers)", "is_syntactically_valid": true}
{"task_id": 510, "generation": "from itertools import combinations\n\ndef no_of_subsequences(arr, k):\n    count = 0\n    for i in range(1, len(arr)+1):\n        for combo in combinations(arr, i):\n            if prod(combo) < k:\n                count += 1\n    return count\n\ndef prod(lst):\n    result = 1\n    for x in lst:\n        result *= x\n    return result", "is_syntactically_valid": true}
