[
  {
    "task_id": 35,
    "generated_code": "def find_rect_num(n):\n    return n * (n + 1) // 2 * 2\n\nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
    "assertion_results": [
      {
        "assertion": "assert find_rect_num(4) == 20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_rect_num(5) == 30",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_rect_num(6) == 42",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 33,
    "generated_code": "def decimal_To_Binary(n):\n    return int(bin(n)[2:])\n\nassert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
    "assertion_results": [
      {
        "assertion": "assert decimal_To_Binary(10) == 1010",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert decimal_To_Binary(1) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert decimal_To_Binary(20) == 10100",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 24,
    "generated_code": "def binary_to_decimal(binary):\n    return int(str(binary), 2)\n\nassert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
    "assertion_results": [
      {
        "assertion": "assert binary_to_decimal(100) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binary_to_decimal(1011) == 11",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binary_to_decimal(1101101) == 109",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 19,
    "generated_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))\n\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
    "assertion_results": [
      {
        "assertion": "assert test_duplicate(([1,2,3,4,5]))==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert test_duplicate(([1,2,3,4, 4]))==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 27,
    "generated_code": "def remove(strings):\n    return [''.join(filter(str.isalpha, s)) for s in strings]\n\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
    "assertion_results": [
      {
        "assertion": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 17,
    "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length\n\nassert square_perimeter(10) == 40\nassert square_perimeter(5) == 20\nassert square_perimeter(4) == 16",
    "assertion_results": [
      {
        "assertion": "assert square_perimeter(10)==40",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert square_perimeter(5)==20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert square_perimeter(4)==16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 18,
    "generated_code": "def remove_dirty_chars(s1, s2):\n    return ''.join(char for char in s1 if char not in s2)\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'",
    "assertion_results": [
      {
        "assertion": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 28,
    "generated_code": "from math import factorial\n\ndef binomial_Coeff(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\nassert binomial_Coeff(5, 2) == 10\nassert binomial_Coeff(4, 3) == 4\nassert binomial_Coeff(3, 2) == 3",
    "assertion_results": [
      {
        "assertion": "assert binomial_Coeff(5,2) == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binomial_Coeff(4,3) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binomial_Coeff(3,2) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 21,
    "generated_code": "def multiples_of_num(m, n):\n    return [n * i for i in range(1, m + 1)]\n\nassert multiples_of_num(4, 3) == [3, 6, 9, 12]\nassert multiples_of_num(2, 5) == [5, 10]\nassert multiples_of_num(9, 2) == [2, 4, 6, 8, 10, 12, 14, 16, 18]",
    "assertion_results": [
      {
        "assertion": "assert multiples_of_num(4,3)== [3,6,9,12]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiples_of_num(2,5)== [5,10]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 14,
    "generated_code": "def find_Volume(base, height, length):\n    return (base * height / 2) * length\n\nassert find_Volume(10, 8, 6) == 240\nassert find_Volume(3, 2, 2) == 6\nassert find_Volume(1, 2, 1) == 1",
    "assertion_results": [
      {
        "assertion": "assert find_Volume(10,8,6) == 240",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Volume(3,2,2) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Volume(1,2,1) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 11,
    "generated_code": "def remove_Occ(s, char):\n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == -1 or first_index == last_index:\n        return s.replace(char, '', 1)\n    \n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nassert remove_Occ(\"abcda\", \"a\") == \"bcd\"\nassert remove_Occ(\"PHP\", \"P\") == \"H\"",
    "assertion_results": [
      {
        "assertion": "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 22,
    "generated_code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\nassert find_first_duplicate([1, 2, 3, 4, 4, 5]) == 4\nassert find_first_duplicate([1, 2, 3, 4]) == -1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2]) == 1",
    "assertion_results": [
      {
        "assertion": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_first_duplicate([1, 2, 3, 4])==-1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 16,
    "generated_code": "import re\n\ndef text_lowercase_underscore(text):\n    if re.fullmatch(r'[a-z]+_[a-z]+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nassert text_lowercase_underscore(\"aab_cbbbc\") == ('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\") == ('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\") == ('Not matched!')",
    "assertion_results": [
      {
        "assertion": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 34,
    "generated_code": "def find_missing(arr, n):\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum\n\nassert find_missing([1, 2, 3, 5], 4) == 4\nassert find_missing([1, 3, 4, 5], 4) == 2\nassert find_missing([1, 2, 3, 5, 6, 7], 5) == 4",
    "assertion_results": [
      {
        "assertion": "assert find_missing([1,2,3,5],4) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_missing([1,3,4,5],4) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_missing([1,2,3,5,6,7],5) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 36,
    "generated_code": "def find_Nth_Digit(numerator, denominator, n):\n    # Calculate the proper fraction\n    fraction = numerator / denominator\n    \n    # Convert the fraction to a string and remove the \"0.\" part\n    fraction_str = str(fraction).split('.')[1]\n    \n    # Return the nth digit (1-based index)\n    return int(fraction_str[n - 1])\n\nassert find_Nth_Digit(1, 2, 1) == 5\nassert find_Nth_Digit(3, 5, 1) == 6\nassert find_Nth_Digit(5, 6, 5) == 3",
    "assertion_results": [
      {
        "assertion": "assert find_Nth_Digit(1,2,1) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Nth_Digit(3,5,1) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Nth_Digit(5,6,5) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 25,
    "generated_code": "def find_Product(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    product = 1\n    for num, freq in count.items():\n        if freq == 1:\n            product *= num\n    return product\n\nassert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
    "assertion_results": [
      {
        "assertion": "assert find_Product([1,1,2,3],4) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Product([1,2,3,1,1],5) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Product([1,1,4,5,6],5) == 120",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 30,
    "generated_code": "def count_Substring_With_Equal_Ends(s: str) -> int:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
    "assertion_results": [
      {
        "assertion": "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 23,
    "generated_code": "def maximum_Sum(list_of_lists):\n    return max(sum(sublist) for sublist in list_of_lists)\n\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
    "assertion_results": [
      {
        "assertion": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 20,
    "generated_code": "def is_woodall(n):\n    k = 1\n    while True:\n        woodall_number = (2 ** k - 1) * (2 ** (k - 1))\n        if woodall_number == n:\n            return True\n        elif woodall_number > n:\n            return False\n        k += 1\n\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
    "assertion_results": [
      {
        "assertion": "assert is_woodall(383) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_woodall(254) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_woodall(200) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 15,
    "generated_code": "def split_lowerstring(s):\n    result = []\n    current = ''\n    for char in s:\n        if char.islower():\n            if current:\n                result.append(current)\n            current = char\n        else:\n            current += char\n    if current:\n        result.append(current)\n    return result\n\nassert split_lowerstring(\"AbCd\") == ['bC', 'd']\nassert split_lowerstring(\"Python\") == ['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\") == ['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
    "assertion_results": [
      {
        "assertion": "assert split_lowerstring(\"AbCd\")==['bC','d']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 26,
    "generated_code": "def check_k_elements(tuples_list, k):\n    return all(k in tup for tup in tuples_list)\n\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
    "assertion_results": [
      {
        "assertion": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 29,
    "generated_code": "def get_Odd_Occurrence(arr, n):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result\n\nassert get_Odd_Occurrence([1,2,3,1,2,3,1], 7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3], 7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2], 13) == 5",
    "assertion_results": [
      {
        "assertion": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 37,
    "generated_code": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (isinstance(x, str), x))\n\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
    "assertion_results": [
      {
        "assertion": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 12,
    "generated_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
    "assertion_results": [
      {
        "assertion": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 43,
    "generated_code": "import re\n\ndef text_match(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
    "assertion_results": [
      {
        "assertion": "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 46,
    "generated_code": "def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))\n\nassert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
    "assertion_results": [
      {
        "assertion": "assert test_distinct([1,5,7,9]) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert test_distinct([2,4,5,5,7,9]) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert test_distinct([1,2,3]) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 44,
    "generated_code": "def text_match_string(text):\n    if text.lstrip().startswith(\"python\"):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nassert text_match_string(\" python\") == ('Not matched!')\nassert text_match_string(\"python\") == ('Found a match!')\nassert text_match_string(\"  lang\") == ('Not matched!')",
    "assertion_results": [
      {
        "assertion": "assert text_match_string(\" python\")==('Not matched!')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_string(\"python\")==('Found a match!')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_string(\"  lang\")==('Not matched!')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 51,
    "generated_code": "def check_equilateral(a, b, c):\n    return a == b == c\n\nassert check_equilateral(6, 8, 12) == False \nassert check_equilateral(6, 6, 12) == False\nassert check_equilateral(6, 6, 6) == True",
    "assertion_results": [
      {
        "assertion": "assert check_equilateral(6,8,12)==False ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_equilateral(6,6,12)==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_equilateral(6,6,6)==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 48,
    "generated_code": "def odd_bit_set_number(n):\n    return n | 0b01010101010101010101010101010101\n\nassert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
    "assertion_results": [
      {
        "assertion": "assert odd_bit_set_number(10) == 15",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert odd_bit_set_number(20) == 21",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert odd_bit_set_number(30) == 31",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 56,
    "generated_code": "def check(n):\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1\n\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True",
    "assertion_results": [
      {
        "assertion": "assert check(70) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check(23) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check(73) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 45,
    "generated_code": "import math\nfrom functools import reduce\n\ndef get_gcd(arr):\n    return reduce(math.gcd, arr)\n\nassert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2",
    "assertion_results": [
      {
        "assertion": "assert get_gcd([2, 4, 6, 8, 16]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_gcd([1, 2, 3]) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_gcd([2, 4, 6, 8]) == 2 ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 42,
    "generated_code": "def find_Sum(arr, n):\n    from collections import Counter\n    count = Counter(arr)\n    return sum(key for key, value in count.items() if value > 1)\n\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
    "assertion_results": [
      {
        "assertion": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Sum([1,2,3,1,1],5) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Sum([1,1,2],3) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 38,
    "generated_code": "def div_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    if even is not None and odd is not None:\n        return even / odd\n    return None\n\nassert div_even_odd([1,3,5,7,4,1,6,8]) == 4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10]) == 2\nassert div_even_odd([1,5,7,9,10]) == 10",
    "assertion_results": [
      {
        "assertion": "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert div_even_odd([1,5,7,9,10])==10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 41,
    "generated_code": "def filter_evennumbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\nassert filter_evennumbers([10, 20, 45, 67, 84, 93]) == [10, 20, 84]\nassert filter_evennumbers([5, 7, 9, 8, 6, 4, 3]) == [8, 6, 4]",
    "assertion_results": [
      {
        "assertion": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 59,
    "generated_code": "def is_octagonal(n):\n    return n * (3 * n - 2)\n\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
    "assertion_results": [
      {
        "assertion": "assert is_octagonal(5) == 65",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_octagonal(10) == 280",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_octagonal(15) == 645",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 58,
    "generated_code": "def opposite_Signs(a, b):\n    return (a < 0) != (b < 0)\n\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(3, 2) == False\nassert opposite_Signs(-10, -10) == False",
    "assertion_results": [
      {
        "assertion": "assert opposite_Signs(1,-2) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert opposite_Signs(3,2) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert opposite_Signs(-10,-10) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 53,
    "generated_code": "def check_Equality(s):\n    if s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\nassert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
    "assertion_results": [
      {
        "assertion": "assert check_Equality(\"abcda\") == \"Equal\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_Equality(\"ab\") == \"Not Equal\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_Equality(\"mad\") == \"Not Equal\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 57,
    "generated_code": "def find_Max_Num(digits, n):\n    # Sort the digits in descending order and join them to form the largest number\n    return int(''.join(map(str, sorted(digits, reverse=True)[:n])))\n\nassert find_Max_Num([1, 2, 3], 3) == 321\nassert find_Max_Num([4, 5, 6, 1], 4) == 6541\nassert find_Max_Num([1, 2, 3, 9], 4) == 9321",
    "assertion_results": [
      {
        "assertion": "assert find_Max_Num([1,2,3],3) == 321",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Max_Num([4,5,6,1],4) == 6541",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Max_Num([1,2,3,9],4) == 9321",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 13,
    "generated_code": "from collections import Counter\n\ndef count_common(words):\n    word_count = Counter(words)\n    most_common = word_count.most_common(4)\n    return most_common\n\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
    "assertion_results": [
      {
        "assertion": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 49,
    "generated_code": "def specified_element(two_d_list, index):\n    return [row[index] for row in two_d_list]\n\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0) == [1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2) == [3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1) == [2, 5, 1]",
    "assertion_results": [
      {
        "assertion": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 47,
    "generated_code": "import math\n\ndef compute_Last_Digit(a, b):\n    if a == 0:\n        return 0\n    factorial_a = math.factorial(a)\n    factorial_b = math.factorial(b)\n    return (factorial_b // factorial_a) % 10\n\nassert compute_Last_Digit(2, 4) == 2\nassert compute_Last_Digit(6, 8) == 6\nassert compute_Last_Digit(1, 2) == 2",
    "assertion_results": [
      {
        "assertion": "assert compute_Last_Digit(2,4) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert compute_Last_Digit(6,8) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert compute_Last_Digit(1,2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 31,
    "generated_code": "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    count = Counter()\n    for lst in lists:\n        count.update(lst)\n    \n    return [item for item, freq in heapq.nlargest(k, count.items(), key=lambda x: x[1])]\n\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3) == [5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1) == [1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5) == [6, 5, 7, 8, 1]",
    "assertion_results": [
      {
        "assertion": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 55,
    "generated_code": "def tn_gp(a, r, n):\n    return a * (r ** (n - 1))\n\nassert tn_gp(1, 5, 2) == 16\nassert tn_gp(1, 5, 4) == 256\nassert tn_gp(2, 6, 3) == 486",
    "assertion_results": [
      {
        "assertion": "assert tn_gp(1,5,2)==16",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tn_gp(1,5,4)==256",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tn_gp(2,6,3)==486",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 50,
    "generated_code": "def min_length_list(lists):\n    return min((len(lst), lst) for lst in lists)\n\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]) == (1, [1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]]) == (2, [1,2])",
    "assertion_results": [
      {
        "assertion": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 39,
    "generated_code": "import heapq\nfrom collections import Counter\n\ndef rearrange_string(s):\n    if not s:\n        return \"\"\n    \n    char_count = Counter(s)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    prev_char = None\n    prev_count = 0\n    result = []\n    \n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n        \n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n        \n        prev_char = char\n        prev_count = count + 1  # Decrease the count\n    \n    rearranged = ''.join(result)\n    return rearranged if len(rearranged) == len(s) else \"\"\n\n# Test cases\nassert rearrange_string(\"aab\") == 'aba'\nassert rearrange_string(\"aabb\") == 'abab'\nassert rearrange_string(\"abccdd\") == 'cdabcd'",
    "assertion_results": [
      {
        "assertion": "assert rearange_string(\"aab\")==('aba')",
        "status": "ERROR",
        "error": "NameError: name 'rearange_string' is not defined",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rearange_string(\"aabb\")==('abab')",
        "status": "ERROR",
        "error": "NameError: name 'rearange_string' is not defined",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rearange_string(\"abccdd\")==('cdabcd')",
        "status": "ERROR",
        "error": "NameError: name 'rearange_string' is not defined",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 61,
    "generated_code": "def count_Substrings(s, n):\n    count = 0\n    for length in range(1, n + 1):\n        for start in range(n - length + 1):\n            substring = s[start:start + length]\n            if sum(int(digit) for digit in substring) == length:\n                count += 1\n    return count\n\nassert count_Substrings('112112', 6) == 6\nassert count_Substrings('111', 3) == 6\nassert count_Substrings('1101112', 7) == 12",
    "assertion_results": [
      {
        "assertion": "assert count_Substrings('112112',6) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Substrings('111',3) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Substrings('1101112',7) == 12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 62,
    "generated_code": "def smallest_num(lst):\n    return min(lst)\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
    "assertion_results": [
      {
        "assertion": "assert smallest_num([10, 20, 1, 45, 99]) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert smallest_num([1, 2, 3]) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert smallest_num([45, 46, 50, 60]) == 45",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 66,
    "generated_code": "def pos_count(numbers):\n    return sum(1 for num in numbers if num > 0)\n\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
    "assertion_results": [
      {
        "assertion": "assert pos_count([1,-2,3,-4]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert pos_count([3,4,5,-1]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert pos_count([1,2,3,4]) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 72,
    "generated_code": "def dif_Square(n):\n    return n % 4 == 0 or n % 4 == 1\n\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
    "assertion_results": [
      {
        "assertion": "assert dif_Square(5) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dif_Square(10) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dif_Square(15) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 65,
    "generated_code": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\nassert recursive_list_sum(([1, 2, [3, 4], [5, 6]])) == 21\nassert recursive_list_sum(([7, 10, [15, 14], [19, 41]])) == 106\nassert recursive_list_sum(([10, 20, [30, 40], [50, 60]])) == 210",
    "assertion_results": [
      {
        "assertion": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 60,
    "generated_code": "def max_len_sub(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_length = 1\n    current_length = 1\n    \n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) <= k:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n            \n    max_length = max(max_length, current_length)\n    return max_length\n\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
    "assertion_results": [
      {
        "assertion": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 68,
    "generated_code": "def is_Monotonic(array):\n    increasing = decreasing = True\n    \n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            decreasing = False\n        elif array[i] < array[i - 1]:\n            increasing = False\n            \n    return increasing or decreasing\n\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
    "assertion_results": [
      {
        "assertion": "assert is_Monotonic([6, 5, 4, 4]) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_Monotonic([1, 2, 2, 3]) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_Monotonic([1, 3, 2]) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 54,
    "generated_code": "def counting_sort(arr):\n    if not arr:\n        return []\n    \n    max_val = max(arr)\n    min_val = min(arr)\n    range_of_elements = max_val - min_val + 1\n    \n    count = [0] * range_of_elements\n    output = [0] * len(arr)\n    \n    for number in arr:\n        count[number - min_val] += 1\n    \n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n    \n    for number in reversed(arr):\n        output[count[number - min_val] - 1] = number\n        count[number - min_val] -= 1\n    \n    return output\n\nassert counting_sort([1, 23, 4, 5, 6, 7, 8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
    "assertion_results": [
      {
        "assertion": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 80,
    "generated_code": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6\n\nassert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
    "assertion_results": [
      {
        "assertion": "assert tetrahedral_number(5) == 35.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tetrahedral_number(6) == 56.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tetrahedral_number(7) == 84.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 69,
    "generated_code": "def is_sublist(main_list, sub_list):\n    sub_len = len(sub_list)\n    for i in range(len(main_list) - sub_len + 1):\n        if main_list[i:i + sub_len] == sub_list:\n            return True\n    return False\n\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
    "assertion_results": [
      {
        "assertion": "assert is_sublist([2,4,3,5,7],[3,7])==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_sublist([2,4,3,5,7],[4,3])==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_sublist([2,4,3,5,7],[1,6])==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 79,
    "generated_code": "def word_len(word):\n    return len(word) % 2 != 0\n\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
    "assertion_results": [
      {
        "assertion": "assert word_len(\"Hadoop\") == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert word_len(\"great\") == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert word_len(\"structure\") == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 40,
    "generated_code": "from collections import Counter\n\ndef freq_element(list_of_lists):\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    return dict(Counter(flat_list))\n\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]) == ({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == ({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]]) == ({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
    "assertion_results": [
      {
        "assertion": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 70,
    "generated_code": "def get_equal(tuples_list, length):\n    if all(len(t) == length for t in tuples_list):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
    "assertion_results": [
      {
        "assertion": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 83,
    "generated_code": "def get_Char(s):\n    total = sum(ord(char) for char in s)\n    return chr(total % 26 + ord('a'))\n\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
    "assertion_results": [
      {
        "assertion": "assert get_Char(\"abc\") == \"f\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Char(\"gfg\") == \"t\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Char(\"ab\") == \"c\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 52,
    "generated_code": "def parallelogram_area(base, height):\n    return base * height\n\nassert parallelogram_area(10, 20) == 200\nassert parallelogram_area(15, 20) == 300\nassert parallelogram_area(8, 9) == 72",
    "assertion_results": [
      {
        "assertion": "assert parallelogram_area(10,20)==200",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert parallelogram_area(15,20)==300",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert parallelogram_area(8,9)==72",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 78,
    "generated_code": "def count_With_Odd_SetBits(n):\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n\n    odd_count = 0\n    for i in range(1, n + 1):\n        if count_set_bits(i) % 2 == 1:\n            odd_count += 1\n    return odd_count\n\nassert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
    "assertion_results": [
      {
        "assertion": "assert count_With_Odd_SetBits(5) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_With_Odd_SetBits(10) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_With_Odd_SetBits(15) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 64,
    "generated_code": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu', 49), ('Hindhi', 54), ('Social', 33)]) == [('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\nassert subject_marks([('Physics', 96), ('Chemistry', 97), ('Biology', 45)]) == [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]",
    "assertion_results": [
      {
        "assertion": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 76,
    "generated_code": "def count_Squares(length, width):\n    total_squares = 0\n    for size in range(1, min(length, width) + 1):\n        total_squares += (length - size + 1) * (width - size + 1)\n    return total_squares\n\nassert count_Squares(4, 3) == 20\nassert count_Squares(2, 2) == 5\nassert count_Squares(1, 1) == 1",
    "assertion_results": [
      {
        "assertion": "assert count_Squares(4,3) == 20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Squares(2,2) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Squares(1,1) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 32,
    "generated_code": "def max_Prime_Factors(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            largest_prime = i\n    return largest_prime\n\nassert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
    "assertion_results": [
      {
        "assertion": "assert max_Prime_Factors(15) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_Prime_Factors(6) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_Prime_Factors(2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 77,
    "generated_code": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    \n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    return even_sum - odd_sum > 0\n\nassert is_Diff(12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
    "assertion_results": [
      {
        "assertion": "assert is_Diff (12345) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_Diff(1212112) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_Diff(1212) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 73,
    "generated_code": "import re\n\ndef multiple_split(s):\n    return re.split(r'[\\n*]', s)\n\n# Test cases\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
    "assertion_results": [
      {
        "assertion": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 85,
    "generated_code": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\nassert surfacearea_sphere(10) == 1256.6370614359173\nassert surfacearea_sphere(15) == 2827.4333882308138\nassert surfacearea_sphere(20) == 5026.548245743669",
    "assertion_results": [
      {
        "assertion": "assert surfacearea_sphere(10)==1256.6370614359173",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert surfacearea_sphere(15)==2827.4333882308138",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert surfacearea_sphere(20)==5026.548245743669",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 86,
    "generated_code": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
    "assertion_results": [
      {
        "assertion": "assert centered_hexagonal_number(10) == 271",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert centered_hexagonal_number(2) == 7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert centered_hexagonal_number(9) == 217",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 82,
    "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n\nassert volume_sphere(10) == 4188.790204786391\nassert volume_sphere(25) == 65449.84694978735\nassert volume_sphere(20) == 33510.32163829113",
    "assertion_results": [
      {
        "assertion": "assert volume_sphere(10)==4188.790204786391",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_sphere(25)==65449.84694978735",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_sphere(20)==33510.32163829113",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 89,
    "generated_code": "def closest_num(n):\n    return n - 1\n\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
    "assertion_results": [
      {
        "assertion": "assert closest_num(11) == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert closest_num(7) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert closest_num(12) == 11",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 71,
    "generated_code": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n\n    return arr\n\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
    "assertion_results": [
      {
        "assertion": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 67,
    "generated_code": "def bell_number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\nassert bell_number(2) == 2\nassert bell_number(10) == 115975\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300",
    "assertion_results": [
      {
        "assertion": "assert bell_number(2)==2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert bell_number(10)==115975",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 74,
    "generated_code": "def is_samepatterns(patterns, values):\n    if len(patterns) != len(values):\n        return False\n    \n    pattern_to_value = {}\n    value_to_pattern = {}\n    \n    for pattern, value in zip(patterns, values):\n        if pattern in pattern_to_value:\n            if pattern_to_value[pattern] != value:\n                return False\n        else:\n            pattern_to_value[pattern] = value\n        \n        if value in value_to_pattern:\n            if value_to_pattern[value] != pattern:\n                return False\n        else:\n            value_to_pattern[value] = pattern\n            \n    return True\n\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False",
    "assertion_results": [
      {
        "assertion": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 63,
    "generated_code": "def max_difference(tuples):\n    max_diff = 0\n    for a, b in tuples:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
    "assertion_results": [
      {
        "assertion": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 93,
    "generated_code": "def power(a, b):\n    return a ** b\n\nassert power(3, 4) == 81\nassert power(2, 3) == 8\nassert power(5, 5) == 3125",
    "assertion_results": [
      {
        "assertion": "assert power(3,4) == 81",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert power(2,3) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert power(5,5) == 3125",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 90,
    "generated_code": "def len_log(words):\n    return max(len(word) for word in words)\n\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
    "assertion_results": [
      {
        "assertion": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 84,
    "generated_code": "def sequence(n):\n    if n < 1:\n        return None\n    if n == 1 or n == 2:\n        return 1\n    if n == 3:\n        return 2\n    \n    seq = [0] * (n + 1)\n    seq[1], seq[2], seq[3] = 1, 1, 2\n    \n    for i in range(4, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\n\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
    "assertion_results": [
      {
        "assertion": "assert sequence(10) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sequence(2) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sequence(3) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 96,
    "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
    "assertion_results": [
      {
        "assertion": "assert divisor(15) == 4 ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert divisor(12) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert divisor(9) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 95,
    "generated_code": "def Find_Min_Length(lists):\n    return min(len(sublist) for sublist in lists)\n\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
    "assertion_results": [
      {
        "assertion": "assert Find_Min_Length([[1],[1,2]]) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 99,
    "generated_code": "def decimal_to_binary(n):\n    return bin(n)[2:]\n\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'",
    "assertion_results": [
      {
        "assertion": "assert decimal_to_binary(8) == '1000'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert decimal_to_binary(18) == '10010'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert decimal_to_binary(7) == '111' ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 75,
    "generated_code": "def find_tuples(tuples_list, k):\n    result = [t for t in tuples_list if all(x % k == 0 for x in t)]\n    return str(result)\n\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
    "assertion_results": [
      {
        "assertion": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 91,
    "generated_code": "def find_substring(string_list, substring):\n    return any(substring in s for s in string_list)\n\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\") == False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\") == True",
    "assertion_results": [
      {
        "assertion": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 105,
    "generated_code": "def count(bool_list):\n    return sum(bool_list)\n\nassert count([True, False, True]) == 2\nassert count([False, False]) == 0\nassert count([True, True, True]) == 3",
    "assertion_results": [
      {
        "assertion": "assert count([True,False,True]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count([False,False]) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count([True,True,True]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 94,
    "generated_code": "def index_minimum(records):\n    return min(records, key=lambda x: x[1])[0]\n\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
    "assertion_results": [
      {
        "assertion": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 102,
    "generated_code": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.capitalize() for x in components)\n\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('python_language') == 'PythonLanguage'\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage'",
    "assertion_results": [
      {
        "assertion": "assert snake_to_camel('python_program')=='PythonProgram'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert snake_to_camel('python_language')==('PythonLanguage')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 98,
    "generated_code": "def multiply_num(numbers):\n    from functools import reduce\n    product = reduce(lambda x, y: x * y, numbers)\n    return product / len(numbers)\n\nassert multiply_num((8, 2, 3, -1, 7)) == -67.2\nassert multiply_num((-10, -20, -30)) == -2000.0\nassert multiply_num((19, 15, 18)) == 1710.0",
    "assertion_results": [
      {
        "assertion": "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiply_num((-10,-20,-30))==-2000.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiply_num((19,15,18))==1710.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 100,
    "generated_code": "def next_smallest_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(1221) == 1331\nassert next_smallest_palindrome(120) == 121",
    "assertion_results": [
      {
        "assertion": "assert next_smallest_palindrome(99)==101",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert next_smallest_palindrome(1221)==1331",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert next_smallest_palindrome(120)==121",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 92,
    "generated_code": "def is_undulating(s):\n    for i in range(1, len(s) - 1):\n        if not ((s[i] > s[i - 1] and s[i] > s[i + 1]) or (s[i] < s[i - 1] and s[i] < s[i + 1])):\n            return False\n    return True\n\nassert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
    "assertion_results": [
      {
        "assertion": "assert is_undulating(\"1212121\") == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_undulating(\"1991\") == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_undulating(\"121\") == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 101,
    "generated_code": "def kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]\n\nassert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
    "assertion_results": [
      {
        "assertion": "assert kth_element([12,3,5,7,19], 5, 2) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert kth_element([17,24,8,23], 4, 3) == 8",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert kth_element([16,21,25,36,4], 5, 4) == 36",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 88,
    "generated_code": "def freq_count(lst):\n    from collections import Counter\n    return dict(Counter(lst))\n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})",
    "assertion_results": [
      {
        "assertion": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 113,
    "generated_code": "def check_integer(s):\n    return s.isdigit()\n\nassert check_integer(\"python\") == False\nassert check_integer(\"1\") == True\nassert check_integer(\"12345\") == True",
    "assertion_results": [
      {
        "assertion": "assert check_integer(\"python\")==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_integer(\"1\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_integer(\"12345\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 107,
    "generated_code": "def count_Hexadecimal(start, end):\n    count = 0\n    for num in range(start, end):\n        if any(c in 'abcdef' for c in hex(num)[2:]):\n            count += 1\n    return count\n\nassert count_Hexadecimal(10, 15) == 6\nassert count_Hexadecimal(2, 4) == 0\nassert count_Hexadecimal(15, 16) == 1",
    "assertion_results": [
      {
        "assertion": "assert count_Hexadecimal(10,15) == 6",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Hexadecimal(2,4) == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Hexadecimal(15,16) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 112,
    "generated_code": "def perimeter(radius, height):\n    return 2 * 3 * radius + 2 * height\n\nassert perimeter(2, 4) == 12\nassert perimeter(1, 2) == 6\nassert perimeter(3, 1) == 8",
    "assertion_results": [
      {
        "assertion": "assert perimeter(2,4) == 12",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert perimeter(1,2) == 6",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert perimeter(3,1) == 8",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 106,
    "generated_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
    "assertion_results": [
      {
        "assertion": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 109,
    "generated_code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count\n\nassert odd_Equivalent(\"011001\", 6) == 3\nassert odd_Equivalent(\"11011\", 5) == 4\nassert odd_Equivalent(\"1010\", 4) == 2",
    "assertion_results": [
      {
        "assertion": "assert odd_Equivalent(\"011001\",6) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert odd_Equivalent(\"11011\",5) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert odd_Equivalent(\"1010\",4) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 115,
    "generated_code": "def empty_dit(dicts):\n    if isinstance(dicts, dict):\n        return not bool(dicts)\n    return all(not bool(d) for d in dicts)\n\nassert empty_dit([{},{},{}]) == True\nassert empty_dit([{1,2},{},{}]) == False\nassert empty_dit({}) == True",
    "assertion_results": [
      {
        "assertion": "assert empty_dit([{},{},{}])==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert empty_dit([{1,2},{},{}])==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert empty_dit({})==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 87,
    "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
    "assertion_results": [
      {
        "assertion": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 118,
    "generated_code": "def string_to_list(s):\n    return s.split()\n\nassert string_to_list(\"python programming\") == ['python', 'programming']\nassert string_to_list(\"lists tuples strings\") == ['lists', 'tuples', 'strings']\nassert string_to_list(\"write a program\") == ['write', 'a', 'program']",
    "assertion_results": [
      {
        "assertion": "assert string_to_list(\"python programming\")==['python','programming']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert string_to_list(\"write a program\")==['write','a','program']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 116,
    "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
    "assertion_results": [
      {
        "assertion": "assert tuple_to_int((1,2,3))==123",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tuple_to_int((4,5,6))==456",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tuple_to_int((5,6,7))==567",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 103,
    "generated_code": "def eulerian_num(n, m):\n    A = [[0] * (n + 1) for _ in range(n + 1)]\n    A[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i + 1):\n            if j > 0:\n                A[i][j] += (i - j + 1) * A[i - 1][j - 1]\n            A[i][j] += (j + 1) * A[i - 1][j]\n\n    return A[n][m]\n\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
    "assertion_results": [
      {
        "assertion": "assert eulerian_num(3, 1) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert eulerian_num(4, 1) == 11",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert eulerian_num(5, 3) == 26",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 104,
    "generated_code": "def sort_sublists(lst):\n    return [sorted(sublist, key=lambda x: x.strip()) for sublist in lst]\n\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]",
    "assertion_results": [
      {
        "assertion": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 81,
    "generated_code": "def zip_tuples(tuple1, tuple2):\n    from itertools import product\n    return list(product(tuple1, tuple2))\n\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6)) == [(7, 1), (7, 5), (7, 6), (8, 1), (8, 5), (8, 6), (4, 1), (4, 5), (4, 6), (5, 1), (5, 5), (5, 6), (9, 1), (9, 5), (9, 6), (10, 1), (10, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7)) == [(8, 2), (8, 6), (8, 7), (9, 2), (9, 6), (9, 7), (5, 2), (5, 6), (5, 7), (6, 2), (6, 6), (6, 7), (10, 2), (10, 6), (10, 7), (11, 2), (11, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8)) == [(9, 3), (9, 7), (9, 8), (10, 3), (10, 7), (10, 8), (6, 3), (6, 7), (6, 8), (7, 3), (7, 7), (7, 8), (11, 3), (11, 7), (11, 8), (12, 3), (12, 7), (12, 8)]",
    "assertion_results": [
      {
        "assertion": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 124,
    "generated_code": "import cmath\n\ndef angle_complex(z_real, z_imag):\n    z = complex(z_real, z_imag)\n    return cmath.phase(z)\n\nassert angle_complex(0, 1j) == 1.5707963267948966 \nassert angle_complex(2, 1j) == 0.4636476090008061\nassert angle_complex(0, 2j) == 1.5707963267948966",
    "assertion_results": [
      {
        "assertion": "assert angle_complex(0,1j)==1.5707963267948966 ",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert angle_complex(2,1j)==0.4636476090008061",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert angle_complex(0,2j)==1.5707963267948966",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 120,
    "generated_code": "def max_product_tuple(tuples_list):\n    return max(a * b for a, b in tuples_list)\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\nassert max_product_tuple([(10, 20), (15, 2), (5, 10)]) == 200\nassert max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484",
    "assertion_results": [
      {
        "assertion": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 122,
    "generated_code": "def smartNumber(n):\n    smart_numbers = []\n    i = 1\n    while len(smart_numbers) < n:\n        if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\n            smart_numbers.append(i)\n        i += 1\n    return smart_numbers[n - 1]\n\nassert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
    "assertion_results": [
      {
        "assertion": "assert smartNumber(1) == 30",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert smartNumber(50) == 273",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert smartNumber(1000) == 2664",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 128,
    "generated_code": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]\n\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']\nassert long_words(2, \"writing a program\") == ['writing', 'program']\nassert long_words(5, \"sorting list\") == ['sorting']",
    "assertion_results": [
      {
        "assertion": "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert long_words(2,\"writing a program\")==['writing','program']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert long_words(5,\"sorting list\")==['sorting']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 110,
    "generated_code": "def extract_missing(ranges, start, end):\n    missing_ranges = []\n    current_start = start\n\n    for r in sorted(ranges):\n        if r[0] > current_start:\n            missing_ranges.append((current_start, r[0]))\n        current_start = max(current_start, r[1])\n\n    if current_start < end:\n        missing_ranges.append((current_start, end))\n\n    return missing_ranges\n\n# Test cases\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
    "assertion_results": [
      {
        "assertion": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 135,
    "generated_code": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
    "assertion_results": [
      {
        "assertion": "assert hexagonal_num(10) == 190",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert hexagonal_num(5) == 45",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert hexagonal_num(7) == 91",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 111,
    "generated_code": "def common_in_nested_lists(nested_lists):\n    from functools import reduce\n    \n    return list(reduce(set.intersection, map(set, nested_lists)))\n\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]) == [18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]) == [5, 23]\nassert common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]) == [4]",
    "assertion_results": [
      {
        "assertion": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 125,
    "generated_code": "def find_length(binary_string, n):\n    max_diff = 0\n    current_diff = 0\n    \n    for char in binary_string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        \n        max_diff = max(max_diff, current_diff)\n        \n        if current_diff < 0:\n            current_diff = 0\n            \n    return max_diff\n\nassert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2",
    "assertion_results": [
      {
        "assertion": "assert find_length(\"11000010001\", 11) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_length(\"10111\", 5) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_length(\"11011101100101\", 14) == 2 ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 127,
    "generated_code": "def multiply_int(a, b):\n    result = 0\n    for _ in range(abs(b)):\n        result += abs(a)\n    return result if (a >= 0) == (b >= 0) else -result\n\nassert multiply_int(10, 20) == 200\nassert multiply_int(5, 10) == 50\nassert multiply_int(4, 8) == 32",
    "assertion_results": [
      {
        "assertion": "assert multiply_int(10,20)==200",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiply_int(5,10)==50",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiply_int(4,8)==32",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 119,
    "generated_code": "def search(nums, n):\n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if nums[mid] == nums[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return nums[left]\n\nassert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
    "assertion_results": [
      {
        "assertion": "assert search([1,1,2,2,3],5) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert search([1,2,2,3,3,4,4],7) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 126,
    "generated_code": "def sum_of_common_divisors(a, b):\n    def divisors(n):\n        return {i for i in range(1, n + 1) if n % i == 0}\n    \n    common_divisors = divisors(a) & divisors(b)\n    return sum(common_divisors)\n\nassert sum_of_common_divisors(10, 15) == 6\nassert sum_of_common_divisors(100, 150) == 93\nassert sum_of_common_divisors(4, 6) == 3",
    "assertion_results": [
      {
        "assertion": "assert sum(10,15) == 6",
        "status": "ERROR",
        "error": "TypeError: 'int' object is not iterable",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum(100,150) == 93",
        "status": "ERROR",
        "error": "TypeError: 'int' object is not iterable",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum(4,6) == 3",
        "status": "ERROR",
        "error": "TypeError: 'int' object is not iterable",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 121,
    "generated_code": "def check_triplet(arr, a, b, c):\n    target_sum = a + b + c\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target_sum:\n                    return True\n    return False\n\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
    "assertion_results": [
      {
        "assertion": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 123,
    "generated_code": "def sum_of_divisors(n):\n    total = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_numbers = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_numbers:\n            partner = sum_of_divisors(num)\n            if partner != num and sum_of_divisors(partner) == num:\n                amicable_numbers.add(num)\n                amicable_numbers.add(partner)\n    return sum(amicable_numbers)\n\nassert amicable_numbers_sum(999) == 504\nassert amicable_numbers_sum(9999) == 31626\nassert amicable_numbers_sum(99) == 0",
    "assertion_results": [
      {
        "assertion": "assert amicable_numbers_sum(999)==504",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert amicable_numbers_sum(9999)==31626",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert amicable_numbers_sum(99)==0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 132,
    "generated_code": "def tup_string(tup):\n    return ''.join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == (\"exercises\")\nassert tup_string(('p', 'y', 't', 'h', 'o', 'n')) == (\"python\")\nassert tup_string(('p', 'r', 'o', 'g', 'r', 'a', 'm')) == (\"program\")",
    "assertion_results": [
      {
        "assertion": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 97,
    "generated_code": "def frequency_lists(lists):\n    from collections import Counter\n    flat_list = [item for sublist in lists for item in sublist]\n    return dict(Counter(flat_list))\n\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\nassert frequency_lists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]) == {20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}",
    "assertion_results": [
      {
        "assertion": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 139,
    "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert circle_circumference(10) == 62.830000000000005\nassert circle_circumference(5) == 31.415000000000003\nassert circle_circumference(4) == 25.132",
    "assertion_results": [
      {
        "assertion": "assert circle_circumference(10)==62.830000000000005",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert circle_circumference(5)==31.415000000000003",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert circle_circumference(4)==25.132",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 133,
    "generated_code": "def sum_negativenum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\nassert sum_negativenum([10, 15, -14, 13, -18, 12, -20]) == -52\nassert sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894",
    "assertion_results": [
      {
        "assertion": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 134,
    "generated_code": "def check_last(arr, p, k):\n    last_element = arr[-1]\n    for _ in range(p):\n        last_element += k\n    return \"EVEN\" if last_element % 2 == 0 else \"ODD\"\n\nassert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
    "assertion_results": [
      {
        "assertion": "assert check_last([5,7,10],3,1) == \"ODD\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_last([2,3],2,3) == \"EVEN\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_last([1,2,3],3,1) == \"ODD\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 117,
    "generated_code": "def list_to_float(lst):\n    return str([(float(x), float(y)) for x, y in lst])\n\nassert list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float([(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")]) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float([(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")]) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
    "assertion_results": [
      {
        "assertion": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 131,
    "generated_code": "def reverse_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s_list[left] not in vowels:\n            left += 1\n        elif s_list[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n            \n    return ''.join(s_list)\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
    "assertion_results": [
      {
        "assertion": "assert reverse_vowels(\"Python\") == \"Python\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert reverse_vowels(\"USA\") == \"ASU\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert reverse_vowels(\"ab\") == \"ab\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 130,
    "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    if not lst:\n        return None\n    count = Counter(lst)\n    max_item = max(count.items(), key=lambda x: x[1])\n    return max_item\n\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == (2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18]) == (8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10]) == (20, 3)",
    "assertion_results": [
      {
        "assertion": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 146,
    "generated_code": "def ascii_value_string(s):\n    return sum(ord(char) for char in s)\n\nassert ascii_value_string(\"python\") == 112\nassert ascii_value_string(\"Program\") == 80\nassert ascii_value_string(\"Language\") == 76",
    "assertion_results": [
      {
        "assertion": "assert ascii_value_string(\"python\")==112",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert ascii_value_string(\"Program\")==80",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert ascii_value_string(\"Language\")==76",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 144,
    "generated_code": "def sum_Pairs(arr, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum\n\nassert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
    "assertion_results": [
      {
        "assertion": "assert sum_Pairs([1,8,9,15,16],5) == 74",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_Pairs([1,2,3,4],4) == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 114,
    "generated_code": "def assign_freq(tuples_list):\n    from collections import Counter\n    \n    # Count the frequency of each tuple\n    freq_counter = Counter(tuples_list)\n    \n    # Create a list of tuples with their frequencies\n    result = [(tup + (count,)) for tup, count in freq_counter.items()]\n    \n    return str(result)\n\n# Test cases\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)]) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)]) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
    "assertion_results": [
      {
        "assertion": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 137,
    "generated_code": "def zero_count(arr):\n    total_elements = len(arr)\n    if total_elements == 0:\n        return 0.0\n    zero_elements = arr.count(0)\n    return zero_elements / total_elements\n\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.00",
    "assertion_results": [
      {
        "assertion": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 136,
    "generated_code": "def cal_electbill(units):\n    if units <= 100:\n        bill = units * 3.25\n    elif units <= 200:\n        bill = 100 * 3.25 + (units - 100) * 4.00\n    elif units <= 300:\n        bill = 100 * 3.25 + 100 * 4.00 + (units - 200) * 5.50\n    else:\n        bill = 100 * 3.25 + 100 * 4.00 + 100 * 5.50 + (units - 300) * 6.75\n    return bill\n\nassert cal_electbill(75) == 246.25\nassert cal_electbill(265) == 1442.75\nassert cal_electbill(100) == 327.5",
    "assertion_results": [
      {
        "assertion": "assert cal_electbill(75)==246.25",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert cal_electbill(265)==1442.75",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert cal_electbill(100)==327.5",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 138,
    "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    powers = []\n    power = 1\n    while power <= n:\n        powers.append(power)\n        power *= 2\n    for i in range(1 << len(powers)):\n        total = sum(powers[j] for j in range(len(powers)) if (i & (1 << j)))\n        if total == n:\n            return True\n    return False\n\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
    "assertion_results": [
      {
        "assertion": "assert is_Sum_Of_Powers_Of_Two(10) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_Sum_Of_Powers_Of_Two(7) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_Sum_Of_Powers_Of_Two(14) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 143,
    "generated_code": "def find_lists(tup):\n    return sum(1 for item in tup if isinstance(item, list))\n\n# Test cases\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6])) == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
    "assertion_results": [
      {
        "assertion": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 108,
    "generated_code": "def merge_sorted_list(*lists):\n    merged = []\n    heap = []\n    \n    for i, lst in enumerate(lists):\n        if lst:  # Check if the list is not empty\n            heapq.heappush(heap, (lst[0], i, 0))  # (value, list index, element index)\n    \n    while heap:\n        value, list_index, element_index = heapq.heappop(heap)\n        merged.append(value)\n        \n        if element_index + 1 < len(lists[list_index]):\n            next_value = lists[list_index][element_index + 1]\n            heapq.heappush(heap, (next_value, list_index, element_index + 1))\n    \n    return merged\n",
    "assertion_results": [
      {
        "assertion": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
        "status": "ERROR",
        "error": "NameError: name 'heapq' is not defined",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
        "status": "ERROR",
        "error": "NameError: name 'heapq' is not defined",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "status": "ERROR",
        "error": "NameError: name 'heapq' is not defined",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 140,
    "generated_code": "def extract_singly(tuples_list):\n    from collections import Counter\n    flat_list = [item for tup in tuples_list for item in tup]\n    counts = Counter(flat_list)\n    return [item for item in counts if counts[item] == 1]\n\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
    "assertion_results": [
      {
        "assertion": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 129,
    "generated_code": "def magic_square_test(square):\n    n = len(square)\n    magic_sum = n * (n**2 + 1) // 2\n\n    # Check rows and columns\n    for i in range(n):\n        if sum(square[i]) != magic_sum or sum(square[j][i] for j in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(square[i][i] for i in range(n)) != magic_sum or sum(square[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
    "assertion_results": [
      {
        "assertion": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 151,
    "generated_code": "import math\n\ndef is_coprime(a, b):\n    return math.gcd(a, b) == 1\n\nassert is_coprime(17, 13) == True\nassert is_coprime(15, 21) == False\nassert is_coprime(25, 45) == False",
    "assertion_results": [
      {
        "assertion": "assert is_coprime(17,13) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_coprime(15,21) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_coprime(25,45) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 155,
    "generated_code": "def even_bit_toggle_number(n):\n    mask = 0xAAAAAAAA  # Mask for even bits (binary: 10101010...)\n    return n ^ mask\n\nassert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
    "assertion_results": [
      {
        "assertion": "assert even_bit_toggle_number(10) == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_bit_toggle_number(20) == 30",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_bit_toggle_number(30) == 20",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 145,
    "generated_code": "def max_Abs_Diff(arr, n):\n    return max(arr) - min(arr)\n\nassert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
    "assertion_results": [
      {
        "assertion": "assert max_Abs_Diff((2,1,5,3),4) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_Abs_Diff((3,2,1),3) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 150,
    "generated_code": "def does_Contain_B(A, B, C):\n    if C == 0:\n        return False\n    return (B - A) % C == 0 and (B - A) // C >= 0\n\nassert does_Contain_B(1, 7, 3) == True\nassert does_Contain_B(1, -3, 5) == False\nassert does_Contain_B(3, 2, 5) == False",
    "assertion_results": [
      {
        "assertion": "assert does_Contain_B(1,7,3) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert does_Contain_B(1,-3,5) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert does_Contain_B(3,2,5) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 141,
    "generated_code": "def flip(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\ndef pancake_sort(arr):\n    n = len(arr)\n    for i in range(n, 1, -1):\n        max_index = arr.index(max(arr[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                arr = flip(arr, max_index + 1)\n            arr = flip(arr, i)\n    return arr\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
    "assertion_results": [
      {
        "assertion": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 148,
    "generated_code": "def sum_digits_twoparts(n):\n    str_n = str(n)\n    max_sum = 0\n    \n    for i in range(1, len(str_n)):\n        part1 = int(str_n[:i])\n        part2 = int(str_n[i:])\n        digit_sum = sum(int(d) for d in str(part1)) + sum(int(d) for d in str(part2))\n        max_sum = max(max_sum, digit_sum)\n    \n    return max_sum\n\nassert sum_digits_twoparts(35) == 17\nassert sum_digits_twoparts(7) == 7\nassert sum_digits_twoparts(100) == 19",
    "assertion_results": [
      {
        "assertion": "assert sum_digits_twoparts(35)==17",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_digits_twoparts(7)==7",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_digits_twoparts(100)==19",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 153,
    "generated_code": "def parabola_vertex(a, b, c):\n    x_vertex = -b / (2 * a)\n    y_vertex = a * x_vertex**2 + b * x_vertex + c\n    return (x_vertex, y_vertex)\n\nassert parabola_vertex(5, 3, 2) == (-0.3, 1.55)\nassert parabola_vertex(9, 8, 4) == (-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2, 4, 6) == (-1.0, 4.0)",
    "assertion_results": [
      {
        "assertion": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 156,
    "generated_code": "def tuple_int_str(t):\n    return tuple(tuple(int(num) for num in inner) for inner in t)\n\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
    "assertion_results": [
      {
        "assertion": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 162,
    "generated_code": "def sum_series(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25",
    "assertion_results": [
      {
        "assertion": "assert sum_series(6)==12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_series(10)==30",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_series(9)==25",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 158,
    "generated_code": "def min_Ops(arr, n, k):\n    max_elem = max(arr)\n    total_ops = 0\n    \n    for num in arr:\n        diff = max_elem - num\n        if diff % k != 0:\n            return -1\n        total_ops += diff // k\n    \n    return total_ops\n\n# Test cases\nassert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
    "assertion_results": [
      {
        "assertion": "assert min_Ops([2,2,2,2],4,3) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_Ops([4,2,6,8],4,3) == -1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_Ops([21,33,9,45,63],5,6) == 24",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 168,
    "generated_code": "def frequency(arr, num):\n    return arr.count(num)\n\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2",
    "assertion_results": [
      {
        "assertion": "assert frequency([1,2,3],4) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert frequency([1,2,2,3,3,3,4],3) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert frequency([0,1,2,3,1,2],1) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 154,
    "generated_code": "def specified_element(matrix, index):\n    return [row[index] for row in matrix]\n\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0) == [1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2) == [3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3) == [2, 2, 5]",
    "assertion_results": [
      {
        "assertion": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 171,
    "generated_code": "def perimeter_pentagon(side_length):\n    return side_length * 5\n\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75",
    "assertion_results": [
      {
        "assertion": "assert perimeter_pentagon(5)==25",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert perimeter_pentagon(10)==50",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert perimeter_pentagon(15)==75",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 160,
    "generated_code": "def solution(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return ('x = ', x, ', y = ', y)\n    return 'No solution'\n\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
    "assertion_results": [
      {
        "assertion": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert solution(4, 2, 7) == 'No solution'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 165,
    "generated_code": "def count_char_position(s):\n    return sum(1 for i, char in enumerate(s.lower(), start=1) if char == chr(96 + i))\n\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
    "assertion_results": [
      {
        "assertion": "assert count_char_position(\"xbcefg\") == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_char_position(\"ABcED\") == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_char_position(\"AbgdeF\") == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 167,
    "generated_code": "def next_Power_Of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\nassert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
    "assertion_results": [
      {
        "assertion": "assert next_Power_Of_2(0) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert next_Power_Of_2(5) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert next_Power_Of_2(17) == 32",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 164,
    "generated_code": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef areEquivalent(a, b):\n    return sum_of_divisors(a) == sum_of_divisors(b)\n\nassert areEquivalent(36, 57) == False\nassert areEquivalent(2, 4) == False\nassert areEquivalent(23, 47) == True",
    "assertion_results": [
      {
        "assertion": "assert areEquivalent(36,57) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert areEquivalent(2,4) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert areEquivalent(23,47) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 172,
    "generated_code": "def count_occurance(s):\n    return s.count('std')\n\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
    "assertion_results": [
      {
        "assertion": "assert count_occurance(\"letstdlenstdporstd\") == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_occurance(\"truststdsolensporsd\") == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_occurance(\"makestdsostdworthit\") == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 149,
    "generated_code": "def longest_subseq_with_diff_one(arr, n):\n    if n == 0:\n        return 0\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    max_length = max(max_length, current_length)\n    return max_length\n\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
    "assertion_results": [
      {
        "assertion": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 163,
    "generated_code": "import math\n\ndef area_polygon(n, s):\n    return (n * s**2) / (4 * math.tan(math.pi / n))\n\nassert area_polygon(4, 20) == 400.00000000000006\nassert area_polygon(10, 15) == 1731.1969896610804\nassert area_polygon(9, 7) == 302.90938549487214",
    "assertion_results": [
      {
        "assertion": "assert area_polygon(4,20)==400.00000000000006",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert area_polygon(10,15)==1731.1969896610804",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert area_polygon(9,7)==302.90938549487214",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 142,
    "generated_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for item in set(list1):\n        count += min(list1.count(item), list2.count(item), list3.count(item))\n    return count\n\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
    "assertion_results": [
      {
        "assertion": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 147,
    "generated_code": "def max_path_sum(triangle, rows, cols):\n    # Create a copy of the triangle to store the maximum path sums\n    dp = [row[:] for row in triangle]\n    \n    # Start from the second last row and move upwards\n    for i in range(rows - 1, -1, -1):\n        for j in range(cols):\n            # Update the current cell with the maximum path sum\n            if i < rows - 1:\n                dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n    \n    return dp[0][0]\n\n# Test cases\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
    "assertion_results": [
      {
        "assertion": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 176,
    "generated_code": "def perimeter_triangle(a, b, c):\n    return a + b + c\n\nassert perimeter_triangle(10, 20, 30) == 60\nassert perimeter_triangle(3, 4, 5) == 12\nassert perimeter_triangle(25, 35, 45) == 105",
    "assertion_results": [
      {
        "assertion": "assert perimeter_triangle(10,20,30)==60",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert perimeter_triangle(3,4,5)==12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert perimeter_triangle(25,35,45)==105",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 166,
    "generated_code": "def find_even_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count\n\nassert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
    "assertion_results": [
      {
        "assertion": "assert find_even_Pair([5,4,7,2,1],5) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_even_Pair([1,2,3],3) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 169,
    "generated_code": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            next_pell = 2 * pell_numbers[i - 1] + pell_numbers[i - 2]\n            pell_numbers.append(next_pell)\n        return pell_numbers[n]\n\nassert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
    "assertion_results": [
      {
        "assertion": "assert get_pell(4) == 12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_pell(7) == 169",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_pell(8) == 408",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 161,
    "generated_code": "def remove_elements(lst, to_remove):\n    return [item for item in lst if item not in to_remove]\n\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
    "assertion_results": [
      {
        "assertion": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 173,
    "generated_code": "def remove_splchar(s):\n    return ''.join(char for char in s if char.isalnum())\n\nassert remove_splchar('python  @#&^%$*program123') == 'pythonprogram123'\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language') == 'pythonprogramming24language'\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program') == 'python67program'",
    "assertion_results": [
      {
        "assertion": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 178,
    "generated_code": "def string_literals(literals, text):\n    for literal in literals:\n        if literal in text:\n            return 'Matched!'\n    return 'Not Matched!'\n\nassert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
    "assertion_results": [
      {
        "assertion": "assert string_literals(['language'],'python language')==('Matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert string_literals(['program'],'python language')==('Not Matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert string_literals(['python'],'programming language')==('Not Matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 170,
    "generated_code": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end + 1])\n\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7) == 16\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10) == 38",
    "assertion_results": [
      {
        "assertion": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 174,
    "generated_code": "def group_keyvalue(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)]) == {'python': [1, 2, 3, 4, 5]}\nassert group_keyvalue([('yellow', 100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)]) == {'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
    "assertion_results": [
      {
        "assertion": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 152,
    "generated_code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
    "assertion_results": [
      {
        "assertion": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 179,
    "generated_code": "def is_num_keith(n):\n    digits = [int(d) for d in str(n)]\n    length = len(digits)\n    sequence = digits[:]\n    \n    while True:\n        next_term = sum(sequence[-length:])\n        if next_term == n:\n            return True\n        elif next_term > n:\n            return False\n        sequence.append(next_term)\n\nassert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
    "assertion_results": [
      {
        "assertion": "assert is_num_keith(14) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_num_keith(12) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_num_keith(197) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 157,
    "generated_code": "def encode_list(input_data):\n    if not input_data:\n        return []\n    \n    encoded = []\n    current_element = input_data[0]\n    count = 1\n    \n    for element in input_data[1:]:\n        if element == current_element:\n            count += 1\n        else:\n            encoded.append([count, current_element])\n            current_element = element\n            count = 1\n            \n    encoded.append([count, current_element])\n    return encoded\n\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
    "assertion_results": [
      {
        "assertion": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 175,
    "generated_code": "def is_valid_parenthese(s: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\nassert is_valid_parenthese(\"(){}[]\") == True\nassert is_valid_parenthese(\"()[{)}\") == False\nassert is_valid_parenthese(\"()\") == True",
    "assertion_results": [
      {
        "assertion": "assert is_valid_parenthese(\"(){}[]\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_valid_parenthese(\"()[{)}\")==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_valid_parenthese(\"()\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 184,
    "generated_code": "def greater_specificnum(lst, num):\n    return any(x > num for x in lst)\n\nassert greater_specificnum([220, 330, 500], 200) == True\nassert greater_specificnum([12, 17, 21], 20) == False\nassert greater_specificnum([1, 2, 3, 4], 10) == False",
    "assertion_results": [
      {
        "assertion": "assert greater_specificnum([220, 330, 500],200)==True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert greater_specificnum([12, 17, 21],20)==False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert greater_specificnum([1,2,3,4],10)==False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 192,
    "generated_code": "def check_String(s):\n    has_letter = any(c.isalpha() for c in s)\n    has_number = any(c.isdigit() for c in s)\n    return has_letter and has_number\n\nassert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String('string') == False",
    "assertion_results": [
      {
        "assertion": "assert check_String('thishasboth29') == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_String('python') == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_String ('string') == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 191,
    "generated_code": "def check_monthnumber(month_name):\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    return month_name in months_with_30_days\n\nassert check_monthnumber(\"February\") == False\nassert check_monthnumber(\"June\") == True\nassert check_monthnumber(\"April\") == True",
    "assertion_results": [
      {
        "assertion": "assert check_monthnumber(\"February\")==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_monthnumber(\"June\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_monthnumber(\"April\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 188,
    "generated_code": "def prod_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5) + 1):\n        j = (n - i**2)**0.5\n        if j.is_integer():\n            return True\n    return False\n\nassert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
    "assertion_results": [
      {
        "assertion": "assert prod_Square(25) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert prod_Square(30) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert prod_Square(16) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 186,
    "generated_code": "import re\n\ndef check_literals(text, literals):\n    pattern = r'\\b(' + '|'.join(map(re.escape, literals)) + r')\\b'\n    return 'Matched!' if re.search(pattern, text) else 'Not Matched!'\n\nassert check_literals('The quick brown fox jumps over the lazy dog.', ['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.', ['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.', ['lazy']) == 'Matched!'",
    "assertion_results": [
      {
        "assertion": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 177,
    "generated_code": "def lcm(x, y):\n    from math import gcd\n    return abs(x * y) // gcd(x, y)\n\ndef answer(start, end):\n    for i in range(start, end):\n        for j in range(i + 1, end + 1):\n            if start <= lcm(i, j) <= end:\n                return (i, j)\n    return None\n\nassert answer(3, 8) == (3, 6)\nassert answer(2, 6) == (2, 4)\nassert answer(1, 3) == (1, 2)",
    "assertion_results": [
      {
        "assertion": "assert answer(3,8) == (3,6)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert answer(2,6) == (2,4)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert answer(1,3) == (1,2)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 181,
    "generated_code": "def common_prefix(strings, min_length):\n    if not strings:\n        return \"\"\n    \n    prefix = strings[0][:min_length]\n    \n    for string in strings:\n        while not string.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    \n    return prefix\n\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
    "assertion_results": [
      {
        "assertion": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 159,
    "generated_code": "def month_season(month, day):\n    seasons = {\n        'winter': [(12, 21), (3, 19)],\n        'spring': [(3, 20), (6, 20)],\n        'summer': [(6, 21), (9, 22)],\n        'autumn': [(9, 23), (12, 20)]\n    }\n    \n    month_days = {\n        'January': 1, 'February': 2, 'March': 3, 'April': 4,\n        'May': 5, 'June': 6, 'July': 7, 'August': 8,\n        'September': 9, 'October': 10, 'November': 11, 'December': 12\n    }\n    \n    month_num = month_days[month]\n    \n    for season, (start, end) in seasons.items():\n        if (month_num == start[0] and day >= start[1]) or (month_num == end[0] and day <= end[1]):\n            return season\n        if start[0] < month_num < end[0]:\n            return season\n            \n    return None\n\nassert month_season('January', 4) == 'winter'\nassert month_season('October', 28) == 'autumn'\nassert month_season('June', 6) == 'spring'",
    "assertion_results": [
      {
        "assertion": "assert month_season('January',4)==('winter')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert month_season('October',28)==('autumn')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert month_season('June',6)==('spring')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 194,
    "generated_code": "def octal_To_Decimal(octal):\n    decimal = 0\n    power = 0\n    while octal > 0:\n        digit = octal % 10\n        decimal += digit * (8 ** power)\n        octal //= 10\n        power += 1\n    return decimal\n\nassert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
    "assertion_results": [
      {
        "assertion": "assert octal_To_Decimal(25) == 21",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert octal_To_Decimal(30) == 24",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert octal_To_Decimal(40) == 32",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 189,
    "generated_code": "def first_Missing_Positive(nums, n):\n    nums = set(nums)\n    for i in range(1, n + 1):\n        if i not in nums:\n            return i\n    return n + 1\n\nassert first_Missing_Positive([1, 2, 3, -1, 5], 5) == 4\nassert first_Missing_Positive([0, -1, -2, 1, 5, 8], 6) == 2\nassert first_Missing_Positive([0, 1, 2, 5, -8], 5) == 3",
    "assertion_results": [
      {
        "assertion": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 185,
    "generated_code": "def parabola_focus(a, b, c):\n    # Calculate the focus of the parabola given by the equation y = ax^2 + bx + c\n    h = -b / (2 * a)\n    k = c - (b**2 / (4 * a))\n    return (h, k + (1 / (4 * a)))\n\nassert parabola_focus(5, 3, 2) == (-0.3, 1.6)\nassert parabola_focus(9, 8, 4) == (-0.4444444444444444, 2.25)\nassert parabola_focus(2, 4, 6) == (-1.0, 4.125)",
    "assertion_results": [
      {
        "assertion": "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 183,
    "generated_code": "def count_pairs(arr, n, k):\n    num_set = set(arr)\n    count = 0\n    \n    for num in num_set:\n        if (num + k) in num_set:\n            count += 1\n        if (num - k) in num_set:\n            count += 1\n            \n    return count // 2\n\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
    "assertion_results": [
      {
        "assertion": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 198,
    "generated_code": "import math\n\ndef largest_triangle(a, b):\n    return (3 * math.sqrt(3) / 2) * a * b\n\nassert largest_triangle(4, 2) == 10.392304845413264\nassert largest_triangle(5, 7) == 4.639421805988064\nassert largest_triangle(9, 1) == 105.2220865598093",
    "assertion_results": [
      {
        "assertion": "assert largest_triangle(4,2)==10.392304845413264",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert largest_triangle(5,7)==4.639421805988064",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert largest_triangle(9,1)==105.2220865598093",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 190,
    "generated_code": "def count_Intgral_Points(x1, y1, x2, y2):\n    # Calculate the number of integral points inside the square\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if y1 > y2:\n        y1, y2 = y2, y1\n    return (x2 - x1 - 1) * (y2 - y1 - 1)\n\nassert count_Intgral_Points(1, 1, 4, 4) == 4\nassert count_Intgral_Points(1, 2, 1, 2) == 1\nassert count_Intgral_Points(4, 2, 6, 4) == 1",
    "assertion_results": [
      {
        "assertion": "assert count_Intgral_Points(1,1,4,4) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Intgral_Points(1,2,1,2) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Intgral_Points(4,2,6,4) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 199,
    "generated_code": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
    "assertion_results": [
      {
        "assertion": "assert highest_Power_of_2(10) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert highest_Power_of_2(19) == 16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert highest_Power_of_2(32) == 32",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 201,
    "generated_code": "def chkList(lst):\n    return all(x == lst[0] for x in lst)\n\nassert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
    "assertion_results": [
      {
        "assertion": "assert chkList(['one','one','one']) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert chkList(['one','Two','Three']) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert chkList(['bigdata','python','Django']) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 202,
    "generated_code": "def remove_even(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)\n\nassert remove_even(\"python\") == \"pto\"\nassert remove_even(\"program\") == \"porm\"\nassert remove_even(\"language\") == \"lnug\"",
    "assertion_results": [
      {
        "assertion": "assert remove_even(\"python\")==(\"pto\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_even(\"program\")==(\"porm\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_even(\"language\")==(\"lnug\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 182,
    "generated_code": "import re\n\ndef find_character(s):\n    uppercase = re.findall(r'[A-Z]', s)\n    lowercase = re.findall(r'[a-z]', s)\n    numeric = re.findall(r'[0-9]', s)\n    special = re.findall(r'[^A-Za-z0-9]', s)\n    return (uppercase, lowercase, numeric, special)\n\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
    "assertion_results": [
      {
        "assertion": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 203,
    "generated_code": "def hamming_Distance(x, y):\n    return bin(x ^ y).count('1')\n\nassert hamming_Distance(4, 8) == 2\nassert hamming_Distance(2, 4) == 2\nassert hamming_Distance(1, 2) == 2",
    "assertion_results": [
      {
        "assertion": "assert hamming_Distance(4,8) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert hamming_Distance(2,4) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert hamming_Distance(1,2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 204,
    "generated_code": "def count(s, char):\n    return s.count(char)\n\nassert count(\"abcc\", \"c\") == 2\nassert count(\"ababca\", \"a\") == 3\nassert count(\"mnmm0pm\", \"m\") == 4",
    "assertion_results": [
      {
        "assertion": "assert count(\"abcc\",\"c\") == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count(\"ababca\",\"a\") == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count(\"mnmm0pm\",\"m\") == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 195,
    "generated_code": "def first(arr, target, n):\n    left, right = 0, n - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n\nassert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
    "assertion_results": [
      {
        "assertion": "assert first([1,2,3,4,5,6,6],6,6) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first([1,2,3],1,3) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 180,
    "generated_code": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    R = 6371.0  # Earth radius in kilometers\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n\n    dlat = lat2_rad - lat1_rad\n    dlon = lon2_rad - lon1_rad\n\n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    distance = R * c\n    return distance\n\nassert distance_lat_long(23.5, 67.5, 25.5, 69.5) == 12179.372041317429\nassert distance_lat_long(10.5, 20.5, 30.5, 40.5) == 6069.397933300514\nassert distance_lat_long(10, 20, 30, 40) == 6783.751974994595",
    "assertion_results": [
      {
        "assertion": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert distance_lat_long(10,20,30,40)==6783.751974994595",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 193,
    "generated_code": "def remove_tuple(input_tuple):\n    return tuple(sorted(set(input_tuple)))\n\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
    "assertion_results": [
      {
        "assertion": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 200,
    "generated_code": "def position_max(lst):\n    max_value = max(lst)\n    return [index for index, value in enumerate(lst) if value == max_value]\n\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
    "assertion_results": [
      {
        "assertion": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 187,
    "generated_code": "def longest_common_subsequence(X, Y, m, n):\n    # Create a 2D array to store lengths of longest common subsequence.\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the L table in bottom-up fashion\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    return L[m][n]\n\nassert longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4) == 2",
    "assertion_results": [
      {
        "assertion": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 197,
    "generated_code": "def find_exponentio(tuple1, tuple2):\n    return tuple(base ** exp for base, exp in zip(tuple1, tuple2))\n\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
    "assertion_results": [
      {
        "assertion": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 196,
    "generated_code": "def remove_tuples(tuples_list, k):\n    return [t for t in tuples_list if len(t) != k]\n\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)], 3) == [(4, 3), (1,)]",
    "assertion_results": [
      {
        "assertion": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 210,
    "generated_code": "import re\n\ndef is_allowed_specific_char(s):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", s))\n\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
    "assertion_results": [
      {
        "assertion": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 212,
    "generated_code": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n + 1))\n\nassert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
    "assertion_results": [
      {
        "assertion": "assert fourth_Power_Sum(2) == 17",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert fourth_Power_Sum(4) == 354",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert fourth_Power_Sum(6) == 2275",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 208,
    "generated_code": "import re\n\ndef is_decimal(value):\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, value))\n\nassert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
    "assertion_results": [
      {
        "assertion": "assert is_decimal('123.11') == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_decimal('0.21') == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_decimal('123.1214') == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 211,
    "generated_code": "def count_Num(n):\n    count = 0\n    for i in range(1, n + 1):\n        if (i & (1 << 0)) and (i & (1 << n)):\n            count += 1\n    return count\n\nassert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
    "assertion_results": [
      {
        "assertion": "assert count_Num(2) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Num(3) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Num(1) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 214,
    "generated_code": "import math\n\ndef degree_radian(radians):\n    return radians * (180 / math.pi)\n\nassert degree_radian(90) == 5156.620156177409\nassert degree_radian(60) == 3437.746770784939\nassert degree_radian(120) == 6875.493541569878",
    "assertion_results": [
      {
        "assertion": "assert degree_radian(90)==5156.620156177409",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert degree_radian(60)==3437.746770784939",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert degree_radian(120)==6875.493541569878",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 205,
    "generated_code": "def inversion_elements(tup):\n    return tuple(-x - 1 for x in tup)\n\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
    "assertion_results": [
      {
        "assertion": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 217,
    "generated_code": "def first_Repeated_Char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return '\\0'\n\nassert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
    "assertion_results": [
      {
        "assertion": "assert first_Repeated_Char(\"Google\") == \"o\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Repeated_Char(\"data\") == \"a\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Repeated_Char(\"python\") == '\\0'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 227,
    "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(19, 15, 18) == 15\nassert min_of_three(-10, -20, -30) == -30",
    "assertion_results": [
      {
        "assertion": "assert min_of_three(10,20,0)==0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_of_three(19,15,18)==15",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_of_three(-10,-20,-30)==-30",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 209,
    "generated_code": "import heapq\n\ndef heap_replace(heap, item):\n    # Remove the smallest element\n    heapq.heapreplace(heap, item)\n    return heap\n\n# Test cases\nassert heap_replace([25, 44, 68, 21, 39, 23, 89], 21) == [21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89], 110) == [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89], 500) == [23, 25, 68, 44, 39, 500, 89]",
    "assertion_results": [
      {
        "assertion": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 206,
    "generated_code": "def concatenate_elements(tup):\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))\n\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
    "assertion_results": [
      {
        "assertion": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 218,
    "generated_code": "def min_Operations(a, b):\n    operations = 0\n    while a != b:\n        if a < b:\n            a += 1\n        else:\n            b += 1\n        operations += 1\n    return operations\n\nassert min_Operations(2, 4) == 1\nassert min_Operations(4, 10) == 4\nassert min_Operations(1, 4) == 3",
    "assertion_results": [
      {
        "assertion": "assert min_Operations(2,4) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_Operations(4,10) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_Operations(1,4) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 222,
    "generated_code": "def check_type(tup):\n    return all(isinstance(x, type(tup[0])) for x in tup)\n\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((1, 2, \"4\")) == False\nassert check_type((3, 2, 1, 4, 5)) == True",
    "assertion_results": [
      {
        "assertion": "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_type((1, 2, \"4\") ) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_type((3, 2, 1, 4, 5) ) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 213,
    "generated_code": "def concatenate_strings(tuple1, tuple2):\n    return tuple(s1 + s2 for s1, s2 in zip(tuple1, tuple2))\n\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
    "assertion_results": [
      {
        "assertion": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 226,
    "generated_code": "def odd_values_string(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)\n\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
    "assertion_results": [
      {
        "assertion": "assert odd_values_string('abcdef') == 'ace'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert odd_values_string('python') == 'pto'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert odd_values_string('data') == 'dt'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 224,
    "generated_code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
    "assertion_results": [
      {
        "assertion": "assert count_Set_Bits(2) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Set_Bits(4) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Set_Bits(6) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 207,
    "generated_code": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]\n\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
    "assertion_results": [
      {
        "assertion": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_longest_repeating_subseq(\"aabb\") == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_longest_repeating_subseq(\"aab\") == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 221,
    "generated_code": "def first_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return number\n    return None\n\nassert first_even([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
    "assertion_results": [
      {
        "assertion": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_even([2, 3, 4]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_even([5, 6, 7]) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 230,
    "generated_code": "def replace_blank(input_string, replacement_char):\n    return input_string.replace(' ', replacement_char)\n\nassert replace_blank(\"hello people\", '@') == (\"hello@people\")\nassert replace_blank(\"python program language\", '$') == (\"python$program$language\")\nassert replace_blank(\"blank space\", '-') == (\"blank-space\")",
    "assertion_results": [
      {
        "assertion": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 234,
    "generated_code": "def volume_cube(side_length):\n    return side_length ** 3\n\nassert volume_cube(3) == 27\nassert volume_cube(2) == 8\nassert volume_cube(5) == 125",
    "assertion_results": [
      {
        "assertion": "assert volume_cube(3)==27",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_cube(2)==8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_cube(5)==125",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 220,
    "generated_code": "def replace_max_specialchar(text, n):\n    import re\n    \n    # Replace up to n occurrences of spaces, commas, or dots with a colon\n    def replace_match(match):\n        nonlocal count\n        if count < n:\n            count += 1\n            return ':'\n        return match.group(0)\n    \n    count = 0\n    return re.sub(r'[ ,.]', replace_match, text)\n\n# Test cases\nassert replace_max_specialchar('Python language, Programming language.', 2) == ('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f', 3) == ('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim', 1) == ('ram:reshma,ram rahim')",
    "assertion_results": [
      {
        "assertion": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 235,
    "generated_code": "def even_bit_set_number(n):\n    # Create a mask for even bits (0b10101010... for 32 bits)\n    mask = 0xAAAAAAAA\n    # Set even bits of n using bitwise OR\n    return n | mask\n\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
    "assertion_results": [
      {
        "assertion": "assert even_bit_set_number(10) == 10",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_bit_set_number(20) == 30",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_bit_set_number(30) == 30",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 228,
    "generated_code": "def all_Bits_Set_In_The_Given_Range(num, start, end):\n    mask = ((1 << (end - start + 1)) - 1) << start\n    return (num & mask) == 0\n\nassert all_Bits_Set_In_The_Given_Range(4, 1, 2) == True\nassert all_Bits_Set_In_The_Given_Range(17, 2, 4) == True\nassert all_Bits_Set_In_The_Given_Range(39, 4, 6) == False",
    "assertion_results": [
      {
        "assertion": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 238,
    "generated_code": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
    "assertion_results": [
      {
        "assertion": "assert number_of_substrings(\"abc\") == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert number_of_substrings(\"abcd\") == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert number_of_substrings(\"abcde\") == 15",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 233,
    "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nassert lateralsuface_cylinder(10, 5) == 314.15000000000003\nassert lateralsuface_cylinder(4, 5) == 125.66000000000001\nassert lateralsuface_cylinder(4, 10) == 251.32000000000002",
    "assertion_results": [
      {
        "assertion": "assert lateralsuface_cylinder(10,5)==314.15000000000003",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert lateralsuface_cylinder(4,5)==125.66000000000001",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert lateralsuface_cylinder(4,10)==251.32000000000002",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 236,
    "generated_code": "def No_of_Triangle(n, k):\n    if k > n:\n        return -1\n    return (n - k + 1) * (n - k + 2) // 2\n\nassert No_of_Triangle(4, 2) == 7\nassert No_of_Triangle(4, 3) == 3\nassert No_of_Triangle(1, 3) == -1",
    "assertion_results": [
      {
        "assertion": "assert No_of_Triangle(4,2) == 7",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert No_of_Triangle(4,3) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert No_of_Triangle(1,3) == -1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 219,
    "generated_code": "def extract_min_max(tup, k):\n    sorted_tup = sorted(tup)\n    return tuple(sorted_tup[:k] + sorted_tup[-k:])\n\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
    "assertion_results": [
      {
        "assertion": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 223,
    "generated_code": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
    "assertion_results": [
      {
        "assertion": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 242,
    "generated_code": "def count_charac(s):\n    return len(s)\n\nassert count_charac(\"python programming\") == 18\nassert count_charac(\"language\") == 8\nassert count_charac(\"words\") == 5",
    "assertion_results": [
      {
        "assertion": "assert count_charac(\"python programming\")==18",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_charac(\"language\")==8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_charac(\"words\")==5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 225,
    "generated_code": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    \n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n\n# Test cases\nassert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
    "assertion_results": [
      {
        "assertion": "assert find_Min([1,2,3,4,5],0,4) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Min([4,6,8],0,2) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Min([2,3,5,7,9],0,4) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 215,
    "generated_code": "def decode_list(encoded):\n    decoded = []\n    for item in encoded:\n        if isinstance(item, list):\n            count, value = item\n            decoded.extend([value] * count)\n        else:\n            decoded.append(item)\n    return decoded\n\nassert decode_list([[2, 1], 2, 3, [2, 4], 5, 1]) == [1, 1, 2, 3, 4, 4, 5, 1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']) == ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n']) == ['p', 'y', 't', 'h', 'o', 'n']",
    "assertion_results": [
      {
        "assertion": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 231,
    "generated_code": "def max_sum(triangle, n):\n    for row in range(n - 2, -1, -1):\n        for col in range(len(triangle[row])):\n            triangle[row][col] += max(triangle[row + 1][col], triangle[row + 1][col + 1])\n    return triangle[0][0]\n\nassert max_sum([[1], [2, 1], [3, 3, 2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3, 2], [13, 23, 12]], 3) == 28",
    "assertion_results": [
      {
        "assertion": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 216,
    "generated_code": "def check_subset_list(nested_list1, nested_list2):\n    flat_list1 = {item for sublist in nested_list1 for item in sublist}\n    flat_list2 = {item for sublist in nested_list2 for item in sublist}\n    return flat_list2.issubset(flat_list1)\n\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) == False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]) == True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']], [['g']]) == False",
    "assertion_results": [
      {
        "assertion": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
        "status": "ERROR",
        "error": "TypeError: 'int' object is not iterable",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
        "status": "ERROR",
        "error": "TypeError: 'int' object is not iterable",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "status": "ERROR",
        "error": "TypeError: 'int' object is not iterable",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 229,
    "generated_code": "def re_arrange_array(arr, n):\n    negative = [x for x in arr if x < 0]\n    positive = [x for x in arr if x >= 0]\n    return negative + positive\n\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
    "assertion_results": [
      {
        "assertion": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 244,
    "generated_code": "import math\n\ndef next_Perfect_Square(n):\n    next_square_root = math.isqrt(n) + 1\n    return next_square_root * next_square_root\n\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
    "assertion_results": [
      {
        "assertion": "assert next_Perfect_Square(35) == 36",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert next_Perfect_Square(6) == 9",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert next_Perfect_Square(9) == 16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 232,
    "generated_code": "def larg_nnum(data, n):\n    return sorted(data, reverse=True)[:n]\n\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2) == [100, 90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5) == [100, 90, 80, 70, 60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3) == [100, 90, 80]",
    "assertion_results": [
      {
        "assertion": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 240,
    "generated_code": "def replace_list(original, new):\n    return original[:-1] + new\n\nassert replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert replace_list([\"red\", \"blue\", \"green\"], [\"yellow\"]) == [\"red\", \"blue\", \"yellow\"]",
    "assertion_results": [
      {
        "assertion": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 248,
    "generated_code": "def harmonic_sum(n):\n    return sum(1 / i for i in range(1, n))\n\nassert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
    "assertion_results": [
      {
        "assertion": "assert harmonic_sum(7) == 2.5928571428571425",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert harmonic_sum(4) == 2.083333333333333",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert harmonic_sum(19) == 3.547739657143682",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 239,
    "generated_code": "def get_total_number_of_sequences(n, m):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for j in range(1, m + 1):\n        dp[1][j] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, j + 1):\n                if k <= m:\n                    dp[i][j] += dp[i - 1][k]\n    \n    return sum(dp[n][j] for j in range(1, m + 1))\n\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
    "assertion_results": [
      {
        "assertion": "assert get_total_number_of_sequences(10, 4) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_total_number_of_sequences(5, 2) == 6",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_total_number_of_sequences(16, 3) == 84",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 253,
    "generated_code": "def count_integer(lst):\n    return sum(1 for item in lst if isinstance(item, int))\n\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
    "assertion_results": [
      {
        "assertion": "assert count_integer([1,2,'abc',1.2]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_integer([1,2,3]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_integer([1,1.2,4,5.1]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 251,
    "generated_code": "def insert_element(lst, elem):\n    return [elem for item in lst for elem in (elem, item)]\n\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'], 'program') == ['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'], 'laugh') == ['laugh', 'happy', 'laugh', 'sad']",
    "assertion_results": [
      {
        "assertion": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
        "status": "ERROR",
        "error": "UnboundLocalError: local variable 'elem' referenced before assignment",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
        "status": "ERROR",
        "error": "UnboundLocalError: local variable 'elem' referenced before assignment",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "status": "ERROR",
        "error": "UnboundLocalError: local variable 'elem' referenced before assignment",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 252,
    "generated_code": "import cmath\n\ndef convert(z):\n    if isinstance(z, (int, float)):\n        z = complex(z)\n    return cmath.polar(z)\n\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0, 0.0)\nassert convert(5) == (5.0, 0.0)",
    "assertion_results": [
      {
        "assertion": "assert convert(1) == (1.0, 0.0)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert convert(4) == (4.0,0.0)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert convert(5) == (5.0,0.0)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 246,
    "generated_code": "def babylonian_squareroot(n, tolerance=1e-10):\n    if n < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    if n == 0:\n        return 0.0\n    \n    guess = n / 2.0\n    while True:\n        next_guess = (guess + n / guess) / 2.0\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess\n\nassert babylonian_squareroot(10) == 3.162277660168379\nassert babylonian_squareroot(2) == 1.414213562373095\nassert babylonian_squareroot(9) == 3.0",
    "assertion_results": [
      {
        "assertion": "assert babylonian_squareroot(10)==3.162277660168379",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert babylonian_squareroot(2)==1.414213562373095",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert babylonian_squareroot(9)==3.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 257,
    "generated_code": "def swap_numbers(a, b):\n    return (b, a)\n\nassert swap_numbers(10, 20) == (20, 10)\nassert swap_numbers(15, 17) == (17, 15)\nassert swap_numbers(100, 200) == (200, 100)",
    "assertion_results": [
      {
        "assertion": "assert swap_numbers(10,20)==(20,10)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert swap_numbers(15,17)==(17,15)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert swap_numbers(100,200)==(200,100)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 243,
    "generated_code": "def sort_on_occurence(lst):\n    from collections import Counter\n    \n    count = Counter(x[0] for x in lst)\n    sorted_lst = sorted(lst, key=lambda x: count[x[0]], reverse=True)\n    \n    result = []\n    for item in sorted_lst:\n        result.append((*item, count[item[0]]))\n    \n    return result\n\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
    "assertion_results": [
      {
        "assertion": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 254,
    "generated_code": "def words_ae(s):\n    return [word for word in s.split() if word.startswith(('a', 'e'))]\n\nassert words_ae(\"python programe\") == ['ame']\nassert words_ae(\"python programe language\") == ['ame', 'anguage']\nassert words_ae(\"assert statement\") == ['assert', 'atement']",
    "assertion_results": [
      {
        "assertion": "assert words_ae(\"python programe\")==['ame']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert words_ae(\"python programe language\")==['ame','anguage']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert words_ae(\"assert statement\")==['assert', 'atement']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 250,
    "generated_code": "def count_X(tup, x):\n    return tup.count(x)\n\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) == 4",
    "assertion_results": [
      {
        "assertion": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 249,
    "generated_code": "def intersection_array(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
    "assertion_results": [
      {
        "assertion": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 267,
    "generated_code": "def square_Sum(n):\n    return sum((2*i + 1) ** 2 for i in range(n))\n\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
    "assertion_results": [
      {
        "assertion": "assert square_Sum(2) == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert square_Sum(3) == 35",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert square_Sum(4) == 84",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 256,
    "generated_code": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)\n\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
    "assertion_results": [
      {
        "assertion": "assert count_Primes_nums(5) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Primes_nums(10) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Primes_nums(100) == 25",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 247,
    "generated_code": "def lps(s: str) -> int:\n    s = ''.join(s.split()).upper()\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n\nassert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9",
    "assertion_results": [
      {
        "assertion": "assert lps(\"TENS FOR TENS\") == 5 ",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert lps(\"CARDIO FOR CARDS\") == 7",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 266,
    "generated_code": "def lateralsurface_cube(side_length):\n    return 4 * (side_length ** 2)\n\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(9) == 324\nassert lateralsurface_cube(10) == 400",
    "assertion_results": [
      {
        "assertion": "assert lateralsurface_cube(5)==100",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert lateralsurface_cube(9)==324",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert lateralsurface_cube(10)==400",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 269,
    "generated_code": "def ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A') == 65\nassert ascii_value('R') == 82\nassert ascii_value('S') == 83",
    "assertion_results": [
      {
        "assertion": "assert ascii_value('A')==65",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert ascii_value('R')==82",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert ascii_value('S')==83",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 264,
    "generated_code": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\nassert dog_age(12) == 61\nassert dog_age(15) == 73\nassert dog_age(24) == 109",
    "assertion_results": [
      {
        "assertion": "assert dog_age(12)==61",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dog_age(15)==73",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dog_age(24)==109",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 258,
    "generated_code": "def count_odd(lst):\n    return len(list(filter(lambda x: x % 2 != 0, lst)))\n\nassert count_odd([1, 2, 3, 5, 7, 8, 10]) == 4\nassert count_odd([10, 15, 14, 13, -18, 12, -20]) == 2\nassert count_odd([1, 2, 4, 8, 9]) == 2",
    "assertion_results": [
      {
        "assertion": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_odd([10,15,14,13,-18,12,-20])==2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_odd([1, 2, 4, 8, 9])==2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 237,
    "generated_code": "def check_occurences(tuples):\n    from collections import defaultdict\n    \n    count = defaultdict(int)\n    \n    for a, b in tuples:\n        count[tuple(sorted((a, b)))] += 1\n    \n    return dict(count)\n\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
    "assertion_results": [
      {
        "assertion": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 260,
    "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    if n < 1:\n        return None\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and (num - 1) % 6 == 0:\n            count += 1\n    return num\n\nassert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
    "assertion_results": [
      {
        "assertion": "assert newman_prime(3) == 7 ",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert newman_prime(4) == 17",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert newman_prime(5) == 41",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 268,
    "generated_code": "def find_star_num(n):\n    return n * (6 * n - 6) // 2 + 1\n\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
    "assertion_results": [
      {
        "assertion": "assert find_star_num(3) == 37",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_star_num(4) == 73",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_star_num(5) == 121",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 261,
    "generated_code": "def division_elements(t1, t2):\n    return tuple(a // b for a, b in zip(t1, t2))\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
    "assertion_results": [
      {
        "assertion": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 262,
    "generated_code": "def split_two_parts(lst, n):\n    return lst[:n], lst[n:]\n\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
    "assertion_results": [
      {
        "assertion": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 271,
    "generated_code": "def even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))\n\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
    "assertion_results": [
      {
        "assertion": "assert even_Power_Sum(2) == 1056",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_Power_Sum(3) == 8832",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_Power_Sum(1) == 32",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 255,
    "generated_code": "from itertools import combinations_with_replacement\n\ndef combinations_colors(colors, n):\n    return list(combinations_with_replacement(colors, n))\n\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 3) == [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
    "assertion_results": [
      {
        "assertion": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 241,
    "generated_code": "def array_3d(x, y, z):\n    return [[['*' for _ in range(x)] for _ in range(y)] for _ in range(z)]\n\nassert array_3d(6, 4, 3) == [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5, 3, 4) == [[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1, 2, 3) == [[['*'], ['*']], [['*'], ['*']], [['*'], ['*']]]",
    "assertion_results": [
      {
        "assertion": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 274,
    "generated_code": "from math import comb\n\ndef even_binomial_Coeff_Sum(n):\n    return sum(comb(n, k) for k in range(0, n + 1, 2))\n\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
    "assertion_results": [
      {
        "assertion": "assert even_binomial_Coeff_Sum(4) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_binomial_Coeff_Sum(6) == 32",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_binomial_Coeff_Sum(2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 279,
    "generated_code": "def is_num_decagonal(n):\n    return n * (4 * n - 3)\n\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
    "assertion_results": [
      {
        "assertion": "assert is_num_decagonal(3) == 27",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_num_decagonal(7) == 175",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_num_decagonal(10) == 370",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 276,
    "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height\n\nassert volume_cylinder(10, 5) == 1570.7500000000002\nassert volume_cylinder(4, 5) == 251.32000000000002\nassert volume_cylinder(4, 10) == 502.64000000000004",
    "assertion_results": [
      {
        "assertion": "assert volume_cylinder(10,5)==1570.7500000000002",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_cylinder(4,5)==251.32000000000002",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_cylinder(4,10)==502.64000000000004",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 275,
    "generated_code": "def get_Position(arr, n, k):\n    if k > n or k < 1:\n        return -1\n    return arr.index(k) + 1\n\nassert get_Position([2,5,4], 3, 2) == 2\nassert get_Position([4,3], 2, 2) == 2\nassert get_Position([1,2,3,4], 4, 1) == 4",
    "assertion_results": [
      {
        "assertion": "assert get_Position([2,5,4],3,2) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Position([4,3],2,2) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Position([1,2,3,4],4,1) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 259,
    "generated_code": "def maximize_elements(t1, t2):\n    return tuple((max(a, b) for a, b in zip(pair1, pair2)) for pair1, pair2 in zip(t1, t2))\n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
    "assertion_results": [
      {
        "assertion": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 263,
    "generated_code": "def merge_dict(dict1, dict2):\n    return {**dict2, **dict1}\n\nassert merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200}) == {'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900}) == {'a': 900, 'b': 900, 'd': 900, 'a': 900, 'b': 900, 'd': 900}\nassert merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40}) == {'x': 30, 'y': 40, 'a': 10, 'b': 20}",
    "assertion_results": [
      {
        "assertion": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 270,
    "generated_code": "def sum_even_and_even_index(arr, n):\n    return sum(arr[i] for i in range(0, n, 2) if arr[i] % 2 == 0)\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1], 4) == 12",
    "assertion_results": [
      {
        "assertion": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 281,
    "generated_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
    "assertion_results": [
      {
        "assertion": "assert all_unique([1,2,3]) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert all_unique([1,2,1,2]) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert all_unique([1,2,3,4,5]) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 273,
    "generated_code": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
    "assertion_results": [
      {
        "assertion": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 278,
    "generated_code": "def count_first_elements(tup):\n    return tup.index(tup[-1])\n\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((2, 9, (5, 7), 11)) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8)) == 4",
    "assertion_results": [
      {
        "assertion": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 283,
    "generated_code": "def validate(n):\n    from collections import Counter\n    \n    digit_count = Counter(str(n))\n    \n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True\n\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
    "assertion_results": [
      {
        "assertion": "assert validate(1234) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert validate(51241) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert validate(321) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 272,
    "generated_code": "def rear_extract(records):\n    return [record[-1] for record in records]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
    "assertion_results": [
      {
        "assertion": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 284,
    "generated_code": "def check_element(lst, string):\n    return all(item == string for item in lst)\n\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([1, 2, 3, 4], 7) == False\nassert check_element([\"green\", \"green\", \"green\", \"green\"], 'green') == True",
    "assertion_results": [
      {
        "assertion": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_element([1,2,3,4],7)==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 282,
    "generated_code": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\nassert sub_list([1, 2], [3, 4]) == [-2, -2]\nassert sub_list([90, 120], [50, 70]) == [40, 50]",
    "assertion_results": [
      {
        "assertion": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sub_list([1,2],[3,4])==[-2,-2]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sub_list([90,120],[50,70])==[40,50]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 287,
    "generated_code": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))\n\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
    "assertion_results": [
      {
        "assertion": "assert square_Sum(2) == 20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert square_Sum(3) == 56",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert square_Sum(4) == 120",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 285,
    "generated_code": "import re\n\ndef text_match_two_three(string):\n    if re.fullmatch(r'a(b{2,3})', string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nassert text_match_two_three(\"ac\") == ('Not matched!')\nassert text_match_two_three(\"dc\") == ('Not matched!')\nassert text_match_two_three(\"abbbba\") == ('Found a match!')",
    "assertion_results": [
      {
        "assertion": "assert text_match_two_three(\"ac\")==('Not matched!')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_two_three(\"dc\")==('Not matched!')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_two_three(\"abbbba\")==('Found a match!')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 245,
    "generated_code": "def max_sum(arr, n):\n    if n == 0:\n        return 0\n\n    # Create an array to store the maximum sum of increasing subsequence\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Create an array to store the maximum sum of decreasing subsequence\n    dec = [0] * n\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Calculate the maximum sum of bi-tonic subsequence\n    max_bi_tonic_sum = 0\n    for i in range(n):\n        max_bi_tonic_sum = max(max_bi_tonic_sum, inc[i] + dec[i] - arr[i])\n\n    return max_bi_tonic_sum\n\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
    "assertion_results": [
      {
        "assertion": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 292,
    "generated_code": "def find(a, b):\n    return a // b\n\nassert find(10, 3) == 3\nassert find(4, 2) == 2\nassert find(20, 5) == 4",
    "assertion_results": [
      {
        "assertion": "assert find(10,3) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find(4,2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find(20,5) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 265,
    "generated_code": "def list_split(lst, n):\n    return [[lst[i] for i in range(j, len(lst), n)] for j in range(n)]\n\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\nassert list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]",
    "assertion_results": [
      {
        "assertion": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 280,
    "generated_code": "def sequential_search(arr, target):\n    for index, value in enumerate(arr):\n        if value == target:\n            return (True, index)\n    return (False, -1)\n\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
    "assertion_results": [
      {
        "assertion": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 289,
    "generated_code": "def odd_Days(year):\n    # Calculate the number of odd days in a given year\n    leap_years = year // 4 - year // 100 + year // 400\n    total_days = year * 365 + leap_years\n    return total_days % 7\n\nassert odd_Days(100) == 5\nassert odd_Days(50) == 6\nassert odd_Days(75) == 2",
    "assertion_results": [
      {
        "assertion": "assert odd_Days(100) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert odd_Days(50) ==6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert odd_Days(75) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 277,
    "generated_code": "def dict_filter(input_dict, threshold):\n    return {k: v for k, v in input_dict.items() if v >= threshold}\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190}",
    "assertion_results": [
      {
        "assertion": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 295,
    "generated_code": "def sum_div(n):\n    return sum(i for i in range(1, n) if n % i == 0)\n\nassert sum_div(8) == 7\nassert sum_div(12) == 16\nassert sum_div(7) == 1",
    "assertion_results": [
      {
        "assertion": "assert sum_div(8)==7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_div(12)==16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_div(7)==1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 294,
    "generated_code": "def max_val(lst):\n    return max(x for x in lst if isinstance(x, (int, float)))\n\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val(['Python', 15, 20, 25]) == 25\nassert max_val(['Python', 30, 20, 40, 50, 'version']) == 50",
    "assertion_results": [
      {
        "assertion": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_val(['Python', 15, 20, 25])==25",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 293,
    "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n\nassert otherside_rightangle(7, 8) == 10.63014581273465\nassert otherside_rightangle(3, 4) == 5\nassert otherside_rightangle(7, 15) == 16.55294535724685",
    "assertion_results": [
      {
        "assertion": "assert otherside_rightangle(7,8)==10.63014581273465",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert otherside_rightangle(3,4)==5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert otherside_rightangle(7,15)==16.55294535724685",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 302,
    "generated_code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    most_significant_bit = 1\n    while most_significant_bit <= n:\n        most_significant_bit <<= 1\n    return most_significant_bit >> 1\n\nassert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
    "assertion_results": [
      {
        "assertion": "assert set_Bit_Number(6) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert set_Bit_Number(10) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert set_Bit_Number(18) == 16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 286,
    "generated_code": "def max_sub_array_sum_repeated(arr, n, k):\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    max_kadane = kadane(arr)\n    total_sum = sum(arr)\n\n    if k == 1:\n        return max_kadane\n\n    max_wrap = total_sum + kadane(arr * 2) - kadane(arr)\n\n    return max(max_kadane, max_wrap)\n\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
    "assertion_results": [
      {
        "assertion": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 288,
    "generated_code": "def modular_inverse(arr, n, p):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    count = 0\n    for num in arr:\n        if gcd(num, p) == 1 and pow(num, n, p) == num:\n            count += 1\n    return count\n\nassert modular_inverse([1, 6, 4, 5], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
    "assertion_results": [
      {
        "assertion": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 291,
    "generated_code": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # dp[i] will store the number of ways to paint the fence with i posts\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n    return dp[n]\n\n# Test cases\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
    "assertion_results": [
      {
        "assertion": "assert count_no_of_ways(2, 4) == 16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_no_of_ways(3, 2) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_no_of_ways(4, 4) == 228",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 309,
    "generated_code": "def maximum(a, b):\n    return a if a > b else b\n\nassert maximum(5, 10) == 10\nassert maximum(-1, -2) == -1\nassert maximum(9, 7) == 9",
    "assertion_results": [
      {
        "assertion": "assert maximum(5,10) == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert maximum(-1,-2) == -1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert maximum(9,7) == 9",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 290,
    "generated_code": "def max_length(lists):\n    max_len = 0\n    max_list = []\n    \n    for lst in lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n            \n    return (max_len, max_list)\n\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])\nassert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])",
    "assertion_results": [
      {
        "assertion": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 300,
    "generated_code": "def count_binary_seq(n):\n    from math import comb\n    \n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) * comb(n, k)\n    \n    return float(total_count)\n\nassert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
    "assertion_results": [
      {
        "assertion": "assert count_binary_seq(1) == 2.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_binary_seq(2) == 6.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_binary_seq(3) == 20.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 313,
    "generated_code": "def pos_nos(lst):\n    return ','.join(str(num) for num in lst if num > 0)\n\nassert pos_nos([-1,-2,1,2]) == '1,2'\nassert pos_nos([3,4,-5]) == '3,4'\nassert pos_nos([-2,-3,1]) == '1'",
    "assertion_results": [
      {
        "assertion": "assert pos_nos([-1,-2,1,2]) == 1,2",
        "status": "FAILED",
        "error": "AssertionError: 2",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert pos_nos([3,4,-5]) == 3,4",
        "status": "FAILED",
        "error": "AssertionError: 4",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert pos_nos([-2,-3,1]) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 298,
    "generated_code": "def intersection_nested_lists(main_list, nested_list):\n    return [[item for item in sublist if item in main_list] for sublist in nested_list]\n\nassert intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) == [[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]]) == [[], []]\nassert intersection_nested_lists(['john', 'amal', 'joel', 'george'], [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']]) == [['john'], ['john'], ['john'], []]",
    "assertion_results": [
      {
        "assertion": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 311,
    "generated_code": "def set_left_most_unset_bit(n):\n    # Find the position of the leftmost unset bit\n    position = 0\n    while (1 << position) <= n:\n        position += 1\n    # Set the leftmost unset bit\n    return n | (1 << position)\n\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
    "assertion_results": [
      {
        "assertion": "assert set_left_most_unset_bit(10) == 14",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert set_left_most_unset_bit(12) == 14",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert set_left_most_unset_bit(15) == 15",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 301,
    "generated_code": "def dict_depth(d):\n    if isinstance(d, dict) and d:\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 1\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a':1, 'b': {'c':'python'}}) == 2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3",
    "assertion_results": [
      {
        "assertion": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 310,
    "generated_code": "def string_to_tuple(s):\n    return tuple(s)\n\n# Test cases\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')\nassert string_to_tuple(\"item1\") == ('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\") == ('1', '5', '.', '1', '0')",
    "assertion_results": [
      {
        "assertion": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 303,
    "generated_code": "def solve(arr, n):\n    def count_inversions(arr):\n        inv_count = 0\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    inv_count += 1\n        return inv_count\n\n    count_0 = arr.count(0)\n    count_1 = arr.count(1)\n    \n    inv_count_0 = count_inversions([x for x in arr if x == 0])\n    inv_count_1 = count_inversions([x for x in arr if x == 1])\n    \n    return inv_count_0 == inv_count_1\n\nassert solve([1, 0, 2], 3) == True\nassert solve([1, 2, 0], 3) == False\nassert solve([1, 2, 1], 3) == True",
    "assertion_results": [
      {
        "assertion": "assert solve([1,0,2],3) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert solve([1,2,0],3) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert solve([1,2,1],3) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 312,
    "generated_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height\n\nassert volume_cone(5, 12) == 314.15926535897927\nassert volume_cone(10, 15) == 1570.7963267948965\nassert volume_cone(19, 17) == 6426.651371693521",
    "assertion_results": [
      {
        "assertion": "assert volume_cone(5,12)==314.15926535897927",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_cone(10,15)==1570.7963267948965",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_cone(19,17)==6426.651371693521",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 307,
    "generated_code": "def colon_tuplex(tup, index, value):\n    tup_list = list(tup)\n    tup_list[index] = [value]\n    return tuple(tup_list)\n\nassert colon_tuplex((\"HELLO\", 5, [], True), 2, 50) == (\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True), 2, 100) == (\"HELLO\", 5, [100], True)\nassert colon_tuplex((\"HELLO\", 5, [], True), 2, 500) == (\"HELLO\", 5, [500], True)",
    "assertion_results": [
      {
        "assertion": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 315,
    "generated_code": "def find_Max_Len_Even(sentence):\n    words = sentence.split()\n    even_length_words = [word for word in words if len(word) % 2 == 0]\n    if even_length_words:\n        return max(even_length_words, key=len)\n    return \"-1\"\n\nassert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
    "assertion_results": [
      {
        "assertion": "assert find_Max_Len_Even(\"python language\") == \"language\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Max_Len_Even(\"eve\") == \"-1\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 304,
    "generated_code": "def find_Element(arr, rotations, index, num_rotations):\n    n = len(arr)\n    for rotation in rotations:\n        start, end = rotation\n        subarray = arr[start:end + 1]\n        subarray = subarray[-num_rotations:] + subarray[:-num_rotations]\n        arr[start:end + 1] = subarray\n    return arr[index]\n\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
    "assertion_results": [
      {
        "assertion": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 319,
    "generated_code": "import re\n\ndef find_long_word(s):\n    return re.findall(r'\\b\\w{5}\\b', s)\n\n# Test cases\nassert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
    "assertion_results": [
      {
        "assertion": "assert find_long_word('Please move back to strem') == ['strem']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_long_word('Streaming Media Player') == ['Media']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 305,
    "generated_code": "def start_withp(words):\n    for phrase in words:\n        word_list = phrase.split()\n        p_words = [word for word in word_list if word.startswith('P') or word.startswith('p')]\n        if len(p_words) >= 2:\n            return (p_words[0], p_words[1])\n    return None\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\"]) == ('Python', 'PHP')\nassert start_withp([\"Python Programming\", \"Java Programming\"]) == ('Python', 'Programming')\nassert start_withp([\"Pqrst Pqr\", \"qrstuv\"]) == ('Pqrst', 'Pqr')",
    "assertion_results": [
      {
        "assertion": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 318,
    "generated_code": "def max_volume(s):\n    if s < 3:\n        return 0\n    a = s // 4\n    b = a\n    c = s - 2 * a\n    return a * b * c\n\nassert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
    "assertion_results": [
      {
        "assertion": "assert max_volume(8) == 18",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_volume(4) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_volume(1) == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 299,
    "generated_code": "def max_aggregate(tuples_list):\n    aggregate = {}\n    for name, score in tuples_list:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    return max(aggregate.items(), key=lambda x: x[1])\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
    "assertion_results": [
      {
        "assertion": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 308,
    "generated_code": "def large_product(list1, list2, n):\n    products = sorted([a * b for a in list1 for b in list2], reverse=True)\n    return products[:n]\n\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
    "assertion_results": [
      {
        "assertion": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 320,
    "generated_code": "def sum_difference(n):\n    sum_n = n * (n + 1) // 2\n    squared_sum = sum_n ** 2\n    sum_of_squares = sum(i ** 2 for i in range(1, n + 1))\n    return squared_sum - sum_of_squares\n\nassert sum_difference(12) == 5434\nassert sum_difference(20) == 41230\nassert sum_difference(54) == 2151270",
    "assertion_results": [
      {
        "assertion": "assert sum_difference(12)==5434",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_difference(20)==41230",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_difference(54)==2151270",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 329,
    "generated_code": "def neg_count(numbers):\n    return sum(1 for num in numbers if num < 0)\n\nassert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
    "assertion_results": [
      {
        "assertion": "assert neg_count([-1,-2,3,-4,-5]) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert neg_count([1,2,3]) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert neg_count([1,2,-3,-10,20]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 297,
    "generated_code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
    "assertion_results": [
      {
        "assertion": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 321,
    "generated_code": "def find_demlo(s):\n    n = len(s)\n    result = ''.join(str(i) for i in range(1, n + 1))\n    result += ''.join(str(i) for i in range(n - 1, 0, -1))\n    return result\n\nassert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
    "assertion_results": [
      {
        "assertion": "assert find_demlo(\"111111\") == '12345654321'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_demlo(\"1111\") == '1234321'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 322,
    "generated_code": "def position_min(lst):\n    min_value = min(lst)\n    return [index for index, value in enumerate(lst) if value == min_value]\n\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
    "assertion_results": [
      {
        "assertion": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 306,
    "generated_code": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n or i >= k:\n        return 0\n\n    max_sum = 0\n    prefix_sum = [0] * n\n\n    for j in range(i + 1):\n        prefix_sum[j] = arr[j] if j == 0 else max(prefix_sum[j - 1], arr[j])\n\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum = max(max_sum, prefix_sum[j] + arr[k])\n\n    return max_sum\n\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
    "assertion_results": [
      {
        "assertion": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 327,
    "generated_code": "def check_isosceles(a, b, c):\n    return a == b or a == c or b == c\n\nassert check_isosceles(6, 8, 12) == False \nassert check_isosceles(6, 6, 12) == True\nassert check_isosceles(6, 16, 20) == False",
    "assertion_results": [
      {
        "assertion": "assert check_isosceles(6,8,12)==False ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_isosceles(6,6,12)==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_isosceles(6,16,20)==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 335,
    "generated_code": "def ap_sum(a, n, d):\n    return n * (2 * a + (n - 1) * d) // 2\n\nassert ap_sum(1, 5, 2) == 25\nassert ap_sum(2, 6, 4) == 72\nassert ap_sum(1, 4, 5) == 34",
    "assertion_results": [
      {
        "assertion": "assert ap_sum(1,5,2)==25",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert ap_sum(2,6,4)==72",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert ap_sum(1,4,5)==34",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 330,
    "generated_code": "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)\n\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
    "assertion_results": [
      {
        "assertion": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 336,
    "generated_code": "def check_monthnum(month_name):\n    return month_name == \"February\"\n\nassert check_monthnum(\"February\") == True\nassert check_monthnum(\"January\") == False\nassert check_monthnum(\"March\") == False",
    "assertion_results": [
      {
        "assertion": "assert check_monthnum(\"February\")==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_monthnum(\"January\")==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_monthnum(\"March\")==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 334,
    "generated_code": "def check_Validity(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\nassert check_Validity(1, 2, 3) == False\nassert check_Validity(2, 3, 5) == False\nassert check_Validity(7, 10, 5) == True",
    "assertion_results": [
      {
        "assertion": "assert check_Validity(1,2,3) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_Validity(2,3,5) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_Validity(7,10,5) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 325,
    "generated_code": "def get_Min_Squares(n):\n    if n <= 0:\n        return 0\n    \n    # Create a list to store the minimum squares needed for each number\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0  # Base case\n\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n\n    return dp[n]\n\nassert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
    "assertion_results": [
      {
        "assertion": "assert get_Min_Squares(6) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Min_Squares(2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Min_Squares(4) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 316,
    "generated_code": "def find_last_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    index = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            index = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return index\n\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
    "assertion_results": [
      {
        "assertion": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 326,
    "generated_code": "from collections import Counter\n\ndef most_occurrences(strings):\n    words = []\n    for string in strings:\n        words.extend(string.split())\n    word_count = Counter(words)\n    return word_count.most_common(1)[0][0]\n\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved\"]) == 'can'",
    "assertion_results": [
      {
        "assertion": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 324,
    "generated_code": "def sum_of_alternates(tup):\n    sum1 = sum(tup[i] for i in range(0, len(tup), 2))\n    sum2 = sum(tup[i] for i in range(1, len(tup), 2))\n    return (sum1, sum2)\n\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
    "assertion_results": [
      {
        "assertion": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 331,
    "generated_code": "def count_unset_bits(n):\n    # Count the number of bits in the binary representation of n\n    total_bits = n.bit_length()\n    # Count the number of set bits in n\n    set_bits = bin(n).count('1')\n    # Unset bits are total bits minus set bits\n    return total_bits - set_bits\n\nassert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
    "assertion_results": [
      {
        "assertion": "assert count_unset_bits(2) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_unset_bits(4) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_unset_bits(6) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 314,
    "generated_code": "def max_sum_rectangular_grid(grid, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    prev1 = max(grid[0][0], grid[1][0])\n    prev2 = max(grid[0][1], grid[1][1])\n    \n    for i in range(2, n):\n        current = max(prev1, prev2)\n        prev1 = prev2\n        prev2 = current + max(grid[0][i], grid[1][i])\n    \n    return max(prev1, prev2)\n\nassert max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3) == 7\nassert max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5) == 24\nassert max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5) == 81",
    "assertion_results": [
      {
        "assertion": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 337,
    "generated_code": "import re\n\ndef text_match_word(text):\n    if re.search(r'\\bpython[.!?]?\\s*$', text.strip()):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nassert text_match_word(\"python.\") == 'Found a match!'\nassert text_match_word(\"python\") == 'Found a match!'\nassert text_match_word(\"  lang  .\") == 'Not matched!'",
    "assertion_results": [
      {
        "assertion": "assert text_match_word(\"python.\")==('Found a match!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_word(\"python.\")==('Found a match!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_word(\"  lang  .\")==('Not matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 317,
    "generated_code": "def modified_encode(data):\n    if not data:\n        return []\n    \n    result = []\n    count = 1\n    \n    for i in range(1, len(data)):\n        if data[i] == data[i - 1]:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, data[i - 1]])\n            else:\n                result.append(data[i - 1])\n            count = 1\n            \n    if count > 1:\n        result.append([count, data[-1]])\n    else:\n        result.append(data[-1])\n    \n    return result\n\n# Test cases\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
    "assertion_results": [
      {
        "assertion": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 340,
    "generated_code": "def sum_three_smallest_nums(lst):\n    positive_nums = [num for num in lst if num > 0]\n    if len(positive_nums) < 3:\n        return None\n    positive_nums.sort()\n    return sum(positive_nums[:3])\n\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
    "assertion_results": [
      {
        "assertion": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 333,
    "generated_code": "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])\n\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
    "assertion_results": [
      {
        "assertion": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 332,
    "generated_code": "def char_frequency(s):\n    frequency = {}\n    for char in s:\n        frequency[char] = frequency.get(char, 0) + 1\n    return frequency\n\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
    "assertion_results": [
      {
        "assertion": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 341,
    "generated_code": "def set_to_tuple(s):\n    return tuple(sorted(s))\n\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
    "assertion_results": [
      {
        "assertion": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 343,
    "generated_code": "def dig_let(s):\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return (letters, digits)\n\nassert dig_let(\"python\") == (6, 0)\nassert dig_let(\"program\") == (7, 0)\nassert dig_let(\"python3.0\") == (6, 2)",
    "assertion_results": [
      {
        "assertion": "assert dig_let(\"python\")==(6,0)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dig_let(\"program\")==(7,0)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert dig_let(\"python3.0\")==(6,2)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 349,
    "generated_code": "def check(s):\n    return \"Yes\" if all(c in '01' for c in s) else \"No\"\n\nassert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
    "assertion_results": [
      {
        "assertion": "assert check(\"01010101010\") == \"Yes\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check(\"name0\") == \"No\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check(\"101\") == \"Yes\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 352,
    "generated_code": "def unique_Characters(s):\n    return len(set(s)) == len(s)\n\nassert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
    "assertion_results": [
      {
        "assertion": "assert unique_Characters('aba') == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert unique_Characters('abc') == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert unique_Characters('abab') == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 338,
    "generated_code": "def count_Substring_With_Equal_Ends(s: str) -> int:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n\nassert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
    "assertion_results": [
      {
        "assertion": "assert count_Substring_With_Equal_Ends('aba') == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Substring_With_Equal_Ends('abcab') == 7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Substring_With_Equal_Ends('abc') == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 350,
    "generated_code": "def minimum_Length(s: str) -> int:\n    from collections import Counter\n    count = Counter(s)\n    max_freq = max(count.values())\n    return len(s) - max_freq\n\nassert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
    "assertion_results": [
      {
        "assertion": "assert minimum_Length(\"mnm\") == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert minimum_Length(\"abcda\") == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert minimum_Length(\"abcb\") == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 344,
    "generated_code": "def count_Odd_Squares(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        if num % 2 == 1:  # Check if the number is odd\n            count += 1\n    return count\n\nassert count_Odd_Squares(5, 100) == 48\nassert count_Odd_Squares(8, 65) == 29\nassert count_Odd_Squares(2, 5) == 2",
    "assertion_results": [
      {
        "assertion": "assert count_Odd_Squares(5,100) == 8",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Odd_Squares(8,65) == 6",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Odd_Squares(2,5) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 339,
    "generated_code": "def find_Divisor(start, end):\n    max_count = 0\n    max_divisor = 1\n    \n    for divisor in range(1, end + 1):\n        count = 0\n        for number in range(start, end + 1):\n            if number % divisor == 0:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_divisor = divisor\n            \n    return max_divisor\n\nassert find_Divisor(2, 2) == 2\nassert find_Divisor(2, 5) == 2\nassert find_Divisor(5, 10) == 2",
    "assertion_results": [
      {
        "assertion": "assert find_Divisor(2,2) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Divisor(2,5) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Divisor(5,10) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 354,
    "generated_code": "def tn_ap(a, d, n):\n    return a + (n - 1) * d\n\nassert tn_ap(1, 5, 2) == 9\nassert tn_ap(2, 6, 4) == 22\nassert tn_ap(1, 4, 5) == 16",
    "assertion_results": [
      {
        "assertion": "assert tn_ap(1,5,2)==9",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tn_ap(2,6,4)==22",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tn_ap(1,4,5)==16",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 346,
    "generated_code": "def zigzag(n, k):\n    if k == 1:\n        return 1\n    if n == 1:\n        return k\n    return zigzag(n - 1, k - 1) + zigzag(n - 1, k)\n\nassert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
    "assertion_results": [
      {
        "assertion": "assert zigzag(4, 3) == 5",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert zigzag(4, 2) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert zigzag(3, 1) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 355,
    "generated_code": "def count_Rectangles(r):\n    if r == 0:\n        return 0\n    return (r * 2) ** 2\n\nassert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
    "assertion_results": [
      {
        "assertion": "assert count_Rectangles(2) == 8",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Rectangles(1) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Rectangles(0) == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 296,
    "generated_code": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n\n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr, n):\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)\n\nassert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
    "assertion_results": [
      {
        "assertion": "assert get_Inv_Count([1,20,6,4,5],5) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Inv_Count([1,2,1],3) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_Inv_Count([1,2,5,6,1],5) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 323,
    "generated_code": "def re_arrange(arr, n):\n    pos = [x for x in arr if x >= 0]\n    neg = [x for x in arr if x < 0]\n    \n    result = []\n    pos_index, neg_index = 0, 0\n    \n    for i in range(n):\n        if i % 2 == 0 and pos_index < len(pos):\n            result.append(pos[pos_index])\n            pos_index += 1\n        elif neg_index < len(neg):\n            result.append(neg[neg_index])\n            neg_index += 1\n    \n    return result\n\nassert re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
    "assertion_results": [
      {
        "assertion": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 356,
    "generated_code": "def find_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)\n\nassert find_angle(47, 89) == 44\nassert find_angle(45, 95) == 40\nassert find_angle(50, 40) == 90",
    "assertion_results": [
      {
        "assertion": "assert find_angle(47,89)==44",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_angle(45,95)==40",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_angle(50,40)==90",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 328,
    "generated_code": "def rotate_left(lst, n, k):\n    n = n % len(lst)  # Normalize n to avoid unnecessary rotations\n    return lst[n:] + lst[:n]\n\n# Test cases\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2) == [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2) == [6, 7, 8, 9, 10, 1, 2]",
    "assertion_results": [
      {
        "assertion": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 347,
    "generated_code": "def count_Squares(length, width):\n    total_squares = 0\n    for size in range(1, min(length, width) + 1):\n        total_squares += (length - size + 1) * (width - size + 1)\n    return total_squares\n\nassert count_Squares(4, 3) == 20\nassert count_Squares(1, 2) == 2\nassert count_Squares(2, 2) == 5",
    "assertion_results": [
      {
        "assertion": "assert count_Squares(4,3) == 20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Squares(1,2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Squares(2,2) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 348,
    "generated_code": "def find_ways(n):\n    if n % 2 != 0:\n        return 0\n    n //= 2\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - 1 - j]\n    return dp[n]\n\nassert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
    "assertion_results": [
      {
        "assertion": "assert find_ways(4) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_ways(6) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_ways(8) == 14",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 358,
    "generated_code": "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
    "assertion_results": [
      {
        "assertion": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert moddiv_list([3,2],[1,4])==[0, 2]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert moddiv_list([90,120],[50,70])==[40, 50]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 351,
    "generated_code": "def first_Element(arr, n, k):\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n        if count[num] == k:\n            return num\n    return None\n\nassert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
    "assertion_results": [
      {
        "assertion": "assert first_Element([0,1,2,3,4,5],6,1) == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Element([1,2,1,3,4],5,2) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 365,
    "generated_code": "def count_Digit(number):\n    return len(str(abs(number)))\n\nassert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
    "assertion_results": [
      {
        "assertion": "assert count_Digit(12345) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Digit(11223305) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Digit(4123459) == 7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 357,
    "generated_code": "def find_max(tuples):\n    return max(max(t) for t in tuples)\n\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
    "assertion_results": [
      {
        "assertion": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 360,
    "generated_code": "def get_carol(n):\n    if n < 0:\n        return None\n    return 2**(n + 1) - 1 - 2**n\n\nassert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
    "assertion_results": [
      {
        "assertion": "assert get_carol(2) == 7",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_carol(4) == 223",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_carol(5) == 959",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 353,
    "generated_code": "def remove_column(nested_list, col_index):\n    return [[row[i] for i in range(len(row)) if i != col_index] for row in nested_list]\n\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2) == [[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0) == [[3], [7], [3], [15, 17], [7], [11]]",
    "assertion_results": [
      {
        "assertion": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 345,
    "generated_code": "def diff_consecutivenums(nums):\n    return [nums[i] - nums[i - 1] for i in range(1, len(nums))]\n\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7]) == [0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10]) == [1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7]) == [1, 1, 1, 1, 0, 0, 0, 1, 2]",
    "assertion_results": [
      {
        "assertion": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 369,
    "generated_code": "def lateralsurface_cuboid(length, width, height):\n    return 2 * height * (length + width)\n\nassert lateralsurface_cuboid(8, 5, 6) == 156\nassert lateralsurface_cuboid(7, 9, 10) == 320\nassert lateralsurface_cuboid(10, 20, 30) == 1800",
    "assertion_results": [
      {
        "assertion": "assert lateralsurface_cuboid(8,5,6)==156",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert lateralsurface_cuboid(7,9,10)==320",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert lateralsurface_cuboid(10,20,30)==1800",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 361,
    "generated_code": "def remove_empty(lst):\n    return [item for item in lst if item != []]\n\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
    "assertion_results": [
      {
        "assertion": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 373,
    "generated_code": "def volume_cuboid(length, width, height):\n    return length * width * height\n\nassert volume_cuboid(1, 2, 3) == 6\nassert volume_cuboid(5, 7, 9) == 315\nassert volume_cuboid(10, 15, 21) == 3150",
    "assertion_results": [
      {
        "assertion": "assert volume_cuboid(1,2,3)==6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_cuboid(5,7,9)==315",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert volume_cuboid(10,15,21)==3150",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 375,
    "generated_code": "def round_num(number, multiple):\n    return round(number / multiple) * multiple\n\nassert round_num(4722, 10) == 4720\nassert round_num(1111, 5) == 1110\nassert round_num(219, 2) == 218",
    "assertion_results": [
      {
        "assertion": "assert round_num(4722,10)==4720",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert round_num(1111,5)==1110",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert round_num(219,2)==218",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 377,
    "generated_code": "def remove_Char(s, char):\n    return s.replace(char, '')\n\nassert remove_Char(\"aba\", 'a') == \"b\"\nassert remove_Char(\"toggle\", 'g') == \"tole\"\nassert remove_Char(\"aabbc\", 'b') == \"aac\"",
    "assertion_results": [
      {
        "assertion": "assert remove_Char(\"aba\",'a') == \"b\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_Char(\"toggle\",'g') == \"tole\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_Char(\"aabbc\",'b') == \"aac\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 362,
    "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    count = Counter(lst)\n    max_count = max(count.values())\n    return [item for item, freq in count.items() if freq == max_count]\n\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) == [2]\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == [1, 0]\nassert max_occurrences([1,2,3,1,2,4,1]) == [1]",
    "assertion_results": [
      {
        "assertion": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
        "status": "FAILED",
        "error": "AssertionError: 0",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 378,
    "generated_code": "def move_first(lst):\n    if lst:\n        return [lst[-1]] + lst[:-1]\n    return lst\n\n# Test cases\nassert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
    "assertion_results": [
      {
        "assertion": "assert move_first([1,2,3,4]) == [4,1,2,3]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert move_first([0,1,2,3]) == [3,0,1,2]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert move_first([9,8,7,1]) == [1,9,8,7]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 366,
    "generated_code": "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = float('-inf')\n    for i in range(len(nums) - 1):\n        product = nums[i] * nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
    "assertion_results": [
      {
        "assertion": "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert adjacent_num_product([1,2,3,4,5]) == 20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert adjacent_num_product([2,3]) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 359,
    "generated_code": "def Check_Solution(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    # Calculate the roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if one root is twice the other\n    if root1 == 2 * root2 or root2 == 2 * root1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nassert Check_Solution(1, 3, 2) == \"Yes\"\nassert Check_Solution(1, 2, 3) == \"No\"\nassert Check_Solution(1, -5, 6) == \"No\"",
    "assertion_results": [
      {
        "assertion": "assert Check_Solution(1,3,2) == \"Yes\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Check_Solution(1,2,3) == \"No\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Check_Solution(1,-5,6) == \"No\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 368,
    "generated_code": "def repeat_tuples(tup, n):\n    return (tup,) * n\n\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
    "assertion_results": [
      {
        "assertion": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 363,
    "generated_code": "def add_K_element(tuples, k):\n    return [tuple(x + k for x in t) for t in tuples]\n\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
    "assertion_results": [
      {
        "assertion": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 371,
    "generated_code": "def smallest_missing(arr, start, end):\n    for i in range(start, end + 1):\n        if i not in arr:\n            return i\n    return end + 1\n\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
    "assertion_results": [
      {
        "assertion": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 379,
    "generated_code": "def surfacearea_cuboid(length, width, height):\n    return 2 * (length * width + width * height + height * length)\n\nassert surfacearea_cuboid(1, 2, 3) == 22\nassert surfacearea_cuboid(5, 7, 9) == 286\nassert surfacearea_cuboid(10, 15, 21) == 1350",
    "assertion_results": [
      {
        "assertion": "assert surfacearea_cuboid(1,2,3)==22",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert surfacearea_cuboid(5,7,9)==286",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert surfacearea_cuboid(10,15,21)==1350",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 383,
    "generated_code": "def even_bit_toggle_number(n):\n    return n ^ 0b01010101010101010101010101010101\n\nassert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
    "assertion_results": [
      {
        "assertion": "assert even_bit_toggle_number(10) == 15",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_bit_toggle_number(20) == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_bit_toggle_number(30) == 11",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 367,
    "generated_code": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        left_height = check_balance(node.left)\n        if left_height == -1:\n            return -1\n        right_height = check_balance(node.right)\n        if right_height == -1:\n            return -1\n        if abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n\n    return check_balance(root) != -1\n\n# Example test cases\nroot = TreeNode(1, TreeNode(2, TreeNode(3)), TreeNode(4, TreeNode(5)))\nroot1 = TreeNode(1, TreeNode(2), TreeNode(3))\nroot2 = TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4))), TreeNode(5))\n\nassert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False",
    "assertion_results": [
      {
        "assertion": "assert is_tree_balanced(root) == False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_tree_balanced(root1) == True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_tree_balanced(root2) == False ",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 342,
    "generated_code": "import heapq\n\ndef find_minimum_range(arrays):\n    min_range = float('inf')\n    current_max = float('-inf')\n    min_heap = []\n    \n    for i, array in enumerate(arrays):\n        heapq.heappush(min_heap, (array[0], i, 0))\n        current_max = max(current_max, array[0])\n    \n    while min_heap:\n        current_min, array_index, element_index = heapq.heappop(min_heap)\n        \n        if current_max - current_min < min_range:\n            min_range = current_max - current_min\n            result_range = (current_min, current_max)\n        \n        if element_index + 1 < len(arrays[array_index]):\n            next_element = arrays[array_index][element_index + 1]\n            heapq.heappush(min_heap, (next_element, array_index, element_index + 1))\n            current_max = max(current_max, next_element)\n        else:\n            break\n    \n    return result_range\n\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
    "assertion_results": [
      {
        "assertion": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 387,
    "generated_code": "def even_or_odd(hex_num):\n    decimal_value = int(hex_num, 16)\n    return \"Even\" if decimal_value % 2 == 0 else \"Odd\"\n\nassert even_or_odd(\"AB3454D\") == \"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
    "assertion_results": [
      {
        "assertion": "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_or_odd(\"ABC\") == \"Even\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert even_or_odd(\"AAD\") == \"Odd\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 370,
    "generated_code": "def float_sort(tuples):\n    return sorted(tuples, key=lambda x: float(x[1]), reverse=True)\n\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]) == [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')]) == [('item3', '20'), ('item1', '15'), ('item2', '10')]\nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')]) == [('item3', '14'), ('item2', '10'), ('item1', '5')]",
    "assertion_results": [
      {
        "assertion": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 388,
    "generated_code": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
    "assertion_results": [
      {
        "assertion": "assert highest_Power_of_2(10) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert highest_Power_of_2(19) == 16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert highest_Power_of_2(32) == 32",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 384,
    "generated_code": "def frequency_Of_Smallest(n, arr):\n    smallest_value = min(arr)\n    return arr.count(smallest_value)\n\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
    "assertion_results": [
      {
        "assertion": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 364,
    "generated_code": "def min_flip_to_make_string_alternate(s: str) -> int:\n    count1 = 0  # Count flips for pattern starting with '0'\n    count2 = 0  # Count flips for pattern starting with '1'\n    \n    for i in range(len(s)):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if s[i] != expected_char1:\n            count1 += 1\n        if s[i] != expected_char2:\n            count2 += 1\n            \n    return min(count1, count2)\n\n# Test cases\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2",
    "assertion_results": [
      {
        "assertion": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_flip_to_make_string_alternate(\"001\") == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 385,
    "generated_code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 1)\n\nassert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
    "assertion_results": [
      {
        "assertion": "assert get_perrin(9) == 12",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_perrin(4) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_perrin(6) == 5",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 389,
    "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
    "assertion_results": [
      {
        "assertion": "assert find_lucas(9) == 76",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_lucas(4) == 7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_lucas(3) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 390,
    "generated_code": "def add_string(items, prefix):\n    return [prefix.format(item) for item in items]\n\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
    "assertion_results": [
      {
        "assertion": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 386,
    "generated_code": "def swap_count(s: str) -> int:\n    open_brackets = 0\n    close_brackets = 0\n    \n    for char in s:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets > 0:\n                open_brackets -= 1\n            else:\n                close_brackets += 1\n    \n    return (open_brackets + 1) // 2 + (close_brackets + 1) // 2\n\nassert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
    "assertion_results": [
      {
        "assertion": "assert swap_count(\"[]][][\") == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert swap_count(\"[[][]]\") == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert swap_count(\"[[][]]][\") == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 397,
    "generated_code": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n\nassert median_numbers(25, 55, 65) == 55.0\nassert median_numbers(20, 10, 30) == 20.0\nassert median_numbers(15, 45, 75) == 45.0",
    "assertion_results": [
      {
        "assertion": "assert median_numbers(25,55,65)==55.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert median_numbers(20,10,30)==20.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert median_numbers(15,45,75)==45.0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 394,
    "generated_code": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
    "assertion_results": [
      {
        "assertion": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_distinct((1, 4, 5, 6)) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_distinct((2, 3, 4, 5, 6)) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 395,
    "generated_code": "def first_non_repeating_character(s):\n    char_count = {}\n    \n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in s:\n        if char_count[char] == 1:\n            return char\n            \n    return None\n\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
    "assertion_results": [
      {
        "assertion": "assert first_non_repeating_character(\"abcabc\") == None",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_non_repeating_character(\"abc\") == \"a\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_non_repeating_character(\"ababc\") == \"c\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 376,
    "generated_code": "def remove_replica(tup, custom_value='MSP'):\n    from collections import Counter\n    counts = Counter(tup)\n    return tuple(custom_value if counts[x] > 1 else x for x in tup)\n\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
    "assertion_results": [
      {
        "assertion": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 382,
    "generated_code": "def find_rotation_count(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            return left\n        \n        mid = (left + right) // 2\n        \n        if arr[mid] >= arr[left]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return 0\n\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10, 2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
    "assertion_results": [
      {
        "assertion": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 396,
    "generated_code": "import re\n\ndef check_char(s):\n    if re.match(r'^(?P<first>.)(?P=first).*?(?P<last>(?P=first))$', s):\n        return \"Valid\"\n    return \"Invalid\"\n\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
    "assertion_results": [
      {
        "assertion": "assert check_char(\"abba\") == \"Valid\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_char(\"a\") == \"Valid\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_char(\"abcd\") == \"Invalid\"",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 372,
    "generated_code": "import heapq\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    return [heapq.heappop(lst) for _ in range(len(lst))]\n\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]) == [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "assertion_results": [
      {
        "assertion": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 392,
    "generated_code": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
    "assertion_results": [
      {
        "assertion": "assert get_max_sum(60) == 106",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_max_sum(10) == 12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_max_sum(2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 404,
    "generated_code": "def minimum(a, b):\n    return a if a < b else b\n\nassert minimum(1, 2) == 1\nassert minimum(-5, -4) == -5\nassert minimum(0, 0) == 0",
    "assertion_results": [
      {
        "assertion": "assert minimum(1,2) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert minimum(-5,-4) == -5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert minimum(0,0) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 398,
    "generated_code": "def sum_of_digits(numbers):\n    total_sum = 0\n    for number in numbers:\n        if isinstance(number, list):\n            total_sum += sum_of_digits(number)\n        elif isinstance(number, int):\n            total_sum += sum(int(digit) for digit in str(abs(number)) if digit.isdigit())\n    return total_sum\n\nassert sum_of_digits([10, 2, 56]) == 14\nassert sum_of_digits([[10, 20, 4, 5, 'b', 70, 'a']]) == 19\nassert sum_of_digits([10, 20, -4, 5, -70]) == 19",
    "assertion_results": [
      {
        "assertion": "assert sum_of_digits([10,2,56])==14",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_of_digits([10,20,-4,5,-70])==19",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 393,
    "generated_code": "def max_length_list(lists):\n    return max((len(lst), lst) for lst in lists)\n\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]) == (5, [1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]]) == (4, [6,7,8,9])",
    "assertion_results": [
      {
        "assertion": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 406,
    "generated_code": "def find_Parity(number):\n    return \"Even Parity\" if number % 2 == 0 else \"Odd Parity\"\n\nassert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
    "assertion_results": [
      {
        "assertion": "assert find_Parity(12) == \"Even Parity\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Parity(7) == \"Odd Parity\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Parity(10) == \"Even Parity\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 374,
    "generated_code": "from itertools import permutations\n\ndef permute_string(s):\n    return [''.join(p) for p in permutations(s)]\n\nassert permute_string('ab') == ['ab', 'ba']\nassert permute_string('abc') == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\nassert permute_string('abcd') == ['abcd', 'abdc', 'acbd', 'acdb', 'adbc', 'adcb', 'bacd', 'badc', 'bcad', 'bcda', 'bdac', 'bdca', 'cabd', 'cadb', 'cbad', 'cbda', 'dabc', 'dacb', 'dbac', 'dbca', 'dcab', 'dcba', 'abcd', 'abdc', 'acbd', 'acdb', 'adbc', 'adcb', 'bacd', 'badc', 'bcad', 'bcda', 'bdac', 'bdca', 'cabd', 'cadb', 'cbad', 'cbda', 'dabc', 'dacb', 'dbac', 'dbca', 'dcab', 'dcba']",
    "assertion_results": [
      {
        "assertion": "assert permute_string('ab')==['ab', 'ba']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 400,
    "generated_code": "def extract_freq(tuples_list):\n    unique_tuples = set()\n    for t in tuples_list:\n        unique_tuples.add(tuple(sorted(t)))\n    return len(unique_tuples)\n\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4",
    "assertion_results": [
      {
        "assertion": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 410,
    "generated_code": "def min_val(lst):\n    return min(x for x in lst if isinstance(x, (int, float)))\n\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\nassert min_val(['Python', 15, 20, 25]) == 15\nassert min_val(['Python', 30, 20, 40, 50, 'version']) == 20",
    "assertion_results": [
      {
        "assertion": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_val(['Python', 15, 20, 25])==15",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 399,
    "generated_code": "def bitwise_xor(tuple1, tuple2):\n    return tuple(a ^ b for a, b in zip(tuple1, tuple2))\n\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
    "assertion_results": [
      {
        "assertion": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 412,
    "generated_code": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
    "assertion_results": [
      {
        "assertion": "assert remove_odd([1,2,3]) == [2]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_odd([2,4,6]) == [2,4,6]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_odd([10,20,3]) == [10,20]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 381,
    "generated_code": "def index_on_inner_list(lst, index):\n    return sorted(lst, key=lambda x: x[index])\n\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
    "assertion_results": [
      {
        "assertion": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 411,
    "generated_code": "import re\n\ndef snake_to_camel(snake_str):\n    return ''.join(word.capitalize() for word in re.split(r'_', snake_str))\n\n# Test cases\nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
    "assertion_results": [
      {
        "assertion": "assert snake_to_camel('android_tv') == 'AndroidTv'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert snake_to_camel('google_pixel') == 'GooglePixel'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert snake_to_camel('apple_watch') == 'AppleWatch'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 403,
    "generated_code": "import re\n\ndef is_valid_URL(url):\n    regex = re.compile(\n        r'^(https?:\\/\\/)'  # http:// or https://\n        r'((www\\.)?([a-zA-Z0-9-]+(\\.[a-zA-Z]{2,})+))'  # domain name\n        r'(:[0-9]{1,5})?'  # optional port\n        r'(\\/.*)?$'  # optional path\n    )\n    return re.match(regex, url) is not None\n\nassert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
    "assertion_results": [
      {
        "assertion": "assert is_valid_URL(\"https://www.google.com\") == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_valid_URL(\"https:/www.gmail.com\") == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_valid_URL(\"https:// www.redit.com\") == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 405,
    "generated_code": "def check_tuplex(tup, element):\n    return element in tup\n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), '5') == False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3) == True",
    "assertion_results": [
      {
        "assertion": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 420,
    "generated_code": "def cube_Sum(n):\n    return sum((2 * i) ** 3 for i in range(1, n + 1))\n\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
    "assertion_results": [
      {
        "assertion": "assert cube_Sum(2) == 72",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert cube_Sum(3) == 288",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert cube_Sum(4) == 800",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 416,
    "generated_code": "def breakSum(n):\n    if n <= 2:\n        return n\n    if n == 3:\n        return 3\n    return max(n, breakSum(n // 3) + breakSum(n // 3) + breakSum(n // 3))\n\nassert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
    "assertion_results": [
      {
        "assertion": "assert breakSum(12) == 13",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert breakSum(24) == 27",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert breakSum(23) == 23",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 409,
    "generated_code": "def min_product_tuple(tuples_list):\n    return min(a * b for a, b in tuples_list)\n\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\nassert min_product_tuple([(10, 20), (15, 2), (5, 10)]) == 30\nassert min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100",
    "assertion_results": [
      {
        "assertion": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 414,
    "generated_code": "def overlapping(seq1, seq2):\n    return any(item in seq2 for item in seq1)\n\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
    "assertion_results": [
      {
        "assertion": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert overlapping([1,2,3],[4,5,6]) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert overlapping([1,4,5],[1,4,5]) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 418,
    "generated_code": "def Find_Max(lists):\n    return max(lists, key=len)\n\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
    "assertion_results": [
      {
        "assertion": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 415,
    "generated_code": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    arr.sort()\n    return (arr[-1], arr[-2])\n\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
    "assertion_results": [
      {
        "assertion": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_Product([1,2,3]) == (2,3)",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 391,
    "generated_code": "def convert_list_dictionary(keys, values, scores):\n    return [{keys[i]: {values[i]: scores[i]}} for i in range(len(keys))]\n\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
    "assertion_results": [
      {
        "assertion": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 402,
    "generated_code": "def ncr_modp(n, r, p):\n    if r > n:\n        return 0\n\n    # Precompute factorials and their modular inverses\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n\n    def mod_inverse(a, m):\n        return pow(a, m - 2, m)\n\n    numerator = fact[n]\n    denominator = (fact[r] * fact[n - r]) % p\n    denominator_inv = mod_inverse(denominator, p)\n\n    return (numerator * denominator_inv) % p\n\nassert ncr_modp(10, 2, 13) == 6\nassert ncr_modp(15, 12, 43) == 25\nassert ncr_modp(17, 9, 18) == 10",
    "assertion_results": [
      {
        "assertion": "assert ncr_modp(10,2,13)==6",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert ncr_modp(15,12,43)==25",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert ncr_modp(17,9,18)==10",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 421,
    "generated_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP'",
    "assertion_results": [
      {
        "assertion": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 419,
    "generated_code": "def round_and_sum(numbers):\n    total_sum = sum(round(num) for num in numbers)\n    return total_sum * len(numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\nassert round_and_sum([5, 2, 9, 24.3, 29]) == 345\nassert round_and_sum([25.0, 56.7, 89.2]) == 513",
    "assertion_results": [
      {
        "assertion": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert round_and_sum([5,2,9,24.3,29])==345",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert round_and_sum([25.0,56.7,89.2])==513",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 424,
    "generated_code": "def extract_rear(strings):\n    return [s[-1] for s in strings]\n\nassert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People')) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go')) == ['a', 't', 'o']",
    "assertion_results": [
      {
        "assertion": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 430,
    "generated_code": "def parabola_directrix(a, b, c):\n    return -((b**2 - 4*a*c) / (4*a))\n\nassert parabola_directrix(5, 3, 2) == -198\nassert parabola_directrix(9, 8, 4) == -2336\nassert parabola_directrix(2, 4, 6) == -130",
    "assertion_results": [
      {
        "assertion": "assert parabola_directrix(5,3,2)==-198",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert parabola_directrix(9,8,4)==-2336",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert parabola_directrix(2,4,6)==-130",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 417,
    "generated_code": "def group_tuples(tuples):\n    from collections import defaultdict\n    \n    grouped = defaultdict(list)\n    \n    for a, b in tuples:\n        grouped[a].append(b)\n    \n    result = []\n    for key, values in grouped.items():\n        result.append((key, *values))\n    \n    return result\n\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
    "assertion_results": [
      {
        "assertion": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 431,
    "generated_code": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return None\n\nassert common_element([1,2,3,4,5], [5,6,7,8,9]) == True\nassert common_element([1,2,3,4,5], [6,7,8,9]) == None\nassert common_element(['a','b','c'], ['d','b','e']) == True",
    "assertion_results": [
      {
        "assertion": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert common_element(['a','b','c'], ['d','b','e'])==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 435,
    "generated_code": "def last_Digit(n):\n    return abs(n) % 10\n\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
    "assertion_results": [
      {
        "assertion": "assert last_Digit(123) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert last_Digit(25) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert last_Digit(30) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 434,
    "generated_code": "import re\n\ndef text_match_one(text):\n    if re.match(r'a+b+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nassert text_match_one(\"ac\") == ('Not matched!')\nassert text_match_one(\"dc\") == ('Not matched!')\nassert text_match_one(\"abba\") == ('Found a match!')",
    "assertion_results": [
      {
        "assertion": "assert text_match_one(\"ac\")==('Not matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_one(\"dc\")==('Not matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_one(\"abba\")==('Found a match!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 432,
    "generated_code": "def median_trapezium(a, b, h):\n    return (a + b) / 2\n\nassert median_trapezium(15, 25, 35) == 20\nassert median_trapezium(10, 20, 30) == 15\nassert median_trapezium(6, 9, 4) == 7.5",
    "assertion_results": [
      {
        "assertion": "assert median_trapezium(15,25,35)==20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert median_trapezium(10,20,30)==15",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert median_trapezium(6,9,4)==7.5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 427,
    "generated_code": "import re\n\ndef change_date_format(date_str):\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    return re.sub(pattern, r'\\3-\\2-\\1', date_str)\n\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
    "assertion_results": [
      {
        "assertion": "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 401,
    "generated_code": "def add_nested_tuples(tuple1, tuple2):\n    return tuple(tuple(a + b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(tuple1, tuple2))\n\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
    "assertion_results": [
      {
        "assertion": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 425,
    "generated_code": "def count_element_in_list(sublists, element):\n    return sum(element in sublist for sublist in sublists)\n\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A') == 3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E') == 1",
    "assertion_results": [
      {
        "assertion": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 426,
    "generated_code": "def filter_oddnumbers(numbers):\n    return list(filter(lambda x: x % 2 != 0, numbers))\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert filter_oddnumbers([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\nassert filter_oddnumbers([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]",
    "assertion_results": [
      {
        "assertion": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 413,
    "generated_code": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]\n\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [98, 97, 91, 94]",
    "assertion_results": [
      {
        "assertion": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 407,
    "generated_code": "def rearrange_bigger(n):\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Step 1: Find the rightmost ascent\n    i = length - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    if i == -1:\n        return False  # No bigger number possible\n    \n    # Step 2: Find the smallest digit on right side of the ascent\n    j = length - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Step 3: Swap the ascent with the smallest digit found\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Step 4: Reverse the digits after the ascent\n    digits = digits[:i + 1] + digits[i + 1:][::-1]\n    \n    return int(''.join(digits))\n\n# Test cases\nassert rearrange_bigger(12) == 21\nassert rearrange_bigger(10) == False\nassert rearrange_bigger(102) == 120",
    "assertion_results": [
      {
        "assertion": "assert rearrange_bigger(12)==21",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rearrange_bigger(10)==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rearrange_bigger(102)==120",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 437,
    "generated_code": "def remove_odd(s):\n    return ''.join(s[i] for i in range(len(s)) if i % 2 != 0)\n\nassert remove_odd(\"python\") == \"yhn\"\nassert remove_odd(\"program\") == \"rga\"\nassert remove_odd(\"language\") == \"agae\"",
    "assertion_results": [
      {
        "assertion": "assert remove_odd(\"python\")==(\"yhn\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_odd(\"program\")==(\"rga\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_odd(\"language\")==(\"agae\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 441,
    "generated_code": "def surfacearea_cube(side_length):\n    return 6 * (side_length ** 2)\n\nassert surfacearea_cube(5) == 150\nassert surfacearea_cube(3) == 54\nassert surfacearea_cube(10) == 600",
    "assertion_results": [
      {
        "assertion": "assert surfacearea_cube(5)==150",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert surfacearea_cube(3)==54",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert surfacearea_cube(10)==600",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 429,
    "generated_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))\n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
    "assertion_results": [
      {
        "assertion": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 439,
    "generated_code": "def multiple_to_single(int_list):\n    return int(''.join(map(str, int_list)))\n\nassert multiple_to_single([11, 33, 50]) == 113350\nassert multiple_to_single([-1, 2, 3, 4, 5, 6]) == -123456\nassert multiple_to_single([10, 15, 20, 25]) == 10152025",
    "assertion_results": [
      {
        "assertion": "assert multiple_to_single([11, 33, 50])==113350",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multiple_to_single([10,15,20,25])==10152025",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 380,
    "generated_code": "def multi_list(rows, cols):\n    return [[i * j for j in range(cols)] for i in range(rows)]\n",
    "assertion_results": [
      {
        "assertion": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 433,
    "generated_code": "def check_greater(arr, num):\n    if all(num > x for x in arr):\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
    "assertion_results": [
      {
        "assertion": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 443,
    "generated_code": "def largest_neg(numbers):\n    negative_numbers = [num for num in numbers if num < 0]\n    return max(negative_numbers) if negative_numbers else None\n\nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
    "assertion_results": [
      {
        "assertion": "assert largest_neg([1,2,3,-4,-6]) == -6",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert largest_neg([1,2,3,-8,-9]) == -9",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert largest_neg([1,2,3,4,-1]) == -1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 440,
    "generated_code": "import re\n\ndef find_adverb_position(sentence):\n    adverbs = [\"clearly\", \"seriously\", \"unfortunately\"]\n    for adverb in adverbs:\n        match = re.search(r'\\b' + re.escape(adverb) + r'\\b', sentence)\n        if match:\n            return (0, match.start(), adverb)\n    return None\n\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\") == (0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\") == (0, 13, 'unfortunately')",
    "assertion_results": [
      {
        "assertion": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 451,
    "generated_code": "import re\n\ndef remove_whitespaces(s: str) -> str:\n    return re.sub(r'\\s+', '', s)\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
    "assertion_results": [
      {
        "assertion": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 448,
    "generated_code": "def cal_sum(n):\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    return sum(perrin[:n])\n\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
    "assertion_results": [
      {
        "assertion": "assert cal_sum(9) == 49",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert cal_sum(10) == 66",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert cal_sum(11) == 88",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 452,
    "generated_code": "def loss_amount(original_amount, selling_amount):\n    if selling_amount < original_amount:\n        return original_amount - selling_amount\n    return None\n\nassert loss_amount(1500, 1200) == None\nassert loss_amount(100, 200) == 100\nassert loss_amount(2000, 5000) == 3000",
    "assertion_results": [
      {
        "assertion": "assert loss_amount(1500,1200)==None",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert loss_amount(100,200)==100",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert loss_amount(2000,5000)==3000",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 442,
    "generated_code": "def positive_count(arr):\n    if not arr:\n        return 0.0\n    positive_numbers = sum(1 for x in arr if x > 0)\n    return positive_numbers / len(arr)\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56",
    "assertion_results": [
      {
        "assertion": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 446,
    "generated_code": "def count_Occurrence(tup, lst):\n    return sum(tup.count(x) for x in lst)\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6\nassert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2",
    "assertion_results": [
      {
        "assertion": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 455,
    "generated_code": "def check_monthnumb_number(month):\n    return month in [1, 3, 5, 7, 8, 10, 12]\n\nassert check_monthnumb_number(5) == True\nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(6) == False",
    "assertion_results": [
      {
        "assertion": "assert check_monthnumb_number(5)==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_monthnumb_number(2)==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_monthnumb_number(6)==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 453,
    "generated_code": "def sumofFactors(n):\n    return sum(i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0)\n\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
    "assertion_results": [
      {
        "assertion": "assert sumofFactors(18) == 26",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sumofFactors(30) == 48",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sumofFactors(6) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 458,
    "generated_code": "def rectangle_area(length, width):\n    return length * width\n\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(10, 5) == 50\nassert rectangle_area(4, 2) == 8",
    "assertion_results": [
      {
        "assertion": "assert rectangle_area(10,20)==200",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rectangle_area(10,5)==50",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert rectangle_area(4,2)==8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 447,
    "generated_code": "def cube_nums(nums):\n    return list(map(lambda x: x ** 3, nums))\n\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10, 20, 30]) == [1000, 8000, 27000]\nassert cube_nums([12, 15]) == [1728, 3375]",
    "assertion_results": [
      {
        "assertion": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert cube_nums([12,15])==([1728, 3375])",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 457,
    "generated_code": "def Find_Min(lists):\n    return min(lists, key=len)\n\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
    "assertion_results": [
      {
        "assertion": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 461,
    "generated_code": "def upper_ctr(s):\n    return sum(1 for char in s if char.isupper())\n\nassert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
    "assertion_results": [
      {
        "assertion": "assert upper_ctr('PYthon') == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert upper_ctr('BigData') == 1",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert upper_ctr('program') == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 454,
    "generated_code": "def text_match_wordz(text):\n    import re\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nassert text_match_wordz(\"pythonz.\") == ('Found a match!')\nassert text_match_wordz(\"xyz.\") == ('Found a match!')\nassert text_match_wordz(\"  lang  .\") == ('Not matched!')",
    "assertion_results": [
      {
        "assertion": "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_wordz(\"xyz.\")==('Found a match!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 450,
    "generated_code": "def extract_string(string_list, size):\n    return [s for s in string_list if len(s) == size]\n\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6) == ['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9) == ['exercises']",
    "assertion_results": [
      {
        "assertion": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 456,
    "generated_code": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]\n\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
    "assertion_results": [
      {
        "assertion": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 460,
    "generated_code": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]\n\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
    "assertion_results": [
      {
        "assertion": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert Extract([[9,8,1],[1,2]]) == [9,1]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 459,
    "generated_code": "import re\n\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)\n\n# Test cases\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
    "assertion_results": [
      {
        "assertion": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 449,
    "generated_code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    # Calculate the area of the triangle using the determinant method\n    area = 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2))\n    return 'Yes' if area > 0 else 'No'\n\nassert check_Triangle(1, 5, 2, 5, 4, 6) == 'Yes'\nassert check_Triangle(1, 1, 1, 4, 1, 5) == 'No'\nassert check_Triangle(1, 1, 1, 1, 1, 1) == 'No'",
    "assertion_results": [
      {
        "assertion": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_Triangle(1,1,1,4,1,5) == 'No'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_Triangle(1,1,1,1,1,1) == 'No'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 428,
    "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
    "assertion_results": [
      {
        "assertion": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 438,
    "generated_code": "def count_bidirectional(tuples):\n    count = 0\n    seen = set()\n    \n    for a, b in tuples:\n        if (b, a) in seen:\n            count += 1\n        seen.add((a, b))\n    \n    return str(count)\n\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == '4'",
    "assertion_results": [
      {
        "assertion": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 467,
    "generated_code": "def decimal_to_Octal(decimal):\n    return int(oct(decimal)[2:])\n\nassert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
    "assertion_results": [
      {
        "assertion": "assert decimal_to_Octal(10) == 12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert decimal_to_Octal(2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert decimal_to_Octal(33) == 41",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 474,
    "generated_code": "def replace_char(s, old_char, new_char):\n    return s.replace(old_char, new_char)\n\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\"\nassert replace_char(\"character\", 'c', 'a') == \"aharaater\"\nassert replace_char(\"python\", 'l', 'a') == \"python\"",
    "assertion_results": [
      {
        "assertion": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert replace_char(\"python\",'l','a')==(\"python\")",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 445,
    "generated_code": "def index_multiplication(t1, t2):\n    return tuple(tuple(a * b for a, b in zip(pair1, pair2)) for pair1, pair2 in zip(t1, t2))\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
    "assertion_results": [
      {
        "assertion": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 472,
    "generated_code": "def check_Consecutive(nums):\n    if not nums:\n        return False\n    return sorted(nums) == list(range(min(nums), max(nums) + 1))\n\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
    "assertion_results": [
      {
        "assertion": "assert check_Consecutive([1,2,3,4,5]) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_Consecutive([1,2,3,5,6]) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_Consecutive([1,2,1]) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 436,
    "generated_code": "def neg_nos(lst):\n    return tuple(x for x in lst if x < 0)\n\nassert neg_nos([-1, 4, 5, -6]) == (-1, -6)\nassert neg_nos([-1, -2, 3, 4]) == (-1, -2)\nassert neg_nos([-7, -6, 8, 9]) == (-7, -6)",
    "assertion_results": [
      {
        "assertion": "assert neg_nos([-1,4,5,-6]) == -1,-6",
        "status": "FAILED",
        "error": "AssertionError: -6",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert neg_nos([-1,-2,3,4]) == -1,-2",
        "status": "FAILED",
        "error": "AssertionError: -2",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert neg_nos([-7,-6,8,9]) == -7,-6",
        "status": "FAILED",
        "error": "AssertionError: -6",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 477,
    "generated_code": "def is_lower(s):\n    return s.lower()\n\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
    "assertion_results": [
      {
        "assertion": "assert is_lower(\"InValid\") == \"invalid\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_lower(\"TruE\") == \"true\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_lower(\"SenTenCE\") == \"sentence\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 476,
    "generated_code": "def big_sum(arr):\n    return max(arr) + min(arr)\n\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([-1, 2, 3, 4]) == 3\nassert big_sum([2, 3, 6]) == 8",
    "assertion_results": [
      {
        "assertion": "assert big_sum([1,2,3]) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert big_sum([-1,2,3,4]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert big_sum([2,3,6]) == 8",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 465,
    "generated_code": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3': None}) == {'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3': None}) == {'c2': 'Green'}",
    "assertion_results": [
      {
        "assertion": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 464,
    "generated_code": "def check_value(d, value):\n    return all(v == value for v in d.values())\n\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10) == False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12) == True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5) == False",
    "assertion_results": [
      {
        "assertion": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 422,
    "generated_code": "def find_Average_Of_Cube(n):\n    if n <= 0:\n        return 0\n    sum_of_cubes = sum(i**3 for i in range(1, n + 1))\n    return sum_of_cubes / n\n\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
    "assertion_results": [
      {
        "assertion": "assert find_Average_Of_Cube(2) == 4.5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Average_Of_Cube(3) == 12",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_Average_Of_Cube(1) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 479,
    "generated_code": "def first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n\n\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
    "assertion_results": [
      {
        "assertion": "assert first_Digit(123) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Digit(456) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Digit(12) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 478,
    "generated_code": "def remove_lowercase(s):\n    return ''.join(char for char in s if not char.islower())\n\nassert remove_lowercase(\"PYTHon\") == ('PYTH')\nassert remove_lowercase(\"FInD\") == ('FID')\nassert remove_lowercase(\"STRinG\") == ('STRG')",
    "assertion_results": [
      {
        "assertion": "assert remove_lowercase(\"PYTHon\")==('PYTH')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_lowercase(\"FInD\")==('FID')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_lowercase(\"STRinG\")==('STRG')",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 470,
    "generated_code": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
    "assertion_results": [
      {
        "assertion": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 482,
    "generated_code": "import re\n\ndef match(s):\n    if re.search(r'^[A-Z][a-z]*$', s):\n        return 'Yes'\n    return 'No'\n\nassert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
    "assertion_results": [
      {
        "assertion": "assert match(\"Geeks\") == 'Yes'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert match(\"geeksforGeeks\") == 'Yes'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert match(\"geeks\") == 'No'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 480,
    "generated_code": "def get_max_occuring_char(s):\n    from collections import Counter\n    s = s.replace(\" \", \"\")  # Remove spaces\n    count = Counter(s)\n    max_char = max(count, key=count.get)\n    return max_char\n\nassert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
    "assertion_results": [
      {
        "assertion": "assert get_max_occuring_char(\"data\") == \"a\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_max_occuring_char(\"create\") == \"e\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 475,
    "generated_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
    "assertion_results": [
      {
        "assertion": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 471,
    "generated_code": "def find_remainder(arr, n, mod):\n    product = 1\n    for num in arr:\n        product = (product * num) % mod\n    return product % n\n\nassert find_remainder([100, 10, 5, 25, 35, 14], 6, 11) == 9\nassert find_remainder([1, 1, 1], 3, 1) == 0\nassert find_remainder([1, 2, 1], 3, 2) == 0",
    "assertion_results": [
      {
        "assertion": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_remainder([1,1,1],3,1) == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_remainder([1,2,1],3,2) == 0",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 408,
    "generated_code": "from itertools import product\n\ndef k_smallest_pairs(arr1, arr2, k):\n    pairs = list(product(arr1, arr2))\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:k]\n\n# Test cases\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
    "assertion_results": [
      {
        "assertion": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 463,
    "generated_code": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
    "assertion_results": [
      {
        "assertion": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 466,
    "generated_code": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    if arr[0] >= arr[1]:\n        return 0\n    if arr[n - 1] >= arr[n - 2]:\n        return n - 1\n\n    for i in range(1, n - 1):\n        if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]:\n            return i\n    return -1\n\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5",
    "assertion_results": [
      {
        "assertion": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 468,
    "generated_code": "def max_product(arr, n):\n    if n == 0:\n        return 0\n    \n    dp = [1] * n\n    \n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    \n    return max(dp)\n\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000",
    "assertion_results": [
      {
        "assertion": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 473,
    "generated_code": "def tuple_intersection(list1, list2):\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    return set1.intersection(set2)\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
    "assertion_results": [
      {
        "assertion": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 488,
    "generated_code": "import math\n\ndef area_pentagon(side_length):\n    return (5 * side_length ** 2) / (4 * math.tan(math.pi / 5))\n\nassert area_pentagon(5) == 43.01193501472417\nassert area_pentagon(10) == 172.0477400588967\nassert area_pentagon(15) == 387.10741513251753",
    "assertion_results": [
      {
        "assertion": "assert area_pentagon(5)==43.01193501472417",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert area_pentagon(10)==172.0477400588967",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert area_pentagon(15)==387.10741513251753",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 491,
    "generated_code": "def sum_gp(a, r, n):\n    return a * (1 - r**n) // (1 - r) if r != 1 else a * n\n\nassert sum_gp(1, 5, 2) == 31\nassert sum_gp(1, 5, 4) == 341\nassert sum_gp(2, 6, 3) == 728",
    "assertion_results": [
      {
        "assertion": "assert sum_gp(1,5,2)==31",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_gp(1,5,4)==341",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_gp(2,6,3)==728",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 483,
    "generated_code": "def first_Factorial_Divisible_Number(x):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\n    n = 1\n    while True:\n        if factorial(n) % x == 0:\n            return n\n        n += 1\n\nassert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
    "assertion_results": [
      {
        "assertion": "assert first_Factorial_Divisible_Number(10) == 5",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Factorial_Divisible_Number(15) == 5",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert first_Factorial_Divisible_Number(5) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 499,
    "generated_code": "def diameter_circle(radius):\n    return radius * 2\n\nassert diameter_circle(10) == 20\nassert diameter_circle(40) == 80\nassert diameter_circle(15) == 30",
    "assertion_results": [
      {
        "assertion": "assert diameter_circle(10)==20",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert diameter_circle(40)==80",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert diameter_circle(15)==30",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 484,
    "generated_code": "def remove_matching_tuple(tuple1, tuple2):\n    return [t for t in tuple1 if t not in tuple2]\n\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
    "assertion_results": [
      {
        "assertion": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 489,
    "generated_code": "def frequency_Of_Largest(n, arr):\n    largest_value = max(arr)\n    return arr.count(largest_value)\n\nassert frequency_Of_Largest(5, [1, 2, 3, 4, 4]) == 2\nassert frequency_Of_Largest(3, [5, 6, 5]) == 1\nassert frequency_Of_Largest(4, [2, 7, 7, 7]) == 3",
    "assertion_results": [
      {
        "assertion": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert frequency_Of_Largest(3,[5,6,5]) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 498,
    "generated_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nassert gcd(12, 17) == 1\nassert gcd(4, 6) == 2\nassert gcd(2, 9) == 1",
    "assertion_results": [
      {
        "assertion": "assert gcd(12, 17) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert gcd(4,6) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert gcd(2,9) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 486,
    "generated_code": "import math\n\ndef binomial_probability(n, k, p):\n    q = 1 - p\n    binom_coeff = math.comb(n, k)\n    probability = binom_coeff * (p ** k) * (q ** (n - k))\n    return probability\n\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
    "assertion_results": [
      {
        "assertion": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 485,
    "generated_code": "def largest_palindrome(arr, n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    palindromes = [num for num in arr if is_palindrome(num)]\n    return max(palindromes) if palindromes else None\n\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5) == 9",
    "assertion_results": [
      {
        "assertion": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 487,
    "generated_code": "def sort_tuple(tuples_list):\n    return sorted(tuples_list, key=lambda x: x[-1])\n\nassert sort_tuple([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)]) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)]) == [(4, 3), (6, 7), (3, 9)]",
    "assertion_results": [
      {
        "assertion": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 502,
    "generated_code": "def find(a, b):\n    return a % b\n\nassert find(3, 3) == 0\nassert find(10, 3) == 1\nassert find(16, 5) == 1",
    "assertion_results": [
      {
        "assertion": "assert find(3,3) == 0",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find(10,3) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert find(16,5) == 1",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 501,
    "generated_code": "def num_comm_div(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    return gcd(a, b)\n\nassert num_comm_div(2, 4) == 2\nassert num_comm_div(2, 8) == 2\nassert num_comm_div(12, 24) == 6",
    "assertion_results": [
      {
        "assertion": "assert num_comm_div(2,4) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert num_comm_div(2,8) == 2",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert num_comm_div(12,24) == 6",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 444,
    "generated_code": "def trim_tuple(tuples_list, k):\n    return str([t[k:] for t in tuples_list])\n\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
    "assertion_results": [
      {
        "assertion": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 469,
    "generated_code": "def max_profit(prices, k):\n    if not prices or k == 0:\n        return 0\n    \n    n = len(prices)\n    if k >= n // 2:\n        return sum(max(prices[i + 1] - prices[i], 0) for i in range(n - 1))\n    \n    dp = [[0] * (k + 1) for _ in range(n)]\n    \n    for j in range(1, k + 1):\n        max_diff = -prices[0]\n        for i in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], prices[i] + max_diff)\n            max_diff = max(max_diff, dp[i][j - 1] - prices[i])\n    \n    return dp[n - 1][k]\n\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
    "assertion_results": [
      {
        "assertion": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 504,
    "generated_code": "def sum_Of_Series(n):\n    return sum(i**3 for i in range(1, n + 1))\n\nassert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
    "assertion_results": [
      {
        "assertion": "assert sum_Of_Series(5) == 225",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_Of_Series(2) == 9",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert sum_Of_Series(3) == 36",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 494,
    "generated_code": "def binary_to_integer(binary_tuple):\n    return str(int(''.join(map(str, binary_tuple)), 2))\n\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
    "assertion_results": [
      {
        "assertion": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 500,
    "generated_code": "def concatenate_elements(lst):\n    return '  ' + ' '.join(lst)\n\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
    "assertion_results": [
      {
        "assertion": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 497,
    "generated_code": "import math\n\ndef surfacearea_cone(radius, height):\n    slant_height = math.sqrt(radius**2 + height**2)\n    base_area = math.pi * radius**2\n    lateral_area = math.pi * radius * slant_height\n    return base_area + lateral_area\n\nassert surfacearea_cone(5, 12) == 282.7433388230814\nassert surfacearea_cone(10, 15) == 880.5179353159282\nassert surfacearea_cone(19, 17) == 2655.923961165254",
    "assertion_results": [
      {
        "assertion": "assert surfacearea_cone(5,12)==282.7433388230814",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert surfacearea_cone(10,15)==880.5179353159282",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert surfacearea_cone(19,17)==2655.923961165254",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 492,
    "generated_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\nassert binary_search([1, 2, 3, 5, 8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
    "assertion_results": [
      {
        "assertion": "assert binary_search([1,2,3,5,8], 6) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binary_search([7, 8, 9, 10, 13], 10) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 495,
    "generated_code": "import re\n\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]+', '', s)\n\n# Test cases\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
    "assertion_results": [
      {
        "assertion": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 496,
    "generated_code": "import heapq\n\ndef heap_queue_smallest(numbers, k):\n    return heapq.nsmallest(k, numbers)\n\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3) == [14, 22, 25]\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2) == [14, 22]\nassert heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [14, 22, 22, 25, 35]",
    "assertion_results": [
      {
        "assertion": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 506,
    "generated_code": "def permutation_coefficient(n, k):\n    from math import factorial\n    return factorial(n) // factorial(n - k)\n\nassert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
    "assertion_results": [
      {
        "assertion": "assert permutation_coefficient(10, 2) == 90",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert permutation_coefficient(10, 3) == 720",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert permutation_coefficient(10, 1) == 10",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 503,
    "generated_code": "def add_consecutive_nums(nums):\n    return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)]\n\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7]) == [2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10]) == [9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [3, 5, 7, 9, 11, 13, 15, 17, 19]",
    "assertion_results": [
      {
        "assertion": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 481,
    "generated_code": "def is_subset_sum(set, n, sum):\n    # Create a 2D array to store the results of subproblems\n    subset = [[False for _ in range(sum + 1)] for _ in range(n + 1)]\n    \n    # If sum is 0, then answer is true (empty subset)\n    for i in range(n + 1):\n        subset[i][0] = True\n\n    # Fill the subset table in a bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if set[i - 1] > j:\n                subset[i][j] = subset[i - 1][j]\n            else:\n                subset[i][j] = subset[i - 1][j] or subset[i - 1][j - set[i - 1]]\n\n    return subset[n][sum]\n\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
    "assertion_results": [
      {
        "assertion": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 509,
    "generated_code": "def average_Odd(n):\n    if n % 2 == 0:\n        return None\n    odd_numbers = [i for i in range(1, n + 1, 2)]\n    return sum(odd_numbers) // len(odd_numbers)\n\nassert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
    "assertion_results": [
      {
        "assertion": "assert average_Odd(9) == 5",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert average_Odd(5) == 3",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert average_Odd(11) == 6",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 462,
    "generated_code": "def combinations_list(elements):\n    result = []\n    for r in range(len(elements) + 1):\n        result.extend(combinations(elements, r))\n    return [list(comb) for comb in result]\n",
    "assertion_results": [
      {
        "assertion": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
        "status": "ERROR",
        "error": "NameError: name 'combinations' is not defined",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
        "status": "ERROR",
        "error": "NameError: name 'combinations' is not defined",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "status": "ERROR",
        "error": "NameError: name 'combinations' is not defined",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 507,
    "generated_code": "def remove_words(word_list, words_to_remove):\n    return [word for word in word_list if word not in words_to_remove]\n\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange']) == ['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange']) == ['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white']) == ['red', 'green', 'black', 'orange']",
    "assertion_results": [
      {
        "assertion": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 490,
    "generated_code": "def extract_symmetric(tuples_list):\n    symmetric_pairs = set()\n    seen = set()\n    \n    for a, b in tuples_list:\n        if (b, a) in seen:\n            symmetric_pairs.add((a, b))\n            symmetric_pairs.add((b, a))\n        seen.add((a, b))\n    \n    return symmetric_pairs\n\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)]) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)]) == {(8, 9), (10, 11)}",
    "assertion_results": [
      {
        "assertion": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 505,
    "generated_code": "def re_order(arr):\n    non_zeroes = [x for x in arr if x != 0]\n    zeroes = [0] * (len(arr) - len(non_zeroes))\n    return non_zeroes + zeroes\n\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
    "assertion_results": [
      {
        "assertion": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 508,
    "generated_code": "def same_order(list1, list2):\n    common_elements = [elem for elem in list1 if elem in list2]\n    index_list1 = [list1.index(elem) for elem in common_elements]\n    index_list2 = [list2.index(elem) for elem in common_elements]\n    return index_list1 == index_list2\n\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
    "assertion_results": [
      {
        "assertion": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 510,
    "generated_code": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    count = 0\n    \n    # Iterate through all possible subsequences using bit manipulation\n    for i in range(1 << n):\n        product = 1\n        for j in range(n):\n            if i & (1 << j):\n                product *= arr[j]\n                if product >= k:\n                    break\n        if product < k:\n            count += 1\n            \n    return count\n\nassert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
    "assertion_results": [
      {
        "assertion": "assert no_of_subsequences([1,2,3,4], 10) == 11",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert no_of_subsequences([4,8,7,2], 50) == 9",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert no_of_subsequences([5,6,7,8], 15) == 4",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 423,
    "generated_code": "def get_maxgold(gold, m, n):\n    if not gold or m == 0 or n == 0:\n        return 0\n\n    # Create a table to store the maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # Fill the first column\n    for i in range(m):\n        dp[i][0] = gold[i][0]\n\n    # Fill the rest of the columns\n    for j in range(1, n):\n        for i in range(m):\n            # Gold collected from the left cell\n            left = dp[i][j - 1]\n            # Gold collected from the upper left diagonal cell\n            upper_left = dp[i - 1][j - 1] if i > 0 else 0\n            # Gold collected from the lower left diagonal cell\n            lower_left = dp[i + 1][j - 1] if i < m - 1 else 0\n\n            # Maximum gold collected from the three possible directions\n            dp[i][j] = gold[i][j] + max(left, upper_left, lower_left)\n\n    # The maximum gold will be the maximum value in the last column\n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][n - 1])\n\n    return max_gold\n\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
    "assertion_results": [
      {
        "assertion": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_maxgold([[10,20],[30,40]],2,2)==70",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert get_maxgold([[4,9],[3,7]],2,2)==13",
        "status": "PASSED",
        "error": null,
        "stdout": "",
        "stderr": ""
      }
    ]
  },
  {
    "task_id": 493,
    "generated_code": "def calculate_polygons(x1, y1, x2, y2, size):\n    hexagons = []\n    for i in range(x1, x2 + 1):\n        for j in range(y1, y2 + 1):\n            x_offset = i * 3 * size\n            y_offset = j * (math.sqrt(3) * size)\n            if j % 2 == 1:\n                x_offset += 1.5 * size\n            \n            hexagon = [\n                (x_offset, y_offset - size * math.sqrt(3) / 2),\n                (x_offset, y_offset + size * math.sqrt(3) / 2),\n                (x_offset + size * 1.5, y_offset + size * math.sqrt(3) / 2),\n                (x_offset + size * 1.5, y_offset - size * math.sqrt(3) / 2),\n                (x_offset + 3 * size, y_offset),\n                (x_offset + size * 1.5, y_offset - size * math.sqrt(3) / 2),\n            ]\n            hexagons.append(hexagon)\n    \n    return hexagons\n",
    "assertion_results": [
      {
        "assertion": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
        "status": "ERROR",
        "error": "NameError: name 'math' is not defined",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
        "status": "ERROR",
        "error": "NameError: name 'math' is not defined",
        "stdout": "",
        "stderr": ""
      },
      {
        "assertion": "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "status": "FAILED",
        "error": "AssertionError: ",
        "stdout": "",
        "stderr": ""
      }
    ]
  }
]